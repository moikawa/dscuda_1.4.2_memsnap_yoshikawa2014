static char *Ptxdata = 
    "	.version 1.4\n"
    "	.target sm_10, map_f64_to_f32\n"
    "	// compiled with /usr/local/cuda4.1/cuda/open64/lib//be\n"
    "	// nvopencc 4.1 built on 2012-01-12\n"
    "\n"
    "	//-----------------------------------------------------------\n"
    "	// Compiling /tmp/tmpxft_000049b2_00000000-9_mr3.cpp3.i (/tmp/ccBI#.exUaxE)\n"
    "	//-----------------------------------------------------------\n"
    "\n"
    "	//-----------------------------------------------------------\n"
    "	// Options:\n"
    "	//-----------------------------------------------------------\n"
    "	//  Target:ptx, ISA:sm_10, Endian:little, Pointer Size:64\n"
    "	//  -O3	(Optimization level)\n"
    "	//  -g0	(Debug level)\n"
    "	//  -m2	(Report advisories)\n"
    "	//-----------------------------------------------------------\n"
    "\n"
    "	.file	1	\"<command-line>\"\n"
    "	.file	2	\"/tmp/tmpxft_000049b2_00000000-8_mr3.cudafe2.gpu\"\n"
    "	.file	3	\"mr3.cu\"\n"
    "	.file	4	\"/usr/lib/gcc/x86_64-redhat-linux/4.5.1/include/stddef.h\"\n"
    "	.file	5	\"/usr/local/cuda4.1/cuda/include/crt/device_runtime.h\"\n"
    "	.file	6	\"/usr/local/cuda4.1/cuda/include/host_defines.h\"\n"
    "	.file	7	\"/usr/local/cuda4.1/cuda/include/builtin_types.h\"\n"
    "	.file	8	\"/usr/local/cuda4.1/cuda/include/device_types.h\"\n"
    "	.file	9	\"/usr/local/cuda4.1/cuda/include/driver_types.h\"\n"
    "	.file	10	\"/usr/local/cuda4.1/cuda/include/surface_types.h\"\n"
    "	.file	11	\"/usr/local/cuda4.1/cuda/include/texture_types.h\"\n"
    "	.file	12	\"/usr/local/cuda4.1/cuda/include/vector_types.h\"\n"
    "	.file	13	\"/usr/local/cuda4.1/cuda/include/device_launch_parameters.h\"\n"
    "	.file	14	\"/usr/local/cuda4.1/cuda/include/crt/storage_class.h\"\n"
    "	.file	15	\"/usr/local/cuda4.1/cuda/include/common_functions.h\"\n"
    "	.file	16	\"/usr/local/cuda4.1/cuda/include/math_functions.h\"\n"
    "	.file	17	\"/usr/local/cuda4.1/cuda/include/math_constants.h\"\n"
    "	.file	18	\"/usr/local/cuda4.1/cuda/include/device_functions.h\"\n"
    "	.file	19	\"/usr/local/cuda4.1/cuda/include/sm_11_atomic_functions.h\"\n"
    "	.file	20	\"/usr/local/cuda4.1/cuda/include/sm_12_atomic_functions.h\"\n"
    "	.file	21	\"/usr/local/cuda4.1/cuda/include/sm_13_double_functions.h\"\n"
    "	.file	22	\"/usr/local/cuda4.1/cuda/include/sm_20_atomic_functions.h\"\n"
    "	.file	23	\"/usr/local/cuda4.1/cuda/include/sm_20_intrinsics.h\"\n"
    "	.file	24	\"/usr/local/cuda4.1/cuda/include/surface_functions.h\"\n"
    "	.file	25	\"/usr/local/cuda4.1/cuda/include/texture_fetch_functions.h\"\n"
    "	.file	26	\"/usr/local/cuda4.1/cuda/include/math_functions_dbl_ptx1.h\"\n"
    "\n"
    "\n"
    "	.entry nacl_kernel (\n"
    "		.param .u64 __cudaparm_nacl_kernel_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_n,\n"
    "		.param .u64 __cudaparm_nacl_kernel_atype,\n"
    "		.param .s32 __cudaparm_nacl_kernel_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_pol,\n"
    "		.param .u64 __cudaparm_nacl_kernel_sigm,\n"
    "		.param .u64 __cudaparm_nacl_kernel_ipotro,\n"
    "		.param .u64 __cudaparm_nacl_kernel_pc,\n"
    "		.param .u64 __cudaparm_nacl_kernel_pd,\n"
    "		.param .u64 __cudaparm_nacl_kernel_zz,\n"
    "		.param .s32 __cudaparm_nacl_kernel_tblno,\n"
    "		.param .f32 __cudaparm_nacl_kernel___val_paramxmax,\n"
    "		.param .s32 __cudaparm_nacl_kernel_periodicflag,\n"
    "		.param .u64 __cudaparm_nacl_kernel_force)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<22>;\n"
    "	.reg .u64 %rd<31>;\n"
    "	.reg .f32 %f<86>;\n"
    "	.reg .pred %p<7>;\n"
    "	.loc	3	67	0\n"
    "$LDWbegin_nacl_kernel:\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r1, %rh1, 64;\n"
    "	cvt.u32.u16 	%r2, %tid.x;\n"
    "	add.u32 	%r3, %r2, %r1;\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_n];\n"
    "	setp.le.s32 	%p1, %r4, %r3;\n"
    "	@%p1 bra 	$Lt_0_7682;\n"
    "	.loc	3	77	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	mov.u32 	%r5, 0;\n"
    "	.loc	3	67	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_n];\n"
    "	.loc	3	77	0\n"
    "	setp.le.s32 	%p2, %r4, %r5;\n"
    "	@%p2 bra 	$Lt_0_9730;\n"
    "	.loc	3	67	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_n];\n"
    "	.loc	3	77	0\n"
    "	mov.s32 	%r6, %r4;\n"
    "	mov.s32 	%r7, 0;\n"
    "	mul.lo.s32 	%r8, %r4, 3;\n"
    "	ld.param.s32 	%r9, [__cudaparm_nacl_kernel_periodicflag];\n"
    "	and.b32 	%r10, %r9, 1;\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel___val_paramxmax];\n"
    "	add.f32 	%f8, %f7, %f7;\n"
    "	mov.s32 	%r11, 0;\n"
    "	setp.eq.s32 	%p3, %r10, %r11;\n"
    "	mul.lo.s32 	%r12, %r3, 3;\n"
    "	selp.f32 	%f9, %f8, %f7, %p3;\n"
    "	cvt.s64.s32 	%rd1, %r12;\n"
    "	ld.param.u64 	%rd2, [__cudaparm_nacl_kernel_x];\n"
    "	mov.s64 	%rd3, %rd2;\n"
    "	rcp.approx.f32 	%f10, %f9;\n"
    "	mul.wide.s32 	%rd4, %r12, 4;\n"
    "	add.u64 	%rd5, %rd4, %rd2;\n"
    "	ld.global.f32 	%f11, [%rd5+0];\n"
    "	ld.global.f32 	%f12, [%rd5+4];\n"
    "	ld.global.f32 	%f13, [%rd5+8];\n"
    "	mov.s32 	%r13, 0;\n"
    "	mov.s32 	%r14, %r6;\n"
    "$Lt_0_8706:\n"
    " //<loop> Loop body line 77, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	82	0\n"
    "	ld.global.f32 	%f14, [%rd3+0];\n"
    "	sub.f32 	%f15, %f11, %f14;\n"
    "	mul.f32 	%f16, %f10, %f15;\n"
    "	cvt.rni.f32.f32 	%f17, %f16;\n"
    "	mul.f32 	%f18, %f9, %f17;\n"
    "	sub.f32 	%f19, %f15, %f18;\n"
    "	mov.f32 	%f20, %f19;\n"
    "	.loc	3	83	0\n"
    "	mov.f32 	%f21, 0f00000000;    	// 0\n"
    "	mad.f32 	%f22, %f19, %f19, %f21;\n"
    "	.loc	3	81	0\n"
    "	ld.global.f32 	%f23, [%rd3+4];\n"
    "	sub.f32 	%f24, %f12, %f23;\n"
    "	mov.f32 	%f25, %f24;\n"
    "	.loc	3	82	0\n"
    "	mul.f32 	%f26, %f10, %f24;\n"
    "	cvt.rni.f32.f32 	%f27, %f26;\n"
    "	mul.f32 	%f28, %f9, %f27;\n"
    "	sub.f32 	%f29, %f24, %f28;\n"
    "	mov.f32 	%f30, %f29;\n"
    "	.loc	3	83	0\n"
    "	mad.f32 	%f31, %f29, %f29, %f22;\n"
    "	.loc	3	81	0\n"
    "	ld.global.f32 	%f32, [%rd3+8];\n"
    "	sub.f32 	%f33, %f13, %f32;\n"
    "	mov.f32 	%f34, %f33;\n"
    "	.loc	3	82	0\n"
    "	mul.f32 	%f35, %f10, %f33;\n"
    "	cvt.rni.f32.f32 	%f36, %f35;\n"
    "	mul.f32 	%f37, %f9, %f36;\n"
    "	sub.f32 	%f38, %f33, %f37;\n"
    "	mov.f32 	%f39, %f38;\n"
    "	.loc	3	83	0\n"
    "	mad.f32 	%f40, %f38, %f38, %f31;\n"
    "	mov.f32 	%f41, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p4, %f40, %f41;\n"
    "	@!%p4 bra 	$Lt_0_8962;\n"
    "	.loc	3	91	0\n"
    "	ld.param.u64 	%rd6, [__cudaparm_nacl_kernel_atype];\n"
    "	cvt.s64.s32 	%rd7, %r13;\n"
    "	mul.wide.s32 	%rd8, %r13, 4;\n"
    "	add.u64 	%rd9, %rd6, %rd8;\n"
    "	ld.global.s32 	%r15, [%rd9+0];\n"
    "	cvt.s64.s32 	%rd10, %r3;\n"
    "	mul.wide.s32 	%rd11, %r3, 4;\n"
    "	add.u64 	%rd12, %rd6, %rd11;\n"
    "	ld.global.s32 	%r16, [%rd12+0];\n"
    "	ld.param.s32 	%r17, [__cudaparm_nacl_kernel_nat];\n"
    "	mul.lo.s32 	%r18, %r16, %r17;\n"
    "	add.s32 	%r19, %r15, %r18;\n"
    "	.loc	3	92	0\n"
    "	sqrt.approx.f32 	%f42, %f40;\n"
    "	cvt.s64.s32 	%rd13, %r19;\n"
    "	mul.wide.s32 	%rd14, %r19, 4;\n"
    "	ld.param.u64 	%rd15, [__cudaparm_nacl_kernel_ipotro];\n"
    "	add.u64 	%rd16, %rd15, %rd14;\n"
    "	ld.global.f32 	%f43, [%rd16+0];\n"
    "	ld.param.u64 	%rd17, [__cudaparm_nacl_kernel_sigm];\n"
    "	add.u64 	%rd18, %rd17, %rd14;\n"
    "	ld.global.f32 	%f44, [%rd18+0];\n"
    "	sub.f32 	%f45, %f44, %f42;\n"
    "	mul.f32 	%f46, %f43, %f45;\n"
    "	.loc	3	93	0\n"
    "	rcp.approx.f32 	%f47, %f42;\n"
    "	mul.f32 	%f48, %f47, %f47;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	mul.f32 	%f50, %f49, %f49;\n"
    "	ld.param.u64 	%rd19, [__cudaparm_nacl_kernel_pc];\n"
    "	add.u64 	%rd20, %rd19, %rd14;\n"
    "	ld.global.f32 	%f51, [%rd20+0];\n"
    "	mov.f32 	%f52, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f53, %f51, %f52;\n"
    "	mul.f32 	%f54, %f50, %f53;\n"
    "	mov.f32 	%f55, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f56, %f46, %f55;\n"
    "	ex2.approx.f32 	%f57, %f56;\n"
    "	ld.param.u64 	%rd21, [__cudaparm_nacl_kernel_pol];\n"
    "	add.u64 	%rd22, %rd21, %rd14;\n"
    "	ld.global.f32 	%f58, [%rd22+0];\n"
    "	mov.f32 	%f59, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f60, %f58, %f59;\n"
    "	mul.f32 	%f61, %f57, %f60;\n"
    "	mul.f32 	%f62, %f43, %f61;\n"
    "	mul.f32 	%f63, %f47, %f62;\n"
    "	sub.f32 	%f64, %f63, %f54;\n"
    "	ld.param.u64 	%rd23, [__cudaparm_nacl_kernel_pd];\n"
    "	add.u64 	%rd24, %rd23, %rd14;\n"
    "	ld.global.f32 	%f65, [%rd24+0];\n"
    "	mov.f32 	%f66, 0f41000000;    	// 8\n"
    "	mul.f32 	%f67, %f65, %f66;\n"
    "	mul.f32 	%f68, %f50, %f67;\n"
    "	mul.f32 	%f69, %f48, %f68;\n"
    "	sub.f32 	%f70, %f64, %f69;\n"
    "	ld.param.u64 	%rd25, [__cudaparm_nacl_kernel_zz];\n"
    "	add.u64 	%rd26, %rd25, %rd14;\n"
    "	ld.global.f32 	%f71, [%rd26+0];\n"
    "	mul.f32 	%f72, %f47, %f48;\n"
    "	mad.f32 	%f73, %f71, %f72, %f70;\n"
    "	.loc	3	97	0\n"
    "	mov.f32 	%f74, %f2;\n"
    "	mov.f32 	%f75, %f20;\n"
    "	mad.f32 	%f76, %f75, %f73, %f74;\n"
    "	mov.f32 	%f2, %f76;\n"
    "	mov.f32 	%f77, %f4;\n"
    "	mov.f32 	%f78, %f30;\n"
    "	mad.f32 	%f79, %f78, %f73, %f77;\n"
    "	mov.f32 	%f4, %f79;\n"
    "	mov.f32 	%f80, %f6;\n"
    "	mad.f32 	%f81, %f38, %f73, %f80;\n"
    "	mov.f32 	%f6, %f81;\n"
    "$Lt_0_8962:\n"
    "	add.s32 	%r13, %r13, 1;\n"
    "	add.s32 	%r7, %r7, 3;\n"
    "	add.u64 	%rd3, %rd3, 12;\n"
    "	setp.ne.s32 	%p5, %r7, %r8;\n"
    "	@%p5 bra 	$Lt_0_8706;\n"
    "	bra.uni 	$Lt_0_8194;\n"
    "$Lt_0_9730:\n"
    "	mul.lo.s32 	%r20, %r3, 3;\n"
    "	cvt.s64.s32 	%rd27, %r20;\n"
    "	mul.wide.s32 	%rd4, %r20, 4;\n"
    "$Lt_0_8194:\n"
    "	.loc	3	100	0\n"
    "	ld.param.u64 	%rd28, [__cudaparm_nacl_kernel_force];\n"
    "	add.u64 	%rd29, %rd28, %rd4;\n"
    "	mov.f32 	%f82, %f2;\n"
    "	st.global.f32 	[%rd29+0], %f82;\n"
    "	mov.f32 	%f83, %f4;\n"
    "	st.global.f32 	[%rd29+4], %f83;\n"
    "	mov.f32 	%f84, %f6;\n"
    "	st.global.f32 	[%rd29+8], %f84;\n"
    "$Lt_0_7682:\n"
    "	.loc	3	102	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel:\n"
    "	} // nacl_kernel\n"
    "\n"
    "	.entry nacl_kernel_kadai8 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_kadai8_n,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_atype,\n"
    "		.param .s32 __cudaparm_nacl_kernel_kadai8_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_pol,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_sigm,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_ipotro,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_pc,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_pd,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_zz,\n"
    "		.param .s32 __cudaparm_nacl_kernel_kadai8_tblno,\n"
    "		.param .f32 __cudaparm_nacl_kernel_kadai8___val_paramxmax,\n"
    "		.param .s32 __cudaparm_nacl_kernel_kadai8_periodicflag,\n"
    "		.param .u64 __cudaparm_nacl_kernel_kadai8_force)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<33>;\n"
    "	.reg .u64 %rd<38>;\n"
    "	.reg .f32 %f<89>;\n"
    "	.reg .pred %p<8>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_15589_35_non_const_s_x24784[768];\n"
    "	.loc	3	107	0\n"
    "$LDWbegin_nacl_kernel_kadai8:\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r1, %rh1, 64;\n"
    "	cvt.u32.u16 	%r2, %tid.x;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_kadai8_n];\n"
    "	setp.le.s32 	%p1, %r4, %r3;\n"
    "	@%p1 bra 	$Lt_1_9730;\n"
    "	.loc	3	118	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	mov.u32 	%r5, 0;\n"
    "	.loc	3	107	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_kadai8_n];\n"
    "	.loc	3	118	0\n"
    "	setp.le.s32 	%p2, %r4, %r5;\n"
    "	@%p2 bra 	$Lt_1_12802;\n"
    "	mov.u64 	%rd1, __cuda___cuda_local_var_15589_35_non_const_s_x24784;\n"
    "	ld.param.s32 	%r6, [__cudaparm_nacl_kernel_kadai8_periodicflag];\n"
    "	and.b32 	%r7, %r6, 1;\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_kadai8___val_paramxmax];\n"
    "	add.f32 	%f8, %f7, %f7;\n"
    "	mov.s32 	%r8, 0;\n"
    "	setp.eq.s32 	%p3, %r7, %r8;\n"
    "	selp.f32 	%f9, %f8, %f7, %p3;\n"
    "	rcp.approx.f32 	%f10, %f9;\n"
    "	.loc	3	107	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_kadai8_n];\n"
    "	.loc	3	118	0\n"
    "	add.s32 	%r9, %r4, 63;\n"
    "	shr.s32 	%r10, %r9, 31;\n"
    "	mov.s32 	%r11, 63;\n"
    "	and.b32 	%r12, %r10, %r11;\n"
    "	add.s32 	%r13, %r12, %r9;\n"
    "	shr.s32 	%r14, %r13, 6;\n"
    "	mul24.lo.u32 	%r15, %r2, 3;\n"
    "	mul.lo.u32 	%r16, %r4, 3;\n"
    "	mov.s32 	%r17, %r15;\n"
    "	add.u32 	%r18, %r15, %r16;\n"
    "	mul.lo.s32 	%r19, %r3, 3;\n"
    "	cvt.s64.s32 	%rd2, %r19;\n"
    "	cvt.u64.u32 	%rd3, %r15;\n"
    "	mul.wide.u32 	%rd4, %r15, 4;\n"
    "	add.u64 	%rd5, %rd1, %rd4;\n"
    "	mul.wide.s32 	%rd6, %r19, 4;\n"
    "	ld.param.u64 	%rd7, [__cudaparm_nacl_kernel_kadai8_x];\n"
    "	add.u64 	%rd8, %rd6, %rd7;\n"
    "	mov.s32 	%r20, 0;\n"
    "	mov.s32 	%r21, %r14;\n"
    "$Lt_1_10754:\n"
    " //<loop> Loop body line 118, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	120	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	121	0\n"
    "	cvt.u64.u32 	%rd9, %r17;\n"
    "	mul.wide.u32 	%rd10, %r17, 4;\n"
    "	add.u64 	%rd11, %rd7, %rd10;\n"
    "	ld.global.f32 	%f11, [%rd11+0];\n"
    "	st.shared.f32 	[%rd5+0], %f11;\n"
    "	ld.global.f32 	%f12, [%rd11+4];\n"
    "	st.shared.f32 	[%rd5+4], %f12;\n"
    "	ld.global.f32 	%f13, [%rd11+8];\n"
    "	st.shared.f32 	[%rd5+8], %f13;\n"
    "	.loc	3	122	0\n"
    "	bar.sync 	0;\n"
    "	mov.s32 	%r22, 0;\n"
    "	mov.s64 	%rd12, %rd1;\n"
    "	ld.global.f32 	%f14, [%rd8+0];\n"
    "	ld.global.f32 	%f15, [%rd8+4];\n"
    "	ld.global.f32 	%f16, [%rd8+8];\n"
    "	mov.s32 	%r23, 0;\n"
    "$Lt_1_11522:\n"
    " //<loop> Loop body line 122, nesting depth: 2, iterations: 64\n"
    "	.loc	3	127	0\n"
    "	ld.shared.f32 	%f17, [%rd12+0];\n"
    "	sub.f32 	%f18, %f14, %f17;\n"
    "	mul.f32 	%f19, %f10, %f18;\n"
    "	cvt.rni.f32.f32 	%f20, %f19;\n"
    "	mul.f32 	%f21, %f9, %f20;\n"
    "	sub.f32 	%f22, %f18, %f21;\n"
    "	mov.f32 	%f23, %f22;\n"
    "	.loc	3	128	0\n"
    "	mov.f32 	%f24, 0f00000000;    	// 0\n"
    "	mad.f32 	%f25, %f22, %f22, %f24;\n"
    "	.loc	3	126	0\n"
    "	ld.shared.f32 	%f26, [%rd12+4];\n"
    "	sub.f32 	%f27, %f15, %f26;\n"
    "	mov.f32 	%f28, %f27;\n"
    "	.loc	3	127	0\n"
    "	mul.f32 	%f29, %f10, %f27;\n"
    "	cvt.rni.f32.f32 	%f30, %f29;\n"
    "	mul.f32 	%f31, %f9, %f30;\n"
    "	sub.f32 	%f32, %f27, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	.loc	3	128	0\n"
    "	mad.f32 	%f34, %f32, %f32, %f25;\n"
    "	.loc	3	126	0\n"
    "	ld.shared.f32 	%f35, [%rd12+8];\n"
    "	sub.f32 	%f36, %f16, %f35;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	.loc	3	127	0\n"
    "	mul.f32 	%f38, %f10, %f36;\n"
    "	cvt.rni.f32.f32 	%f39, %f38;\n"
    "	mul.f32 	%f40, %f9, %f39;\n"
    "	sub.f32 	%f41, %f36, %f40;\n"
    "	mov.f32 	%f42, %f41;\n"
    "	.loc	3	128	0\n"
    "	mad.f32 	%f43, %f41, %f41, %f34;\n"
    "	mov.f32 	%f44, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p4, %f43, %f44;\n"
    "	@!%p4 bra 	$Lt_1_11778;\n"
    "	.loc	3	136	0\n"
    "	ld.param.u64 	%rd13, [__cudaparm_nacl_kernel_kadai8_atype];\n"
    "	add.s32 	%r24, %r23, %r20;\n"
    "	cvt.s64.s32 	%rd14, %r24;\n"
    "	mul.wide.s32 	%rd15, %r24, 4;\n"
    "	add.u64 	%rd16, %rd13, %rd15;\n"
    "	ld.global.s32 	%r25, [%rd16+0];\n"
    "	cvt.s64.s32 	%rd17, %r3;\n"
    "	mul.wide.s32 	%rd18, %r3, 4;\n"
    "	add.u64 	%rd19, %rd13, %rd18;\n"
    "	ld.global.s32 	%r26, [%rd19+0];\n"
    "	ld.param.s32 	%r27, [__cudaparm_nacl_kernel_kadai8_nat];\n"
    "	mul.lo.s32 	%r28, %r26, %r27;\n"
    "	add.s32 	%r29, %r25, %r28;\n"
    "	.loc	3	137	0\n"
    "	sqrt.approx.f32 	%f45, %f43;\n"
    "	cvt.s64.s32 	%rd20, %r29;\n"
    "	mul.wide.s32 	%rd21, %r29, 4;\n"
    "	ld.param.u64 	%rd22, [__cudaparm_nacl_kernel_kadai8_ipotro];\n"
    "	add.u64 	%rd23, %rd22, %rd21;\n"
    "	ld.global.f32 	%f46, [%rd23+0];\n"
    "	ld.param.u64 	%rd24, [__cudaparm_nacl_kernel_kadai8_sigm];\n"
    "	add.u64 	%rd25, %rd24, %rd21;\n"
    "	ld.global.f32 	%f47, [%rd25+0];\n"
    "	sub.f32 	%f48, %f47, %f45;\n"
    "	mul.f32 	%f49, %f46, %f48;\n"
    "	.loc	3	138	0\n"
    "	rcp.approx.f32 	%f50, %f45;\n"
    "	mul.f32 	%f51, %f50, %f50;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	ld.param.u64 	%rd26, [__cudaparm_nacl_kernel_kadai8_pc];\n"
    "	add.u64 	%rd27, %rd26, %rd21;\n"
    "	ld.global.f32 	%f54, [%rd27+0];\n"
    "	mov.f32 	%f55, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f56, %f54, %f55;\n"
    "	mul.f32 	%f57, %f53, %f56;\n"
    "	mov.f32 	%f58, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f59, %f49, %f58;\n"
    "	ex2.approx.f32 	%f60, %f59;\n"
    "	ld.param.u64 	%rd28, [__cudaparm_nacl_kernel_kadai8_pol];\n"
    "	add.u64 	%rd29, %rd28, %rd21;\n"
    "	ld.global.f32 	%f61, [%rd29+0];\n"
    "	mov.f32 	%f62, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f63, %f61, %f62;\n"
    "	mul.f32 	%f64, %f60, %f63;\n"
    "	mul.f32 	%f65, %f46, %f64;\n"
    "	mul.f32 	%f66, %f50, %f65;\n"
    "	sub.f32 	%f67, %f66, %f57;\n"
    "	ld.param.u64 	%rd30, [__cudaparm_nacl_kernel_kadai8_pd];\n"
    "	add.u64 	%rd31, %rd30, %rd21;\n"
    "	ld.global.f32 	%f68, [%rd31+0];\n"
    "	mov.f32 	%f69, 0f41000000;    	// 8\n"
    "	mul.f32 	%f70, %f68, %f69;\n"
    "	mul.f32 	%f71, %f53, %f70;\n"
    "	mul.f32 	%f72, %f51, %f71;\n"
    "	sub.f32 	%f73, %f67, %f72;\n"
    "	ld.param.u64 	%rd32, [__cudaparm_nacl_kernel_kadai8_zz];\n"
    "	add.u64 	%rd33, %rd32, %rd21;\n"
    "	ld.global.f32 	%f74, [%rd33+0];\n"
    "	mul.f32 	%f75, %f50, %f51;\n"
    "	mad.f32 	%f76, %f74, %f75, %f73;\n"
    "	.loc	3	142	0\n"
    "	mov.f32 	%f77, %f2;\n"
    "	mov.f32 	%f78, %f23;\n"
    "	mad.f32 	%f79, %f78, %f76, %f77;\n"
    "	mov.f32 	%f2, %f79;\n"
    "	mov.f32 	%f80, %f4;\n"
    "	mov.f32 	%f81, %f33;\n"
    "	mad.f32 	%f82, %f81, %f76, %f80;\n"
    "	mov.f32 	%f4, %f82;\n"
    "	mov.f32 	%f83, %f6;\n"
    "	mad.f32 	%f84, %f41, %f76, %f83;\n"
    "	mov.f32 	%f6, %f84;\n"
    "$Lt_1_11778:\n"
    "	add.s32 	%r23, %r23, 1;\n"
    "	add.s32 	%r22, %r22, 3;\n"
    "	add.u64 	%rd12, %rd12, 12;\n"
    "	mov.u32 	%r30, 192;\n"
    "	setp.ne.s32 	%p5, %r22, %r30;\n"
    "	@%p5 bra 	$Lt_1_11522;\n"
    "	add.s32 	%r20, %r20, 64;\n"
    "	add.u32 	%r17, %r17, 192;\n"
    "	setp.lt.s32 	%p6, %r17, %r18;\n"
    "	@%p6 bra 	$Lt_1_10754;\n"
    "	bra.uni 	$Lt_1_10242;\n"
    "$Lt_1_12802:\n"
    "	mul.lo.s32 	%r31, %r3, 3;\n"
    "	cvt.s64.s32 	%rd34, %r31;\n"
    "	mul.wide.s32 	%rd6, %r31, 4;\n"
    "$Lt_1_10242:\n"
    "	.loc	3	146	0\n"
    "	ld.param.u64 	%rd35, [__cudaparm_nacl_kernel_kadai8_force];\n"
    "	add.u64 	%rd36, %rd35, %rd6;\n"
    "	mov.f32 	%f85, %f2;\n"
    "	st.global.f32 	[%rd36+0], %f85;\n"
    "	mov.f32 	%f86, %f4;\n"
    "	st.global.f32 	[%rd36+4], %f86;\n"
    "	mov.f32 	%f87, %f6;\n"
    "	st.global.f32 	[%rd36+8], %f87;\n"
    "$Lt_1_9730:\n"
    "	.loc	3	148	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_kadai8:\n"
    "	} // nacl_kernel_kadai8\n"
    "	.const .align 4 .b8 c_matrix[24576];\n"
    "\n"
    "	.entry nacl_kernel_gpu_kadai9 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai9_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai9_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai9_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai9_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_gpu_kadai9_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai9_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<17>;\n"
    "	.reg .u64 %rd<15>;\n"
    "	.reg .f32 %f<84>;\n"
    "	.reg .pred %p<6>;\n"
    "	.loc	3	232	0\n"
    "$LDWbegin_nacl_kernel_gpu_kadai9:\n"
    "	.loc	3	242	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_gpu_kadai9_n];\n"
    "	mov.u32 	%r3, 0;\n"
    "	setp.le.s32 	%p1, %r2, %r3;\n"
    "	@%p1 bra 	$Lt_2_9986;\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_gpu_kadai9_n];\n"
    "	mov.s32 	%r4, %r2;\n"
    "	mul.wide.u16 	%r5, %rh1, 256;\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_gpu_kadai9_xmax];\n"
    "	rcp.approx.f32 	%f8, %f7;\n"
    "	add.u32 	%r6, %r1, %r5;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai9_x];\n"
    "	mov.s64 	%rd2, %rd1;\n"
    "	cvt.s64.s32 	%rd3, %r6;\n"
    "	mul.wide.s32 	%rd4, %r6, 16;\n"
    "	add.u64 	%rd5, %rd1, %rd4;\n"
    "	ld.global.s32 	%r7, [%rd5+12];\n"
    "	ld.global.f32 	%f9, [%rd5+0];\n"
    "	ld.global.f32 	%f10, [%rd5+4];\n"
    "	ld.global.f32 	%f11, [%rd5+8];\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_gpu_kadai9_nat];\n"
    "	mul.lo.s32 	%r9, %r8, %r7;\n"
    "	mov.s32 	%r10, 0;\n"
    "	mov.u64 	%rd6, c_matrix;\n"
    "	mov.s32 	%r11, %r4;\n"
    "$Lt_2_8450:\n"
    " //<loop> Loop body line 242, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	246	0\n"
    "	ld.global.s32 	%r12, [%rd2+12];\n"
    "	add.s32 	%r13, %r12, %r9;\n"
    "	ld.global.f32 	%f12, [%rd2+0];\n"
    "	sub.f32 	%f13, %f9, %f12;\n"
    "	mul.f32 	%f14, %f8, %f13;\n"
    "	cvt.rni.f32.f32 	%f15, %f14;\n"
    "	.loc	3	242	0\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_gpu_kadai9_xmax];\n"
    "	.loc	3	246	0\n"
    "	mul.f32 	%f16, %f7, %f15;\n"
    "	sub.f32 	%f17, %f13, %f16;\n"
    "	mov.f32 	%f18, %f17;\n"
    "	mov.f32 	%f19, 0f00000000;    	// 0\n"
    "	mad.f32 	%f20, %f17, %f17, %f19;\n"
    "	ld.global.f32 	%f21, [%rd2+4];\n"
    "	sub.f32 	%f22, %f10, %f21;\n"
    "	mov.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f8, %f22;\n"
    "	cvt.rni.f32.f32 	%f25, %f24;\n"
    "	mul.f32 	%f26, %f7, %f25;\n"
    "	sub.f32 	%f27, %f22, %f26;\n"
    "	mov.f32 	%f28, %f27;\n"
    "	mad.f32 	%f29, %f27, %f27, %f20;\n"
    "	ld.global.f32 	%f30, [%rd2+8];\n"
    "	sub.f32 	%f31, %f11, %f30;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mul.f32 	%f33, %f8, %f31;\n"
    "	cvt.rni.f32.f32 	%f34, %f33;\n"
    "	mul.f32 	%f35, %f7, %f34;\n"
    "	sub.f32 	%f36, %f31, %f35;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f38, %f36, %f36, %f29;\n"
    "	mov.f32 	%f39, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f38, %f39;\n"
    "	@!%p2 bra 	$Lt_2_8706;\n"
    "	sqrt.approx.f32 	%f40, %f38;\n"
    "	rcp.approx.f32 	%f41, %f40;\n"
    "	cvt.s64.s32 	%rd7, %r13;\n"
    "	mul.wide.s32 	%rd8, %r13, 24;\n"
    "	add.u64 	%rd9, %rd6, %rd8;\n"
    "	mul.f32 	%f42, %f41, %f41;\n"
    "	ld.const.f32 	%f43, [%rd9+8];\n"
    "	mul.f32 	%f44, %f42, %f42;\n"
    "	mul.f32 	%f45, %f44, %f44;\n"
    "	ld.const.f32 	%f46, [%rd9+12];\n"
    "	mov.f32 	%f47, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f48, %f46, %f47;\n"
    "	mul.f32 	%f49, %f45, %f48;\n"
    "	ld.const.f32 	%f50, [%rd9+4];\n"
    "	sub.f32 	%f51, %f50, %f40;\n"
    "	mul.f32 	%f52, %f43, %f51;\n"
    "	mov.f32 	%f53, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f54, %f52, %f53;\n"
    "	ex2.approx.f32 	%f55, %f54;\n"
    "	ld.const.f32 	%f56, [%rd9+0];\n"
    "	mov.f32 	%f57, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f58, %f56, %f57;\n"
    "	mul.f32 	%f59, %f55, %f58;\n"
    "	mul.f32 	%f60, %f43, %f59;\n"
    "	mul.f32 	%f61, %f41, %f60;\n"
    "	sub.f32 	%f62, %f61, %f49;\n"
    "	ld.const.f32 	%f63, [%rd9+16];\n"
    "	mov.f32 	%f64, 0f41000000;    	// 8\n"
    "	mul.f32 	%f65, %f63, %f64;\n"
    "	mul.f32 	%f66, %f45, %f65;\n"
    "	mul.f32 	%f67, %f42, %f66;\n"
    "	sub.f32 	%f68, %f62, %f67;\n"
    "	ld.const.f32 	%f69, [%rd9+20];\n"
    "	mul.f32 	%f70, %f41, %f42;\n"
    "	mad.f32 	%f71, %f69, %f70, %f68;\n"
    "	mov.f32 	%f72, %f2;\n"
    "	mov.f32 	%f73, %f18;\n"
    "	mad.f32 	%f74, %f73, %f71, %f72;\n"
    "	mov.f32 	%f2, %f74;\n"
    "	mov.f32 	%f75, %f4;\n"
    "	mov.f32 	%f76, %f28;\n"
    "	mad.f32 	%f77, %f76, %f71, %f75;\n"
    "	mov.f32 	%f4, %f77;\n"
    "	mov.f32 	%f78, %f6;\n"
    "	mad.f32 	%f79, %f36, %f71, %f78;\n"
    "	mov.f32 	%f6, %f79;\n"
    "$Lt_2_8706:\n"
    "	add.s32 	%r10, %r10, 1;\n"
    "	add.u64 	%rd2, %rd2, 16;\n"
    "	.loc	3	242	0\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_gpu_kadai9_n];\n"
    "	.loc	3	246	0\n"
    "	setp.ne.s32 	%p3, %r2, %r10;\n"
    "	@%p3 bra 	$Lt_2_8450;\n"
    "	bra.uni 	$Lt_2_7938;\n"
    "$Lt_2_9986:\n"
    "	mul.wide.u16 	%r14, %rh1, 256;\n"
    "	add.u32 	%r6, %r1, %r14;\n"
    "$Lt_2_7938:\n"
    "	.loc	3	242	0\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_gpu_kadai9_n];\n"
    "	.loc	3	246	0\n"
    "	setp.le.s32 	%p4, %r2, %r6;\n"
    "	@%p4 bra 	$Lt_2_9474;\n"
    "	.loc	3	248	0\n"
    "	ld.param.u64 	%rd10, [__cudaparm_nacl_kernel_gpu_kadai9_fvec];\n"
    "	mul.lo.s32 	%r15, %r6, 3;\n"
    "	cvt.s64.s32 	%rd11, %r15;\n"
    "	mul.wide.s32 	%rd12, %r15, 4;\n"
    "	add.u64 	%rd13, %rd10, %rd12;\n"
    "	mov.f32 	%f80, %f2;\n"
    "	st.global.f32 	[%rd13+0], %f80;\n"
    "	mov.f32 	%f81, %f4;\n"
    "	st.global.f32 	[%rd13+4], %f81;\n"
    "	mov.f32 	%f82, %f6;\n"
    "	st.global.f32 	[%rd13+8], %f82;\n"
    "$Lt_2_9474:\n"
    "	.loc	3	249	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_gpu_kadai9:\n"
    "	} // nacl_kernel_gpu_kadai9\n"
    "\n"
    "	.entry nacl_kernel_gpu_kadai10 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai10_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai10_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai10_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai10_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_gpu_kadai10_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai10_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<39>;\n"
    "	.reg .u64 %rd<29>;\n"
    "	.reg .f32 %f<166>;\n"
    "	.reg .pred %p<10>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_15822_35_non_const_s_xj25632[4096];\n"
    "	.loc	3	341	0\n"
    "$LDWbegin_nacl_kernel_gpu_kadai10:\n"
    "	.loc	3	352	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	353	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai10_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	354	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_gpu_kadai10_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	.loc	3	355	0\n"
    "	bar.sync 	0;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_15822_35_non_const_s_xj25632;\n"
    "	.loc	3	356	0\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd7, %rd1;\n"
    "	add.u64 	%rd9, %rd7, %rd5;\n"
    "	ld.global.f32 	%f13, [%rd8+0];\n"
    "	st.shared.f32 	[%rd9+0], %f13;\n"
    "	ld.global.f32 	%f14, [%rd8+4];\n"
    "	st.shared.f32 	[%rd9+4], %f14;\n"
    "	ld.global.f32 	%f15, [%rd8+8];\n"
    "	st.shared.f32 	[%rd9+8], %f15;\n"
    "	ld.global.s32 	%r7, [%rd8+12];\n"
    "	st.shared.s32 	[%rd9+12], %r7;\n"
    "	.loc	3	357	0\n"
    "	bar.sync 	0;\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_gpu_kadai10_n];\n"
    "	shr.s32 	%r9, %r8, 31;\n"
    "	mov.s32 	%r10, 255;\n"
    "	and.b32 	%r11, %r9, %r10;\n"
    "	add.s32 	%r12, %r11, %r8;\n"
    "	shr.s32 	%r13, %r12, 8;\n"
    "	mul.lo.s32 	%r14, %r13, 256;\n"
    "	sub.s32 	%r15, %r8, %r14;\n"
    "	mov.u32 	%r16, 0;\n"
    "	setp.le.s32 	%p1, %r15, %r16;\n"
    "	@%p1 bra 	$Lt_3_17410;\n"
    "	mov.s32 	%r17, %r15;\n"
    "	ld.param.f32 	%f16, [__cudaparm_nacl_kernel_gpu_kadai10_xmax];\n"
    "	rcp.approx.f32 	%f17, %f16;\n"
    "	mov.s64 	%rd10, %rd5;\n"
    "	mov.s64 	%rd11, %rd5;\n"
    "	mov.s32 	%r18, 0;\n"
    "	mov.f32 	%f18, %f12;\n"
    "	mov.f32 	%f19, %f10;\n"
    "	mov.f32 	%f20, %f8;\n"
    "	mov.u64 	%rd12, c_matrix;\n"
    "	mov.s32 	%r19, %r17;\n"
    "$Lt_3_13314:\n"
    " //<loop> Loop body line 357, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	359	0\n"
    "	ld.shared.s32 	%r20, [%rd10+12];\n"
    "	add.s32 	%r21, %r20, %r6;\n"
    "	ld.shared.f32 	%f21, [%rd11+0];\n"
    "	sub.f32 	%f22, %f20, %f21;\n"
    "	mov.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f17, %f23;\n"
    "	cvt.rni.f32.f32 	%f25, %f24;\n"
    "	.loc	3	357	0\n"
    "	ld.param.f32 	%f16, [__cudaparm_nacl_kernel_gpu_kadai10_xmax];\n"
    "	.loc	3	359	0\n"
    "	mul.f32 	%f26, %f16, %f25;\n"
    "	sub.f32 	%f27, %f22, %f26;\n"
    "	mov.f32 	%f28, %f27;\n"
    "	mov.f32 	%f29, 0f00000000;    	// 0\n"
    "	mad.f32 	%f30, %f27, %f27, %f29;\n"
    "	ld.shared.f32 	%f31, [%rd11+4];\n"
    "	sub.f32 	%f32, %f19, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	mul.f32 	%f34, %f17, %f33;\n"
    "	cvt.rni.f32.f32 	%f35, %f34;\n"
    "	mul.f32 	%f36, %f16, %f35;\n"
    "	sub.f32 	%f37, %f32, %f36;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f39, %f37, %f37, %f30;\n"
    "	ld.shared.f32 	%f40, [%rd11+8];\n"
    "	sub.f32 	%f41, %f18, %f40;\n"
    "	mul.f32 	%f42, %f41, %f17;\n"
    "	cvt.rni.f32.f32 	%f43, %f42;\n"
    "	mul.f32 	%f44, %f16, %f43;\n"
    "	sub.f32 	%f45, %f41, %f44;\n"
    "	mad.f32 	%f46, %f45, %f45, %f39;\n"
    "	mov.f32 	%f47, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f46, %f47;\n"
    "	@!%p2 bra 	$Lt_3_13570;\n"
    "	sqrt.approx.f32 	%f48, %f46;\n"
    "	rcp.approx.f32 	%f49, %f48;\n"
    "	cvt.s64.s32 	%rd13, %r21;\n"
    "	mul.wide.s32 	%rd14, %r21, 24;\n"
    "	add.u64 	%rd15, %rd12, %rd14;\n"
    "	mul.f32 	%f50, %f49, %f49;\n"
    "	ld.const.f32 	%f51, [%rd15+8];\n"
    "	mul.f32 	%f52, %f50, %f50;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	ld.const.f32 	%f54, [%rd15+12];\n"
    "	mov.f32 	%f55, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f56, %f54, %f55;\n"
    "	mul.f32 	%f57, %f53, %f56;\n"
    "	ld.const.f32 	%f58, [%rd15+4];\n"
    "	sub.f32 	%f59, %f58, %f48;\n"
    "	mul.f32 	%f60, %f51, %f59;\n"
    "	mov.f32 	%f61, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f62, %f60, %f61;\n"
    "	ex2.approx.f32 	%f63, %f62;\n"
    "	ld.const.f32 	%f64, [%rd15+0];\n"
    "	mov.f32 	%f65, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f66, %f64, %f65;\n"
    "	mul.f32 	%f67, %f63, %f66;\n"
    "	mul.f32 	%f68, %f51, %f67;\n"
    "	mul.f32 	%f69, %f49, %f68;\n"
    "	sub.f32 	%f70, %f69, %f57;\n"
    "	ld.const.f32 	%f71, [%rd15+16];\n"
    "	mov.f32 	%f72, 0f41000000;    	// 8\n"
    "	mul.f32 	%f73, %f71, %f72;\n"
    "	mul.f32 	%f74, %f53, %f73;\n"
    "	mul.f32 	%f75, %f50, %f74;\n"
    "	sub.f32 	%f76, %f70, %f75;\n"
    "	ld.const.f32 	%f77, [%rd15+20];\n"
    "	mul.f32 	%f78, %f49, %f50;\n"
    "	mad.f32 	%f79, %f77, %f78, %f76;\n"
    "	mov.f32 	%f80, %f2;\n"
    "	mov.f32 	%f81, %f28;\n"
    "	mad.f32 	%f82, %f81, %f79, %f80;\n"
    "	mov.f32 	%f2, %f82;\n"
    "	mov.f32 	%f83, %f4;\n"
    "	mov.f32 	%f84, %f38;\n"
    "	mad.f32 	%f85, %f84, %f79, %f83;\n"
    "	mov.f32 	%f4, %f85;\n"
    "	mov.f32 	%f86, %f6;\n"
    "	mad.f32 	%f87, %f45, %f79, %f86;\n"
    "	mov.f32 	%f6, %f87;\n"
    "$Lt_3_13570:\n"
    "	add.s32 	%r18, %r18, 1;\n"
    "	add.u64 	%rd11, %rd11, 16;\n"
    "	add.u64 	%rd10, %rd10, 16;\n"
    "	setp.ne.s32 	%p3, %r15, %r18;\n"
    "	@%p3 bra 	$Lt_3_13314;\n"
    "	mov.f32 	%f88, %f45;\n"
    "	mov.s32 	%r18, %r15;\n"
    "	bra.uni 	$Lt_3_12802;\n"
    "$Lt_3_17410:\n"
    "	mov.s32 	%r18, 0;\n"
    "	mov.u64 	%rd12, c_matrix;\n"
    "$Lt_3_12802:\n"
    "	.loc	3	357	0\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_gpu_kadai10_n];\n"
    "	.loc	3	359	0\n"
    "	setp.le.s32 	%p4, %r8, %r18;\n"
    "	@%p4 bra 	$Lt_3_14338;\n"
    "	ld.param.f32 	%f16, [__cudaparm_nacl_kernel_gpu_kadai10_xmax];\n"
    "	rcp.approx.f32 	%f17, %f16;\n"
    "	.loc	3	357	0\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_gpu_kadai10_n];\n"
    "	.loc	3	359	0\n"
    "	sub.s32 	%r22, %r8, %r18;\n"
    "	add.s32 	%r23, %r22, 255;\n"
    "	shr.s32 	%r24, %r23, 31;\n"
    "	mov.s32 	%r25, 255;\n"
    "	and.b32 	%r26, %r24, %r25;\n"
    "	add.s32 	%r27, %r26, %r23;\n"
    "	shr.s32 	%r28, %r27, 8;\n"
    "	add.s32 	%r29, %r18, %r1;\n"
    "	add.s32 	%r30, %r8, %r1;\n"
    "	cvt.s64.s32 	%rd16, %r29;\n"
    "	mul.wide.s32 	%rd17, %r29, 16;\n"
    "	add.u64 	%rd18, %rd1, %rd17;\n"
    "	mov.s32 	%r31, %r28;\n"
    "$Lt_3_14850:\n"
    " //<loop> Loop body line 359, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	362	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	363	0\n"
    "	ld.global.f32 	%f89, [%rd18+0];\n"
    "	st.shared.f32 	[%rd9+0], %f89;\n"
    "	ld.global.f32 	%f90, [%rd18+4];\n"
    "	st.shared.f32 	[%rd9+4], %f90;\n"
    "	ld.global.f32 	%f91, [%rd18+8];\n"
    "	st.shared.f32 	[%rd9+8], %f91;\n"
    "	ld.global.s32 	%r32, [%rd18+12];\n"
    "	st.shared.s32 	[%rd9+12], %r32;\n"
    "	.loc	3	364	0\n"
    "	bar.sync 	0;\n"
    "	mov.s64 	%rd19, %rd5;\n"
    "	mov.s64 	%rd20, %rd5;\n"
    "	mov.s32 	%r33, 0;\n"
    "	mov.f32 	%f18, %f12;\n"
    "	mov.f32 	%f19, %f10;\n"
    "	mov.f32 	%f20, %f8;\n"
    "$Lt_3_15618:\n"
    " //<loop> Loop body line 364, nesting depth: 1, iterations: 256\n"
    "	.loc	3	366	0\n"
    "	ld.shared.s32 	%r34, [%rd19+12];\n"
    "	add.s32 	%r35, %r34, %r6;\n"
    "	ld.shared.f32 	%f92, [%rd20+0];\n"
    "	sub.f32 	%f93, %f20, %f92;\n"
    "	mov.f32 	%f94, %f93;\n"
    "	mul.f32 	%f95, %f17, %f94;\n"
    "	cvt.rni.f32.f32 	%f96, %f95;\n"
    "	mul.f32 	%f97, %f16, %f96;\n"
    "	sub.f32 	%f98, %f93, %f97;\n"
    "	mov.f32 	%f99, %f98;\n"
    "	mov.f32 	%f100, 0f00000000;   	// 0\n"
    "	mad.f32 	%f101, %f98, %f98, %f100;\n"
    "	ld.shared.f32 	%f102, [%rd20+4];\n"
    "	sub.f32 	%f103, %f19, %f102;\n"
    "	mov.f32 	%f104, %f103;\n"
    "	mov.f32 	%f105, %f104;\n"
    "	mul.f32 	%f106, %f17, %f104;\n"
    "	cvt.rni.f32.f32 	%f107, %f106;\n"
    "	mul.f32 	%f108, %f16, %f107;\n"
    "	sub.f32 	%f109, %f103, %f108;\n"
    "	mov.f32 	%f110, %f109;\n"
    "	mad.f32 	%f111, %f109, %f109, %f101;\n"
    "	ld.shared.f32 	%f112, [%rd20+8];\n"
    "	sub.f32 	%f113, %f18, %f112;\n"
    "	mov.f32 	%f114, %f113;\n"
    "	mul.f32 	%f115, %f113, %f17;\n"
    "	cvt.rni.f32.f32 	%f116, %f115;\n"
    "	mul.f32 	%f117, %f16, %f116;\n"
    "	sub.f32 	%f118, %f113, %f117;\n"
    "	mov.f32 	%f119, %f118;\n"
    "	mad.f32 	%f120, %f118, %f118, %f111;\n"
    "	mov.f32 	%f121, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p5, %f120, %f121;\n"
    "	@!%p5 bra 	$Lt_3_15874;\n"
    "	sqrt.approx.f32 	%f122, %f120;\n"
    "	rcp.approx.f32 	%f123, %f122;\n"
    "	cvt.s64.s32 	%rd21, %r35;\n"
    "	mul.wide.s32 	%rd22, %r35, 24;\n"
    "	add.u64 	%rd23, %rd12, %rd22;\n"
    "	mul.f32 	%f124, %f123, %f123;\n"
    "	ld.const.f32 	%f125, [%rd23+8];\n"
    "	mul.f32 	%f126, %f124, %f124;\n"
    "	mul.f32 	%f127, %f126, %f126;\n"
    "	ld.const.f32 	%f128, [%rd23+12];\n"
    "	mov.f32 	%f129, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f130, %f128, %f129;\n"
    "	mul.f32 	%f131, %f127, %f130;\n"
    "	ld.const.f32 	%f132, [%rd23+4];\n"
    "	sub.f32 	%f133, %f132, %f122;\n"
    "	mul.f32 	%f134, %f125, %f133;\n"
    "	mov.f32 	%f135, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f136, %f134, %f135;\n"
    "	ex2.approx.f32 	%f137, %f136;\n"
    "	ld.const.f32 	%f138, [%rd23+0];\n"
    "	mov.f32 	%f139, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f140, %f138, %f139;\n"
    "	mul.f32 	%f141, %f137, %f140;\n"
    "	mul.f32 	%f142, %f125, %f141;\n"
    "	mul.f32 	%f143, %f123, %f142;\n"
    "	sub.f32 	%f144, %f143, %f131;\n"
    "	ld.const.f32 	%f145, [%rd23+16];\n"
    "	mov.f32 	%f146, 0f41000000;   	// 8\n"
    "	mul.f32 	%f147, %f145, %f146;\n"
    "	mul.f32 	%f148, %f127, %f147;\n"
    "	mul.f32 	%f149, %f124, %f148;\n"
    "	sub.f32 	%f150, %f144, %f149;\n"
    "	ld.const.f32 	%f151, [%rd23+20];\n"
    "	mul.f32 	%f152, %f123, %f124;\n"
    "	mad.f32 	%f153, %f151, %f152, %f150;\n"
    "	mov.f32 	%f154, %f2;\n"
    "	mov.f32 	%f155, %f99;\n"
    "	mad.f32 	%f156, %f155, %f153, %f154;\n"
    "	mov.f32 	%f2, %f156;\n"
    "	mov.f32 	%f157, %f4;\n"
    "	mov.f32 	%f158, %f110;\n"
    "	mad.f32 	%f159, %f158, %f153, %f157;\n"
    "	mov.f32 	%f4, %f159;\n"
    "	mov.f32 	%f160, %f6;\n"
    "	mad.f32 	%f161, %f118, %f153, %f160;\n"
    "	mov.f32 	%f6, %f161;\n"
    "$Lt_3_15874:\n"
    "	add.s32 	%r33, %r33, 1;\n"
    "	add.u64 	%rd20, %rd20, 16;\n"
    "	add.u64 	%rd19, %rd19, 16;\n"
    "	mov.u32 	%r36, 256;\n"
    "	setp.ne.s32 	%p6, %r33, %r36;\n"
    "	@%p6 bra 	$Lt_3_15618;\n"
    "	.loc	3	361	0\n"
    "	add.s32 	%r29, %r29, 256;\n"
    "	add.u64 	%rd18, %rd18, 4096;\n"
    "	setp.lt.s32 	%p7, %r29, %r30;\n"
    "	@%p7 bra 	$Lt_3_14850;\n"
    "$Lt_3_14338:\n"
    "	setp.le.s32 	%p8, %r8, %r3;\n"
    "	@%p8 bra 	$Lt_3_16898;\n"
    "	.loc	3	369	0\n"
    "	ld.param.u64 	%rd24, [__cudaparm_nacl_kernel_gpu_kadai10_fvec];\n"
    "	mul.lo.s32 	%r37, %r3, 3;\n"
    "	cvt.s64.s32 	%rd25, %r37;\n"
    "	mul.wide.s32 	%rd26, %r37, 4;\n"
    "	add.u64 	%rd27, %rd24, %rd26;\n"
    "	mov.f32 	%f162, %f2;\n"
    "	st.global.f32 	[%rd27+0], %f162;\n"
    "	mov.f32 	%f163, %f4;\n"
    "	st.global.f32 	[%rd27+4], %f163;\n"
    "	mov.f32 	%f164, %f6;\n"
    "	st.global.f32 	[%rd27+8], %f164;\n"
    "$Lt_3_16898:\n"
    "	.loc	3	398	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_gpu_kadai10:\n"
    "	} // nacl_kernel_gpu_kadai10\n"
    "\n"
    "	.entry nacl_kernel_gpu_kadai11 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai11_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai11_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai11_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai11_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_gpu_kadai11_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai11_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<49>;\n"
    "	.reg .u64 %rd<52>;\n"
    "	.reg .f32 %f<656>;\n"
    "	.reg .pred %p<18>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_15942_35_non_const_s_xj29768[4096];\n"
    "	.loc	3	489	0\n"
    "$LDWbegin_nacl_kernel_gpu_kadai11:\n"
    "	.loc	3	499	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	500	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai11_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	501	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_gpu_kadai11_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_gpu_kadai11_n];\n"
    "	sub.s32 	%r8, %r7, 255;\n"
    "	mov.u32 	%r9, 0;\n"
    "	setp.le.s32 	%p1, %r8, %r9;\n"
    "	@%p1 bra 	$Lt_4_41986;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_15942_35_non_const_s_xj29768;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai11_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_gpu_kadai11_n];\n"
    "	shr.s32 	%r10, %r7, 31;\n"
    "	mov.s32 	%r11, 255;\n"
    "	and.b32 	%r12, %r10, %r11;\n"
    "	add.s32 	%r13, %r12, %r7;\n"
    "	shr.s32 	%r14, %r13, 8;\n"
    "	mov.s32 	%r15, %r1;\n"
    "	add.s32 	%r16, %r8, %r1;\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd7, %rd5;\n"
    "	.loc	3	500	0\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai11_x];\n"
    "	.loc	3	501	0\n"
    "	add.u64 	%rd9, %rd7, %rd1;\n"
    "	mov.s32 	%r17, 0;\n"
    "	mov.u64 	%rd10, c_matrix;\n"
    "	mov.s32 	%r18, %r14;\n"
    "$Lt_4_33794:\n"
    " //<loop> Loop body line 501, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	503	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	504	0\n"
    "	ld.global.f32 	%f15, [%rd9+0];\n"
    "	st.shared.f32 	[%rd8+0], %f15;\n"
    "	ld.global.f32 	%f16, [%rd9+4];\n"
    "	st.shared.f32 	[%rd8+4], %f16;\n"
    "	ld.global.f32 	%f17, [%rd9+8];\n"
    "	st.shared.f32 	[%rd8+8], %f17;\n"
    "	ld.global.s32 	%r19, [%rd9+12];\n"
    "	st.shared.s32 	[%rd8+12], %r19;\n"
    "	.loc	3	505	0\n"
    "	bar.sync 	0;\n"
    "	mov.s64 	%rd11, %rd5;\n"
    "	mov.s64 	%rd12, %rd5;\n"
    "	mov.s32 	%r20, 0;\n"
    "	mov.f32 	%f18, %f12;\n"
    "	mov.f32 	%f19, %f10;\n"
    "	mov.f32 	%f20, %f8;\n"
    "$Lt_4_34562:\n"
    " //<loop> Loop body line 505, nesting depth: 2, iterations: 32\n"
    "	.loc	3	507	0\n"
    "	ld.shared.s32 	%r21, [%rd11+12];\n"
    "	add.s32 	%r22, %r21, %r6;\n"
    "	ld.shared.f32 	%f21, [%rd12+0];\n"
    "	sub.f32 	%f22, %f20, %f21;\n"
    "	mov.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f14, %f23;\n"
    "	cvt.rni.f32.f32 	%f25, %f24;\n"
    "	mul.f32 	%f26, %f13, %f25;\n"
    "	sub.f32 	%f27, %f22, %f26;\n"
    "	mov.f32 	%f28, %f27;\n"
    "	mov.f32 	%f29, 0f00000000;    	// 0\n"
    "	mad.f32 	%f30, %f27, %f27, %f29;\n"
    "	ld.shared.f32 	%f31, [%rd12+4];\n"
    "	sub.f32 	%f32, %f19, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	mov.f32 	%f34, %f33;\n"
    "	mul.f32 	%f35, %f14, %f33;\n"
    "	cvt.rni.f32.f32 	%f36, %f35;\n"
    "	mul.f32 	%f37, %f13, %f36;\n"
    "	sub.f32 	%f38, %f32, %f37;\n"
    "	mov.f32 	%f39, %f38;\n"
    "	mad.f32 	%f40, %f38, %f38, %f30;\n"
    "	ld.shared.f32 	%f41, [%rd12+8];\n"
    "	sub.f32 	%f42, %f18, %f41;\n"
    "	mov.f32 	%f43, %f42;\n"
    "	mul.f32 	%f44, %f42, %f14;\n"
    "	cvt.rni.f32.f32 	%f45, %f44;\n"
    "	mul.f32 	%f46, %f13, %f45;\n"
    "	sub.f32 	%f47, %f42, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f40;\n"
    "	mov.f32 	%f50, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f49, %f50;\n"
    "	@!%p2 bra 	$Lt_4_34818;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	rcp.approx.f32 	%f52, %f51;\n"
    "	cvt.s64.s32 	%rd13, %r22;\n"
    "	mul.wide.s32 	%rd14, %r22, 24;\n"
    "	add.u64 	%rd15, %rd10, %rd14;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	ld.const.f32 	%f54, [%rd15+8];\n"
    "	mul.f32 	%f55, %f53, %f53;\n"
    "	mul.f32 	%f56, %f55, %f55;\n"
    "	ld.const.f32 	%f57, [%rd15+12];\n"
    "	mov.f32 	%f58, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f59, %f57, %f58;\n"
    "	mul.f32 	%f60, %f56, %f59;\n"
    "	ld.const.f32 	%f61, [%rd15+4];\n"
    "	sub.f32 	%f62, %f61, %f51;\n"
    "	mul.f32 	%f63, %f54, %f62;\n"
    "	mov.f32 	%f64, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f65, %f63, %f64;\n"
    "	ex2.approx.f32 	%f66, %f65;\n"
    "	ld.const.f32 	%f67, [%rd15+0];\n"
    "	mov.f32 	%f68, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f69, %f67, %f68;\n"
    "	mul.f32 	%f70, %f66, %f69;\n"
    "	mul.f32 	%f71, %f54, %f70;\n"
    "	mul.f32 	%f72, %f52, %f71;\n"
    "	sub.f32 	%f73, %f72, %f60;\n"
    "	ld.const.f32 	%f74, [%rd15+16];\n"
    "	mov.f32 	%f75, 0f41000000;    	// 8\n"
    "	mul.f32 	%f76, %f74, %f75;\n"
    "	mul.f32 	%f77, %f56, %f76;\n"
    "	mul.f32 	%f78, %f53, %f77;\n"
    "	sub.f32 	%f79, %f73, %f78;\n"
    "	ld.const.f32 	%f80, [%rd15+20];\n"
    "	mul.f32 	%f81, %f52, %f53;\n"
    "	mad.f32 	%f82, %f80, %f81, %f79;\n"
    "	mov.f32 	%f83, %f2;\n"
    "	mov.f32 	%f84, %f28;\n"
    "	mad.f32 	%f85, %f84, %f82, %f83;\n"
    "	mov.f32 	%f2, %f85;\n"
    "	mov.f32 	%f86, %f4;\n"
    "	mov.f32 	%f87, %f39;\n"
    "	mad.f32 	%f88, %f87, %f82, %f86;\n"
    "	mov.f32 	%f4, %f88;\n"
    "	mov.f32 	%f89, %f6;\n"
    "	mad.f32 	%f90, %f47, %f82, %f89;\n"
    "	mov.f32 	%f6, %f90;\n"
    "$Lt_4_34818:\n"
    "	.loc	3	508	0\n"
    "	ld.shared.s32 	%r23, [%rd11+28];\n"
    "	add.s32 	%r24, %r23, %r6;\n"
    "	ld.shared.f32 	%f91, [%rd11+16];\n"
    "	sub.f32 	%f92, %f20, %f91;\n"
    "	mov.f32 	%f93, %f92;\n"
    "	mul.f32 	%f94, %f14, %f93;\n"
    "	cvt.rni.f32.f32 	%f95, %f94;\n"
    "	mul.f32 	%f96, %f13, %f95;\n"
    "	sub.f32 	%f97, %f92, %f96;\n"
    "	mov.f32 	%f98, %f97;\n"
    "	mov.f32 	%f99, 0f00000000;    	// 0\n"
    "	mad.f32 	%f100, %f97, %f97, %f99;\n"
    "	ld.shared.f32 	%f101, [%rd11+20];\n"
    "	sub.f32 	%f102, %f19, %f101;\n"
    "	mov.f32 	%f103, %f102;\n"
    "	mov.f32 	%f104, %f103;\n"
    "	mul.f32 	%f105, %f14, %f103;\n"
    "	cvt.rni.f32.f32 	%f106, %f105;\n"
    "	mul.f32 	%f107, %f13, %f106;\n"
    "	sub.f32 	%f108, %f102, %f107;\n"
    "	mov.f32 	%f109, %f108;\n"
    "	mad.f32 	%f110, %f108, %f108, %f100;\n"
    "	ld.shared.f32 	%f111, [%rd11+24];\n"
    "	sub.f32 	%f112, %f18, %f111;\n"
    "	mov.f32 	%f113, %f112;\n"
    "	mul.f32 	%f114, %f112, %f14;\n"
    "	cvt.rni.f32.f32 	%f115, %f114;\n"
    "	mul.f32 	%f116, %f13, %f115;\n"
    "	sub.f32 	%f117, %f112, %f116;\n"
    "	mov.f32 	%f118, %f117;\n"
    "	mad.f32 	%f119, %f117, %f117, %f110;\n"
    "	mov.f32 	%f120, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p3, %f119, %f120;\n"
    "	@!%p3 bra 	$Lt_4_35330;\n"
    "	sqrt.approx.f32 	%f121, %f119;\n"
    "	rcp.approx.f32 	%f122, %f121;\n"
    "	cvt.s64.s32 	%rd16, %r24;\n"
    "	mul.wide.s32 	%rd17, %r24, 24;\n"
    "	add.u64 	%rd18, %rd10, %rd17;\n"
    "	mul.f32 	%f123, %f122, %f122;\n"
    "	ld.const.f32 	%f124, [%rd18+8];\n"
    "	mul.f32 	%f125, %f123, %f123;\n"
    "	mul.f32 	%f126, %f125, %f125;\n"
    "	ld.const.f32 	%f127, [%rd18+12];\n"
    "	mov.f32 	%f128, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f129, %f127, %f128;\n"
    "	mul.f32 	%f130, %f126, %f129;\n"
    "	ld.const.f32 	%f131, [%rd18+4];\n"
    "	sub.f32 	%f132, %f131, %f121;\n"
    "	mul.f32 	%f133, %f124, %f132;\n"
    "	mov.f32 	%f134, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f135, %f133, %f134;\n"
    "	ex2.approx.f32 	%f136, %f135;\n"
    "	ld.const.f32 	%f137, [%rd18+0];\n"
    "	mov.f32 	%f138, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f139, %f137, %f138;\n"
    "	mul.f32 	%f140, %f136, %f139;\n"
    "	mul.f32 	%f141, %f124, %f140;\n"
    "	mul.f32 	%f142, %f122, %f141;\n"
    "	sub.f32 	%f143, %f142, %f130;\n"
    "	ld.const.f32 	%f144, [%rd18+16];\n"
    "	mov.f32 	%f145, 0f41000000;   	// 8\n"
    "	mul.f32 	%f146, %f144, %f145;\n"
    "	mul.f32 	%f147, %f126, %f146;\n"
    "	mul.f32 	%f148, %f123, %f147;\n"
    "	sub.f32 	%f149, %f143, %f148;\n"
    "	ld.const.f32 	%f150, [%rd18+20];\n"
    "	mul.f32 	%f151, %f122, %f123;\n"
    "	mad.f32 	%f152, %f150, %f151, %f149;\n"
    "	mov.f32 	%f153, %f2;\n"
    "	mov.f32 	%f154, %f98;\n"
    "	mad.f32 	%f155, %f154, %f152, %f153;\n"
    "	mov.f32 	%f2, %f155;\n"
    "	mov.f32 	%f156, %f4;\n"
    "	mov.f32 	%f157, %f109;\n"
    "	mad.f32 	%f158, %f157, %f152, %f156;\n"
    "	mov.f32 	%f4, %f158;\n"
    "	mov.f32 	%f159, %f6;\n"
    "	mad.f32 	%f160, %f117, %f152, %f159;\n"
    "	mov.f32 	%f6, %f160;\n"
    "$Lt_4_35330:\n"
    "	.loc	3	509	0\n"
    "	ld.shared.s32 	%r25, [%rd11+44];\n"
    "	add.s32 	%r26, %r25, %r6;\n"
    "	ld.shared.f32 	%f161, [%rd11+32];\n"
    "	sub.f32 	%f162, %f20, %f161;\n"
    "	mov.f32 	%f163, %f162;\n"
    "	mul.f32 	%f164, %f14, %f163;\n"
    "	cvt.rni.f32.f32 	%f165, %f164;\n"
    "	mul.f32 	%f166, %f13, %f165;\n"
    "	sub.f32 	%f167, %f162, %f166;\n"
    "	mov.f32 	%f168, %f167;\n"
    "	mov.f32 	%f169, 0f00000000;   	// 0\n"
    "	mad.f32 	%f170, %f167, %f167, %f169;\n"
    "	ld.shared.f32 	%f171, [%rd11+36];\n"
    "	sub.f32 	%f172, %f19, %f171;\n"
    "	mov.f32 	%f173, %f172;\n"
    "	mov.f32 	%f174, %f173;\n"
    "	mul.f32 	%f175, %f14, %f173;\n"
    "	cvt.rni.f32.f32 	%f176, %f175;\n"
    "	mul.f32 	%f177, %f13, %f176;\n"
    "	sub.f32 	%f178, %f172, %f177;\n"
    "	mov.f32 	%f179, %f178;\n"
    "	mad.f32 	%f180, %f178, %f178, %f170;\n"
    "	ld.shared.f32 	%f181, [%rd11+40];\n"
    "	sub.f32 	%f182, %f18, %f181;\n"
    "	mov.f32 	%f183, %f182;\n"
    "	mul.f32 	%f184, %f182, %f14;\n"
    "	cvt.rni.f32.f32 	%f185, %f184;\n"
    "	mul.f32 	%f186, %f13, %f185;\n"
    "	sub.f32 	%f187, %f182, %f186;\n"
    "	mov.f32 	%f188, %f187;\n"
    "	mad.f32 	%f189, %f187, %f187, %f180;\n"
    "	mov.f32 	%f190, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p4, %f189, %f190;\n"
    "	@!%p4 bra 	$Lt_4_35842;\n"
    "	sqrt.approx.f32 	%f191, %f189;\n"
    "	rcp.approx.f32 	%f192, %f191;\n"
    "	cvt.s64.s32 	%rd19, %r26;\n"
    "	mul.wide.s32 	%rd20, %r26, 24;\n"
    "	add.u64 	%rd21, %rd10, %rd20;\n"
    "	mul.f32 	%f193, %f192, %f192;\n"
    "	ld.const.f32 	%f194, [%rd21+8];\n"
    "	mul.f32 	%f195, %f193, %f193;\n"
    "	mul.f32 	%f196, %f195, %f195;\n"
    "	ld.const.f32 	%f197, [%rd21+12];\n"
    "	mov.f32 	%f198, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f199, %f197, %f198;\n"
    "	mul.f32 	%f200, %f196, %f199;\n"
    "	ld.const.f32 	%f201, [%rd21+4];\n"
    "	sub.f32 	%f202, %f201, %f191;\n"
    "	mul.f32 	%f203, %f194, %f202;\n"
    "	mov.f32 	%f204, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f205, %f203, %f204;\n"
    "	ex2.approx.f32 	%f206, %f205;\n"
    "	ld.const.f32 	%f207, [%rd21+0];\n"
    "	mov.f32 	%f208, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f209, %f207, %f208;\n"
    "	mul.f32 	%f210, %f206, %f209;\n"
    "	mul.f32 	%f211, %f194, %f210;\n"
    "	mul.f32 	%f212, %f192, %f211;\n"
    "	sub.f32 	%f213, %f212, %f200;\n"
    "	ld.const.f32 	%f214, [%rd21+16];\n"
    "	mov.f32 	%f215, 0f41000000;   	// 8\n"
    "	mul.f32 	%f216, %f214, %f215;\n"
    "	mul.f32 	%f217, %f196, %f216;\n"
    "	mul.f32 	%f218, %f193, %f217;\n"
    "	sub.f32 	%f219, %f213, %f218;\n"
    "	ld.const.f32 	%f220, [%rd21+20];\n"
    "	mul.f32 	%f221, %f192, %f193;\n"
    "	mad.f32 	%f222, %f220, %f221, %f219;\n"
    "	mov.f32 	%f223, %f2;\n"
    "	mov.f32 	%f224, %f168;\n"
    "	mad.f32 	%f225, %f224, %f222, %f223;\n"
    "	mov.f32 	%f2, %f225;\n"
    "	mov.f32 	%f226, %f4;\n"
    "	mov.f32 	%f227, %f179;\n"
    "	mad.f32 	%f228, %f227, %f222, %f226;\n"
    "	mov.f32 	%f4, %f228;\n"
    "	mov.f32 	%f229, %f6;\n"
    "	mad.f32 	%f230, %f187, %f222, %f229;\n"
    "	mov.f32 	%f6, %f230;\n"
    "$Lt_4_35842:\n"
    "	.loc	3	510	0\n"
    "	ld.shared.s32 	%r27, [%rd11+60];\n"
    "	add.s32 	%r28, %r27, %r6;\n"
    "	ld.shared.f32 	%f231, [%rd11+48];\n"
    "	sub.f32 	%f232, %f20, %f231;\n"
    "	mov.f32 	%f233, %f232;\n"
    "	mul.f32 	%f234, %f14, %f233;\n"
    "	cvt.rni.f32.f32 	%f235, %f234;\n"
    "	mul.f32 	%f236, %f13, %f235;\n"
    "	sub.f32 	%f237, %f232, %f236;\n"
    "	mov.f32 	%f238, %f237;\n"
    "	mov.f32 	%f239, 0f00000000;   	// 0\n"
    "	mad.f32 	%f240, %f237, %f237, %f239;\n"
    "	ld.shared.f32 	%f241, [%rd11+52];\n"
    "	sub.f32 	%f242, %f19, %f241;\n"
    "	mov.f32 	%f243, %f242;\n"
    "	mov.f32 	%f244, %f243;\n"
    "	mul.f32 	%f245, %f14, %f243;\n"
    "	cvt.rni.f32.f32 	%f246, %f245;\n"
    "	mul.f32 	%f247, %f13, %f246;\n"
    "	sub.f32 	%f248, %f242, %f247;\n"
    "	mov.f32 	%f249, %f248;\n"
    "	mad.f32 	%f250, %f248, %f248, %f240;\n"
    "	ld.shared.f32 	%f251, [%rd11+56];\n"
    "	sub.f32 	%f252, %f18, %f251;\n"
    "	mov.f32 	%f253, %f252;\n"
    "	mul.f32 	%f254, %f252, %f14;\n"
    "	cvt.rni.f32.f32 	%f255, %f254;\n"
    "	mul.f32 	%f256, %f13, %f255;\n"
    "	sub.f32 	%f257, %f252, %f256;\n"
    "	mov.f32 	%f258, %f257;\n"
    "	mad.f32 	%f259, %f257, %f257, %f250;\n"
    "	mov.f32 	%f260, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p5, %f259, %f260;\n"
    "	@!%p5 bra 	$Lt_4_36354;\n"
    "	sqrt.approx.f32 	%f261, %f259;\n"
    "	rcp.approx.f32 	%f262, %f261;\n"
    "	cvt.s64.s32 	%rd22, %r28;\n"
    "	mul.wide.s32 	%rd23, %r28, 24;\n"
    "	add.u64 	%rd24, %rd10, %rd23;\n"
    "	mul.f32 	%f263, %f262, %f262;\n"
    "	ld.const.f32 	%f264, [%rd24+8];\n"
    "	mul.f32 	%f265, %f263, %f263;\n"
    "	mul.f32 	%f266, %f265, %f265;\n"
    "	ld.const.f32 	%f267, [%rd24+12];\n"
    "	mov.f32 	%f268, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f269, %f267, %f268;\n"
    "	mul.f32 	%f270, %f266, %f269;\n"
    "	ld.const.f32 	%f271, [%rd24+4];\n"
    "	sub.f32 	%f272, %f271, %f261;\n"
    "	mul.f32 	%f273, %f264, %f272;\n"
    "	mov.f32 	%f274, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f275, %f273, %f274;\n"
    "	ex2.approx.f32 	%f276, %f275;\n"
    "	ld.const.f32 	%f277, [%rd24+0];\n"
    "	mov.f32 	%f278, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f279, %f277, %f278;\n"
    "	mul.f32 	%f280, %f276, %f279;\n"
    "	mul.f32 	%f281, %f264, %f280;\n"
    "	mul.f32 	%f282, %f262, %f281;\n"
    "	sub.f32 	%f283, %f282, %f270;\n"
    "	ld.const.f32 	%f284, [%rd24+16];\n"
    "	mov.f32 	%f285, 0f41000000;   	// 8\n"
    "	mul.f32 	%f286, %f284, %f285;\n"
    "	mul.f32 	%f287, %f266, %f286;\n"
    "	mul.f32 	%f288, %f263, %f287;\n"
    "	sub.f32 	%f289, %f283, %f288;\n"
    "	ld.const.f32 	%f290, [%rd24+20];\n"
    "	mul.f32 	%f291, %f262, %f263;\n"
    "	mad.f32 	%f292, %f290, %f291, %f289;\n"
    "	mov.f32 	%f293, %f2;\n"
    "	mov.f32 	%f294, %f238;\n"
    "	mad.f32 	%f295, %f294, %f292, %f293;\n"
    "	mov.f32 	%f2, %f295;\n"
    "	mov.f32 	%f296, %f4;\n"
    "	mov.f32 	%f297, %f249;\n"
    "	mad.f32 	%f298, %f297, %f292, %f296;\n"
    "	mov.f32 	%f4, %f298;\n"
    "	mov.f32 	%f299, %f6;\n"
    "	mad.f32 	%f300, %f257, %f292, %f299;\n"
    "	mov.f32 	%f6, %f300;\n"
    "$Lt_4_36354:\n"
    "	.loc	3	511	0\n"
    "	ld.shared.s32 	%r29, [%rd11+76];\n"
    "	add.s32 	%r30, %r29, %r6;\n"
    "	ld.shared.f32 	%f301, [%rd11+64];\n"
    "	sub.f32 	%f302, %f20, %f301;\n"
    "	mov.f32 	%f303, %f302;\n"
    "	mul.f32 	%f304, %f14, %f303;\n"
    "	cvt.rni.f32.f32 	%f305, %f304;\n"
    "	mul.f32 	%f306, %f13, %f305;\n"
    "	sub.f32 	%f307, %f302, %f306;\n"
    "	mov.f32 	%f308, %f307;\n"
    "	mov.f32 	%f309, 0f00000000;   	// 0\n"
    "	mad.f32 	%f310, %f307, %f307, %f309;\n"
    "	ld.shared.f32 	%f311, [%rd11+68];\n"
    "	sub.f32 	%f312, %f19, %f311;\n"
    "	mov.f32 	%f313, %f312;\n"
    "	mov.f32 	%f314, %f313;\n"
    "	mul.f32 	%f315, %f14, %f313;\n"
    "	cvt.rni.f32.f32 	%f316, %f315;\n"
    "	mul.f32 	%f317, %f13, %f316;\n"
    "	sub.f32 	%f318, %f312, %f317;\n"
    "	mov.f32 	%f319, %f318;\n"
    "	mad.f32 	%f320, %f318, %f318, %f310;\n"
    "	ld.shared.f32 	%f321, [%rd11+72];\n"
    "	sub.f32 	%f322, %f18, %f321;\n"
    "	mov.f32 	%f323, %f322;\n"
    "	mul.f32 	%f324, %f322, %f14;\n"
    "	cvt.rni.f32.f32 	%f325, %f324;\n"
    "	mul.f32 	%f326, %f13, %f325;\n"
    "	sub.f32 	%f327, %f322, %f326;\n"
    "	mov.f32 	%f328, %f327;\n"
    "	mad.f32 	%f329, %f327, %f327, %f320;\n"
    "	mov.f32 	%f330, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p6, %f329, %f330;\n"
    "	@!%p6 bra 	$Lt_4_36866;\n"
    "	sqrt.approx.f32 	%f331, %f329;\n"
    "	rcp.approx.f32 	%f332, %f331;\n"
    "	cvt.s64.s32 	%rd25, %r30;\n"
    "	mul.wide.s32 	%rd26, %r30, 24;\n"
    "	add.u64 	%rd27, %rd10, %rd26;\n"
    "	mul.f32 	%f333, %f332, %f332;\n"
    "	ld.const.f32 	%f334, [%rd27+8];\n"
    "	mul.f32 	%f335, %f333, %f333;\n"
    "	mul.f32 	%f336, %f335, %f335;\n"
    "	ld.const.f32 	%f337, [%rd27+12];\n"
    "	mov.f32 	%f338, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f339, %f337, %f338;\n"
    "	mul.f32 	%f340, %f336, %f339;\n"
    "	ld.const.f32 	%f341, [%rd27+4];\n"
    "	sub.f32 	%f342, %f341, %f331;\n"
    "	mul.f32 	%f343, %f334, %f342;\n"
    "	mov.f32 	%f344, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f345, %f343, %f344;\n"
    "	ex2.approx.f32 	%f346, %f345;\n"
    "	ld.const.f32 	%f347, [%rd27+0];\n"
    "	mov.f32 	%f348, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f349, %f347, %f348;\n"
    "	mul.f32 	%f350, %f346, %f349;\n"
    "	mul.f32 	%f351, %f334, %f350;\n"
    "	mul.f32 	%f352, %f332, %f351;\n"
    "	sub.f32 	%f353, %f352, %f340;\n"
    "	ld.const.f32 	%f354, [%rd27+16];\n"
    "	mov.f32 	%f355, 0f41000000;   	// 8\n"
    "	mul.f32 	%f356, %f354, %f355;\n"
    "	mul.f32 	%f357, %f336, %f356;\n"
    "	mul.f32 	%f358, %f333, %f357;\n"
    "	sub.f32 	%f359, %f353, %f358;\n"
    "	ld.const.f32 	%f360, [%rd27+20];\n"
    "	mul.f32 	%f361, %f332, %f333;\n"
    "	mad.f32 	%f362, %f360, %f361, %f359;\n"
    "	mov.f32 	%f363, %f2;\n"
    "	mov.f32 	%f364, %f308;\n"
    "	mad.f32 	%f365, %f364, %f362, %f363;\n"
    "	mov.f32 	%f2, %f365;\n"
    "	mov.f32 	%f366, %f4;\n"
    "	mov.f32 	%f367, %f319;\n"
    "	mad.f32 	%f368, %f367, %f362, %f366;\n"
    "	mov.f32 	%f4, %f368;\n"
    "	mov.f32 	%f369, %f6;\n"
    "	mad.f32 	%f370, %f327, %f362, %f369;\n"
    "	mov.f32 	%f6, %f370;\n"
    "$Lt_4_36866:\n"
    "	.loc	3	512	0\n"
    "	ld.shared.s32 	%r31, [%rd11+92];\n"
    "	add.s32 	%r32, %r31, %r6;\n"
    "	ld.shared.f32 	%f371, [%rd11+80];\n"
    "	sub.f32 	%f372, %f20, %f371;\n"
    "	mov.f32 	%f373, %f372;\n"
    "	mul.f32 	%f374, %f14, %f373;\n"
    "	cvt.rni.f32.f32 	%f375, %f374;\n"
    "	mul.f32 	%f376, %f13, %f375;\n"
    "	sub.f32 	%f377, %f372, %f376;\n"
    "	mov.f32 	%f378, %f377;\n"
    "	mov.f32 	%f379, 0f00000000;   	// 0\n"
    "	mad.f32 	%f380, %f377, %f377, %f379;\n"
    "	ld.shared.f32 	%f381, [%rd11+84];\n"
    "	sub.f32 	%f382, %f19, %f381;\n"
    "	mov.f32 	%f383, %f382;\n"
    "	mov.f32 	%f384, %f383;\n"
    "	mul.f32 	%f385, %f14, %f383;\n"
    "	cvt.rni.f32.f32 	%f386, %f385;\n"
    "	mul.f32 	%f387, %f13, %f386;\n"
    "	sub.f32 	%f388, %f382, %f387;\n"
    "	mov.f32 	%f389, %f388;\n"
    "	mad.f32 	%f390, %f388, %f388, %f380;\n"
    "	ld.shared.f32 	%f391, [%rd11+88];\n"
    "	sub.f32 	%f392, %f18, %f391;\n"
    "	mov.f32 	%f393, %f392;\n"
    "	mul.f32 	%f394, %f392, %f14;\n"
    "	cvt.rni.f32.f32 	%f395, %f394;\n"
    "	mul.f32 	%f396, %f13, %f395;\n"
    "	sub.f32 	%f397, %f392, %f396;\n"
    "	mov.f32 	%f398, %f397;\n"
    "	mad.f32 	%f399, %f397, %f397, %f390;\n"
    "	mov.f32 	%f400, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p7, %f399, %f400;\n"
    "	@!%p7 bra 	$Lt_4_37378;\n"
    "	sqrt.approx.f32 	%f401, %f399;\n"
    "	rcp.approx.f32 	%f402, %f401;\n"
    "	cvt.s64.s32 	%rd28, %r32;\n"
    "	mul.wide.s32 	%rd29, %r32, 24;\n"
    "	add.u64 	%rd30, %rd10, %rd29;\n"
    "	mul.f32 	%f403, %f402, %f402;\n"
    "	ld.const.f32 	%f404, [%rd30+8];\n"
    "	mul.f32 	%f405, %f403, %f403;\n"
    "	mul.f32 	%f406, %f405, %f405;\n"
    "	ld.const.f32 	%f407, [%rd30+12];\n"
    "	mov.f32 	%f408, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f409, %f407, %f408;\n"
    "	mul.f32 	%f410, %f406, %f409;\n"
    "	ld.const.f32 	%f411, [%rd30+4];\n"
    "	sub.f32 	%f412, %f411, %f401;\n"
    "	mul.f32 	%f413, %f404, %f412;\n"
    "	mov.f32 	%f414, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f415, %f413, %f414;\n"
    "	ex2.approx.f32 	%f416, %f415;\n"
    "	ld.const.f32 	%f417, [%rd30+0];\n"
    "	mov.f32 	%f418, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f419, %f417, %f418;\n"
    "	mul.f32 	%f420, %f416, %f419;\n"
    "	mul.f32 	%f421, %f404, %f420;\n"
    "	mul.f32 	%f422, %f402, %f421;\n"
    "	sub.f32 	%f423, %f422, %f410;\n"
    "	ld.const.f32 	%f424, [%rd30+16];\n"
    "	mov.f32 	%f425, 0f41000000;   	// 8\n"
    "	mul.f32 	%f426, %f424, %f425;\n"
    "	mul.f32 	%f427, %f406, %f426;\n"
    "	mul.f32 	%f428, %f403, %f427;\n"
    "	sub.f32 	%f429, %f423, %f428;\n"
    "	ld.const.f32 	%f430, [%rd30+20];\n"
    "	mul.f32 	%f431, %f402, %f403;\n"
    "	mad.f32 	%f432, %f430, %f431, %f429;\n"
    "	mov.f32 	%f433, %f2;\n"
    "	mov.f32 	%f434, %f378;\n"
    "	mad.f32 	%f435, %f434, %f432, %f433;\n"
    "	mov.f32 	%f2, %f435;\n"
    "	mov.f32 	%f436, %f4;\n"
    "	mov.f32 	%f437, %f389;\n"
    "	mad.f32 	%f438, %f437, %f432, %f436;\n"
    "	mov.f32 	%f4, %f438;\n"
    "	mov.f32 	%f439, %f6;\n"
    "	mad.f32 	%f440, %f397, %f432, %f439;\n"
    "	mov.f32 	%f6, %f440;\n"
    "$Lt_4_37378:\n"
    "	.loc	3	513	0\n"
    "	ld.shared.s32 	%r33, [%rd11+108];\n"
    "	add.s32 	%r34, %r33, %r6;\n"
    "	ld.shared.f32 	%f441, [%rd11+96];\n"
    "	sub.f32 	%f442, %f20, %f441;\n"
    "	mov.f32 	%f443, %f442;\n"
    "	mul.f32 	%f444, %f14, %f443;\n"
    "	cvt.rni.f32.f32 	%f445, %f444;\n"
    "	mul.f32 	%f446, %f13, %f445;\n"
    "	sub.f32 	%f447, %f442, %f446;\n"
    "	mov.f32 	%f448, %f447;\n"
    "	mov.f32 	%f449, 0f00000000;   	// 0\n"
    "	mad.f32 	%f450, %f447, %f447, %f449;\n"
    "	ld.shared.f32 	%f451, [%rd11+100];\n"
    "	sub.f32 	%f452, %f19, %f451;\n"
    "	mov.f32 	%f453, %f452;\n"
    "	mov.f32 	%f454, %f453;\n"
    "	mul.f32 	%f455, %f14, %f453;\n"
    "	cvt.rni.f32.f32 	%f456, %f455;\n"
    "	mul.f32 	%f457, %f13, %f456;\n"
    "	sub.f32 	%f458, %f452, %f457;\n"
    "	mov.f32 	%f459, %f458;\n"
    "	mad.f32 	%f460, %f458, %f458, %f450;\n"
    "	ld.shared.f32 	%f461, [%rd11+104];\n"
    "	sub.f32 	%f462, %f18, %f461;\n"
    "	mov.f32 	%f463, %f462;\n"
    "	mul.f32 	%f464, %f462, %f14;\n"
    "	cvt.rni.f32.f32 	%f465, %f464;\n"
    "	mul.f32 	%f466, %f13, %f465;\n"
    "	sub.f32 	%f467, %f462, %f466;\n"
    "	mov.f32 	%f468, %f467;\n"
    "	mad.f32 	%f469, %f467, %f467, %f460;\n"
    "	mov.f32 	%f470, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p8, %f469, %f470;\n"
    "	@!%p8 bra 	$Lt_4_37890;\n"
    "	sqrt.approx.f32 	%f471, %f469;\n"
    "	rcp.approx.f32 	%f472, %f471;\n"
    "	cvt.s64.s32 	%rd31, %r34;\n"
    "	mul.wide.s32 	%rd32, %r34, 24;\n"
    "	add.u64 	%rd33, %rd10, %rd32;\n"
    "	mul.f32 	%f473, %f472, %f472;\n"
    "	ld.const.f32 	%f474, [%rd33+8];\n"
    "	mul.f32 	%f475, %f473, %f473;\n"
    "	mul.f32 	%f476, %f475, %f475;\n"
    "	ld.const.f32 	%f477, [%rd33+12];\n"
    "	mov.f32 	%f478, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f479, %f477, %f478;\n"
    "	mul.f32 	%f480, %f476, %f479;\n"
    "	ld.const.f32 	%f481, [%rd33+4];\n"
    "	sub.f32 	%f482, %f481, %f471;\n"
    "	mul.f32 	%f483, %f474, %f482;\n"
    "	mov.f32 	%f484, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f485, %f483, %f484;\n"
    "	ex2.approx.f32 	%f486, %f485;\n"
    "	ld.const.f32 	%f487, [%rd33+0];\n"
    "	mov.f32 	%f488, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f489, %f487, %f488;\n"
    "	mul.f32 	%f490, %f486, %f489;\n"
    "	mul.f32 	%f491, %f474, %f490;\n"
    "	mul.f32 	%f492, %f472, %f491;\n"
    "	sub.f32 	%f493, %f492, %f480;\n"
    "	ld.const.f32 	%f494, [%rd33+16];\n"
    "	mov.f32 	%f495, 0f41000000;   	// 8\n"
    "	mul.f32 	%f496, %f494, %f495;\n"
    "	mul.f32 	%f497, %f476, %f496;\n"
    "	mul.f32 	%f498, %f473, %f497;\n"
    "	sub.f32 	%f499, %f493, %f498;\n"
    "	ld.const.f32 	%f500, [%rd33+20];\n"
    "	mul.f32 	%f501, %f472, %f473;\n"
    "	mad.f32 	%f502, %f500, %f501, %f499;\n"
    "	mov.f32 	%f503, %f2;\n"
    "	mov.f32 	%f504, %f448;\n"
    "	mad.f32 	%f505, %f504, %f502, %f503;\n"
    "	mov.f32 	%f2, %f505;\n"
    "	mov.f32 	%f506, %f4;\n"
    "	mov.f32 	%f507, %f459;\n"
    "	mad.f32 	%f508, %f507, %f502, %f506;\n"
    "	mov.f32 	%f4, %f508;\n"
    "	mov.f32 	%f509, %f6;\n"
    "	mad.f32 	%f510, %f467, %f502, %f509;\n"
    "	mov.f32 	%f6, %f510;\n"
    "$Lt_4_37890:\n"
    "	.loc	3	514	0\n"
    "	ld.shared.s32 	%r35, [%rd11+124];\n"
    "	add.s32 	%r36, %r35, %r6;\n"
    "	ld.shared.f32 	%f511, [%rd11+112];\n"
    "	sub.f32 	%f512, %f20, %f511;\n"
    "	mov.f32 	%f513, %f512;\n"
    "	mul.f32 	%f514, %f14, %f513;\n"
    "	cvt.rni.f32.f32 	%f515, %f514;\n"
    "	mul.f32 	%f516, %f13, %f515;\n"
    "	sub.f32 	%f517, %f512, %f516;\n"
    "	mov.f32 	%f518, %f517;\n"
    "	mov.f32 	%f519, 0f00000000;   	// 0\n"
    "	mad.f32 	%f520, %f517, %f517, %f519;\n"
    "	ld.shared.f32 	%f521, [%rd11+116];\n"
    "	sub.f32 	%f522, %f19, %f521;\n"
    "	mov.f32 	%f523, %f522;\n"
    "	mov.f32 	%f524, %f523;\n"
    "	mul.f32 	%f525, %f14, %f523;\n"
    "	cvt.rni.f32.f32 	%f526, %f525;\n"
    "	mul.f32 	%f527, %f13, %f526;\n"
    "	sub.f32 	%f528, %f522, %f527;\n"
    "	mov.f32 	%f529, %f528;\n"
    "	mad.f32 	%f530, %f528, %f528, %f520;\n"
    "	ld.shared.f32 	%f531, [%rd11+120];\n"
    "	sub.f32 	%f532, %f18, %f531;\n"
    "	mov.f32 	%f533, %f532;\n"
    "	mul.f32 	%f534, %f532, %f14;\n"
    "	cvt.rni.f32.f32 	%f535, %f534;\n"
    "	mul.f32 	%f536, %f13, %f535;\n"
    "	sub.f32 	%f537, %f532, %f536;\n"
    "	mov.f32 	%f538, %f537;\n"
    "	mad.f32 	%f539, %f537, %f537, %f530;\n"
    "	mov.f32 	%f540, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p9, %f539, %f540;\n"
    "	@!%p9 bra 	$Lt_4_38402;\n"
    "	sqrt.approx.f32 	%f541, %f539;\n"
    "	rcp.approx.f32 	%f542, %f541;\n"
    "	cvt.s64.s32 	%rd34, %r36;\n"
    "	mul.wide.s32 	%rd35, %r36, 24;\n"
    "	add.u64 	%rd36, %rd10, %rd35;\n"
    "	mul.f32 	%f543, %f542, %f542;\n"
    "	ld.const.f32 	%f544, [%rd36+8];\n"
    "	mul.f32 	%f545, %f543, %f543;\n"
    "	mul.f32 	%f546, %f545, %f545;\n"
    "	ld.const.f32 	%f547, [%rd36+12];\n"
    "	mov.f32 	%f548, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f549, %f547, %f548;\n"
    "	mul.f32 	%f550, %f546, %f549;\n"
    "	ld.const.f32 	%f551, [%rd36+4];\n"
    "	sub.f32 	%f552, %f551, %f541;\n"
    "	mul.f32 	%f553, %f544, %f552;\n"
    "	mov.f32 	%f554, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f555, %f553, %f554;\n"
    "	ex2.approx.f32 	%f556, %f555;\n"
    "	ld.const.f32 	%f557, [%rd36+0];\n"
    "	mov.f32 	%f558, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f559, %f557, %f558;\n"
    "	mul.f32 	%f560, %f556, %f559;\n"
    "	mul.f32 	%f561, %f544, %f560;\n"
    "	mul.f32 	%f562, %f542, %f561;\n"
    "	sub.f32 	%f563, %f562, %f550;\n"
    "	ld.const.f32 	%f564, [%rd36+16];\n"
    "	mov.f32 	%f565, 0f41000000;   	// 8\n"
    "	mul.f32 	%f566, %f564, %f565;\n"
    "	mul.f32 	%f567, %f546, %f566;\n"
    "	mul.f32 	%f568, %f543, %f567;\n"
    "	sub.f32 	%f569, %f563, %f568;\n"
    "	ld.const.f32 	%f570, [%rd36+20];\n"
    "	mul.f32 	%f571, %f542, %f543;\n"
    "	mad.f32 	%f572, %f570, %f571, %f569;\n"
    "	mov.f32 	%f573, %f2;\n"
    "	mov.f32 	%f574, %f518;\n"
    "	mad.f32 	%f575, %f574, %f572, %f573;\n"
    "	mov.f32 	%f2, %f575;\n"
    "	mov.f32 	%f576, %f4;\n"
    "	mov.f32 	%f577, %f529;\n"
    "	mad.f32 	%f578, %f577, %f572, %f576;\n"
    "	mov.f32 	%f4, %f578;\n"
    "	mov.f32 	%f579, %f6;\n"
    "	mad.f32 	%f580, %f537, %f572, %f579;\n"
    "	mov.f32 	%f6, %f580;\n"
    "$Lt_4_38402:\n"
    "	add.s32 	%r20, %r20, 8;\n"
    "	add.u64 	%rd12, %rd12, 128;\n"
    "	add.u64 	%rd11, %rd11, 128;\n"
    "	mov.u32 	%r37, 255;\n"
    "	setp.le.s32 	%p10, %r20, %r37;\n"
    "	@%p10 bra 	$Lt_4_34562;\n"
    "	add.s32 	%r17, %r17, 256;\n"
    "	add.s32 	%r15, %r15, 256;\n"
    "	add.u64 	%rd9, %rd9, 4096;\n"
    "	setp.lt.s32 	%p11, %r15, %r16;\n"
    "	@%p11 bra 	$Lt_4_33794;\n"
    "	bra.uni 	$Lt_4_33282;\n"
    "$Lt_4_41986:\n"
    "	mov.s32 	%r17, 0;\n"
    "	mov.u64 	%rd10, c_matrix;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_15942_35_non_const_s_xj29768;\n"
    "$Lt_4_33282:\n"
    "	.loc	3	517	0\n"
    "	bar.sync 	0;\n"
    "	sub.s32 	%r38, %r7, %r17;\n"
    "	setp.le.s32 	%p12, %r38, %r1;\n"
    "	@%p12 bra 	$Lt_4_39426;\n"
    "	.loc	3	518	0\n"
    "	cvt.s64.s32 	%rd37, %r1;\n"
    "	mul.wide.s32 	%rd38, %r1, 16;\n"
    "	add.u64 	%rd39, %rd38, %rd5;\n"
    "	add.s32 	%r39, %r17, %r1;\n"
    "	cvt.s64.s32 	%rd40, %r39;\n"
    "	mul.wide.s32 	%rd41, %r39, 16;\n"
    "	add.u64 	%rd9, %rd1, %rd41;\n"
    "	ld.global.f32 	%f581, [%rd9+0];\n"
    "	st.shared.f32 	[%rd39+0], %f581;\n"
    "	ld.global.f32 	%f582, [%rd9+4];\n"
    "	st.shared.f32 	[%rd39+4], %f582;\n"
    "	ld.global.f32 	%f583, [%rd9+8];\n"
    "	st.shared.f32 	[%rd39+8], %f583;\n"
    "	ld.global.s32 	%r40, [%rd9+12];\n"
    "	st.shared.s32 	[%rd39+12], %r40;\n"
    "$Lt_4_39426:\n"
    "	.loc	3	519	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r41, 0;\n"
    "	setp.le.s32 	%p13, %r38, %r41;\n"
    "	@%p13 bra 	$Lt_4_39938;\n"
    "	mov.s32 	%r42, %r38;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai11_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	mov.s64 	%rd42, %rd5;\n"
    "	mov.s64 	%rd43, %rd5;\n"
    "	mov.s32 	%r43, 0;\n"
    "	mov.f32 	%f18, %f12;\n"
    "	mov.f32 	%f19, %f10;\n"
    "	mov.f32 	%f20, %f8;\n"
    "	mov.s32 	%r44, %r42;\n"
    "$Lt_4_40450:\n"
    " //<loop> Loop body line 519, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	521	0\n"
    "	ld.shared.s32 	%r45, [%rd42+12];\n"
    "	add.s32 	%r46, %r45, %r6;\n"
    "	ld.shared.f32 	%f584, [%rd43+0];\n"
    "	sub.f32 	%f585, %f20, %f584;\n"
    "	mov.f32 	%f586, %f585;\n"
    "	mul.f32 	%f587, %f14, %f586;\n"
    "	cvt.rni.f32.f32 	%f588, %f587;\n"
    "	.loc	3	519	0\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai11_xmax];\n"
    "	.loc	3	521	0\n"
    "	mul.f32 	%f589, %f13, %f588;\n"
    "	sub.f32 	%f590, %f585, %f589;\n"
    "	mov.f32 	%f591, %f590;\n"
    "	mov.f32 	%f592, 0f00000000;   	// 0\n"
    "	mad.f32 	%f593, %f590, %f590, %f592;\n"
    "	ld.shared.f32 	%f594, [%rd43+4];\n"
    "	sub.f32 	%f595, %f19, %f594;\n"
    "	mov.f32 	%f596, %f595;\n"
    "	mul.f32 	%f597, %f14, %f596;\n"
    "	cvt.rni.f32.f32 	%f598, %f597;\n"
    "	mul.f32 	%f599, %f13, %f598;\n"
    "	sub.f32 	%f600, %f595, %f599;\n"
    "	mov.f32 	%f601, %f600;\n"
    "	mad.f32 	%f602, %f600, %f600, %f593;\n"
    "	ld.shared.f32 	%f603, [%rd43+8];\n"
    "	sub.f32 	%f604, %f18, %f603;\n"
    "	mul.f32 	%f605, %f604, %f14;\n"
    "	cvt.rni.f32.f32 	%f606, %f605;\n"
    "	mul.f32 	%f607, %f13, %f606;\n"
    "	sub.f32 	%f608, %f604, %f607;\n"
    "	mad.f32 	%f609, %f608, %f608, %f602;\n"
    "	mov.f32 	%f610, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p14, %f609, %f610;\n"
    "	@!%p14 bra 	$Lt_4_40706;\n"
    "	sqrt.approx.f32 	%f611, %f609;\n"
    "	rcp.approx.f32 	%f612, %f611;\n"
    "	cvt.s64.s32 	%rd44, %r46;\n"
    "	mul.wide.s32 	%rd45, %r46, 24;\n"
    "	add.u64 	%rd46, %rd10, %rd45;\n"
    "	mul.f32 	%f613, %f612, %f612;\n"
    "	ld.const.f32 	%f614, [%rd46+8];\n"
    "	mul.f32 	%f615, %f613, %f613;\n"
    "	mul.f32 	%f616, %f615, %f615;\n"
    "	ld.const.f32 	%f617, [%rd46+12];\n"
    "	mov.f32 	%f618, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f619, %f617, %f618;\n"
    "	mul.f32 	%f620, %f616, %f619;\n"
    "	ld.const.f32 	%f621, [%rd46+4];\n"
    "	sub.f32 	%f622, %f621, %f611;\n"
    "	mul.f32 	%f623, %f614, %f622;\n"
    "	mov.f32 	%f624, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f625, %f623, %f624;\n"
    "	ex2.approx.f32 	%f626, %f625;\n"
    "	ld.const.f32 	%f627, [%rd46+0];\n"
    "	mov.f32 	%f628, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f629, %f627, %f628;\n"
    "	mul.f32 	%f630, %f626, %f629;\n"
    "	mul.f32 	%f631, %f614, %f630;\n"
    "	mul.f32 	%f632, %f612, %f631;\n"
    "	sub.f32 	%f633, %f632, %f620;\n"
    "	ld.const.f32 	%f634, [%rd46+16];\n"
    "	mov.f32 	%f635, 0f41000000;   	// 8\n"
    "	mul.f32 	%f636, %f634, %f635;\n"
    "	mul.f32 	%f637, %f616, %f636;\n"
    "	mul.f32 	%f638, %f613, %f637;\n"
    "	sub.f32 	%f639, %f633, %f638;\n"
    "	ld.const.f32 	%f640, [%rd46+20];\n"
    "	mul.f32 	%f641, %f612, %f613;\n"
    "	mad.f32 	%f642, %f640, %f641, %f639;\n"
    "	mov.f32 	%f643, %f2;\n"
    "	mov.f32 	%f644, %f591;\n"
    "	mad.f32 	%f645, %f644, %f642, %f643;\n"
    "	mov.f32 	%f2, %f645;\n"
    "	mov.f32 	%f646, %f4;\n"
    "	mov.f32 	%f647, %f601;\n"
    "	mad.f32 	%f648, %f647, %f642, %f646;\n"
    "	mov.f32 	%f4, %f648;\n"
    "	mov.f32 	%f649, %f6;\n"
    "	mad.f32 	%f650, %f608, %f642, %f649;\n"
    "	mov.f32 	%f6, %f650;\n"
    "$Lt_4_40706:\n"
    "	add.s32 	%r43, %r43, 1;\n"
    "	add.u64 	%rd43, %rd43, 16;\n"
    "	add.u64 	%rd42, %rd42, 16;\n"
    "	setp.ne.s32 	%p15, %r38, %r43;\n"
    "	@%p15 bra 	$Lt_4_40450;\n"
    "	mov.f32 	%f651, %f608;\n"
    "$Lt_4_39938:\n"
    "	setp.le.s32 	%p16, %r7, %r3;\n"
    "	@%p16 bra 	$Lt_4_41474;\n"
    "	.loc	3	523	0\n"
    "	ld.param.u64 	%rd47, [__cudaparm_nacl_kernel_gpu_kadai11_fvec];\n"
    "	mul.lo.s32 	%r47, %r3, 3;\n"
    "	cvt.s64.s32 	%rd48, %r47;\n"
    "	mul.wide.s32 	%rd49, %r47, 4;\n"
    "	add.u64 	%rd50, %rd47, %rd49;\n"
    "	mov.f32 	%f652, %f2;\n"
    "	st.global.f32 	[%rd50+0], %f652;\n"
    "	mov.f32 	%f653, %f4;\n"
    "	st.global.f32 	[%rd50+4], %f653;\n"
    "	mov.f32 	%f654, %f6;\n"
    "	st.global.f32 	[%rd50+8], %f654;\n"
    "$Lt_4_41474:\n"
    "	.loc	3	524	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_gpu_kadai11:\n"
    "	} // nacl_kernel_gpu_kadai11\n"
    "\n"
    "	.entry nacl_kernel_gpu_kadai12 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai12_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai12_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_gpu_kadai12_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai12_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_gpu_kadai12_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_gpu_kadai12_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<49>;\n"
    "	.reg .u64 %rd<52>;\n"
    "	.reg .f32 %f<697>;\n"
    "	.reg .pred %p<18>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_16104_35_non_const_s_xj33904[4096];\n"
    "	.loc	3	651	0\n"
    "$LDWbegin_nacl_kernel_gpu_kadai12:\n"
    "	.loc	3	661	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	662	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai12_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	663	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_gpu_kadai12_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_gpu_kadai12_n];\n"
    "	sub.s32 	%r8, %r7, 255;\n"
    "	mov.u32 	%r9, 0;\n"
    "	setp.le.s32 	%p1, %r8, %r9;\n"
    "	@%p1 bra 	$Lt_5_37378;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_16104_35_non_const_s_xj33904;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai12_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_gpu_kadai12_n];\n"
    "	shr.s32 	%r10, %r7, 31;\n"
    "	mov.s32 	%r11, 255;\n"
    "	and.b32 	%r12, %r10, %r11;\n"
    "	add.s32 	%r13, %r12, %r7;\n"
    "	shr.s32 	%r14, %r13, 8;\n"
    "	mov.s32 	%r15, %r1;\n"
    "	add.s32 	%r16, %r8, %r1;\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd7, %rd5;\n"
    "	.loc	3	662	0\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_gpu_kadai12_x];\n"
    "	.loc	3	663	0\n"
    "	add.u64 	%rd9, %rd7, %rd1;\n"
    "	mov.s32 	%r17, 0;\n"
    "	mov.u64 	%rd10, c_matrix;\n"
    "	mov.s32 	%r18, %r14;\n"
    "$Lt_5_33794:\n"
    " //<loop> Loop body line 663, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	665	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	666	0\n"
    "	ld.global.f32 	%f15, [%rd9+0];\n"
    "	st.shared.f32 	[%rd8+0], %f15;\n"
    "	ld.global.f32 	%f16, [%rd9+4];\n"
    "	st.shared.f32 	[%rd8+4], %f16;\n"
    "	ld.global.f32 	%f17, [%rd9+8];\n"
    "	st.shared.f32 	[%rd8+8], %f17;\n"
    "	ld.global.s32 	%r19, [%rd9+12];\n"
    "	st.shared.s32 	[%rd8+12], %r19;\n"
    "	.loc	3	667	0\n"
    "	bar.sync 	0;\n"
    "	mov.s64 	%rd11, %rd5;\n"
    "	mov.s64 	%rd12, %rd5;\n"
    "	mov.s32 	%r20, 0;\n"
    "	mov.f32 	%f18, %f12;\n"
    "	mov.f32 	%f19, %f10;\n"
    "	mov.f32 	%f20, %f8;\n"
    "$Lt_5_34562:\n"
    " //<loop> Loop body line 667, nesting depth: 2, iterations: 32\n"
    "	.loc	3	669	0\n"
    "	ld.shared.s32 	%r21, [%rd11+12];\n"
    "	add.s32 	%r22, %r21, %r6;\n"
    "	ld.shared.f32 	%f21, [%rd12+0];\n"
    "	sub.f32 	%f22, %f20, %f21;\n"
    "	mov.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f14, %f23;\n"
    "	cvt.rni.f32.f32 	%f25, %f24;\n"
    "	mul.f32 	%f26, %f13, %f25;\n"
    "	sub.f32 	%f27, %f22, %f26;\n"
    "	mov.f32 	%f28, %f27;\n"
    "	mov.f32 	%f29, 0f00000000;    	// 0\n"
    "	mad.f32 	%f30, %f27, %f27, %f29;\n"
    "	ld.shared.f32 	%f31, [%rd12+4];\n"
    "	sub.f32 	%f32, %f19, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	mov.f32 	%f34, %f33;\n"
    "	mul.f32 	%f35, %f14, %f33;\n"
    "	cvt.rni.f32.f32 	%f36, %f35;\n"
    "	mul.f32 	%f37, %f13, %f36;\n"
    "	sub.f32 	%f38, %f32, %f37;\n"
    "	mov.f32 	%f39, %f38;\n"
    "	mad.f32 	%f40, %f38, %f38, %f30;\n"
    "	ld.shared.f32 	%f41, [%rd12+8];\n"
    "	sub.f32 	%f42, %f18, %f41;\n"
    "	mov.f32 	%f43, %f42;\n"
    "	mul.f32 	%f44, %f42, %f14;\n"
    "	cvt.rni.f32.f32 	%f45, %f44;\n"
    "	mul.f32 	%f46, %f13, %f45;\n"
    "	sub.f32 	%f47, %f42, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f40;\n"
    "	mov.f32 	%f50, 0f00000000;    	// 0\n"
    "	setp.eq.f32 	%p2, %f49, %f50;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	rcp.approx.f32 	%f52, %f51;\n"
    "	cvt.s64.s32 	%rd13, %r22;\n"
    "	mul.wide.s32 	%rd14, %r22, 24;\n"
    "	add.u64 	%rd15, %rd10, %rd14;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	ld.const.f32 	%f54, [%rd15+12];\n"
    "	ld.const.f32 	%f55, [%rd15+8];\n"
    "	ld.const.f32 	%f56, [%rd15+4];\n"
    "	ld.const.f32 	%f57, [%rd15+0];\n"
    "	ld.const.f32 	%f58, [%rd15+16];\n"
    "	ld.const.f32 	%f59, [%rd15+20];\n"
    "	mul.f32 	%f60, %f53, %f53;\n"
    "	mul.f32 	%f61, %f52, %f53;\n"
    "	mov.f32 	%f62, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f63, %f54, %f62;\n"
    "	sub.f32 	%f64, %f56, %f51;\n"
    "	mov.f32 	%f65, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f66, %f57, %f65;\n"
    "	mov.f32 	%f67, 0f41000000;    	// 8\n"
    "	mul.f32 	%f68, %f58, %f67;\n"
    "	mul.f32 	%f69, %f60, %f60;\n"
    "	mul.f32 	%f70, %f55, %f64;\n"
    "	mul.f32 	%f71, %f63, %f69;\n"
    "	mul.f32 	%f72, %f68, %f69;\n"
    "	mov.f32 	%f73, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f74, %f70, %f73;\n"
    "	ex2.approx.f32 	%f75, %f74;\n"
    "	mul.f32 	%f76, %f66, %f75;\n"
    "	mul.f32 	%f77, %f55, %f76;\n"
    "	mul.f32 	%f78, %f52, %f77;\n"
    "	sub.f32 	%f79, %f78, %f71;\n"
    "	mul.f32 	%f80, %f53, %f72;\n"
    "	sub.f32 	%f81, %f79, %f80;\n"
    "	mad.f32 	%f82, %f59, %f61, %f81;\n"
    "	mov.f32 	%f83, 0f00000000;    	// 0\n"
    "	selp.f32 	%f84, %f83, %f82, %p2;\n"
    "	mov.f32 	%f85, %f2;\n"
    "	mov.f32 	%f86, %f28;\n"
    "	mad.f32 	%f87, %f86, %f84, %f85;\n"
    "	mov.f32 	%f88, %f87;\n"
    "	mov.f32 	%f89, %f4;\n"
    "	mov.f32 	%f90, %f39;\n"
    "	mad.f32 	%f91, %f90, %f84, %f89;\n"
    "	mov.f32 	%f92, %f91;\n"
    "	mov.f32 	%f93, %f6;\n"
    "	mad.f32 	%f94, %f47, %f84, %f93;\n"
    "	mov.f32 	%f95, %f94;\n"
    "	.loc	3	670	0\n"
    "	ld.shared.s32 	%r23, [%rd11+28];\n"
    "	add.s32 	%r24, %r23, %r6;\n"
    "	ld.shared.f32 	%f96, [%rd11+16];\n"
    "	sub.f32 	%f97, %f20, %f96;\n"
    "	mov.f32 	%f98, %f97;\n"
    "	mul.f32 	%f99, %f14, %f98;\n"
    "	cvt.rni.f32.f32 	%f100, %f99;\n"
    "	mul.f32 	%f101, %f13, %f100;\n"
    "	sub.f32 	%f102, %f97, %f101;\n"
    "	mov.f32 	%f103, %f102;\n"
    "	mov.f32 	%f104, 0f00000000;   	// 0\n"
    "	mad.f32 	%f105, %f102, %f102, %f104;\n"
    "	ld.shared.f32 	%f106, [%rd11+20];\n"
    "	sub.f32 	%f107, %f19, %f106;\n"
    "	mov.f32 	%f108, %f107;\n"
    "	mov.f32 	%f109, %f108;\n"
    "	mul.f32 	%f110, %f14, %f108;\n"
    "	cvt.rni.f32.f32 	%f111, %f110;\n"
    "	mul.f32 	%f112, %f13, %f111;\n"
    "	sub.f32 	%f113, %f107, %f112;\n"
    "	mov.f32 	%f114, %f113;\n"
    "	mad.f32 	%f115, %f113, %f113, %f105;\n"
    "	ld.shared.f32 	%f116, [%rd11+24];\n"
    "	sub.f32 	%f117, %f18, %f116;\n"
    "	mov.f32 	%f118, %f117;\n"
    "	mul.f32 	%f119, %f117, %f14;\n"
    "	cvt.rni.f32.f32 	%f120, %f119;\n"
    "	mul.f32 	%f121, %f13, %f120;\n"
    "	sub.f32 	%f122, %f117, %f121;\n"
    "	mov.f32 	%f123, %f122;\n"
    "	mad.f32 	%f124, %f122, %f122, %f115;\n"
    "	mov.f32 	%f125, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f124, %f125;\n"
    "	sqrt.approx.f32 	%f126, %f124;\n"
    "	rcp.approx.f32 	%f127, %f126;\n"
    "	cvt.s64.s32 	%rd16, %r24;\n"
    "	mul.wide.s32 	%rd17, %r24, 24;\n"
    "	add.u64 	%rd18, %rd10, %rd17;\n"
    "	mul.f32 	%f128, %f127, %f127;\n"
    "	ld.const.f32 	%f129, [%rd18+12];\n"
    "	ld.const.f32 	%f130, [%rd18+8];\n"
    "	ld.const.f32 	%f131, [%rd18+4];\n"
    "	ld.const.f32 	%f132, [%rd18+0];\n"
    "	ld.const.f32 	%f133, [%rd18+16];\n"
    "	ld.const.f32 	%f134, [%rd18+20];\n"
    "	mul.f32 	%f135, %f128, %f128;\n"
    "	mul.f32 	%f136, %f127, %f128;\n"
    "	mov.f32 	%f137, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f138, %f129, %f137;\n"
    "	sub.f32 	%f139, %f131, %f126;\n"
    "	mov.f32 	%f140, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f141, %f132, %f140;\n"
    "	mov.f32 	%f142, 0f41000000;   	// 8\n"
    "	mul.f32 	%f143, %f133, %f142;\n"
    "	mul.f32 	%f144, %f135, %f135;\n"
    "	mul.f32 	%f145, %f130, %f139;\n"
    "	mul.f32 	%f146, %f138, %f144;\n"
    "	mul.f32 	%f147, %f143, %f144;\n"
    "	mov.f32 	%f148, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f149, %f145, %f148;\n"
    "	ex2.approx.f32 	%f150, %f149;\n"
    "	mul.f32 	%f151, %f141, %f150;\n"
    "	mul.f32 	%f152, %f130, %f151;\n"
    "	mul.f32 	%f153, %f127, %f152;\n"
    "	sub.f32 	%f154, %f153, %f146;\n"
    "	mul.f32 	%f155, %f128, %f147;\n"
    "	sub.f32 	%f156, %f154, %f155;\n"
    "	mad.f32 	%f157, %f134, %f136, %f156;\n"
    "	mov.f32 	%f158, 0f00000000;   	// 0\n"
    "	selp.f32 	%f159, %f158, %f157, %p3;\n"
    "	mov.f32 	%f160, %f88;\n"
    "	mov.f32 	%f161, %f103;\n"
    "	mad.f32 	%f162, %f161, %f159, %f160;\n"
    "	mov.f32 	%f163, %f162;\n"
    "	mov.f32 	%f164, %f92;\n"
    "	mov.f32 	%f165, %f114;\n"
    "	mad.f32 	%f166, %f165, %f159, %f164;\n"
    "	mov.f32 	%f167, %f166;\n"
    "	mov.f32 	%f168, %f95;\n"
    "	mad.f32 	%f169, %f122, %f159, %f168;\n"
    "	mov.f32 	%f170, %f169;\n"
    "	.loc	3	671	0\n"
    "	ld.shared.s32 	%r25, [%rd11+44];\n"
    "	add.s32 	%r26, %r25, %r6;\n"
    "	ld.shared.f32 	%f171, [%rd11+32];\n"
    "	sub.f32 	%f172, %f20, %f171;\n"
    "	mov.f32 	%f173, %f172;\n"
    "	mul.f32 	%f174, %f14, %f173;\n"
    "	cvt.rni.f32.f32 	%f175, %f174;\n"
    "	mul.f32 	%f176, %f13, %f175;\n"
    "	sub.f32 	%f177, %f172, %f176;\n"
    "	mov.f32 	%f178, %f177;\n"
    "	mov.f32 	%f179, 0f00000000;   	// 0\n"
    "	mad.f32 	%f180, %f177, %f177, %f179;\n"
    "	ld.shared.f32 	%f181, [%rd11+36];\n"
    "	sub.f32 	%f182, %f19, %f181;\n"
    "	mov.f32 	%f183, %f182;\n"
    "	mov.f32 	%f184, %f183;\n"
    "	mul.f32 	%f185, %f14, %f183;\n"
    "	cvt.rni.f32.f32 	%f186, %f185;\n"
    "	mul.f32 	%f187, %f13, %f186;\n"
    "	sub.f32 	%f188, %f182, %f187;\n"
    "	mov.f32 	%f189, %f188;\n"
    "	mad.f32 	%f190, %f188, %f188, %f180;\n"
    "	ld.shared.f32 	%f191, [%rd11+40];\n"
    "	sub.f32 	%f192, %f18, %f191;\n"
    "	mov.f32 	%f193, %f192;\n"
    "	mul.f32 	%f194, %f192, %f14;\n"
    "	cvt.rni.f32.f32 	%f195, %f194;\n"
    "	mul.f32 	%f196, %f13, %f195;\n"
    "	sub.f32 	%f197, %f192, %f196;\n"
    "	mov.f32 	%f198, %f197;\n"
    "	mad.f32 	%f199, %f197, %f197, %f190;\n"
    "	mov.f32 	%f200, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p4, %f199, %f200;\n"
    "	sqrt.approx.f32 	%f201, %f199;\n"
    "	rcp.approx.f32 	%f202, %f201;\n"
    "	cvt.s64.s32 	%rd19, %r26;\n"
    "	mul.wide.s32 	%rd20, %r26, 24;\n"
    "	add.u64 	%rd21, %rd10, %rd20;\n"
    "	mul.f32 	%f203, %f202, %f202;\n"
    "	ld.const.f32 	%f204, [%rd21+12];\n"
    "	ld.const.f32 	%f205, [%rd21+8];\n"
    "	ld.const.f32 	%f206, [%rd21+4];\n"
    "	ld.const.f32 	%f207, [%rd21+0];\n"
    "	ld.const.f32 	%f208, [%rd21+16];\n"
    "	ld.const.f32 	%f209, [%rd21+20];\n"
    "	mul.f32 	%f210, %f203, %f203;\n"
    "	mul.f32 	%f211, %f202, %f203;\n"
    "	mov.f32 	%f212, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f213, %f204, %f212;\n"
    "	sub.f32 	%f214, %f206, %f201;\n"
    "	mov.f32 	%f215, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f216, %f207, %f215;\n"
    "	mov.f32 	%f217, 0f41000000;   	// 8\n"
    "	mul.f32 	%f218, %f208, %f217;\n"
    "	mul.f32 	%f219, %f210, %f210;\n"
    "	mul.f32 	%f220, %f205, %f214;\n"
    "	mul.f32 	%f221, %f213, %f219;\n"
    "	mul.f32 	%f222, %f218, %f219;\n"
    "	mov.f32 	%f223, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f224, %f220, %f223;\n"
    "	ex2.approx.f32 	%f225, %f224;\n"
    "	mul.f32 	%f226, %f216, %f225;\n"
    "	mul.f32 	%f227, %f205, %f226;\n"
    "	mul.f32 	%f228, %f202, %f227;\n"
    "	sub.f32 	%f229, %f228, %f221;\n"
    "	mul.f32 	%f230, %f203, %f222;\n"
    "	sub.f32 	%f231, %f229, %f230;\n"
    "	mad.f32 	%f232, %f209, %f211, %f231;\n"
    "	mov.f32 	%f233, 0f00000000;   	// 0\n"
    "	selp.f32 	%f234, %f233, %f232, %p4;\n"
    "	mov.f32 	%f235, %f163;\n"
    "	mov.f32 	%f236, %f178;\n"
    "	mad.f32 	%f237, %f236, %f234, %f235;\n"
    "	mov.f32 	%f238, %f237;\n"
    "	mov.f32 	%f239, %f167;\n"
    "	mov.f32 	%f240, %f189;\n"
    "	mad.f32 	%f241, %f240, %f234, %f239;\n"
    "	mov.f32 	%f242, %f241;\n"
    "	mov.f32 	%f243, %f170;\n"
    "	mad.f32 	%f244, %f197, %f234, %f243;\n"
    "	mov.f32 	%f245, %f244;\n"
    "	.loc	3	672	0\n"
    "	ld.shared.s32 	%r27, [%rd11+60];\n"
    "	add.s32 	%r28, %r27, %r6;\n"
    "	ld.shared.f32 	%f246, [%rd11+48];\n"
    "	sub.f32 	%f247, %f20, %f246;\n"
    "	mov.f32 	%f248, %f247;\n"
    "	mul.f32 	%f249, %f14, %f248;\n"
    "	cvt.rni.f32.f32 	%f250, %f249;\n"
    "	mul.f32 	%f251, %f13, %f250;\n"
    "	sub.f32 	%f252, %f247, %f251;\n"
    "	mov.f32 	%f253, %f252;\n"
    "	mov.f32 	%f254, 0f00000000;   	// 0\n"
    "	mad.f32 	%f255, %f252, %f252, %f254;\n"
    "	ld.shared.f32 	%f256, [%rd11+52];\n"
    "	sub.f32 	%f257, %f19, %f256;\n"
    "	mov.f32 	%f258, %f257;\n"
    "	mov.f32 	%f259, %f258;\n"
    "	mul.f32 	%f260, %f14, %f258;\n"
    "	cvt.rni.f32.f32 	%f261, %f260;\n"
    "	mul.f32 	%f262, %f13, %f261;\n"
    "	sub.f32 	%f263, %f257, %f262;\n"
    "	mov.f32 	%f264, %f263;\n"
    "	mad.f32 	%f265, %f263, %f263, %f255;\n"
    "	ld.shared.f32 	%f266, [%rd11+56];\n"
    "	sub.f32 	%f267, %f18, %f266;\n"
    "	mov.f32 	%f268, %f267;\n"
    "	mul.f32 	%f269, %f267, %f14;\n"
    "	cvt.rni.f32.f32 	%f270, %f269;\n"
    "	mul.f32 	%f271, %f13, %f270;\n"
    "	sub.f32 	%f272, %f267, %f271;\n"
    "	mov.f32 	%f273, %f272;\n"
    "	mad.f32 	%f274, %f272, %f272, %f265;\n"
    "	mov.f32 	%f275, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p5, %f274, %f275;\n"
    "	sqrt.approx.f32 	%f276, %f274;\n"
    "	rcp.approx.f32 	%f277, %f276;\n"
    "	cvt.s64.s32 	%rd22, %r28;\n"
    "	mul.wide.s32 	%rd23, %r28, 24;\n"
    "	add.u64 	%rd24, %rd10, %rd23;\n"
    "	mul.f32 	%f278, %f277, %f277;\n"
    "	ld.const.f32 	%f279, [%rd24+12];\n"
    "	ld.const.f32 	%f280, [%rd24+8];\n"
    "	ld.const.f32 	%f281, [%rd24+4];\n"
    "	ld.const.f32 	%f282, [%rd24+0];\n"
    "	ld.const.f32 	%f283, [%rd24+16];\n"
    "	ld.const.f32 	%f284, [%rd24+20];\n"
    "	mul.f32 	%f285, %f278, %f278;\n"
    "	mul.f32 	%f286, %f277, %f278;\n"
    "	mov.f32 	%f287, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f288, %f279, %f287;\n"
    "	sub.f32 	%f289, %f281, %f276;\n"
    "	mov.f32 	%f290, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f291, %f282, %f290;\n"
    "	mov.f32 	%f292, 0f41000000;   	// 8\n"
    "	mul.f32 	%f293, %f283, %f292;\n"
    "	mul.f32 	%f294, %f285, %f285;\n"
    "	mul.f32 	%f295, %f280, %f289;\n"
    "	mul.f32 	%f296, %f288, %f294;\n"
    "	mul.f32 	%f297, %f293, %f294;\n"
    "	mov.f32 	%f298, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f299, %f295, %f298;\n"
    "	ex2.approx.f32 	%f300, %f299;\n"
    "	mul.f32 	%f301, %f291, %f300;\n"
    "	mul.f32 	%f302, %f280, %f301;\n"
    "	mul.f32 	%f303, %f277, %f302;\n"
    "	sub.f32 	%f304, %f303, %f296;\n"
    "	mul.f32 	%f305, %f278, %f297;\n"
    "	sub.f32 	%f306, %f304, %f305;\n"
    "	mad.f32 	%f307, %f284, %f286, %f306;\n"
    "	mov.f32 	%f308, 0f00000000;   	// 0\n"
    "	selp.f32 	%f309, %f308, %f307, %p5;\n"
    "	mov.f32 	%f310, %f238;\n"
    "	mov.f32 	%f311, %f253;\n"
    "	mad.f32 	%f312, %f311, %f309, %f310;\n"
    "	mov.f32 	%f313, %f312;\n"
    "	mov.f32 	%f314, %f242;\n"
    "	mov.f32 	%f315, %f264;\n"
    "	mad.f32 	%f316, %f315, %f309, %f314;\n"
    "	mov.f32 	%f317, %f316;\n"
    "	mov.f32 	%f318, %f245;\n"
    "	mad.f32 	%f319, %f272, %f309, %f318;\n"
    "	mov.f32 	%f320, %f319;\n"
    "	.loc	3	673	0\n"
    "	ld.shared.s32 	%r29, [%rd11+76];\n"
    "	add.s32 	%r30, %r29, %r6;\n"
    "	ld.shared.f32 	%f321, [%rd11+64];\n"
    "	sub.f32 	%f322, %f20, %f321;\n"
    "	mov.f32 	%f323, %f322;\n"
    "	mul.f32 	%f324, %f14, %f323;\n"
    "	cvt.rni.f32.f32 	%f325, %f324;\n"
    "	mul.f32 	%f326, %f13, %f325;\n"
    "	sub.f32 	%f327, %f322, %f326;\n"
    "	mov.f32 	%f328, %f327;\n"
    "	mov.f32 	%f329, 0f00000000;   	// 0\n"
    "	mad.f32 	%f330, %f327, %f327, %f329;\n"
    "	ld.shared.f32 	%f331, [%rd11+68];\n"
    "	sub.f32 	%f332, %f19, %f331;\n"
    "	mov.f32 	%f333, %f332;\n"
    "	mov.f32 	%f334, %f333;\n"
    "	mul.f32 	%f335, %f14, %f333;\n"
    "	cvt.rni.f32.f32 	%f336, %f335;\n"
    "	mul.f32 	%f337, %f13, %f336;\n"
    "	sub.f32 	%f338, %f332, %f337;\n"
    "	mov.f32 	%f339, %f338;\n"
    "	mad.f32 	%f340, %f338, %f338, %f330;\n"
    "	ld.shared.f32 	%f341, [%rd11+72];\n"
    "	sub.f32 	%f342, %f18, %f341;\n"
    "	mov.f32 	%f343, %f342;\n"
    "	mul.f32 	%f344, %f342, %f14;\n"
    "	cvt.rni.f32.f32 	%f345, %f344;\n"
    "	mul.f32 	%f346, %f13, %f345;\n"
    "	sub.f32 	%f347, %f342, %f346;\n"
    "	mov.f32 	%f348, %f347;\n"
    "	mad.f32 	%f349, %f347, %f347, %f340;\n"
    "	mov.f32 	%f350, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p6, %f349, %f350;\n"
    "	sqrt.approx.f32 	%f351, %f349;\n"
    "	rcp.approx.f32 	%f352, %f351;\n"
    "	cvt.s64.s32 	%rd25, %r30;\n"
    "	mul.wide.s32 	%rd26, %r30, 24;\n"
    "	add.u64 	%rd27, %rd10, %rd26;\n"
    "	mul.f32 	%f353, %f352, %f352;\n"
    "	ld.const.f32 	%f354, [%rd27+12];\n"
    "	ld.const.f32 	%f355, [%rd27+8];\n"
    "	ld.const.f32 	%f356, [%rd27+4];\n"
    "	ld.const.f32 	%f357, [%rd27+0];\n"
    "	ld.const.f32 	%f358, [%rd27+16];\n"
    "	ld.const.f32 	%f359, [%rd27+20];\n"
    "	mul.f32 	%f360, %f353, %f353;\n"
    "	mul.f32 	%f361, %f352, %f353;\n"
    "	mov.f32 	%f362, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f363, %f354, %f362;\n"
    "	sub.f32 	%f364, %f356, %f351;\n"
    "	mov.f32 	%f365, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f366, %f357, %f365;\n"
    "	mov.f32 	%f367, 0f41000000;   	// 8\n"
    "	mul.f32 	%f368, %f358, %f367;\n"
    "	mul.f32 	%f369, %f360, %f360;\n"
    "	mul.f32 	%f370, %f355, %f364;\n"
    "	mul.f32 	%f371, %f363, %f369;\n"
    "	mul.f32 	%f372, %f368, %f369;\n"
    "	mov.f32 	%f373, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f374, %f370, %f373;\n"
    "	ex2.approx.f32 	%f375, %f374;\n"
    "	mul.f32 	%f376, %f366, %f375;\n"
    "	mul.f32 	%f377, %f355, %f376;\n"
    "	mul.f32 	%f378, %f352, %f377;\n"
    "	sub.f32 	%f379, %f378, %f371;\n"
    "	mul.f32 	%f380, %f353, %f372;\n"
    "	sub.f32 	%f381, %f379, %f380;\n"
    "	mad.f32 	%f382, %f359, %f361, %f381;\n"
    "	mov.f32 	%f383, 0f00000000;   	// 0\n"
    "	selp.f32 	%f384, %f383, %f382, %p6;\n"
    "	mov.f32 	%f385, %f313;\n"
    "	mov.f32 	%f386, %f328;\n"
    "	mad.f32 	%f387, %f386, %f384, %f385;\n"
    "	mov.f32 	%f388, %f387;\n"
    "	mov.f32 	%f389, %f317;\n"
    "	mov.f32 	%f390, %f339;\n"
    "	mad.f32 	%f391, %f390, %f384, %f389;\n"
    "	mov.f32 	%f392, %f391;\n"
    "	mov.f32 	%f393, %f320;\n"
    "	mad.f32 	%f394, %f347, %f384, %f393;\n"
    "	mov.f32 	%f395, %f394;\n"
    "	.loc	3	674	0\n"
    "	ld.shared.s32 	%r31, [%rd11+92];\n"
    "	add.s32 	%r32, %r31, %r6;\n"
    "	ld.shared.f32 	%f396, [%rd11+80];\n"
    "	sub.f32 	%f397, %f20, %f396;\n"
    "	mov.f32 	%f398, %f397;\n"
    "	mul.f32 	%f399, %f14, %f398;\n"
    "	cvt.rni.f32.f32 	%f400, %f399;\n"
    "	mul.f32 	%f401, %f13, %f400;\n"
    "	sub.f32 	%f402, %f397, %f401;\n"
    "	mov.f32 	%f403, %f402;\n"
    "	mov.f32 	%f404, 0f00000000;   	// 0\n"
    "	mad.f32 	%f405, %f402, %f402, %f404;\n"
    "	ld.shared.f32 	%f406, [%rd11+84];\n"
    "	sub.f32 	%f407, %f19, %f406;\n"
    "	mov.f32 	%f408, %f407;\n"
    "	mov.f32 	%f409, %f408;\n"
    "	mul.f32 	%f410, %f14, %f408;\n"
    "	cvt.rni.f32.f32 	%f411, %f410;\n"
    "	mul.f32 	%f412, %f13, %f411;\n"
    "	sub.f32 	%f413, %f407, %f412;\n"
    "	mov.f32 	%f414, %f413;\n"
    "	mad.f32 	%f415, %f413, %f413, %f405;\n"
    "	ld.shared.f32 	%f416, [%rd11+88];\n"
    "	sub.f32 	%f417, %f18, %f416;\n"
    "	mov.f32 	%f418, %f417;\n"
    "	mul.f32 	%f419, %f417, %f14;\n"
    "	cvt.rni.f32.f32 	%f420, %f419;\n"
    "	mul.f32 	%f421, %f13, %f420;\n"
    "	sub.f32 	%f422, %f417, %f421;\n"
    "	mov.f32 	%f423, %f422;\n"
    "	mad.f32 	%f424, %f422, %f422, %f415;\n"
    "	mov.f32 	%f425, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p7, %f424, %f425;\n"
    "	sqrt.approx.f32 	%f426, %f424;\n"
    "	rcp.approx.f32 	%f427, %f426;\n"
    "	cvt.s64.s32 	%rd28, %r32;\n"
    "	mul.wide.s32 	%rd29, %r32, 24;\n"
    "	add.u64 	%rd30, %rd10, %rd29;\n"
    "	mul.f32 	%f428, %f427, %f427;\n"
    "	ld.const.f32 	%f429, [%rd30+12];\n"
    "	ld.const.f32 	%f430, [%rd30+8];\n"
    "	ld.const.f32 	%f431, [%rd30+4];\n"
    "	ld.const.f32 	%f432, [%rd30+0];\n"
    "	ld.const.f32 	%f433, [%rd30+16];\n"
    "	ld.const.f32 	%f434, [%rd30+20];\n"
    "	mul.f32 	%f435, %f428, %f428;\n"
    "	mul.f32 	%f436, %f427, %f428;\n"
    "	mov.f32 	%f437, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f438, %f429, %f437;\n"
    "	sub.f32 	%f439, %f431, %f426;\n"
    "	mov.f32 	%f440, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f441, %f432, %f440;\n"
    "	mov.f32 	%f442, 0f41000000;   	// 8\n"
    "	mul.f32 	%f443, %f433, %f442;\n"
    "	mul.f32 	%f444, %f435, %f435;\n"
    "	mul.f32 	%f445, %f430, %f439;\n"
    "	mul.f32 	%f446, %f438, %f444;\n"
    "	mul.f32 	%f447, %f443, %f444;\n"
    "	mov.f32 	%f448, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f449, %f445, %f448;\n"
    "	ex2.approx.f32 	%f450, %f449;\n"
    "	mul.f32 	%f451, %f441, %f450;\n"
    "	mul.f32 	%f452, %f430, %f451;\n"
    "	mul.f32 	%f453, %f427, %f452;\n"
    "	sub.f32 	%f454, %f453, %f446;\n"
    "	mul.f32 	%f455, %f428, %f447;\n"
    "	sub.f32 	%f456, %f454, %f455;\n"
    "	mad.f32 	%f457, %f434, %f436, %f456;\n"
    "	mov.f32 	%f458, 0f00000000;   	// 0\n"
    "	selp.f32 	%f459, %f458, %f457, %p7;\n"
    "	mov.f32 	%f460, %f388;\n"
    "	mov.f32 	%f461, %f403;\n"
    "	mad.f32 	%f462, %f461, %f459, %f460;\n"
    "	mov.f32 	%f463, %f462;\n"
    "	mov.f32 	%f464, %f392;\n"
    "	mov.f32 	%f465, %f414;\n"
    "	mad.f32 	%f466, %f465, %f459, %f464;\n"
    "	mov.f32 	%f467, %f466;\n"
    "	mov.f32 	%f468, %f395;\n"
    "	mad.f32 	%f469, %f422, %f459, %f468;\n"
    "	mov.f32 	%f470, %f469;\n"
    "	.loc	3	675	0\n"
    "	ld.shared.s32 	%r33, [%rd11+108];\n"
    "	add.s32 	%r34, %r33, %r6;\n"
    "	ld.shared.f32 	%f471, [%rd11+96];\n"
    "	sub.f32 	%f472, %f20, %f471;\n"
    "	mov.f32 	%f473, %f472;\n"
    "	mul.f32 	%f474, %f14, %f473;\n"
    "	cvt.rni.f32.f32 	%f475, %f474;\n"
    "	mul.f32 	%f476, %f13, %f475;\n"
    "	sub.f32 	%f477, %f472, %f476;\n"
    "	mov.f32 	%f478, %f477;\n"
    "	mov.f32 	%f479, 0f00000000;   	// 0\n"
    "	mad.f32 	%f480, %f477, %f477, %f479;\n"
    "	ld.shared.f32 	%f481, [%rd11+100];\n"
    "	sub.f32 	%f482, %f19, %f481;\n"
    "	mov.f32 	%f483, %f482;\n"
    "	mov.f32 	%f484, %f483;\n"
    "	mul.f32 	%f485, %f14, %f483;\n"
    "	cvt.rni.f32.f32 	%f486, %f485;\n"
    "	mul.f32 	%f487, %f13, %f486;\n"
    "	sub.f32 	%f488, %f482, %f487;\n"
    "	mov.f32 	%f489, %f488;\n"
    "	mad.f32 	%f490, %f488, %f488, %f480;\n"
    "	ld.shared.f32 	%f491, [%rd11+104];\n"
    "	sub.f32 	%f492, %f18, %f491;\n"
    "	mov.f32 	%f493, %f492;\n"
    "	mul.f32 	%f494, %f492, %f14;\n"
    "	cvt.rni.f32.f32 	%f495, %f494;\n"
    "	mul.f32 	%f496, %f13, %f495;\n"
    "	sub.f32 	%f497, %f492, %f496;\n"
    "	mov.f32 	%f498, %f497;\n"
    "	mad.f32 	%f499, %f497, %f497, %f490;\n"
    "	mov.f32 	%f500, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p8, %f499, %f500;\n"
    "	sqrt.approx.f32 	%f501, %f499;\n"
    "	rcp.approx.f32 	%f502, %f501;\n"
    "	cvt.s64.s32 	%rd31, %r34;\n"
    "	mul.wide.s32 	%rd32, %r34, 24;\n"
    "	add.u64 	%rd33, %rd10, %rd32;\n"
    "	mul.f32 	%f503, %f502, %f502;\n"
    "	ld.const.f32 	%f504, [%rd33+12];\n"
    "	ld.const.f32 	%f505, [%rd33+8];\n"
    "	ld.const.f32 	%f506, [%rd33+4];\n"
    "	ld.const.f32 	%f507, [%rd33+0];\n"
    "	ld.const.f32 	%f508, [%rd33+16];\n"
    "	ld.const.f32 	%f509, [%rd33+20];\n"
    "	mul.f32 	%f510, %f503, %f503;\n"
    "	mul.f32 	%f511, %f502, %f503;\n"
    "	mov.f32 	%f512, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f513, %f504, %f512;\n"
    "	sub.f32 	%f514, %f506, %f501;\n"
    "	mov.f32 	%f515, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f516, %f507, %f515;\n"
    "	mov.f32 	%f517, 0f41000000;   	// 8\n"
    "	mul.f32 	%f518, %f508, %f517;\n"
    "	mul.f32 	%f519, %f510, %f510;\n"
    "	mul.f32 	%f520, %f505, %f514;\n"
    "	mul.f32 	%f521, %f513, %f519;\n"
    "	mul.f32 	%f522, %f518, %f519;\n"
    "	mov.f32 	%f523, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f524, %f520, %f523;\n"
    "	ex2.approx.f32 	%f525, %f524;\n"
    "	mul.f32 	%f526, %f516, %f525;\n"
    "	mul.f32 	%f527, %f505, %f526;\n"
    "	mul.f32 	%f528, %f502, %f527;\n"
    "	sub.f32 	%f529, %f528, %f521;\n"
    "	mul.f32 	%f530, %f503, %f522;\n"
    "	sub.f32 	%f531, %f529, %f530;\n"
    "	mad.f32 	%f532, %f509, %f511, %f531;\n"
    "	mov.f32 	%f533, 0f00000000;   	// 0\n"
    "	selp.f32 	%f534, %f533, %f532, %p8;\n"
    "	mov.f32 	%f535, %f463;\n"
    "	mov.f32 	%f536, %f478;\n"
    "	mad.f32 	%f537, %f536, %f534, %f535;\n"
    "	mov.f32 	%f538, %f537;\n"
    "	mov.f32 	%f539, %f467;\n"
    "	mov.f32 	%f540, %f489;\n"
    "	mad.f32 	%f541, %f540, %f534, %f539;\n"
    "	mov.f32 	%f542, %f541;\n"
    "	mov.f32 	%f543, %f470;\n"
    "	mad.f32 	%f544, %f497, %f534, %f543;\n"
    "	mov.f32 	%f545, %f544;\n"
    "	.loc	3	676	0\n"
    "	ld.shared.s32 	%r35, [%rd11+124];\n"
    "	add.s32 	%r36, %r35, %r6;\n"
    "	ld.shared.f32 	%f546, [%rd11+112];\n"
    "	sub.f32 	%f547, %f20, %f546;\n"
    "	mov.f32 	%f548, %f547;\n"
    "	mul.f32 	%f549, %f14, %f548;\n"
    "	cvt.rni.f32.f32 	%f550, %f549;\n"
    "	mul.f32 	%f551, %f13, %f550;\n"
    "	sub.f32 	%f552, %f547, %f551;\n"
    "	mov.f32 	%f553, %f552;\n"
    "	mov.f32 	%f554, 0f00000000;   	// 0\n"
    "	mad.f32 	%f555, %f552, %f552, %f554;\n"
    "	ld.shared.f32 	%f556, [%rd11+116];\n"
    "	sub.f32 	%f557, %f19, %f556;\n"
    "	mov.f32 	%f558, %f557;\n"
    "	mov.f32 	%f559, %f558;\n"
    "	mul.f32 	%f560, %f14, %f558;\n"
    "	cvt.rni.f32.f32 	%f561, %f560;\n"
    "	mul.f32 	%f562, %f13, %f561;\n"
    "	sub.f32 	%f563, %f557, %f562;\n"
    "	mov.f32 	%f564, %f563;\n"
    "	mad.f32 	%f565, %f563, %f563, %f555;\n"
    "	ld.shared.f32 	%f566, [%rd11+120];\n"
    "	sub.f32 	%f567, %f18, %f566;\n"
    "	mov.f32 	%f568, %f567;\n"
    "	mul.f32 	%f569, %f567, %f14;\n"
    "	cvt.rni.f32.f32 	%f570, %f569;\n"
    "	mul.f32 	%f571, %f13, %f570;\n"
    "	sub.f32 	%f572, %f567, %f571;\n"
    "	mov.f32 	%f573, %f572;\n"
    "	mad.f32 	%f574, %f572, %f572, %f565;\n"
    "	mov.f32 	%f575, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p9, %f574, %f575;\n"
    "	sqrt.approx.f32 	%f576, %f574;\n"
    "	rcp.approx.f32 	%f577, %f576;\n"
    "	cvt.s64.s32 	%rd34, %r36;\n"
    "	mul.wide.s32 	%rd35, %r36, 24;\n"
    "	add.u64 	%rd36, %rd10, %rd35;\n"
    "	mul.f32 	%f578, %f577, %f577;\n"
    "	ld.const.f32 	%f579, [%rd36+12];\n"
    "	ld.const.f32 	%f580, [%rd36+8];\n"
    "	ld.const.f32 	%f581, [%rd36+4];\n"
    "	ld.const.f32 	%f582, [%rd36+0];\n"
    "	ld.const.f32 	%f583, [%rd36+16];\n"
    "	ld.const.f32 	%f584, [%rd36+20];\n"
    "	mul.f32 	%f585, %f578, %f578;\n"
    "	mul.f32 	%f586, %f577, %f578;\n"
    "	mov.f32 	%f587, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f588, %f579, %f587;\n"
    "	sub.f32 	%f589, %f581, %f576;\n"
    "	mov.f32 	%f590, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f591, %f582, %f590;\n"
    "	mov.f32 	%f592, 0f41000000;   	// 8\n"
    "	mul.f32 	%f593, %f583, %f592;\n"
    "	mul.f32 	%f594, %f585, %f585;\n"
    "	mul.f32 	%f595, %f580, %f589;\n"
    "	mul.f32 	%f596, %f588, %f594;\n"
    "	mul.f32 	%f597, %f593, %f594;\n"
    "	mov.f32 	%f598, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f599, %f595, %f598;\n"
    "	ex2.approx.f32 	%f600, %f599;\n"
    "	mul.f32 	%f601, %f591, %f600;\n"
    "	mul.f32 	%f602, %f580, %f601;\n"
    "	mul.f32 	%f603, %f577, %f602;\n"
    "	sub.f32 	%f604, %f603, %f596;\n"
    "	mul.f32 	%f605, %f578, %f597;\n"
    "	sub.f32 	%f606, %f604, %f605;\n"
    "	mad.f32 	%f607, %f584, %f586, %f606;\n"
    "	mov.f32 	%f608, 0f00000000;   	// 0\n"
    "	selp.f32 	%f609, %f608, %f607, %p9;\n"
    "	mov.f32 	%f610, %f538;\n"
    "	mov.f32 	%f611, %f553;\n"
    "	mad.f32 	%f612, %f611, %f609, %f610;\n"
    "	mov.f32 	%f2, %f612;\n"
    "	mov.f32 	%f613, %f542;\n"
    "	mov.f32 	%f614, %f564;\n"
    "	mad.f32 	%f615, %f614, %f609, %f613;\n"
    "	mov.f32 	%f4, %f615;\n"
    "	mov.f32 	%f616, %f545;\n"
    "	mad.f32 	%f617, %f572, %f609, %f616;\n"
    "	mov.f32 	%f6, %f617;\n"
    "	add.s32 	%r20, %r20, 8;\n"
    "	add.u64 	%rd12, %rd12, 128;\n"
    "	add.u64 	%rd11, %rd11, 128;\n"
    "	mov.u32 	%r37, 255;\n"
    "	setp.le.s32 	%p10, %r20, %r37;\n"
    "	@%p10 bra 	$Lt_5_34562;\n"
    "	add.s32 	%r17, %r17, 256;\n"
    "	add.s32 	%r15, %r15, 256;\n"
    "	add.u64 	%rd9, %rd9, 4096;\n"
    "	setp.lt.s32 	%p11, %r15, %r16;\n"
    "	@%p11 bra 	$Lt_5_33794;\n"
    "	bra.uni 	$Lt_5_33282;\n"
    "$Lt_5_37378:\n"
    "	mov.s32 	%r17, 0;\n"
    "	mov.u64 	%rd10, c_matrix;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_16104_35_non_const_s_xj33904;\n"
    "$Lt_5_33282:\n"
    "	.loc	3	679	0\n"
    "	bar.sync 	0;\n"
    "	sub.s32 	%r38, %r7, %r17;\n"
    "	setp.le.s32 	%p12, %r38, %r1;\n"
    "	@%p12 bra 	$Lt_5_35330;\n"
    "	.loc	3	680	0\n"
    "	cvt.s64.s32 	%rd37, %r1;\n"
    "	mul.wide.s32 	%rd38, %r1, 16;\n"
    "	add.u64 	%rd39, %rd38, %rd5;\n"
    "	add.s32 	%r39, %r17, %r1;\n"
    "	cvt.s64.s32 	%rd40, %r39;\n"
    "	mul.wide.s32 	%rd41, %r39, 16;\n"
    "	add.u64 	%rd9, %rd1, %rd41;\n"
    "	ld.global.f32 	%f618, [%rd9+0];\n"
    "	st.shared.f32 	[%rd39+0], %f618;\n"
    "	ld.global.f32 	%f619, [%rd9+4];\n"
    "	st.shared.f32 	[%rd39+4], %f619;\n"
    "	ld.global.f32 	%f620, [%rd9+8];\n"
    "	st.shared.f32 	[%rd39+8], %f620;\n"
    "	ld.global.s32 	%r40, [%rd9+12];\n"
    "	st.shared.s32 	[%rd39+12], %r40;\n"
    "$Lt_5_35330:\n"
    "	.loc	3	681	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r41, 0;\n"
    "	setp.le.s32 	%p13, %r38, %r41;\n"
    "	@%p13 bra 	$Lt_5_35842;\n"
    "	mov.s32 	%r42, %r38;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai12_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	mov.s64 	%rd42, %rd5;\n"
    "	mov.s64 	%rd43, %rd5;\n"
    "	mov.s32 	%r43, 0;\n"
    "	mov.f32 	%f18, %f12;\n"
    "	mov.f32 	%f19, %f10;\n"
    "	mov.f32 	%f20, %f8;\n"
    "	mov.s32 	%r44, %r42;\n"
    "$Lt_5_36354:\n"
    " //<loop> Loop body line 681, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	683	0\n"
    "	ld.shared.s32 	%r45, [%rd42+12];\n"
    "	add.s32 	%r46, %r45, %r6;\n"
    "	ld.shared.f32 	%f621, [%rd43+0];\n"
    "	sub.f32 	%f622, %f20, %f621;\n"
    "	mov.f32 	%f623, %f622;\n"
    "	mul.f32 	%f624, %f14, %f623;\n"
    "	cvt.rni.f32.f32 	%f625, %f624;\n"
    "	.loc	3	681	0\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_gpu_kadai12_xmax];\n"
    "	.loc	3	683	0\n"
    "	mul.f32 	%f626, %f13, %f625;\n"
    "	sub.f32 	%f627, %f622, %f626;\n"
    "	mov.f32 	%f628, %f627;\n"
    "	mov.f32 	%f629, 0f00000000;   	// 0\n"
    "	mad.f32 	%f630, %f627, %f627, %f629;\n"
    "	ld.shared.f32 	%f631, [%rd43+4];\n"
    "	sub.f32 	%f632, %f19, %f631;\n"
    "	mov.f32 	%f633, %f632;\n"
    "	mov.f32 	%f634, %f633;\n"
    "	mul.f32 	%f635, %f14, %f633;\n"
    "	cvt.rni.f32.f32 	%f636, %f635;\n"
    "	mul.f32 	%f637, %f13, %f636;\n"
    "	sub.f32 	%f638, %f632, %f637;\n"
    "	mov.f32 	%f639, %f638;\n"
    "	mad.f32 	%f640, %f638, %f638, %f630;\n"
    "	ld.shared.f32 	%f641, [%rd43+8];\n"
    "	sub.f32 	%f642, %f18, %f641;\n"
    "	mov.f32 	%f643, %f642;\n"
    "	mul.f32 	%f644, %f642, %f14;\n"
    "	cvt.rni.f32.f32 	%f645, %f644;\n"
    "	mul.f32 	%f646, %f13, %f645;\n"
    "	sub.f32 	%f647, %f642, %f646;\n"
    "	mov.f32 	%f648, %f647;\n"
    "	mad.f32 	%f649, %f647, %f647, %f640;\n"
    "	mov.f32 	%f650, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p14, %f649, %f650;\n"
    "	sqrt.approx.f32 	%f651, %f649;\n"
    "	rcp.approx.f32 	%f652, %f651;\n"
    "	cvt.s64.s32 	%rd44, %r46;\n"
    "	mul.wide.s32 	%rd45, %r46, 24;\n"
    "	add.u64 	%rd46, %rd10, %rd45;\n"
    "	mul.f32 	%f653, %f652, %f652;\n"
    "	ld.const.f32 	%f654, [%rd46+12];\n"
    "	ld.const.f32 	%f655, [%rd46+8];\n"
    "	ld.const.f32 	%f656, [%rd46+4];\n"
    "	ld.const.f32 	%f657, [%rd46+0];\n"
    "	ld.const.f32 	%f658, [%rd46+16];\n"
    "	ld.const.f32 	%f659, [%rd46+20];\n"
    "	mul.f32 	%f660, %f653, %f653;\n"
    "	mul.f32 	%f661, %f652, %f653;\n"
    "	mov.f32 	%f662, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f663, %f654, %f662;\n"
    "	sub.f32 	%f664, %f656, %f651;\n"
    "	mov.f32 	%f665, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f666, %f657, %f665;\n"
    "	mov.f32 	%f667, 0f41000000;   	// 8\n"
    "	mul.f32 	%f668, %f658, %f667;\n"
    "	mul.f32 	%f669, %f660, %f660;\n"
    "	mul.f32 	%f670, %f655, %f664;\n"
    "	mul.f32 	%f671, %f663, %f669;\n"
    "	mul.f32 	%f672, %f668, %f669;\n"
    "	mov.f32 	%f673, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f674, %f670, %f673;\n"
    "	ex2.approx.f32 	%f675, %f674;\n"
    "	mul.f32 	%f676, %f666, %f675;\n"
    "	mul.f32 	%f677, %f655, %f676;\n"
    "	mul.f32 	%f678, %f652, %f677;\n"
    "	sub.f32 	%f679, %f678, %f671;\n"
    "	mul.f32 	%f680, %f653, %f672;\n"
    "	sub.f32 	%f681, %f679, %f680;\n"
    "	mad.f32 	%f682, %f659, %f661, %f681;\n"
    "	mov.f32 	%f683, 0f00000000;   	// 0\n"
    "	selp.f32 	%f684, %f683, %f682, %p14;\n"
    "	mov.f32 	%f685, %f2;\n"
    "	mov.f32 	%f686, %f628;\n"
    "	mad.f32 	%f687, %f686, %f684, %f685;\n"
    "	mov.f32 	%f2, %f687;\n"
    "	mov.f32 	%f688, %f4;\n"
    "	mov.f32 	%f689, %f639;\n"
    "	mad.f32 	%f690, %f689, %f684, %f688;\n"
    "	mov.f32 	%f4, %f690;\n"
    "	mov.f32 	%f691, %f6;\n"
    "	mad.f32 	%f692, %f647, %f684, %f691;\n"
    "	mov.f32 	%f6, %f692;\n"
    "	add.s32 	%r43, %r43, 1;\n"
    "	add.u64 	%rd43, %rd43, 16;\n"
    "	add.u64 	%rd42, %rd42, 16;\n"
    "	setp.ne.s32 	%p15, %r38, %r43;\n"
    "	@%p15 bra 	$Lt_5_36354;\n"
    "$Lt_5_35842:\n"
    "	setp.le.s32 	%p16, %r7, %r3;\n"
    "	@%p16 bra 	$Lt_5_36866;\n"
    "	.loc	3	685	0\n"
    "	ld.param.u64 	%rd47, [__cudaparm_nacl_kernel_gpu_kadai12_fvec];\n"
    "	mul.lo.s32 	%r47, %r3, 3;\n"
    "	cvt.s64.s32 	%rd48, %r47;\n"
    "	mul.wide.s32 	%rd49, %r47, 4;\n"
    "	add.u64 	%rd50, %rd47, %rd49;\n"
    "	mov.f32 	%f693, %f2;\n"
    "	st.global.f32 	[%rd50+0], %f693;\n"
    "	mov.f32 	%f694, %f4;\n"
    "	st.global.f32 	[%rd50+4], %f694;\n"
    "	mov.f32 	%f695, %f6;\n"
    "	st.global.f32 	[%rd50+8], %f695;\n"
    "$Lt_5_36866:\n"
    "	.loc	3	686	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_gpu_kadai12:\n"
    "	} // nacl_kernel_gpu_kadai12\n"
    "\n"
    "	.entry nacl_kernel_initial (\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_initial_n,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_atype,\n"
    "		.param .s32 __cudaparm_nacl_kernel_initial_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_pol,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_sigm,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_ipotro,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_pc,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_pd,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_zz,\n"
    "		.param .s32 __cudaparm_nacl_kernel_initial_tblno,\n"
    "		.param .f32 __cudaparm_nacl_kernel_initial___val_paramxmax,\n"
    "		.param .s32 __cudaparm_nacl_kernel_initial_periodicflag,\n"
    "		.param .u64 __cudaparm_nacl_kernel_initial_force)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<22>;\n"
    "	.reg .u64 %rd<31>;\n"
    "	.reg .f32 %f<86>;\n"
    "	.reg .pred %p<7>;\n"
    "	.loc	3	883	0\n"
    "$LDWbegin_nacl_kernel_initial:\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r1, %rh1, 64;\n"
    "	cvt.u32.u16 	%r2, %tid.x;\n"
    "	add.u32 	%r3, %r2, %r1;\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_initial_n];\n"
    "	setp.le.s32 	%p1, %r4, %r3;\n"
    "	@%p1 bra 	$Lt_6_7682;\n"
    "	.loc	3	893	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	mov.u32 	%r5, 0;\n"
    "	.loc	3	883	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_initial_n];\n"
    "	.loc	3	893	0\n"
    "	setp.le.s32 	%p2, %r4, %r5;\n"
    "	@%p2 bra 	$Lt_6_9730;\n"
    "	.loc	3	883	0\n"
    "	ld.param.s32 	%r4, [__cudaparm_nacl_kernel_initial_n];\n"
    "	.loc	3	893	0\n"
    "	mov.s32 	%r6, %r4;\n"
    "	mov.s32 	%r7, 0;\n"
    "	mul.lo.s32 	%r8, %r4, 3;\n"
    "	ld.param.s32 	%r9, [__cudaparm_nacl_kernel_initial_periodicflag];\n"
    "	and.b32 	%r10, %r9, 1;\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_initial___val_paramxmax];\n"
    "	add.f32 	%f8, %f7, %f7;\n"
    "	mov.s32 	%r11, 0;\n"
    "	setp.eq.s32 	%p3, %r10, %r11;\n"
    "	mul.lo.s32 	%r12, %r3, 3;\n"
    "	selp.f32 	%f9, %f8, %f7, %p3;\n"
    "	cvt.s64.s32 	%rd1, %r12;\n"
    "	ld.param.u64 	%rd2, [__cudaparm_nacl_kernel_initial_x];\n"
    "	mov.s64 	%rd3, %rd2;\n"
    "	rcp.approx.f32 	%f10, %f9;\n"
    "	mul.wide.s32 	%rd4, %r12, 4;\n"
    "	add.u64 	%rd5, %rd4, %rd2;\n"
    "	ld.global.f32 	%f11, [%rd5+0];\n"
    "	ld.global.f32 	%f12, [%rd5+4];\n"
    "	ld.global.f32 	%f13, [%rd5+8];\n"
    "	mov.s32 	%r13, 0;\n"
    "	mov.s32 	%r14, %r6;\n"
    "$Lt_6_8706:\n"
    " //<loop> Loop body line 893, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	898	0\n"
    "	ld.global.f32 	%f14, [%rd3+0];\n"
    "	sub.f32 	%f15, %f11, %f14;\n"
    "	mul.f32 	%f16, %f10, %f15;\n"
    "	cvt.rni.f32.f32 	%f17, %f16;\n"
    "	mul.f32 	%f18, %f9, %f17;\n"
    "	sub.f32 	%f19, %f15, %f18;\n"
    "	mov.f32 	%f20, %f19;\n"
    "	.loc	3	899	0\n"
    "	mov.f32 	%f21, 0f00000000;    	// 0\n"
    "	mad.f32 	%f22, %f19, %f19, %f21;\n"
    "	.loc	3	897	0\n"
    "	ld.global.f32 	%f23, [%rd3+4];\n"
    "	sub.f32 	%f24, %f12, %f23;\n"
    "	mov.f32 	%f25, %f24;\n"
    "	.loc	3	898	0\n"
    "	mul.f32 	%f26, %f10, %f24;\n"
    "	cvt.rni.f32.f32 	%f27, %f26;\n"
    "	mul.f32 	%f28, %f9, %f27;\n"
    "	sub.f32 	%f29, %f24, %f28;\n"
    "	mov.f32 	%f30, %f29;\n"
    "	.loc	3	899	0\n"
    "	mad.f32 	%f31, %f29, %f29, %f22;\n"
    "	.loc	3	897	0\n"
    "	ld.global.f32 	%f32, [%rd3+8];\n"
    "	sub.f32 	%f33, %f13, %f32;\n"
    "	mov.f32 	%f34, %f33;\n"
    "	.loc	3	898	0\n"
    "	mul.f32 	%f35, %f10, %f33;\n"
    "	cvt.rni.f32.f32 	%f36, %f35;\n"
    "	mul.f32 	%f37, %f9, %f36;\n"
    "	sub.f32 	%f38, %f33, %f37;\n"
    "	mov.f32 	%f39, %f38;\n"
    "	.loc	3	899	0\n"
    "	mad.f32 	%f40, %f38, %f38, %f31;\n"
    "	mov.f32 	%f41, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p4, %f40, %f41;\n"
    "	@!%p4 bra 	$Lt_6_8962;\n"
    "	.loc	3	907	0\n"
    "	ld.param.u64 	%rd6, [__cudaparm_nacl_kernel_initial_atype];\n"
    "	cvt.s64.s32 	%rd7, %r13;\n"
    "	mul.wide.s32 	%rd8, %r13, 4;\n"
    "	add.u64 	%rd9, %rd6, %rd8;\n"
    "	ld.global.s32 	%r15, [%rd9+0];\n"
    "	cvt.s64.s32 	%rd10, %r3;\n"
    "	mul.wide.s32 	%rd11, %r3, 4;\n"
    "	add.u64 	%rd12, %rd6, %rd11;\n"
    "	ld.global.s32 	%r16, [%rd12+0];\n"
    "	ld.param.s32 	%r17, [__cudaparm_nacl_kernel_initial_nat];\n"
    "	mul.lo.s32 	%r18, %r16, %r17;\n"
    "	add.s32 	%r19, %r15, %r18;\n"
    "	.loc	3	908	0\n"
    "	sqrt.approx.f32 	%f42, %f40;\n"
    "	cvt.s64.s32 	%rd13, %r19;\n"
    "	mul.wide.s32 	%rd14, %r19, 4;\n"
    "	ld.param.u64 	%rd15, [__cudaparm_nacl_kernel_initial_ipotro];\n"
    "	add.u64 	%rd16, %rd15, %rd14;\n"
    "	ld.global.f32 	%f43, [%rd16+0];\n"
    "	ld.param.u64 	%rd17, [__cudaparm_nacl_kernel_initial_sigm];\n"
    "	add.u64 	%rd18, %rd17, %rd14;\n"
    "	ld.global.f32 	%f44, [%rd18+0];\n"
    "	sub.f32 	%f45, %f44, %f42;\n"
    "	mul.f32 	%f46, %f43, %f45;\n"
    "	.loc	3	909	0\n"
    "	rcp.approx.f32 	%f47, %f42;\n"
    "	mul.f32 	%f48, %f47, %f47;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	mul.f32 	%f50, %f49, %f49;\n"
    "	ld.param.u64 	%rd19, [__cudaparm_nacl_kernel_initial_pc];\n"
    "	add.u64 	%rd20, %rd19, %rd14;\n"
    "	ld.global.f32 	%f51, [%rd20+0];\n"
    "	mov.f32 	%f52, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f53, %f51, %f52;\n"
    "	mul.f32 	%f54, %f50, %f53;\n"
    "	mov.f32 	%f55, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f56, %f46, %f55;\n"
    "	ex2.approx.f32 	%f57, %f56;\n"
    "	ld.param.u64 	%rd21, [__cudaparm_nacl_kernel_initial_pol];\n"
    "	add.u64 	%rd22, %rd21, %rd14;\n"
    "	ld.global.f32 	%f58, [%rd22+0];\n"
    "	mov.f32 	%f59, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f60, %f58, %f59;\n"
    "	mul.f32 	%f61, %f57, %f60;\n"
    "	mul.f32 	%f62, %f43, %f61;\n"
    "	mul.f32 	%f63, %f47, %f62;\n"
    "	sub.f32 	%f64, %f63, %f54;\n"
    "	ld.param.u64 	%rd23, [__cudaparm_nacl_kernel_initial_pd];\n"
    "	add.u64 	%rd24, %rd23, %rd14;\n"
    "	ld.global.f32 	%f65, [%rd24+0];\n"
    "	mov.f32 	%f66, 0f41000000;    	// 8\n"
    "	mul.f32 	%f67, %f65, %f66;\n"
    "	mul.f32 	%f68, %f50, %f67;\n"
    "	mul.f32 	%f69, %f48, %f68;\n"
    "	sub.f32 	%f70, %f64, %f69;\n"
    "	ld.param.u64 	%rd25, [__cudaparm_nacl_kernel_initial_zz];\n"
    "	add.u64 	%rd26, %rd25, %rd14;\n"
    "	ld.global.f32 	%f71, [%rd26+0];\n"
    "	mul.f32 	%f72, %f47, %f48;\n"
    "	mad.f32 	%f73, %f71, %f72, %f70;\n"
    "	.loc	3	913	0\n"
    "	mov.f32 	%f74, %f2;\n"
    "	mov.f32 	%f75, %f20;\n"
    "	mad.f32 	%f76, %f75, %f73, %f74;\n"
    "	mov.f32 	%f2, %f76;\n"
    "	mov.f32 	%f77, %f4;\n"
    "	mov.f32 	%f78, %f30;\n"
    "	mad.f32 	%f79, %f78, %f73, %f77;\n"
    "	mov.f32 	%f4, %f79;\n"
    "	mov.f32 	%f80, %f6;\n"
    "	mad.f32 	%f81, %f38, %f73, %f80;\n"
    "	mov.f32 	%f6, %f81;\n"
    "$Lt_6_8962:\n"
    "	add.s32 	%r13, %r13, 1;\n"
    "	add.s32 	%r7, %r7, 3;\n"
    "	add.u64 	%rd3, %rd3, 12;\n"
    "	setp.ne.s32 	%p5, %r7, %r8;\n"
    "	@%p5 bra 	$Lt_6_8706;\n"
    "	bra.uni 	$Lt_6_8194;\n"
    "$Lt_6_9730:\n"
    "	mul.lo.s32 	%r20, %r3, 3;\n"
    "	cvt.s64.s32 	%rd27, %r20;\n"
    "	mul.wide.s32 	%rd4, %r20, 4;\n"
    "$Lt_6_8194:\n"
    "	.loc	3	916	0\n"
    "	ld.param.u64 	%rd28, [__cudaparm_nacl_kernel_initial_force];\n"
    "	add.u64 	%rd29, %rd28, %rd4;\n"
    "	mov.f32 	%f82, %f2;\n"
    "	st.global.f32 	[%rd29+0], %f82;\n"
    "	mov.f32 	%f83, %f4;\n"
    "	st.global.f32 	[%rd29+4], %f83;\n"
    "	mov.f32 	%f84, %f6;\n"
    "	st.global.f32 	[%rd29+8], %f84;\n"
    "$Lt_6_7682:\n"
    "	.loc	3	918	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_initial:\n"
    "	} // nacl_kernel_initial\n"
    "\n"
    "	.entry nacl_kernel_128bit (\n"
    "		.param .u64 __cudaparm_nacl_kernel_128bit_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_128bit_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_128bit_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_128bit_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_128bit_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_128bit_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<17>;\n"
    "	.reg .u64 %rd<15>;\n"
    "	.reg .f32 %f<84>;\n"
    "	.reg .pred %p<5>;\n"
    "	.loc	3	1004	0\n"
    "$LDWbegin_nacl_kernel_128bit:\n"
    "	.loc	3	1013	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_128bit_n];\n"
    "	mov.u32 	%r3, 0;\n"
    "	setp.le.s32 	%p1, %r2, %r3;\n"
    "	@%p1 bra 	$Lt_7_8706;\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_128bit_n];\n"
    "	mov.s32 	%r4, %r2;\n"
    "	mul.wide.u16 	%r5, %rh1, 256;\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_128bit_xmax];\n"
    "	rcp.approx.f32 	%f8, %f7;\n"
    "	add.u32 	%r6, %r1, %r5;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_128bit_x];\n"
    "	mov.s64 	%rd2, %rd1;\n"
    "	cvt.s64.s32 	%rd3, %r6;\n"
    "	mul.wide.s32 	%rd4, %r6, 16;\n"
    "	add.u64 	%rd5, %rd1, %rd4;\n"
    "	ld.global.s32 	%r7, [%rd5+12];\n"
    "	ld.global.f32 	%f9, [%rd5+0];\n"
    "	ld.global.f32 	%f10, [%rd5+4];\n"
    "	ld.global.f32 	%f11, [%rd5+8];\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_128bit_nat];\n"
    "	mul.lo.s32 	%r9, %r8, %r7;\n"
    "	mov.s32 	%r10, 0;\n"
    "	mov.s32 	%r11, %r4;\n"
    "$Lt_7_7682:\n"
    " //<loop> Loop body line 1013, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1017	0\n"
    "	ld.global.s32 	%r12, [%rd2+12];\n"
    "	add.s32 	%r13, %r12, %r9;\n"
    "	ld.global.f32 	%f12, [%rd2+0];\n"
    "	sub.f32 	%f13, %f9, %f12;\n"
    "	mul.f32 	%f14, %f8, %f13;\n"
    "	cvt.rni.f32.f32 	%f15, %f14;\n"
    "	.loc	3	1013	0\n"
    "	ld.param.f32 	%f7, [__cudaparm_nacl_kernel_128bit_xmax];\n"
    "	.loc	3	1017	0\n"
    "	mul.f32 	%f16, %f7, %f15;\n"
    "	sub.f32 	%f17, %f13, %f16;\n"
    "	mov.f32 	%f18, %f17;\n"
    "	mov.f32 	%f19, 0f00000000;    	// 0\n"
    "	mad.f32 	%f20, %f17, %f17, %f19;\n"
    "	ld.global.f32 	%f21, [%rd2+4];\n"
    "	sub.f32 	%f22, %f10, %f21;\n"
    "	mov.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f8, %f22;\n"
    "	cvt.rni.f32.f32 	%f25, %f24;\n"
    "	mul.f32 	%f26, %f7, %f25;\n"
    "	sub.f32 	%f27, %f22, %f26;\n"
    "	mov.f32 	%f28, %f27;\n"
    "	mad.f32 	%f29, %f27, %f27, %f20;\n"
    "	ld.global.f32 	%f30, [%rd2+8];\n"
    "	sub.f32 	%f31, %f11, %f30;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mul.f32 	%f33, %f8, %f31;\n"
    "	cvt.rni.f32.f32 	%f34, %f33;\n"
    "	mul.f32 	%f35, %f7, %f34;\n"
    "	sub.f32 	%f36, %f31, %f35;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f38, %f36, %f36, %f29;\n"
    "	mov.f32 	%f39, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f38, %f39;\n"
    "	@!%p2 bra 	$Lt_7_7938;\n"
    "	sqrt.approx.f32 	%f40, %f38;\n"
    "	ld.param.u64 	%rd6, [__cudaparm_nacl_kernel_128bit_d_matrix];\n"
    "	cvt.s64.s32 	%rd7, %r13;\n"
    "	mul.wide.s32 	%rd8, %r13, 24;\n"
    "	add.u64 	%rd9, %rd6, %rd8;\n"
    "	ld.global.f32 	%f41, [%rd9+8];\n"
    "	ld.global.f32 	%f42, [%rd9+4];\n"
    "	sub.f32 	%f43, %f42, %f40;\n"
    "	mul.f32 	%f44, %f41, %f43;\n"
    "	rcp.approx.f32 	%f45, %f40;\n"
    "	mul.f32 	%f46, %f45, %f45;\n"
    "	mul.f32 	%f47, %f46, %f46;\n"
    "	mul.f32 	%f48, %f47, %f47;\n"
    "	ld.global.f32 	%f49, [%rd9+12];\n"
    "	mov.f32 	%f50, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f51, %f49, %f50;\n"
    "	mul.f32 	%f52, %f48, %f51;\n"
    "	mov.f32 	%f53, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f54, %f44, %f53;\n"
    "	ex2.approx.f32 	%f55, %f54;\n"
    "	ld.global.f32 	%f56, [%rd9+0];\n"
    "	mov.f32 	%f57, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f58, %f56, %f57;\n"
    "	mul.f32 	%f59, %f55, %f58;\n"
    "	mul.f32 	%f60, %f41, %f59;\n"
    "	mul.f32 	%f61, %f45, %f60;\n"
    "	sub.f32 	%f62, %f61, %f52;\n"
    "	ld.global.f32 	%f63, [%rd9+16];\n"
    "	mov.f32 	%f64, 0f41000000;    	// 8\n"
    "	mul.f32 	%f65, %f63, %f64;\n"
    "	mul.f32 	%f66, %f48, %f65;\n"
    "	mul.f32 	%f67, %f46, %f66;\n"
    "	sub.f32 	%f68, %f62, %f67;\n"
    "	ld.global.f32 	%f69, [%rd9+20];\n"
    "	mul.f32 	%f70, %f45, %f46;\n"
    "	mad.f32 	%f71, %f69, %f70, %f68;\n"
    "	mov.f32 	%f72, %f2;\n"
    "	mov.f32 	%f73, %f18;\n"
    "	mad.f32 	%f74, %f73, %f71, %f72;\n"
    "	mov.f32 	%f2, %f74;\n"
    "	mov.f32 	%f75, %f4;\n"
    "	mov.f32 	%f76, %f28;\n"
    "	mad.f32 	%f77, %f76, %f71, %f75;\n"
    "	mov.f32 	%f4, %f77;\n"
    "	mov.f32 	%f78, %f6;\n"
    "	mad.f32 	%f79, %f36, %f71, %f78;\n"
    "	mov.f32 	%f6, %f79;\n"
    "$Lt_7_7938:\n"
    "	add.s32 	%r10, %r10, 1;\n"
    "	add.u64 	%rd2, %rd2, 16;\n"
    "	.loc	3	1013	0\n"
    "	ld.param.s32 	%r2, [__cudaparm_nacl_kernel_128bit_n];\n"
    "	.loc	3	1017	0\n"
    "	setp.ne.s32 	%p3, %r2, %r10;\n"
    "	@%p3 bra 	$Lt_7_7682;\n"
    "	bra.uni 	$Lt_7_7170;\n"
    "$Lt_7_8706:\n"
    "	mul.wide.u16 	%r14, %rh1, 256;\n"
    "	add.u32 	%r6, %r1, %r14;\n"
    "$Lt_7_7170:\n"
    "	.loc	3	1019	0\n"
    "	ld.param.u64 	%rd10, [__cudaparm_nacl_kernel_128bit_fvec];\n"
    "	mul.lo.s32 	%r15, %r6, 3;\n"
    "	cvt.s64.s32 	%rd11, %r15;\n"
    "	mul.wide.s32 	%rd12, %r15, 4;\n"
    "	add.u64 	%rd13, %rd10, %rd12;\n"
    "	mov.f32 	%f80, %f2;\n"
    "	st.global.f32 	[%rd13+0], %f80;\n"
    "	mov.f32 	%f81, %f4;\n"
    "	st.global.f32 	[%rd13+4], %f81;\n"
    "	mov.f32 	%f82, %f6;\n"
    "	st.global.f32 	[%rd13+8], %f82;\n"
    "	.loc	3	1020	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_128bit:\n"
    "	} // nacl_kernel_128bit\n"
    "\n"
    "	.entry nacl_kernel_shared (\n"
    "		.param .u64 __cudaparm_nacl_kernel_shared_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_shared_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_shared_nat,\n"
    "		.param .u64 __cudaparm_nacl_kernel_shared_d_matrix,\n"
    "		.param .f32 __cudaparm_nacl_kernel_shared_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_shared_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<98>;\n"
    "	.reg .u64 %rd<220>;\n"
    "	.reg .f32 %f<3503>;\n"
    "	.reg .pred %p<72>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_16615_35_non_const_s_xj38184[4096];\n"
    "	.loc	3	1156	0\n"
    "$LDWbegin_nacl_kernel_shared:\n"
    "	.loc	3	1166	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	1167	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_shared_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	1168	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_shared_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_shared_n];\n"
    "	shr.s32 	%r8, %r7, 31;\n"
    "	mov.s32 	%r9, 255;\n"
    "	and.b32 	%r10, %r8, %r9;\n"
    "	add.s32 	%r11, %r10, %r7;\n"
    "	shr.s32 	%r12, %r11, 8;\n"
    "	mul.lo.s32 	%r13, %r12, 256;\n"
    "	mov.u32 	%r14, 0;\n"
    "	setp.le.s32 	%p1, %r13, %r14;\n"
    "	@%p1 bra 	$Lt_8_12034;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_16615_35_non_const_s_xj38184;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_shared_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	add.s32 	%r15, %r13, 255;\n"
    "	shr.s32 	%r16, %r15, 31;\n"
    "	mov.s32 	%r17, 255;\n"
    "	and.b32 	%r18, %r16, %r17;\n"
    "	add.s32 	%r19, %r18, %r15;\n"
    "	shr.s32 	%r20, %r19, 8;\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd5, %rd7;\n"
    "	mov.s32 	%r21, 0;\n"
    "	mov.s32 	%r22, %r20;\n"
    "$Lt_8_12546:\n"
    " //<loop> Loop body line 1168, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1173	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	1174	0\n"
    "	add.s32 	%r23, %r21, %r1;\n"
    "	cvt.s64.s32 	%rd9, %r23;\n"
    "	mul.wide.s32 	%rd10, %r23, 16;\n"
    "	add.u64 	%rd11, %rd1, %rd10;\n"
    "	ld.global.f32 	%f15, [%rd11+0];\n"
    "	st.shared.f32 	[%rd8+0], %f15;\n"
    "	ld.global.f32 	%f16, [%rd11+4];\n"
    "	st.shared.f32 	[%rd8+4], %f16;\n"
    "	ld.global.f32 	%f17, [%rd11+8];\n"
    "	st.shared.f32 	[%rd8+8], %f17;\n"
    "	ld.global.s32 	%r24, [%rd11+12];\n"
    "	st.shared.s32 	[%rd8+12], %r24;\n"
    "	.loc	3	1175	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	24	0\n"
    "	mov.s64 	%rd12, 0;\n"
    "	mov.s32 	%r25, 0;\n"
    "	mov.f32 	%f11, %f12;\n"
    "	mov.f32 	%f18, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_8_13314:\n"
    " //<loop> Loop body line 24, nesting depth: 2, iterations: 4\n"
    "	.loc	3	1178	0\n"
    "	add.u64 	%rd13, %rd12, %rd5;\n"
    "	ld.shared.s32 	%r26, [%rd13+12];\n"
    "	add.s32 	%r27, %r26, %r6;\n"
    "	add.u64 	%rd14, %rd12, %rd5;\n"
    "	ld.shared.f32 	%f20, [%rd14+0];\n"
    "	sub.f32 	%f21, %f19, %f20;\n"
    "	mov.f32 	%f22, %f21;\n"
    "	mul.f32 	%f23, %f14, %f22;\n"
    "	cvt.rni.f32.f32 	%f24, %f23;\n"
    "	mul.f32 	%f25, %f13, %f24;\n"
    "	sub.f32 	%f26, %f21, %f25;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f28, 0f00000000;    	// 0\n"
    "	mad.f32 	%f29, %f26, %f26, %f28;\n"
    "	ld.shared.f32 	%f30, [%rd14+4];\n"
    "	sub.f32 	%f31, %f18, %f30;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mul.f32 	%f33, %f14, %f32;\n"
    "	cvt.rni.f32.f32 	%f34, %f33;\n"
    "	mul.f32 	%f35, %f13, %f34;\n"
    "	sub.f32 	%f36, %f31, %f35;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f38, %f36, %f36, %f29;\n"
    "	ld.shared.f32 	%f39, [%rd14+8];\n"
    "	sub.f32 	%f40, %f11, %f39;\n"
    "	mul.f32 	%f41, %f40, %f14;\n"
    "	cvt.rni.f32.f32 	%f42, %f41;\n"
    "	mul.f32 	%f43, %f13, %f42;\n"
    "	sub.f32 	%f44, %f40, %f43;\n"
    "	mad.f32 	%f45, %f44, %f44, %f38;\n"
    "	mov.f32 	%f46, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f45, %f46;\n"
    "	@!%p2 bra 	$Lt_8_13570;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd15, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd16, %r27;\n"
    "	mul.wide.s32 	%rd17, %r27, 24;\n"
    "	add.u64 	%rd18, %rd15, %rd17;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f49, [%rd18+4];\n"
    "	sub.f32 	%f50, %f49, %f47;\n"
    "	mul.f32 	%f51, %f48, %f50;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f56, [%rd18+12];\n"
    "	mov.f32 	%f57, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f58, %f56, %f57;\n"
    "	mul.f32 	%f59, %f55, %f58;\n"
    "	mov.f32 	%f60, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f61, %f51, %f60;\n"
    "	ex2.approx.f32 	%f62, %f61;\n"
    "	ld.global.f32 	%f63, [%rd18+0];\n"
    "	mov.f32 	%f64, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f65, %f63, %f64;\n"
    "	mul.f32 	%f66, %f62, %f65;\n"
    "	mul.f32 	%f67, %f48, %f66;\n"
    "	mul.f32 	%f68, %f52, %f67;\n"
    "	sub.f32 	%f69, %f68, %f59;\n"
    "	ld.global.f32 	%f70, [%rd18+16];\n"
    "	mov.f32 	%f71, 0f41000000;    	// 8\n"
    "	mul.f32 	%f72, %f70, %f71;\n"
    "	mul.f32 	%f73, %f55, %f72;\n"
    "	mul.f32 	%f74, %f53, %f73;\n"
    "	sub.f32 	%f75, %f69, %f74;\n"
    "	ld.global.f32 	%f76, [%rd18+20];\n"
    "	mul.f32 	%f77, %f52, %f53;\n"
    "	mad.f32 	%f78, %f76, %f77, %f75;\n"
    "	mov.f32 	%f79, %f2;\n"
    "	mov.f32 	%f80, %f27;\n"
    "	mad.f32 	%f81, %f80, %f78, %f79;\n"
    "	mov.f32 	%f2, %f81;\n"
    "	mov.f32 	%f82, %f4;\n"
    "	mov.f32 	%f83, %f37;\n"
    "	mad.f32 	%f84, %f83, %f78, %f82;\n"
    "	mov.f32 	%f4, %f84;\n"
    "	mov.f32 	%f85, %f6;\n"
    "	mad.f32 	%f86, %f44, %f78, %f85;\n"
    "	mov.f32 	%f6, %f86;\n"
    "$Lt_8_13570:\n"
    "	ld.shared.s32 	%r28, [%rd13+28];\n"
    "	add.s32 	%r27, %r28, %r6;\n"
    "	ld.shared.f32 	%f87, [%rd14+16];\n"
    "	sub.f32 	%f88, %f19, %f87;\n"
    "	mov.f32 	%f89, %f88;\n"
    "	mul.f32 	%f90, %f14, %f89;\n"
    "	cvt.rni.f32.f32 	%f91, %f90;\n"
    "	mul.f32 	%f92, %f13, %f91;\n"
    "	sub.f32 	%f26, %f88, %f92;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f93, 0f00000000;    	// 0\n"
    "	mad.f32 	%f94, %f26, %f26, %f93;\n"
    "	ld.shared.f32 	%f95, [%rd14+20];\n"
    "	sub.f32 	%f96, %f18, %f95;\n"
    "	mov.f32 	%f97, %f96;\n"
    "	mul.f32 	%f98, %f14, %f97;\n"
    "	cvt.rni.f32.f32 	%f99, %f98;\n"
    "	mul.f32 	%f100, %f13, %f99;\n"
    "	sub.f32 	%f36, %f96, %f100;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f101, %f36, %f36, %f94;\n"
    "	ld.shared.f32 	%f102, [%rd14+24];\n"
    "	sub.f32 	%f103, %f11, %f102;\n"
    "	mul.f32 	%f104, %f103, %f14;\n"
    "	cvt.rni.f32.f32 	%f105, %f104;\n"
    "	mul.f32 	%f106, %f13, %f105;\n"
    "	sub.f32 	%f44, %f103, %f106;\n"
    "	mad.f32 	%f45, %f44, %f44, %f101;\n"
    "	mov.f32 	%f107, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p3, %f45, %f107;\n"
    "	@!%p3 bra 	$Lt_8_14082;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd19, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd20, %r27;\n"
    "	mul.wide.s32 	%rd21, %r27, 24;\n"
    "	add.u64 	%rd18, %rd19, %rd21;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f108, [%rd18+4];\n"
    "	sub.f32 	%f109, %f108, %f47;\n"
    "	mul.f32 	%f51, %f48, %f109;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f110, [%rd18+12];\n"
    "	mov.f32 	%f111, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f112, %f110, %f111;\n"
    "	mul.f32 	%f113, %f55, %f112;\n"
    "	mov.f32 	%f114, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f115, %f51, %f114;\n"
    "	ex2.approx.f32 	%f116, %f115;\n"
    "	ld.global.f32 	%f117, [%rd18+0];\n"
    "	mov.f32 	%f118, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f119, %f117, %f118;\n"
    "	mul.f32 	%f120, %f116, %f119;\n"
    "	mul.f32 	%f121, %f48, %f120;\n"
    "	mul.f32 	%f122, %f52, %f121;\n"
    "	sub.f32 	%f123, %f122, %f113;\n"
    "	ld.global.f32 	%f124, [%rd18+16];\n"
    "	mov.f32 	%f125, 0f41000000;   	// 8\n"
    "	mul.f32 	%f126, %f124, %f125;\n"
    "	mul.f32 	%f127, %f55, %f126;\n"
    "	mul.f32 	%f128, %f53, %f127;\n"
    "	sub.f32 	%f129, %f123, %f128;\n"
    "	ld.global.f32 	%f130, [%rd18+20];\n"
    "	mul.f32 	%f131, %f52, %f53;\n"
    "	mad.f32 	%f78, %f130, %f131, %f129;\n"
    "	mov.f32 	%f132, %f2;\n"
    "	mov.f32 	%f133, %f27;\n"
    "	mad.f32 	%f134, %f133, %f78, %f132;\n"
    "	mov.f32 	%f2, %f134;\n"
    "	mov.f32 	%f135, %f4;\n"
    "	mov.f32 	%f136, %f37;\n"
    "	mad.f32 	%f137, %f136, %f78, %f135;\n"
    "	mov.f32 	%f4, %f137;\n"
    "	mov.f32 	%f138, %f6;\n"
    "	mad.f32 	%f139, %f44, %f78, %f138;\n"
    "	mov.f32 	%f6, %f139;\n"
    "$Lt_8_14082:\n"
    "	ld.shared.s32 	%r29, [%rd13+44];\n"
    "	add.s32 	%r27, %r29, %r6;\n"
    "	ld.shared.f32 	%f140, [%rd14+32];\n"
    "	sub.f32 	%f141, %f19, %f140;\n"
    "	mov.f32 	%f142, %f141;\n"
    "	mul.f32 	%f143, %f14, %f142;\n"
    "	cvt.rni.f32.f32 	%f144, %f143;\n"
    "	mul.f32 	%f145, %f13, %f144;\n"
    "	sub.f32 	%f26, %f141, %f145;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f146, 0f00000000;   	// 0\n"
    "	mad.f32 	%f147, %f26, %f26, %f146;\n"
    "	ld.shared.f32 	%f148, [%rd14+36];\n"
    "	sub.f32 	%f149, %f18, %f148;\n"
    "	mov.f32 	%f150, %f149;\n"
    "	mul.f32 	%f151, %f14, %f150;\n"
    "	cvt.rni.f32.f32 	%f152, %f151;\n"
    "	mul.f32 	%f153, %f13, %f152;\n"
    "	sub.f32 	%f36, %f149, %f153;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f154, %f36, %f36, %f147;\n"
    "	ld.shared.f32 	%f155, [%rd14+40];\n"
    "	sub.f32 	%f156, %f11, %f155;\n"
    "	mul.f32 	%f157, %f156, %f14;\n"
    "	cvt.rni.f32.f32 	%f158, %f157;\n"
    "	mul.f32 	%f159, %f13, %f158;\n"
    "	sub.f32 	%f44, %f156, %f159;\n"
    "	mad.f32 	%f45, %f44, %f44, %f154;\n"
    "	mov.f32 	%f160, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p4, %f45, %f160;\n"
    "	@!%p4 bra 	$Lt_8_14594;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd22, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd23, %r27;\n"
    "	mul.wide.s32 	%rd24, %r27, 24;\n"
    "	add.u64 	%rd18, %rd22, %rd24;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f161, [%rd18+4];\n"
    "	sub.f32 	%f162, %f161, %f47;\n"
    "	mul.f32 	%f51, %f48, %f162;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f163, [%rd18+12];\n"
    "	mov.f32 	%f164, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f165, %f163, %f164;\n"
    "	mul.f32 	%f166, %f55, %f165;\n"
    "	mov.f32 	%f167, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f168, %f51, %f167;\n"
    "	ex2.approx.f32 	%f169, %f168;\n"
    "	ld.global.f32 	%f170, [%rd18+0];\n"
    "	mov.f32 	%f171, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f172, %f170, %f171;\n"
    "	mul.f32 	%f173, %f169, %f172;\n"
    "	mul.f32 	%f174, %f48, %f173;\n"
    "	mul.f32 	%f175, %f52, %f174;\n"
    "	sub.f32 	%f176, %f175, %f166;\n"
    "	ld.global.f32 	%f177, [%rd18+16];\n"
    "	mov.f32 	%f178, 0f41000000;   	// 8\n"
    "	mul.f32 	%f179, %f177, %f178;\n"
    "	mul.f32 	%f180, %f55, %f179;\n"
    "	mul.f32 	%f181, %f53, %f180;\n"
    "	sub.f32 	%f182, %f176, %f181;\n"
    "	ld.global.f32 	%f183, [%rd18+20];\n"
    "	mul.f32 	%f184, %f52, %f53;\n"
    "	mad.f32 	%f78, %f183, %f184, %f182;\n"
    "	mov.f32 	%f185, %f2;\n"
    "	mov.f32 	%f186, %f27;\n"
    "	mad.f32 	%f187, %f186, %f78, %f185;\n"
    "	mov.f32 	%f2, %f187;\n"
    "	mov.f32 	%f188, %f4;\n"
    "	mov.f32 	%f189, %f37;\n"
    "	mad.f32 	%f190, %f189, %f78, %f188;\n"
    "	mov.f32 	%f4, %f190;\n"
    "	mov.f32 	%f191, %f6;\n"
    "	mad.f32 	%f192, %f44, %f78, %f191;\n"
    "	mov.f32 	%f6, %f192;\n"
    "$Lt_8_14594:\n"
    "	ld.shared.s32 	%r30, [%rd13+60];\n"
    "	add.s32 	%r27, %r30, %r6;\n"
    "	ld.shared.f32 	%f193, [%rd14+48];\n"
    "	sub.f32 	%f194, %f19, %f193;\n"
    "	mov.f32 	%f195, %f194;\n"
    "	mul.f32 	%f196, %f14, %f195;\n"
    "	cvt.rni.f32.f32 	%f197, %f196;\n"
    "	mul.f32 	%f198, %f13, %f197;\n"
    "	sub.f32 	%f26, %f194, %f198;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f199, 0f00000000;   	// 0\n"
    "	mad.f32 	%f200, %f26, %f26, %f199;\n"
    "	ld.shared.f32 	%f201, [%rd14+52];\n"
    "	sub.f32 	%f202, %f18, %f201;\n"
    "	mov.f32 	%f203, %f202;\n"
    "	mul.f32 	%f204, %f14, %f203;\n"
    "	cvt.rni.f32.f32 	%f205, %f204;\n"
    "	mul.f32 	%f206, %f13, %f205;\n"
    "	sub.f32 	%f36, %f202, %f206;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f207, %f36, %f36, %f200;\n"
    "	ld.shared.f32 	%f208, [%rd14+56];\n"
    "	sub.f32 	%f209, %f11, %f208;\n"
    "	mul.f32 	%f210, %f209, %f14;\n"
    "	cvt.rni.f32.f32 	%f211, %f210;\n"
    "	mul.f32 	%f212, %f13, %f211;\n"
    "	sub.f32 	%f44, %f209, %f212;\n"
    "	mad.f32 	%f45, %f44, %f44, %f207;\n"
    "	mov.f32 	%f213, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p5, %f45, %f213;\n"
    "	@!%p5 bra 	$Lt_8_15106;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd25, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd26, %r27;\n"
    "	mul.wide.s32 	%rd27, %r27, 24;\n"
    "	add.u64 	%rd18, %rd25, %rd27;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f214, [%rd18+4];\n"
    "	sub.f32 	%f215, %f214, %f47;\n"
    "	mul.f32 	%f51, %f48, %f215;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f216, [%rd18+12];\n"
    "	mov.f32 	%f217, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f218, %f216, %f217;\n"
    "	mul.f32 	%f219, %f55, %f218;\n"
    "	mov.f32 	%f220, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f221, %f51, %f220;\n"
    "	ex2.approx.f32 	%f222, %f221;\n"
    "	ld.global.f32 	%f223, [%rd18+0];\n"
    "	mov.f32 	%f224, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f225, %f223, %f224;\n"
    "	mul.f32 	%f226, %f222, %f225;\n"
    "	mul.f32 	%f227, %f48, %f226;\n"
    "	mul.f32 	%f228, %f52, %f227;\n"
    "	sub.f32 	%f229, %f228, %f219;\n"
    "	ld.global.f32 	%f230, [%rd18+16];\n"
    "	mov.f32 	%f231, 0f41000000;   	// 8\n"
    "	mul.f32 	%f232, %f230, %f231;\n"
    "	mul.f32 	%f233, %f55, %f232;\n"
    "	mul.f32 	%f234, %f53, %f233;\n"
    "	sub.f32 	%f235, %f229, %f234;\n"
    "	ld.global.f32 	%f236, [%rd18+20];\n"
    "	mul.f32 	%f237, %f52, %f53;\n"
    "	mad.f32 	%f78, %f236, %f237, %f235;\n"
    "	mov.f32 	%f238, %f2;\n"
    "	mov.f32 	%f239, %f27;\n"
    "	mad.f32 	%f240, %f239, %f78, %f238;\n"
    "	mov.f32 	%f2, %f240;\n"
    "	mov.f32 	%f241, %f4;\n"
    "	mov.f32 	%f242, %f37;\n"
    "	mad.f32 	%f243, %f242, %f78, %f241;\n"
    "	mov.f32 	%f4, %f243;\n"
    "	mov.f32 	%f244, %f6;\n"
    "	mad.f32 	%f245, %f44, %f78, %f244;\n"
    "	mov.f32 	%f6, %f245;\n"
    "$Lt_8_15106:\n"
    "	ld.shared.s32 	%r31, [%rd13+76];\n"
    "	add.s32 	%r27, %r31, %r6;\n"
    "	ld.shared.f32 	%f246, [%rd14+64];\n"
    "	sub.f32 	%f247, %f19, %f246;\n"
    "	mov.f32 	%f248, %f247;\n"
    "	mul.f32 	%f249, %f14, %f248;\n"
    "	cvt.rni.f32.f32 	%f250, %f249;\n"
    "	mul.f32 	%f251, %f13, %f250;\n"
    "	sub.f32 	%f26, %f247, %f251;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f252, 0f00000000;   	// 0\n"
    "	mad.f32 	%f253, %f26, %f26, %f252;\n"
    "	ld.shared.f32 	%f254, [%rd14+68];\n"
    "	sub.f32 	%f255, %f18, %f254;\n"
    "	mov.f32 	%f256, %f255;\n"
    "	mul.f32 	%f257, %f14, %f256;\n"
    "	cvt.rni.f32.f32 	%f258, %f257;\n"
    "	mul.f32 	%f259, %f13, %f258;\n"
    "	sub.f32 	%f36, %f255, %f259;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f260, %f36, %f36, %f253;\n"
    "	ld.shared.f32 	%f261, [%rd14+72];\n"
    "	sub.f32 	%f262, %f11, %f261;\n"
    "	mul.f32 	%f263, %f262, %f14;\n"
    "	cvt.rni.f32.f32 	%f264, %f263;\n"
    "	mul.f32 	%f265, %f13, %f264;\n"
    "	sub.f32 	%f44, %f262, %f265;\n"
    "	mad.f32 	%f45, %f44, %f44, %f260;\n"
    "	mov.f32 	%f266, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p6, %f45, %f266;\n"
    "	@!%p6 bra 	$Lt_8_15618;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd28, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd29, %r27;\n"
    "	mul.wide.s32 	%rd30, %r27, 24;\n"
    "	add.u64 	%rd18, %rd28, %rd30;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f267, [%rd18+4];\n"
    "	sub.f32 	%f268, %f267, %f47;\n"
    "	mul.f32 	%f51, %f48, %f268;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f269, [%rd18+12];\n"
    "	mov.f32 	%f270, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f271, %f269, %f270;\n"
    "	mul.f32 	%f272, %f55, %f271;\n"
    "	mov.f32 	%f273, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f274, %f51, %f273;\n"
    "	ex2.approx.f32 	%f275, %f274;\n"
    "	ld.global.f32 	%f276, [%rd18+0];\n"
    "	mov.f32 	%f277, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f278, %f276, %f277;\n"
    "	mul.f32 	%f279, %f275, %f278;\n"
    "	mul.f32 	%f280, %f48, %f279;\n"
    "	mul.f32 	%f281, %f52, %f280;\n"
    "	sub.f32 	%f282, %f281, %f272;\n"
    "	ld.global.f32 	%f283, [%rd18+16];\n"
    "	mov.f32 	%f284, 0f41000000;   	// 8\n"
    "	mul.f32 	%f285, %f283, %f284;\n"
    "	mul.f32 	%f286, %f55, %f285;\n"
    "	mul.f32 	%f287, %f53, %f286;\n"
    "	sub.f32 	%f288, %f282, %f287;\n"
    "	ld.global.f32 	%f289, [%rd18+20];\n"
    "	mul.f32 	%f290, %f52, %f53;\n"
    "	mad.f32 	%f78, %f289, %f290, %f288;\n"
    "	mov.f32 	%f291, %f2;\n"
    "	mov.f32 	%f292, %f27;\n"
    "	mad.f32 	%f293, %f292, %f78, %f291;\n"
    "	mov.f32 	%f2, %f293;\n"
    "	mov.f32 	%f294, %f4;\n"
    "	mov.f32 	%f295, %f37;\n"
    "	mad.f32 	%f296, %f295, %f78, %f294;\n"
    "	mov.f32 	%f4, %f296;\n"
    "	mov.f32 	%f297, %f6;\n"
    "	mad.f32 	%f298, %f44, %f78, %f297;\n"
    "	mov.f32 	%f6, %f298;\n"
    "$Lt_8_15618:\n"
    "	ld.shared.s32 	%r32, [%rd13+92];\n"
    "	add.s32 	%r27, %r32, %r6;\n"
    "	ld.shared.f32 	%f299, [%rd14+80];\n"
    "	sub.f32 	%f300, %f19, %f299;\n"
    "	mov.f32 	%f301, %f300;\n"
    "	mul.f32 	%f302, %f14, %f301;\n"
    "	cvt.rni.f32.f32 	%f303, %f302;\n"
    "	mul.f32 	%f304, %f13, %f303;\n"
    "	sub.f32 	%f26, %f300, %f304;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f305, 0f00000000;   	// 0\n"
    "	mad.f32 	%f306, %f26, %f26, %f305;\n"
    "	ld.shared.f32 	%f307, [%rd14+84];\n"
    "	sub.f32 	%f308, %f18, %f307;\n"
    "	mov.f32 	%f309, %f308;\n"
    "	mul.f32 	%f310, %f14, %f309;\n"
    "	cvt.rni.f32.f32 	%f311, %f310;\n"
    "	mul.f32 	%f312, %f13, %f311;\n"
    "	sub.f32 	%f36, %f308, %f312;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f313, %f36, %f36, %f306;\n"
    "	ld.shared.f32 	%f314, [%rd14+88];\n"
    "	sub.f32 	%f315, %f11, %f314;\n"
    "	mul.f32 	%f316, %f315, %f14;\n"
    "	cvt.rni.f32.f32 	%f317, %f316;\n"
    "	mul.f32 	%f318, %f13, %f317;\n"
    "	sub.f32 	%f44, %f315, %f318;\n"
    "	mad.f32 	%f45, %f44, %f44, %f313;\n"
    "	mov.f32 	%f319, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p7, %f45, %f319;\n"
    "	@!%p7 bra 	$Lt_8_16130;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd31, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd32, %r27;\n"
    "	mul.wide.s32 	%rd33, %r27, 24;\n"
    "	add.u64 	%rd18, %rd31, %rd33;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f320, [%rd18+4];\n"
    "	sub.f32 	%f321, %f320, %f47;\n"
    "	mul.f32 	%f51, %f48, %f321;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f322, [%rd18+12];\n"
    "	mov.f32 	%f323, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f324, %f322, %f323;\n"
    "	mul.f32 	%f325, %f55, %f324;\n"
    "	mov.f32 	%f326, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f327, %f51, %f326;\n"
    "	ex2.approx.f32 	%f328, %f327;\n"
    "	ld.global.f32 	%f329, [%rd18+0];\n"
    "	mov.f32 	%f330, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f331, %f329, %f330;\n"
    "	mul.f32 	%f332, %f328, %f331;\n"
    "	mul.f32 	%f333, %f48, %f332;\n"
    "	mul.f32 	%f334, %f52, %f333;\n"
    "	sub.f32 	%f335, %f334, %f325;\n"
    "	ld.global.f32 	%f336, [%rd18+16];\n"
    "	mov.f32 	%f337, 0f41000000;   	// 8\n"
    "	mul.f32 	%f338, %f336, %f337;\n"
    "	mul.f32 	%f339, %f55, %f338;\n"
    "	mul.f32 	%f340, %f53, %f339;\n"
    "	sub.f32 	%f341, %f335, %f340;\n"
    "	ld.global.f32 	%f342, [%rd18+20];\n"
    "	mul.f32 	%f343, %f52, %f53;\n"
    "	mad.f32 	%f78, %f342, %f343, %f341;\n"
    "	mov.f32 	%f344, %f2;\n"
    "	mov.f32 	%f345, %f27;\n"
    "	mad.f32 	%f346, %f345, %f78, %f344;\n"
    "	mov.f32 	%f2, %f346;\n"
    "	mov.f32 	%f347, %f4;\n"
    "	mov.f32 	%f348, %f37;\n"
    "	mad.f32 	%f349, %f348, %f78, %f347;\n"
    "	mov.f32 	%f4, %f349;\n"
    "	mov.f32 	%f350, %f6;\n"
    "	mad.f32 	%f351, %f44, %f78, %f350;\n"
    "	mov.f32 	%f6, %f351;\n"
    "$Lt_8_16130:\n"
    "	ld.shared.s32 	%r33, [%rd13+108];\n"
    "	add.s32 	%r27, %r33, %r6;\n"
    "	ld.shared.f32 	%f352, [%rd14+96];\n"
    "	sub.f32 	%f353, %f19, %f352;\n"
    "	mov.f32 	%f354, %f353;\n"
    "	mul.f32 	%f355, %f14, %f354;\n"
    "	cvt.rni.f32.f32 	%f356, %f355;\n"
    "	mul.f32 	%f357, %f13, %f356;\n"
    "	sub.f32 	%f26, %f353, %f357;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f358, 0f00000000;   	// 0\n"
    "	mad.f32 	%f359, %f26, %f26, %f358;\n"
    "	ld.shared.f32 	%f360, [%rd14+100];\n"
    "	sub.f32 	%f361, %f18, %f360;\n"
    "	mov.f32 	%f362, %f361;\n"
    "	mul.f32 	%f363, %f14, %f362;\n"
    "	cvt.rni.f32.f32 	%f364, %f363;\n"
    "	mul.f32 	%f365, %f13, %f364;\n"
    "	sub.f32 	%f36, %f361, %f365;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f366, %f36, %f36, %f359;\n"
    "	ld.shared.f32 	%f367, [%rd14+104];\n"
    "	sub.f32 	%f368, %f11, %f367;\n"
    "	mul.f32 	%f369, %f368, %f14;\n"
    "	cvt.rni.f32.f32 	%f370, %f369;\n"
    "	mul.f32 	%f371, %f13, %f370;\n"
    "	sub.f32 	%f44, %f368, %f371;\n"
    "	mad.f32 	%f45, %f44, %f44, %f366;\n"
    "	mov.f32 	%f372, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p8, %f45, %f372;\n"
    "	@!%p8 bra 	$Lt_8_16642;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd34, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd35, %r27;\n"
    "	mul.wide.s32 	%rd36, %r27, 24;\n"
    "	add.u64 	%rd18, %rd34, %rd36;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f373, [%rd18+4];\n"
    "	sub.f32 	%f374, %f373, %f47;\n"
    "	mul.f32 	%f51, %f48, %f374;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f375, [%rd18+12];\n"
    "	mov.f32 	%f376, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f377, %f375, %f376;\n"
    "	mul.f32 	%f378, %f55, %f377;\n"
    "	mov.f32 	%f379, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f380, %f51, %f379;\n"
    "	ex2.approx.f32 	%f381, %f380;\n"
    "	ld.global.f32 	%f382, [%rd18+0];\n"
    "	mov.f32 	%f383, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f384, %f382, %f383;\n"
    "	mul.f32 	%f385, %f381, %f384;\n"
    "	mul.f32 	%f386, %f48, %f385;\n"
    "	mul.f32 	%f387, %f52, %f386;\n"
    "	sub.f32 	%f388, %f387, %f378;\n"
    "	ld.global.f32 	%f389, [%rd18+16];\n"
    "	mov.f32 	%f390, 0f41000000;   	// 8\n"
    "	mul.f32 	%f391, %f389, %f390;\n"
    "	mul.f32 	%f392, %f55, %f391;\n"
    "	mul.f32 	%f393, %f53, %f392;\n"
    "	sub.f32 	%f394, %f388, %f393;\n"
    "	ld.global.f32 	%f395, [%rd18+20];\n"
    "	mul.f32 	%f396, %f52, %f53;\n"
    "	mad.f32 	%f78, %f395, %f396, %f394;\n"
    "	mov.f32 	%f397, %f2;\n"
    "	mov.f32 	%f398, %f27;\n"
    "	mad.f32 	%f399, %f398, %f78, %f397;\n"
    "	mov.f32 	%f2, %f399;\n"
    "	mov.f32 	%f400, %f4;\n"
    "	mov.f32 	%f401, %f37;\n"
    "	mad.f32 	%f402, %f401, %f78, %f400;\n"
    "	mov.f32 	%f4, %f402;\n"
    "	mov.f32 	%f403, %f6;\n"
    "	mad.f32 	%f404, %f44, %f78, %f403;\n"
    "	mov.f32 	%f6, %f404;\n"
    "$Lt_8_16642:\n"
    "	ld.shared.s32 	%r34, [%rd13+124];\n"
    "	add.s32 	%r27, %r34, %r6;\n"
    "	ld.shared.f32 	%f405, [%rd14+112];\n"
    "	sub.f32 	%f406, %f19, %f405;\n"
    "	mov.f32 	%f407, %f406;\n"
    "	mul.f32 	%f408, %f14, %f407;\n"
    "	cvt.rni.f32.f32 	%f409, %f408;\n"
    "	mul.f32 	%f410, %f13, %f409;\n"
    "	sub.f32 	%f26, %f406, %f410;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f411, 0f00000000;   	// 0\n"
    "	mad.f32 	%f412, %f26, %f26, %f411;\n"
    "	ld.shared.f32 	%f413, [%rd14+116];\n"
    "	sub.f32 	%f414, %f18, %f413;\n"
    "	mov.f32 	%f415, %f414;\n"
    "	mul.f32 	%f416, %f14, %f415;\n"
    "	cvt.rni.f32.f32 	%f417, %f416;\n"
    "	mul.f32 	%f418, %f13, %f417;\n"
    "	sub.f32 	%f36, %f414, %f418;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f419, %f36, %f36, %f412;\n"
    "	ld.shared.f32 	%f420, [%rd14+120];\n"
    "	sub.f32 	%f421, %f11, %f420;\n"
    "	mul.f32 	%f422, %f421, %f14;\n"
    "	cvt.rni.f32.f32 	%f423, %f422;\n"
    "	mul.f32 	%f424, %f13, %f423;\n"
    "	sub.f32 	%f44, %f421, %f424;\n"
    "	mad.f32 	%f45, %f44, %f44, %f419;\n"
    "	mov.f32 	%f425, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p9, %f45, %f425;\n"
    "	@!%p9 bra 	$Lt_8_17154;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd37, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd38, %r27;\n"
    "	mul.wide.s32 	%rd39, %r27, 24;\n"
    "	add.u64 	%rd18, %rd37, %rd39;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f426, [%rd18+4];\n"
    "	sub.f32 	%f427, %f426, %f47;\n"
    "	mul.f32 	%f51, %f48, %f427;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f428, [%rd18+12];\n"
    "	mov.f32 	%f429, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f430, %f428, %f429;\n"
    "	mul.f32 	%f431, %f55, %f430;\n"
    "	mov.f32 	%f432, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f433, %f51, %f432;\n"
    "	ex2.approx.f32 	%f434, %f433;\n"
    "	ld.global.f32 	%f435, [%rd18+0];\n"
    "	mov.f32 	%f436, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f437, %f435, %f436;\n"
    "	mul.f32 	%f438, %f434, %f437;\n"
    "	mul.f32 	%f439, %f48, %f438;\n"
    "	mul.f32 	%f440, %f52, %f439;\n"
    "	sub.f32 	%f441, %f440, %f431;\n"
    "	ld.global.f32 	%f442, [%rd18+16];\n"
    "	mov.f32 	%f443, 0f41000000;   	// 8\n"
    "	mul.f32 	%f444, %f442, %f443;\n"
    "	mul.f32 	%f445, %f55, %f444;\n"
    "	mul.f32 	%f446, %f53, %f445;\n"
    "	sub.f32 	%f447, %f441, %f446;\n"
    "	ld.global.f32 	%f448, [%rd18+20];\n"
    "	mul.f32 	%f449, %f52, %f53;\n"
    "	mad.f32 	%f78, %f448, %f449, %f447;\n"
    "	mov.f32 	%f450, %f2;\n"
    "	mov.f32 	%f451, %f27;\n"
    "	mad.f32 	%f452, %f451, %f78, %f450;\n"
    "	mov.f32 	%f2, %f452;\n"
    "	mov.f32 	%f453, %f4;\n"
    "	mov.f32 	%f454, %f37;\n"
    "	mad.f32 	%f455, %f454, %f78, %f453;\n"
    "	mov.f32 	%f4, %f455;\n"
    "	mov.f32 	%f456, %f6;\n"
    "	mad.f32 	%f457, %f44, %f78, %f456;\n"
    "	mov.f32 	%f6, %f457;\n"
    "$Lt_8_17154:\n"
    "	ld.shared.s32 	%r35, [%rd13+140];\n"
    "	add.s32 	%r27, %r35, %r6;\n"
    "	ld.shared.f32 	%f458, [%rd14+128];\n"
    "	sub.f32 	%f459, %f19, %f458;\n"
    "	mov.f32 	%f460, %f459;\n"
    "	mul.f32 	%f461, %f14, %f460;\n"
    "	cvt.rni.f32.f32 	%f462, %f461;\n"
    "	mul.f32 	%f463, %f13, %f462;\n"
    "	sub.f32 	%f26, %f459, %f463;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f464, 0f00000000;   	// 0\n"
    "	mad.f32 	%f465, %f26, %f26, %f464;\n"
    "	ld.shared.f32 	%f466, [%rd14+132];\n"
    "	sub.f32 	%f467, %f18, %f466;\n"
    "	mov.f32 	%f468, %f467;\n"
    "	mul.f32 	%f469, %f14, %f468;\n"
    "	cvt.rni.f32.f32 	%f470, %f469;\n"
    "	mul.f32 	%f471, %f13, %f470;\n"
    "	sub.f32 	%f36, %f467, %f471;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f472, %f36, %f36, %f465;\n"
    "	ld.shared.f32 	%f473, [%rd14+136];\n"
    "	sub.f32 	%f474, %f11, %f473;\n"
    "	mul.f32 	%f475, %f474, %f14;\n"
    "	cvt.rni.f32.f32 	%f476, %f475;\n"
    "	mul.f32 	%f477, %f13, %f476;\n"
    "	sub.f32 	%f44, %f474, %f477;\n"
    "	mad.f32 	%f45, %f44, %f44, %f472;\n"
    "	mov.f32 	%f478, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p10, %f45, %f478;\n"
    "	@!%p10 bra 	$Lt_8_17666;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd40, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd41, %r27;\n"
    "	mul.wide.s32 	%rd42, %r27, 24;\n"
    "	add.u64 	%rd18, %rd40, %rd42;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f479, [%rd18+4];\n"
    "	sub.f32 	%f480, %f479, %f47;\n"
    "	mul.f32 	%f51, %f48, %f480;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f481, [%rd18+12];\n"
    "	mov.f32 	%f482, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f483, %f481, %f482;\n"
    "	mul.f32 	%f484, %f55, %f483;\n"
    "	mov.f32 	%f485, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f486, %f51, %f485;\n"
    "	ex2.approx.f32 	%f487, %f486;\n"
    "	ld.global.f32 	%f488, [%rd18+0];\n"
    "	mov.f32 	%f489, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f490, %f488, %f489;\n"
    "	mul.f32 	%f491, %f487, %f490;\n"
    "	mul.f32 	%f492, %f48, %f491;\n"
    "	mul.f32 	%f493, %f52, %f492;\n"
    "	sub.f32 	%f494, %f493, %f484;\n"
    "	ld.global.f32 	%f495, [%rd18+16];\n"
    "	mov.f32 	%f496, 0f41000000;   	// 8\n"
    "	mul.f32 	%f497, %f495, %f496;\n"
    "	mul.f32 	%f498, %f55, %f497;\n"
    "	mul.f32 	%f499, %f53, %f498;\n"
    "	sub.f32 	%f500, %f494, %f499;\n"
    "	ld.global.f32 	%f501, [%rd18+20];\n"
    "	mul.f32 	%f502, %f52, %f53;\n"
    "	mad.f32 	%f78, %f501, %f502, %f500;\n"
    "	mov.f32 	%f503, %f2;\n"
    "	mov.f32 	%f504, %f27;\n"
    "	mad.f32 	%f505, %f504, %f78, %f503;\n"
    "	mov.f32 	%f2, %f505;\n"
    "	mov.f32 	%f506, %f4;\n"
    "	mov.f32 	%f507, %f37;\n"
    "	mad.f32 	%f508, %f507, %f78, %f506;\n"
    "	mov.f32 	%f4, %f508;\n"
    "	mov.f32 	%f509, %f6;\n"
    "	mad.f32 	%f510, %f44, %f78, %f509;\n"
    "	mov.f32 	%f6, %f510;\n"
    "$Lt_8_17666:\n"
    "	ld.shared.s32 	%r36, [%rd13+156];\n"
    "	add.s32 	%r27, %r36, %r6;\n"
    "	ld.shared.f32 	%f511, [%rd14+144];\n"
    "	sub.f32 	%f512, %f19, %f511;\n"
    "	mov.f32 	%f513, %f512;\n"
    "	mul.f32 	%f514, %f14, %f513;\n"
    "	cvt.rni.f32.f32 	%f515, %f514;\n"
    "	mul.f32 	%f516, %f13, %f515;\n"
    "	sub.f32 	%f26, %f512, %f516;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f517, 0f00000000;   	// 0\n"
    "	mad.f32 	%f518, %f26, %f26, %f517;\n"
    "	ld.shared.f32 	%f519, [%rd14+148];\n"
    "	sub.f32 	%f520, %f18, %f519;\n"
    "	mov.f32 	%f521, %f520;\n"
    "	mul.f32 	%f522, %f14, %f521;\n"
    "	cvt.rni.f32.f32 	%f523, %f522;\n"
    "	mul.f32 	%f524, %f13, %f523;\n"
    "	sub.f32 	%f36, %f520, %f524;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f525, %f36, %f36, %f518;\n"
    "	ld.shared.f32 	%f526, [%rd14+152];\n"
    "	sub.f32 	%f527, %f11, %f526;\n"
    "	mul.f32 	%f528, %f527, %f14;\n"
    "	cvt.rni.f32.f32 	%f529, %f528;\n"
    "	mul.f32 	%f530, %f13, %f529;\n"
    "	sub.f32 	%f44, %f527, %f530;\n"
    "	mad.f32 	%f45, %f44, %f44, %f525;\n"
    "	mov.f32 	%f531, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p11, %f45, %f531;\n"
    "	@!%p11 bra 	$Lt_8_18178;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd43, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd44, %r27;\n"
    "	mul.wide.s32 	%rd45, %r27, 24;\n"
    "	add.u64 	%rd18, %rd43, %rd45;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f532, [%rd18+4];\n"
    "	sub.f32 	%f533, %f532, %f47;\n"
    "	mul.f32 	%f51, %f48, %f533;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f534, [%rd18+12];\n"
    "	mov.f32 	%f535, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f536, %f534, %f535;\n"
    "	mul.f32 	%f537, %f55, %f536;\n"
    "	mov.f32 	%f538, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f539, %f51, %f538;\n"
    "	ex2.approx.f32 	%f540, %f539;\n"
    "	ld.global.f32 	%f541, [%rd18+0];\n"
    "	mov.f32 	%f542, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f543, %f541, %f542;\n"
    "	mul.f32 	%f544, %f540, %f543;\n"
    "	mul.f32 	%f545, %f48, %f544;\n"
    "	mul.f32 	%f546, %f52, %f545;\n"
    "	sub.f32 	%f547, %f546, %f537;\n"
    "	ld.global.f32 	%f548, [%rd18+16];\n"
    "	mov.f32 	%f549, 0f41000000;   	// 8\n"
    "	mul.f32 	%f550, %f548, %f549;\n"
    "	mul.f32 	%f551, %f55, %f550;\n"
    "	mul.f32 	%f552, %f53, %f551;\n"
    "	sub.f32 	%f553, %f547, %f552;\n"
    "	ld.global.f32 	%f554, [%rd18+20];\n"
    "	mul.f32 	%f555, %f52, %f53;\n"
    "	mad.f32 	%f78, %f554, %f555, %f553;\n"
    "	mov.f32 	%f556, %f2;\n"
    "	mov.f32 	%f557, %f27;\n"
    "	mad.f32 	%f558, %f557, %f78, %f556;\n"
    "	mov.f32 	%f2, %f558;\n"
    "	mov.f32 	%f559, %f4;\n"
    "	mov.f32 	%f560, %f37;\n"
    "	mad.f32 	%f561, %f560, %f78, %f559;\n"
    "	mov.f32 	%f4, %f561;\n"
    "	mov.f32 	%f562, %f6;\n"
    "	mad.f32 	%f563, %f44, %f78, %f562;\n"
    "	mov.f32 	%f6, %f563;\n"
    "$Lt_8_18178:\n"
    "	ld.shared.s32 	%r37, [%rd13+172];\n"
    "	add.s32 	%r27, %r37, %r6;\n"
    "	ld.shared.f32 	%f564, [%rd14+160];\n"
    "	sub.f32 	%f565, %f19, %f564;\n"
    "	mov.f32 	%f566, %f565;\n"
    "	mul.f32 	%f567, %f14, %f566;\n"
    "	cvt.rni.f32.f32 	%f568, %f567;\n"
    "	mul.f32 	%f569, %f13, %f568;\n"
    "	sub.f32 	%f26, %f565, %f569;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f570, 0f00000000;   	// 0\n"
    "	mad.f32 	%f571, %f26, %f26, %f570;\n"
    "	ld.shared.f32 	%f572, [%rd14+164];\n"
    "	sub.f32 	%f573, %f18, %f572;\n"
    "	mov.f32 	%f574, %f573;\n"
    "	mul.f32 	%f575, %f14, %f574;\n"
    "	cvt.rni.f32.f32 	%f576, %f575;\n"
    "	mul.f32 	%f577, %f13, %f576;\n"
    "	sub.f32 	%f36, %f573, %f577;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f578, %f36, %f36, %f571;\n"
    "	ld.shared.f32 	%f579, [%rd14+168];\n"
    "	sub.f32 	%f580, %f11, %f579;\n"
    "	mul.f32 	%f581, %f580, %f14;\n"
    "	cvt.rni.f32.f32 	%f582, %f581;\n"
    "	mul.f32 	%f583, %f13, %f582;\n"
    "	sub.f32 	%f44, %f580, %f583;\n"
    "	mad.f32 	%f45, %f44, %f44, %f578;\n"
    "	mov.f32 	%f584, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p12, %f45, %f584;\n"
    "	@!%p12 bra 	$Lt_8_18690;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd46, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd47, %r27;\n"
    "	mul.wide.s32 	%rd48, %r27, 24;\n"
    "	add.u64 	%rd18, %rd46, %rd48;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f585, [%rd18+4];\n"
    "	sub.f32 	%f586, %f585, %f47;\n"
    "	mul.f32 	%f51, %f48, %f586;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f587, [%rd18+12];\n"
    "	mov.f32 	%f588, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f589, %f587, %f588;\n"
    "	mul.f32 	%f590, %f55, %f589;\n"
    "	mov.f32 	%f591, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f592, %f51, %f591;\n"
    "	ex2.approx.f32 	%f593, %f592;\n"
    "	ld.global.f32 	%f594, [%rd18+0];\n"
    "	mov.f32 	%f595, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f596, %f594, %f595;\n"
    "	mul.f32 	%f597, %f593, %f596;\n"
    "	mul.f32 	%f598, %f48, %f597;\n"
    "	mul.f32 	%f599, %f52, %f598;\n"
    "	sub.f32 	%f600, %f599, %f590;\n"
    "	ld.global.f32 	%f601, [%rd18+16];\n"
    "	mov.f32 	%f602, 0f41000000;   	// 8\n"
    "	mul.f32 	%f603, %f601, %f602;\n"
    "	mul.f32 	%f604, %f55, %f603;\n"
    "	mul.f32 	%f605, %f53, %f604;\n"
    "	sub.f32 	%f606, %f600, %f605;\n"
    "	ld.global.f32 	%f607, [%rd18+20];\n"
    "	mul.f32 	%f608, %f52, %f53;\n"
    "	mad.f32 	%f78, %f607, %f608, %f606;\n"
    "	mov.f32 	%f609, %f2;\n"
    "	mov.f32 	%f610, %f27;\n"
    "	mad.f32 	%f611, %f610, %f78, %f609;\n"
    "	mov.f32 	%f2, %f611;\n"
    "	mov.f32 	%f612, %f4;\n"
    "	mov.f32 	%f613, %f37;\n"
    "	mad.f32 	%f614, %f613, %f78, %f612;\n"
    "	mov.f32 	%f4, %f614;\n"
    "	mov.f32 	%f615, %f6;\n"
    "	mad.f32 	%f616, %f44, %f78, %f615;\n"
    "	mov.f32 	%f6, %f616;\n"
    "$Lt_8_18690:\n"
    "	ld.shared.s32 	%r38, [%rd13+188];\n"
    "	add.s32 	%r27, %r38, %r6;\n"
    "	ld.shared.f32 	%f617, [%rd14+176];\n"
    "	sub.f32 	%f618, %f19, %f617;\n"
    "	mov.f32 	%f619, %f618;\n"
    "	mul.f32 	%f620, %f14, %f619;\n"
    "	cvt.rni.f32.f32 	%f621, %f620;\n"
    "	mul.f32 	%f622, %f13, %f621;\n"
    "	sub.f32 	%f26, %f618, %f622;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f623, 0f00000000;   	// 0\n"
    "	mad.f32 	%f624, %f26, %f26, %f623;\n"
    "	ld.shared.f32 	%f625, [%rd14+180];\n"
    "	sub.f32 	%f626, %f18, %f625;\n"
    "	mov.f32 	%f627, %f626;\n"
    "	mul.f32 	%f628, %f14, %f627;\n"
    "	cvt.rni.f32.f32 	%f629, %f628;\n"
    "	mul.f32 	%f630, %f13, %f629;\n"
    "	sub.f32 	%f36, %f626, %f630;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f631, %f36, %f36, %f624;\n"
    "	ld.shared.f32 	%f632, [%rd14+184];\n"
    "	sub.f32 	%f633, %f11, %f632;\n"
    "	mul.f32 	%f634, %f633, %f14;\n"
    "	cvt.rni.f32.f32 	%f635, %f634;\n"
    "	mul.f32 	%f636, %f13, %f635;\n"
    "	sub.f32 	%f44, %f633, %f636;\n"
    "	mad.f32 	%f45, %f44, %f44, %f631;\n"
    "	mov.f32 	%f637, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p13, %f45, %f637;\n"
    "	@!%p13 bra 	$Lt_8_19202;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd49, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd50, %r27;\n"
    "	mul.wide.s32 	%rd51, %r27, 24;\n"
    "	add.u64 	%rd18, %rd49, %rd51;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f638, [%rd18+4];\n"
    "	sub.f32 	%f639, %f638, %f47;\n"
    "	mul.f32 	%f51, %f48, %f639;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f640, [%rd18+12];\n"
    "	mov.f32 	%f641, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f642, %f640, %f641;\n"
    "	mul.f32 	%f643, %f55, %f642;\n"
    "	mov.f32 	%f644, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f645, %f51, %f644;\n"
    "	ex2.approx.f32 	%f646, %f645;\n"
    "	ld.global.f32 	%f647, [%rd18+0];\n"
    "	mov.f32 	%f648, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f649, %f647, %f648;\n"
    "	mul.f32 	%f650, %f646, %f649;\n"
    "	mul.f32 	%f651, %f48, %f650;\n"
    "	mul.f32 	%f652, %f52, %f651;\n"
    "	sub.f32 	%f653, %f652, %f643;\n"
    "	ld.global.f32 	%f654, [%rd18+16];\n"
    "	mov.f32 	%f655, 0f41000000;   	// 8\n"
    "	mul.f32 	%f656, %f654, %f655;\n"
    "	mul.f32 	%f657, %f55, %f656;\n"
    "	mul.f32 	%f658, %f53, %f657;\n"
    "	sub.f32 	%f659, %f653, %f658;\n"
    "	ld.global.f32 	%f660, [%rd18+20];\n"
    "	mul.f32 	%f661, %f52, %f53;\n"
    "	mad.f32 	%f78, %f660, %f661, %f659;\n"
    "	mov.f32 	%f662, %f2;\n"
    "	mov.f32 	%f663, %f27;\n"
    "	mad.f32 	%f664, %f663, %f78, %f662;\n"
    "	mov.f32 	%f2, %f664;\n"
    "	mov.f32 	%f665, %f4;\n"
    "	mov.f32 	%f666, %f37;\n"
    "	mad.f32 	%f667, %f666, %f78, %f665;\n"
    "	mov.f32 	%f4, %f667;\n"
    "	mov.f32 	%f668, %f6;\n"
    "	mad.f32 	%f669, %f44, %f78, %f668;\n"
    "	mov.f32 	%f6, %f669;\n"
    "$Lt_8_19202:\n"
    "	ld.shared.s32 	%r39, [%rd13+204];\n"
    "	add.s32 	%r27, %r39, %r6;\n"
    "	ld.shared.f32 	%f670, [%rd14+192];\n"
    "	sub.f32 	%f671, %f19, %f670;\n"
    "	mov.f32 	%f672, %f671;\n"
    "	mul.f32 	%f673, %f14, %f672;\n"
    "	cvt.rni.f32.f32 	%f674, %f673;\n"
    "	mul.f32 	%f675, %f13, %f674;\n"
    "	sub.f32 	%f26, %f671, %f675;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f676, 0f00000000;   	// 0\n"
    "	mad.f32 	%f677, %f26, %f26, %f676;\n"
    "	ld.shared.f32 	%f678, [%rd14+196];\n"
    "	sub.f32 	%f679, %f18, %f678;\n"
    "	mov.f32 	%f680, %f679;\n"
    "	mul.f32 	%f681, %f14, %f680;\n"
    "	cvt.rni.f32.f32 	%f682, %f681;\n"
    "	mul.f32 	%f683, %f13, %f682;\n"
    "	sub.f32 	%f36, %f679, %f683;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f684, %f36, %f36, %f677;\n"
    "	ld.shared.f32 	%f685, [%rd14+200];\n"
    "	sub.f32 	%f686, %f11, %f685;\n"
    "	mul.f32 	%f687, %f686, %f14;\n"
    "	cvt.rni.f32.f32 	%f688, %f687;\n"
    "	mul.f32 	%f689, %f13, %f688;\n"
    "	sub.f32 	%f44, %f686, %f689;\n"
    "	mad.f32 	%f45, %f44, %f44, %f684;\n"
    "	mov.f32 	%f690, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p14, %f45, %f690;\n"
    "	@!%p14 bra 	$Lt_8_19714;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd52, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd53, %r27;\n"
    "	mul.wide.s32 	%rd54, %r27, 24;\n"
    "	add.u64 	%rd18, %rd52, %rd54;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f691, [%rd18+4];\n"
    "	sub.f32 	%f692, %f691, %f47;\n"
    "	mul.f32 	%f51, %f48, %f692;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f693, [%rd18+12];\n"
    "	mov.f32 	%f694, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f695, %f693, %f694;\n"
    "	mul.f32 	%f696, %f55, %f695;\n"
    "	mov.f32 	%f697, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f698, %f51, %f697;\n"
    "	ex2.approx.f32 	%f699, %f698;\n"
    "	ld.global.f32 	%f700, [%rd18+0];\n"
    "	mov.f32 	%f701, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f702, %f700, %f701;\n"
    "	mul.f32 	%f703, %f699, %f702;\n"
    "	mul.f32 	%f704, %f48, %f703;\n"
    "	mul.f32 	%f705, %f52, %f704;\n"
    "	sub.f32 	%f706, %f705, %f696;\n"
    "	ld.global.f32 	%f707, [%rd18+16];\n"
    "	mov.f32 	%f708, 0f41000000;   	// 8\n"
    "	mul.f32 	%f709, %f707, %f708;\n"
    "	mul.f32 	%f710, %f55, %f709;\n"
    "	mul.f32 	%f711, %f53, %f710;\n"
    "	sub.f32 	%f712, %f706, %f711;\n"
    "	ld.global.f32 	%f713, [%rd18+20];\n"
    "	mul.f32 	%f714, %f52, %f53;\n"
    "	mad.f32 	%f78, %f713, %f714, %f712;\n"
    "	mov.f32 	%f715, %f2;\n"
    "	mov.f32 	%f716, %f27;\n"
    "	mad.f32 	%f717, %f716, %f78, %f715;\n"
    "	mov.f32 	%f2, %f717;\n"
    "	mov.f32 	%f718, %f4;\n"
    "	mov.f32 	%f719, %f37;\n"
    "	mad.f32 	%f720, %f719, %f78, %f718;\n"
    "	mov.f32 	%f4, %f720;\n"
    "	mov.f32 	%f721, %f6;\n"
    "	mad.f32 	%f722, %f44, %f78, %f721;\n"
    "	mov.f32 	%f6, %f722;\n"
    "$Lt_8_19714:\n"
    "	ld.shared.s32 	%r40, [%rd13+220];\n"
    "	add.s32 	%r27, %r40, %r6;\n"
    "	ld.shared.f32 	%f723, [%rd14+208];\n"
    "	sub.f32 	%f724, %f19, %f723;\n"
    "	mov.f32 	%f725, %f724;\n"
    "	mul.f32 	%f726, %f14, %f725;\n"
    "	cvt.rni.f32.f32 	%f727, %f726;\n"
    "	mul.f32 	%f728, %f13, %f727;\n"
    "	sub.f32 	%f26, %f724, %f728;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f729, 0f00000000;   	// 0\n"
    "	mad.f32 	%f730, %f26, %f26, %f729;\n"
    "	ld.shared.f32 	%f731, [%rd14+212];\n"
    "	sub.f32 	%f732, %f18, %f731;\n"
    "	mov.f32 	%f733, %f732;\n"
    "	mul.f32 	%f734, %f14, %f733;\n"
    "	cvt.rni.f32.f32 	%f735, %f734;\n"
    "	mul.f32 	%f736, %f13, %f735;\n"
    "	sub.f32 	%f36, %f732, %f736;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f737, %f36, %f36, %f730;\n"
    "	ld.shared.f32 	%f738, [%rd14+216];\n"
    "	sub.f32 	%f739, %f11, %f738;\n"
    "	mul.f32 	%f740, %f739, %f14;\n"
    "	cvt.rni.f32.f32 	%f741, %f740;\n"
    "	mul.f32 	%f742, %f13, %f741;\n"
    "	sub.f32 	%f44, %f739, %f742;\n"
    "	mad.f32 	%f45, %f44, %f44, %f737;\n"
    "	mov.f32 	%f743, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p15, %f45, %f743;\n"
    "	@!%p15 bra 	$Lt_8_20226;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd55, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd56, %r27;\n"
    "	mul.wide.s32 	%rd57, %r27, 24;\n"
    "	add.u64 	%rd18, %rd55, %rd57;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f744, [%rd18+4];\n"
    "	sub.f32 	%f745, %f744, %f47;\n"
    "	mul.f32 	%f51, %f48, %f745;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f746, [%rd18+12];\n"
    "	mov.f32 	%f747, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f748, %f746, %f747;\n"
    "	mul.f32 	%f749, %f55, %f748;\n"
    "	mov.f32 	%f750, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f751, %f51, %f750;\n"
    "	ex2.approx.f32 	%f752, %f751;\n"
    "	ld.global.f32 	%f753, [%rd18+0];\n"
    "	mov.f32 	%f754, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f755, %f753, %f754;\n"
    "	mul.f32 	%f756, %f752, %f755;\n"
    "	mul.f32 	%f757, %f48, %f756;\n"
    "	mul.f32 	%f758, %f52, %f757;\n"
    "	sub.f32 	%f759, %f758, %f749;\n"
    "	ld.global.f32 	%f760, [%rd18+16];\n"
    "	mov.f32 	%f761, 0f41000000;   	// 8\n"
    "	mul.f32 	%f762, %f760, %f761;\n"
    "	mul.f32 	%f763, %f55, %f762;\n"
    "	mul.f32 	%f764, %f53, %f763;\n"
    "	sub.f32 	%f765, %f759, %f764;\n"
    "	ld.global.f32 	%f766, [%rd18+20];\n"
    "	mul.f32 	%f767, %f52, %f53;\n"
    "	mad.f32 	%f78, %f766, %f767, %f765;\n"
    "	mov.f32 	%f768, %f2;\n"
    "	mov.f32 	%f769, %f27;\n"
    "	mad.f32 	%f770, %f769, %f78, %f768;\n"
    "	mov.f32 	%f2, %f770;\n"
    "	mov.f32 	%f771, %f4;\n"
    "	mov.f32 	%f772, %f37;\n"
    "	mad.f32 	%f773, %f772, %f78, %f771;\n"
    "	mov.f32 	%f4, %f773;\n"
    "	mov.f32 	%f774, %f6;\n"
    "	mad.f32 	%f775, %f44, %f78, %f774;\n"
    "	mov.f32 	%f6, %f775;\n"
    "$Lt_8_20226:\n"
    "	ld.shared.s32 	%r41, [%rd13+236];\n"
    "	add.s32 	%r27, %r41, %r6;\n"
    "	ld.shared.f32 	%f776, [%rd14+224];\n"
    "	sub.f32 	%f777, %f19, %f776;\n"
    "	mov.f32 	%f778, %f777;\n"
    "	mul.f32 	%f779, %f14, %f778;\n"
    "	cvt.rni.f32.f32 	%f780, %f779;\n"
    "	mul.f32 	%f781, %f13, %f780;\n"
    "	sub.f32 	%f26, %f777, %f781;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f782, 0f00000000;   	// 0\n"
    "	mad.f32 	%f783, %f26, %f26, %f782;\n"
    "	ld.shared.f32 	%f784, [%rd14+228];\n"
    "	sub.f32 	%f785, %f18, %f784;\n"
    "	mov.f32 	%f786, %f785;\n"
    "	mul.f32 	%f787, %f14, %f786;\n"
    "	cvt.rni.f32.f32 	%f788, %f787;\n"
    "	mul.f32 	%f789, %f13, %f788;\n"
    "	sub.f32 	%f36, %f785, %f789;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f790, %f36, %f36, %f783;\n"
    "	ld.shared.f32 	%f791, [%rd14+232];\n"
    "	sub.f32 	%f792, %f11, %f791;\n"
    "	mul.f32 	%f793, %f792, %f14;\n"
    "	cvt.rni.f32.f32 	%f794, %f793;\n"
    "	mul.f32 	%f795, %f13, %f794;\n"
    "	sub.f32 	%f44, %f792, %f795;\n"
    "	mad.f32 	%f45, %f44, %f44, %f790;\n"
    "	mov.f32 	%f796, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p16, %f45, %f796;\n"
    "	@!%p16 bra 	$Lt_8_20738;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd58, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd59, %r27;\n"
    "	mul.wide.s32 	%rd60, %r27, 24;\n"
    "	add.u64 	%rd18, %rd58, %rd60;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f797, [%rd18+4];\n"
    "	sub.f32 	%f798, %f797, %f47;\n"
    "	mul.f32 	%f51, %f48, %f798;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f799, [%rd18+12];\n"
    "	mov.f32 	%f800, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f801, %f799, %f800;\n"
    "	mul.f32 	%f802, %f55, %f801;\n"
    "	mov.f32 	%f803, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f804, %f51, %f803;\n"
    "	ex2.approx.f32 	%f805, %f804;\n"
    "	ld.global.f32 	%f806, [%rd18+0];\n"
    "	mov.f32 	%f807, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f808, %f806, %f807;\n"
    "	mul.f32 	%f809, %f805, %f808;\n"
    "	mul.f32 	%f810, %f48, %f809;\n"
    "	mul.f32 	%f811, %f52, %f810;\n"
    "	sub.f32 	%f812, %f811, %f802;\n"
    "	ld.global.f32 	%f813, [%rd18+16];\n"
    "	mov.f32 	%f814, 0f41000000;   	// 8\n"
    "	mul.f32 	%f815, %f813, %f814;\n"
    "	mul.f32 	%f816, %f55, %f815;\n"
    "	mul.f32 	%f817, %f53, %f816;\n"
    "	sub.f32 	%f818, %f812, %f817;\n"
    "	ld.global.f32 	%f819, [%rd18+20];\n"
    "	mul.f32 	%f820, %f52, %f53;\n"
    "	mad.f32 	%f78, %f819, %f820, %f818;\n"
    "	mov.f32 	%f821, %f2;\n"
    "	mov.f32 	%f822, %f27;\n"
    "	mad.f32 	%f823, %f822, %f78, %f821;\n"
    "	mov.f32 	%f2, %f823;\n"
    "	mov.f32 	%f824, %f4;\n"
    "	mov.f32 	%f825, %f37;\n"
    "	mad.f32 	%f826, %f825, %f78, %f824;\n"
    "	mov.f32 	%f4, %f826;\n"
    "	mov.f32 	%f827, %f6;\n"
    "	mad.f32 	%f828, %f44, %f78, %f827;\n"
    "	mov.f32 	%f6, %f828;\n"
    "$Lt_8_20738:\n"
    "	ld.shared.s32 	%r42, [%rd13+252];\n"
    "	add.s32 	%r27, %r42, %r6;\n"
    "	ld.shared.f32 	%f829, [%rd14+240];\n"
    "	sub.f32 	%f830, %f19, %f829;\n"
    "	mov.f32 	%f831, %f830;\n"
    "	mul.f32 	%f832, %f14, %f831;\n"
    "	cvt.rni.f32.f32 	%f833, %f832;\n"
    "	mul.f32 	%f834, %f13, %f833;\n"
    "	sub.f32 	%f26, %f830, %f834;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f835, 0f00000000;   	// 0\n"
    "	mad.f32 	%f836, %f26, %f26, %f835;\n"
    "	ld.shared.f32 	%f837, [%rd14+244];\n"
    "	sub.f32 	%f838, %f18, %f837;\n"
    "	mov.f32 	%f839, %f838;\n"
    "	mul.f32 	%f840, %f14, %f839;\n"
    "	cvt.rni.f32.f32 	%f841, %f840;\n"
    "	mul.f32 	%f842, %f13, %f841;\n"
    "	sub.f32 	%f36, %f838, %f842;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f843, %f36, %f36, %f836;\n"
    "	ld.shared.f32 	%f844, [%rd14+248];\n"
    "	sub.f32 	%f845, %f11, %f844;\n"
    "	mul.f32 	%f846, %f845, %f14;\n"
    "	cvt.rni.f32.f32 	%f847, %f846;\n"
    "	mul.f32 	%f848, %f13, %f847;\n"
    "	sub.f32 	%f44, %f845, %f848;\n"
    "	mad.f32 	%f45, %f44, %f44, %f843;\n"
    "	mov.f32 	%f849, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p17, %f45, %f849;\n"
    "	@!%p17 bra 	$Lt_8_21250;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd61, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd62, %r27;\n"
    "	mul.wide.s32 	%rd63, %r27, 24;\n"
    "	add.u64 	%rd18, %rd61, %rd63;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f850, [%rd18+4];\n"
    "	sub.f32 	%f851, %f850, %f47;\n"
    "	mul.f32 	%f51, %f48, %f851;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f852, [%rd18+12];\n"
    "	mov.f32 	%f853, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f854, %f852, %f853;\n"
    "	mul.f32 	%f855, %f55, %f854;\n"
    "	mov.f32 	%f856, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f857, %f51, %f856;\n"
    "	ex2.approx.f32 	%f858, %f857;\n"
    "	ld.global.f32 	%f859, [%rd18+0];\n"
    "	mov.f32 	%f860, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f861, %f859, %f860;\n"
    "	mul.f32 	%f862, %f858, %f861;\n"
    "	mul.f32 	%f863, %f48, %f862;\n"
    "	mul.f32 	%f864, %f52, %f863;\n"
    "	sub.f32 	%f865, %f864, %f855;\n"
    "	ld.global.f32 	%f866, [%rd18+16];\n"
    "	mov.f32 	%f867, 0f41000000;   	// 8\n"
    "	mul.f32 	%f868, %f866, %f867;\n"
    "	mul.f32 	%f869, %f55, %f868;\n"
    "	mul.f32 	%f870, %f53, %f869;\n"
    "	sub.f32 	%f871, %f865, %f870;\n"
    "	ld.global.f32 	%f872, [%rd18+20];\n"
    "	mul.f32 	%f873, %f52, %f53;\n"
    "	mad.f32 	%f78, %f872, %f873, %f871;\n"
    "	mov.f32 	%f874, %f2;\n"
    "	mov.f32 	%f875, %f27;\n"
    "	mad.f32 	%f876, %f875, %f78, %f874;\n"
    "	mov.f32 	%f2, %f876;\n"
    "	mov.f32 	%f877, %f4;\n"
    "	mov.f32 	%f878, %f37;\n"
    "	mad.f32 	%f879, %f878, %f78, %f877;\n"
    "	mov.f32 	%f4, %f879;\n"
    "	mov.f32 	%f880, %f6;\n"
    "	mad.f32 	%f881, %f44, %f78, %f880;\n"
    "	mov.f32 	%f6, %f881;\n"
    "$Lt_8_21250:\n"
    "	ld.shared.s32 	%r43, [%rd13+268];\n"
    "	add.s32 	%r27, %r43, %r6;\n"
    "	ld.shared.f32 	%f882, [%rd14+256];\n"
    "	sub.f32 	%f883, %f19, %f882;\n"
    "	mov.f32 	%f884, %f883;\n"
    "	mul.f32 	%f885, %f14, %f884;\n"
    "	cvt.rni.f32.f32 	%f886, %f885;\n"
    "	mul.f32 	%f887, %f13, %f886;\n"
    "	sub.f32 	%f26, %f883, %f887;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f888, 0f00000000;   	// 0\n"
    "	mad.f32 	%f889, %f26, %f26, %f888;\n"
    "	ld.shared.f32 	%f890, [%rd14+260];\n"
    "	sub.f32 	%f891, %f18, %f890;\n"
    "	mov.f32 	%f892, %f891;\n"
    "	mul.f32 	%f893, %f14, %f892;\n"
    "	cvt.rni.f32.f32 	%f894, %f893;\n"
    "	mul.f32 	%f895, %f13, %f894;\n"
    "	sub.f32 	%f36, %f891, %f895;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f896, %f36, %f36, %f889;\n"
    "	ld.shared.f32 	%f897, [%rd14+264];\n"
    "	sub.f32 	%f898, %f11, %f897;\n"
    "	mul.f32 	%f899, %f898, %f14;\n"
    "	cvt.rni.f32.f32 	%f900, %f899;\n"
    "	mul.f32 	%f901, %f13, %f900;\n"
    "	sub.f32 	%f44, %f898, %f901;\n"
    "	mad.f32 	%f45, %f44, %f44, %f896;\n"
    "	mov.f32 	%f902, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p18, %f45, %f902;\n"
    "	@!%p18 bra 	$Lt_8_21762;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd64, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd65, %r27;\n"
    "	mul.wide.s32 	%rd66, %r27, 24;\n"
    "	add.u64 	%rd18, %rd64, %rd66;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f903, [%rd18+4];\n"
    "	sub.f32 	%f904, %f903, %f47;\n"
    "	mul.f32 	%f51, %f48, %f904;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f905, [%rd18+12];\n"
    "	mov.f32 	%f906, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f907, %f905, %f906;\n"
    "	mul.f32 	%f908, %f55, %f907;\n"
    "	mov.f32 	%f909, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f910, %f51, %f909;\n"
    "	ex2.approx.f32 	%f911, %f910;\n"
    "	ld.global.f32 	%f912, [%rd18+0];\n"
    "	mov.f32 	%f913, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f914, %f912, %f913;\n"
    "	mul.f32 	%f915, %f911, %f914;\n"
    "	mul.f32 	%f916, %f48, %f915;\n"
    "	mul.f32 	%f917, %f52, %f916;\n"
    "	sub.f32 	%f918, %f917, %f908;\n"
    "	ld.global.f32 	%f919, [%rd18+16];\n"
    "	mov.f32 	%f920, 0f41000000;   	// 8\n"
    "	mul.f32 	%f921, %f919, %f920;\n"
    "	mul.f32 	%f922, %f55, %f921;\n"
    "	mul.f32 	%f923, %f53, %f922;\n"
    "	sub.f32 	%f924, %f918, %f923;\n"
    "	ld.global.f32 	%f925, [%rd18+20];\n"
    "	mul.f32 	%f926, %f52, %f53;\n"
    "	mad.f32 	%f78, %f925, %f926, %f924;\n"
    "	mov.f32 	%f927, %f2;\n"
    "	mov.f32 	%f928, %f27;\n"
    "	mad.f32 	%f929, %f928, %f78, %f927;\n"
    "	mov.f32 	%f2, %f929;\n"
    "	mov.f32 	%f930, %f4;\n"
    "	mov.f32 	%f931, %f37;\n"
    "	mad.f32 	%f932, %f931, %f78, %f930;\n"
    "	mov.f32 	%f4, %f932;\n"
    "	mov.f32 	%f933, %f6;\n"
    "	mad.f32 	%f934, %f44, %f78, %f933;\n"
    "	mov.f32 	%f6, %f934;\n"
    "$Lt_8_21762:\n"
    "	ld.shared.s32 	%r44, [%rd13+284];\n"
    "	add.s32 	%r27, %r44, %r6;\n"
    "	ld.shared.f32 	%f935, [%rd14+272];\n"
    "	sub.f32 	%f936, %f19, %f935;\n"
    "	mov.f32 	%f937, %f936;\n"
    "	mul.f32 	%f938, %f14, %f937;\n"
    "	cvt.rni.f32.f32 	%f939, %f938;\n"
    "	mul.f32 	%f940, %f13, %f939;\n"
    "	sub.f32 	%f26, %f936, %f940;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f941, 0f00000000;   	// 0\n"
    "	mad.f32 	%f942, %f26, %f26, %f941;\n"
    "	ld.shared.f32 	%f943, [%rd14+276];\n"
    "	sub.f32 	%f944, %f18, %f943;\n"
    "	mov.f32 	%f945, %f944;\n"
    "	mul.f32 	%f946, %f14, %f945;\n"
    "	cvt.rni.f32.f32 	%f947, %f946;\n"
    "	mul.f32 	%f948, %f13, %f947;\n"
    "	sub.f32 	%f36, %f944, %f948;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f949, %f36, %f36, %f942;\n"
    "	ld.shared.f32 	%f950, [%rd14+280];\n"
    "	sub.f32 	%f951, %f11, %f950;\n"
    "	mul.f32 	%f952, %f951, %f14;\n"
    "	cvt.rni.f32.f32 	%f953, %f952;\n"
    "	mul.f32 	%f954, %f13, %f953;\n"
    "	sub.f32 	%f44, %f951, %f954;\n"
    "	mad.f32 	%f45, %f44, %f44, %f949;\n"
    "	mov.f32 	%f955, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p19, %f45, %f955;\n"
    "	@!%p19 bra 	$Lt_8_22274;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd67, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd68, %r27;\n"
    "	mul.wide.s32 	%rd69, %r27, 24;\n"
    "	add.u64 	%rd18, %rd67, %rd69;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f956, [%rd18+4];\n"
    "	sub.f32 	%f957, %f956, %f47;\n"
    "	mul.f32 	%f51, %f48, %f957;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f958, [%rd18+12];\n"
    "	mov.f32 	%f959, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f960, %f958, %f959;\n"
    "	mul.f32 	%f961, %f55, %f960;\n"
    "	mov.f32 	%f962, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f963, %f51, %f962;\n"
    "	ex2.approx.f32 	%f964, %f963;\n"
    "	ld.global.f32 	%f965, [%rd18+0];\n"
    "	mov.f32 	%f966, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f967, %f965, %f966;\n"
    "	mul.f32 	%f968, %f964, %f967;\n"
    "	mul.f32 	%f969, %f48, %f968;\n"
    "	mul.f32 	%f970, %f52, %f969;\n"
    "	sub.f32 	%f971, %f970, %f961;\n"
    "	ld.global.f32 	%f972, [%rd18+16];\n"
    "	mov.f32 	%f973, 0f41000000;   	// 8\n"
    "	mul.f32 	%f974, %f972, %f973;\n"
    "	mul.f32 	%f975, %f55, %f974;\n"
    "	mul.f32 	%f976, %f53, %f975;\n"
    "	sub.f32 	%f977, %f971, %f976;\n"
    "	ld.global.f32 	%f978, [%rd18+20];\n"
    "	mul.f32 	%f979, %f52, %f53;\n"
    "	mad.f32 	%f78, %f978, %f979, %f977;\n"
    "	mov.f32 	%f980, %f2;\n"
    "	mov.f32 	%f981, %f27;\n"
    "	mad.f32 	%f982, %f981, %f78, %f980;\n"
    "	mov.f32 	%f2, %f982;\n"
    "	mov.f32 	%f983, %f4;\n"
    "	mov.f32 	%f984, %f37;\n"
    "	mad.f32 	%f985, %f984, %f78, %f983;\n"
    "	mov.f32 	%f4, %f985;\n"
    "	mov.f32 	%f986, %f6;\n"
    "	mad.f32 	%f987, %f44, %f78, %f986;\n"
    "	mov.f32 	%f6, %f987;\n"
    "$Lt_8_22274:\n"
    "	ld.shared.s32 	%r45, [%rd13+300];\n"
    "	add.s32 	%r27, %r45, %r6;\n"
    "	ld.shared.f32 	%f988, [%rd14+288];\n"
    "	sub.f32 	%f989, %f19, %f988;\n"
    "	mov.f32 	%f990, %f989;\n"
    "	mul.f32 	%f991, %f14, %f990;\n"
    "	cvt.rni.f32.f32 	%f992, %f991;\n"
    "	mul.f32 	%f993, %f13, %f992;\n"
    "	sub.f32 	%f26, %f989, %f993;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f994, 0f00000000;   	// 0\n"
    "	mad.f32 	%f995, %f26, %f26, %f994;\n"
    "	ld.shared.f32 	%f996, [%rd14+292];\n"
    "	sub.f32 	%f997, %f18, %f996;\n"
    "	mov.f32 	%f998, %f997;\n"
    "	mul.f32 	%f999, %f14, %f998;\n"
    "	cvt.rni.f32.f32 	%f1000, %f999;\n"
    "	mul.f32 	%f1001, %f13, %f1000;\n"
    "	sub.f32 	%f36, %f997, %f1001;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1002, %f36, %f36, %f995;\n"
    "	ld.shared.f32 	%f1003, [%rd14+296];\n"
    "	sub.f32 	%f1004, %f11, %f1003;\n"
    "	mul.f32 	%f1005, %f1004, %f14;\n"
    "	cvt.rni.f32.f32 	%f1006, %f1005;\n"
    "	mul.f32 	%f1007, %f13, %f1006;\n"
    "	sub.f32 	%f44, %f1004, %f1007;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1002;\n"
    "	mov.f32 	%f1008, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p20, %f45, %f1008;\n"
    "	@!%p20 bra 	$Lt_8_22786;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd70, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd71, %r27;\n"
    "	mul.wide.s32 	%rd72, %r27, 24;\n"
    "	add.u64 	%rd18, %rd70, %rd72;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1009, [%rd18+4];\n"
    "	sub.f32 	%f1010, %f1009, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1010;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1011, [%rd18+12];\n"
    "	mov.f32 	%f1012, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1013, %f1011, %f1012;\n"
    "	mul.f32 	%f1014, %f55, %f1013;\n"
    "	mov.f32 	%f1015, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1016, %f51, %f1015;\n"
    "	ex2.approx.f32 	%f1017, %f1016;\n"
    "	ld.global.f32 	%f1018, [%rd18+0];\n"
    "	mov.f32 	%f1019, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1020, %f1018, %f1019;\n"
    "	mul.f32 	%f1021, %f1017, %f1020;\n"
    "	mul.f32 	%f1022, %f48, %f1021;\n"
    "	mul.f32 	%f1023, %f52, %f1022;\n"
    "	sub.f32 	%f1024, %f1023, %f1014;\n"
    "	ld.global.f32 	%f1025, [%rd18+16];\n"
    "	mov.f32 	%f1026, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1027, %f1025, %f1026;\n"
    "	mul.f32 	%f1028, %f55, %f1027;\n"
    "	mul.f32 	%f1029, %f53, %f1028;\n"
    "	sub.f32 	%f1030, %f1024, %f1029;\n"
    "	ld.global.f32 	%f1031, [%rd18+20];\n"
    "	mul.f32 	%f1032, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1031, %f1032, %f1030;\n"
    "	mov.f32 	%f1033, %f2;\n"
    "	mov.f32 	%f1034, %f27;\n"
    "	mad.f32 	%f1035, %f1034, %f78, %f1033;\n"
    "	mov.f32 	%f2, %f1035;\n"
    "	mov.f32 	%f1036, %f4;\n"
    "	mov.f32 	%f1037, %f37;\n"
    "	mad.f32 	%f1038, %f1037, %f78, %f1036;\n"
    "	mov.f32 	%f4, %f1038;\n"
    "	mov.f32 	%f1039, %f6;\n"
    "	mad.f32 	%f1040, %f44, %f78, %f1039;\n"
    "	mov.f32 	%f6, %f1040;\n"
    "$Lt_8_22786:\n"
    "	ld.shared.s32 	%r46, [%rd13+316];\n"
    "	add.s32 	%r27, %r46, %r6;\n"
    "	ld.shared.f32 	%f1041, [%rd14+304];\n"
    "	sub.f32 	%f1042, %f19, %f1041;\n"
    "	mov.f32 	%f1043, %f1042;\n"
    "	mul.f32 	%f1044, %f14, %f1043;\n"
    "	cvt.rni.f32.f32 	%f1045, %f1044;\n"
    "	mul.f32 	%f1046, %f13, %f1045;\n"
    "	sub.f32 	%f26, %f1042, %f1046;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1047, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1048, %f26, %f26, %f1047;\n"
    "	ld.shared.f32 	%f1049, [%rd14+308];\n"
    "	sub.f32 	%f1050, %f18, %f1049;\n"
    "	mov.f32 	%f1051, %f1050;\n"
    "	mul.f32 	%f1052, %f14, %f1051;\n"
    "	cvt.rni.f32.f32 	%f1053, %f1052;\n"
    "	mul.f32 	%f1054, %f13, %f1053;\n"
    "	sub.f32 	%f36, %f1050, %f1054;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1055, %f36, %f36, %f1048;\n"
    "	ld.shared.f32 	%f1056, [%rd14+312];\n"
    "	sub.f32 	%f1057, %f11, %f1056;\n"
    "	mul.f32 	%f1058, %f1057, %f14;\n"
    "	cvt.rni.f32.f32 	%f1059, %f1058;\n"
    "	mul.f32 	%f1060, %f13, %f1059;\n"
    "	sub.f32 	%f44, %f1057, %f1060;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1055;\n"
    "	mov.f32 	%f1061, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p21, %f45, %f1061;\n"
    "	@!%p21 bra 	$Lt_8_23298;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd73, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd74, %r27;\n"
    "	mul.wide.s32 	%rd75, %r27, 24;\n"
    "	add.u64 	%rd18, %rd73, %rd75;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1062, [%rd18+4];\n"
    "	sub.f32 	%f1063, %f1062, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1063;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1064, [%rd18+12];\n"
    "	mov.f32 	%f1065, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1066, %f1064, %f1065;\n"
    "	mul.f32 	%f1067, %f55, %f1066;\n"
    "	mov.f32 	%f1068, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1069, %f51, %f1068;\n"
    "	ex2.approx.f32 	%f1070, %f1069;\n"
    "	ld.global.f32 	%f1071, [%rd18+0];\n"
    "	mov.f32 	%f1072, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1073, %f1071, %f1072;\n"
    "	mul.f32 	%f1074, %f1070, %f1073;\n"
    "	mul.f32 	%f1075, %f48, %f1074;\n"
    "	mul.f32 	%f1076, %f52, %f1075;\n"
    "	sub.f32 	%f1077, %f1076, %f1067;\n"
    "	ld.global.f32 	%f1078, [%rd18+16];\n"
    "	mov.f32 	%f1079, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1080, %f1078, %f1079;\n"
    "	mul.f32 	%f1081, %f55, %f1080;\n"
    "	mul.f32 	%f1082, %f53, %f1081;\n"
    "	sub.f32 	%f1083, %f1077, %f1082;\n"
    "	ld.global.f32 	%f1084, [%rd18+20];\n"
    "	mul.f32 	%f1085, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1084, %f1085, %f1083;\n"
    "	mov.f32 	%f1086, %f2;\n"
    "	mov.f32 	%f1087, %f27;\n"
    "	mad.f32 	%f1088, %f1087, %f78, %f1086;\n"
    "	mov.f32 	%f2, %f1088;\n"
    "	mov.f32 	%f1089, %f4;\n"
    "	mov.f32 	%f1090, %f37;\n"
    "	mad.f32 	%f1091, %f1090, %f78, %f1089;\n"
    "	mov.f32 	%f4, %f1091;\n"
    "	mov.f32 	%f1092, %f6;\n"
    "	mad.f32 	%f1093, %f44, %f78, %f1092;\n"
    "	mov.f32 	%f6, %f1093;\n"
    "$Lt_8_23298:\n"
    "	ld.shared.s32 	%r47, [%rd13+332];\n"
    "	add.s32 	%r27, %r47, %r6;\n"
    "	ld.shared.f32 	%f1094, [%rd14+320];\n"
    "	sub.f32 	%f1095, %f19, %f1094;\n"
    "	mov.f32 	%f1096, %f1095;\n"
    "	mul.f32 	%f1097, %f14, %f1096;\n"
    "	cvt.rni.f32.f32 	%f1098, %f1097;\n"
    "	mul.f32 	%f1099, %f13, %f1098;\n"
    "	sub.f32 	%f26, %f1095, %f1099;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1100, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1101, %f26, %f26, %f1100;\n"
    "	ld.shared.f32 	%f1102, [%rd14+324];\n"
    "	sub.f32 	%f1103, %f18, %f1102;\n"
    "	mov.f32 	%f1104, %f1103;\n"
    "	mul.f32 	%f1105, %f14, %f1104;\n"
    "	cvt.rni.f32.f32 	%f1106, %f1105;\n"
    "	mul.f32 	%f1107, %f13, %f1106;\n"
    "	sub.f32 	%f36, %f1103, %f1107;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1108, %f36, %f36, %f1101;\n"
    "	ld.shared.f32 	%f1109, [%rd14+328];\n"
    "	sub.f32 	%f1110, %f11, %f1109;\n"
    "	mul.f32 	%f1111, %f1110, %f14;\n"
    "	cvt.rni.f32.f32 	%f1112, %f1111;\n"
    "	mul.f32 	%f1113, %f13, %f1112;\n"
    "	sub.f32 	%f44, %f1110, %f1113;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1108;\n"
    "	mov.f32 	%f1114, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p22, %f45, %f1114;\n"
    "	@!%p22 bra 	$Lt_8_23810;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd76, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd77, %r27;\n"
    "	mul.wide.s32 	%rd78, %r27, 24;\n"
    "	add.u64 	%rd18, %rd76, %rd78;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1115, [%rd18+4];\n"
    "	sub.f32 	%f1116, %f1115, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1116;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1117, [%rd18+12];\n"
    "	mov.f32 	%f1118, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1119, %f1117, %f1118;\n"
    "	mul.f32 	%f1120, %f55, %f1119;\n"
    "	mov.f32 	%f1121, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1122, %f51, %f1121;\n"
    "	ex2.approx.f32 	%f1123, %f1122;\n"
    "	ld.global.f32 	%f1124, [%rd18+0];\n"
    "	mov.f32 	%f1125, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1126, %f1124, %f1125;\n"
    "	mul.f32 	%f1127, %f1123, %f1126;\n"
    "	mul.f32 	%f1128, %f48, %f1127;\n"
    "	mul.f32 	%f1129, %f52, %f1128;\n"
    "	sub.f32 	%f1130, %f1129, %f1120;\n"
    "	ld.global.f32 	%f1131, [%rd18+16];\n"
    "	mov.f32 	%f1132, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1133, %f1131, %f1132;\n"
    "	mul.f32 	%f1134, %f55, %f1133;\n"
    "	mul.f32 	%f1135, %f53, %f1134;\n"
    "	sub.f32 	%f1136, %f1130, %f1135;\n"
    "	ld.global.f32 	%f1137, [%rd18+20];\n"
    "	mul.f32 	%f1138, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1137, %f1138, %f1136;\n"
    "	mov.f32 	%f1139, %f2;\n"
    "	mov.f32 	%f1140, %f27;\n"
    "	mad.f32 	%f1141, %f1140, %f78, %f1139;\n"
    "	mov.f32 	%f2, %f1141;\n"
    "	mov.f32 	%f1142, %f4;\n"
    "	mov.f32 	%f1143, %f37;\n"
    "	mad.f32 	%f1144, %f1143, %f78, %f1142;\n"
    "	mov.f32 	%f4, %f1144;\n"
    "	mov.f32 	%f1145, %f6;\n"
    "	mad.f32 	%f1146, %f44, %f78, %f1145;\n"
    "	mov.f32 	%f6, %f1146;\n"
    "$Lt_8_23810:\n"
    "	ld.shared.s32 	%r48, [%rd13+348];\n"
    "	add.s32 	%r27, %r48, %r6;\n"
    "	ld.shared.f32 	%f1147, [%rd14+336];\n"
    "	sub.f32 	%f1148, %f19, %f1147;\n"
    "	mov.f32 	%f1149, %f1148;\n"
    "	mul.f32 	%f1150, %f14, %f1149;\n"
    "	cvt.rni.f32.f32 	%f1151, %f1150;\n"
    "	mul.f32 	%f1152, %f13, %f1151;\n"
    "	sub.f32 	%f26, %f1148, %f1152;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1153, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1154, %f26, %f26, %f1153;\n"
    "	ld.shared.f32 	%f1155, [%rd14+340];\n"
    "	sub.f32 	%f1156, %f18, %f1155;\n"
    "	mov.f32 	%f1157, %f1156;\n"
    "	mul.f32 	%f1158, %f14, %f1157;\n"
    "	cvt.rni.f32.f32 	%f1159, %f1158;\n"
    "	mul.f32 	%f1160, %f13, %f1159;\n"
    "	sub.f32 	%f36, %f1156, %f1160;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1161, %f36, %f36, %f1154;\n"
    "	ld.shared.f32 	%f1162, [%rd14+344];\n"
    "	sub.f32 	%f1163, %f11, %f1162;\n"
    "	mul.f32 	%f1164, %f1163, %f14;\n"
    "	cvt.rni.f32.f32 	%f1165, %f1164;\n"
    "	mul.f32 	%f1166, %f13, %f1165;\n"
    "	sub.f32 	%f44, %f1163, %f1166;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1161;\n"
    "	mov.f32 	%f1167, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p23, %f45, %f1167;\n"
    "	@!%p23 bra 	$Lt_8_24322;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd79, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd80, %r27;\n"
    "	mul.wide.s32 	%rd81, %r27, 24;\n"
    "	add.u64 	%rd18, %rd79, %rd81;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1168, [%rd18+4];\n"
    "	sub.f32 	%f1169, %f1168, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1169;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1170, [%rd18+12];\n"
    "	mov.f32 	%f1171, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1172, %f1170, %f1171;\n"
    "	mul.f32 	%f1173, %f55, %f1172;\n"
    "	mov.f32 	%f1174, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1175, %f51, %f1174;\n"
    "	ex2.approx.f32 	%f1176, %f1175;\n"
    "	ld.global.f32 	%f1177, [%rd18+0];\n"
    "	mov.f32 	%f1178, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1179, %f1177, %f1178;\n"
    "	mul.f32 	%f1180, %f1176, %f1179;\n"
    "	mul.f32 	%f1181, %f48, %f1180;\n"
    "	mul.f32 	%f1182, %f52, %f1181;\n"
    "	sub.f32 	%f1183, %f1182, %f1173;\n"
    "	ld.global.f32 	%f1184, [%rd18+16];\n"
    "	mov.f32 	%f1185, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1186, %f1184, %f1185;\n"
    "	mul.f32 	%f1187, %f55, %f1186;\n"
    "	mul.f32 	%f1188, %f53, %f1187;\n"
    "	sub.f32 	%f1189, %f1183, %f1188;\n"
    "	ld.global.f32 	%f1190, [%rd18+20];\n"
    "	mul.f32 	%f1191, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1190, %f1191, %f1189;\n"
    "	mov.f32 	%f1192, %f2;\n"
    "	mov.f32 	%f1193, %f27;\n"
    "	mad.f32 	%f1194, %f1193, %f78, %f1192;\n"
    "	mov.f32 	%f2, %f1194;\n"
    "	mov.f32 	%f1195, %f4;\n"
    "	mov.f32 	%f1196, %f37;\n"
    "	mad.f32 	%f1197, %f1196, %f78, %f1195;\n"
    "	mov.f32 	%f4, %f1197;\n"
    "	mov.f32 	%f1198, %f6;\n"
    "	mad.f32 	%f1199, %f44, %f78, %f1198;\n"
    "	mov.f32 	%f6, %f1199;\n"
    "$Lt_8_24322:\n"
    "	ld.shared.s32 	%r49, [%rd13+364];\n"
    "	add.s32 	%r27, %r49, %r6;\n"
    "	ld.shared.f32 	%f1200, [%rd14+352];\n"
    "	sub.f32 	%f1201, %f19, %f1200;\n"
    "	mov.f32 	%f1202, %f1201;\n"
    "	mul.f32 	%f1203, %f14, %f1202;\n"
    "	cvt.rni.f32.f32 	%f1204, %f1203;\n"
    "	mul.f32 	%f1205, %f13, %f1204;\n"
    "	sub.f32 	%f26, %f1201, %f1205;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1206, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1207, %f26, %f26, %f1206;\n"
    "	ld.shared.f32 	%f1208, [%rd14+356];\n"
    "	sub.f32 	%f1209, %f18, %f1208;\n"
    "	mov.f32 	%f1210, %f1209;\n"
    "	mul.f32 	%f1211, %f14, %f1210;\n"
    "	cvt.rni.f32.f32 	%f1212, %f1211;\n"
    "	mul.f32 	%f1213, %f13, %f1212;\n"
    "	sub.f32 	%f36, %f1209, %f1213;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1214, %f36, %f36, %f1207;\n"
    "	ld.shared.f32 	%f1215, [%rd14+360];\n"
    "	sub.f32 	%f1216, %f11, %f1215;\n"
    "	mul.f32 	%f1217, %f1216, %f14;\n"
    "	cvt.rni.f32.f32 	%f1218, %f1217;\n"
    "	mul.f32 	%f1219, %f13, %f1218;\n"
    "	sub.f32 	%f44, %f1216, %f1219;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1214;\n"
    "	mov.f32 	%f1220, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p24, %f45, %f1220;\n"
    "	@!%p24 bra 	$Lt_8_24834;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd82, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd83, %r27;\n"
    "	mul.wide.s32 	%rd84, %r27, 24;\n"
    "	add.u64 	%rd18, %rd82, %rd84;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1221, [%rd18+4];\n"
    "	sub.f32 	%f1222, %f1221, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1222;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1223, [%rd18+12];\n"
    "	mov.f32 	%f1224, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1225, %f1223, %f1224;\n"
    "	mul.f32 	%f1226, %f55, %f1225;\n"
    "	mov.f32 	%f1227, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1228, %f51, %f1227;\n"
    "	ex2.approx.f32 	%f1229, %f1228;\n"
    "	ld.global.f32 	%f1230, [%rd18+0];\n"
    "	mov.f32 	%f1231, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1232, %f1230, %f1231;\n"
    "	mul.f32 	%f1233, %f1229, %f1232;\n"
    "	mul.f32 	%f1234, %f48, %f1233;\n"
    "	mul.f32 	%f1235, %f52, %f1234;\n"
    "	sub.f32 	%f1236, %f1235, %f1226;\n"
    "	ld.global.f32 	%f1237, [%rd18+16];\n"
    "	mov.f32 	%f1238, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1239, %f1237, %f1238;\n"
    "	mul.f32 	%f1240, %f55, %f1239;\n"
    "	mul.f32 	%f1241, %f53, %f1240;\n"
    "	sub.f32 	%f1242, %f1236, %f1241;\n"
    "	ld.global.f32 	%f1243, [%rd18+20];\n"
    "	mul.f32 	%f1244, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1243, %f1244, %f1242;\n"
    "	mov.f32 	%f1245, %f2;\n"
    "	mov.f32 	%f1246, %f27;\n"
    "	mad.f32 	%f1247, %f1246, %f78, %f1245;\n"
    "	mov.f32 	%f2, %f1247;\n"
    "	mov.f32 	%f1248, %f4;\n"
    "	mov.f32 	%f1249, %f37;\n"
    "	mad.f32 	%f1250, %f1249, %f78, %f1248;\n"
    "	mov.f32 	%f4, %f1250;\n"
    "	mov.f32 	%f1251, %f6;\n"
    "	mad.f32 	%f1252, %f44, %f78, %f1251;\n"
    "	mov.f32 	%f6, %f1252;\n"
    "$Lt_8_24834:\n"
    "	ld.shared.s32 	%r50, [%rd13+380];\n"
    "	add.s32 	%r27, %r50, %r6;\n"
    "	ld.shared.f32 	%f1253, [%rd14+368];\n"
    "	sub.f32 	%f1254, %f19, %f1253;\n"
    "	mov.f32 	%f1255, %f1254;\n"
    "	mul.f32 	%f1256, %f14, %f1255;\n"
    "	cvt.rni.f32.f32 	%f1257, %f1256;\n"
    "	mul.f32 	%f1258, %f13, %f1257;\n"
    "	sub.f32 	%f26, %f1254, %f1258;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1259, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1260, %f26, %f26, %f1259;\n"
    "	ld.shared.f32 	%f1261, [%rd14+372];\n"
    "	sub.f32 	%f1262, %f18, %f1261;\n"
    "	mov.f32 	%f1263, %f1262;\n"
    "	mul.f32 	%f1264, %f14, %f1263;\n"
    "	cvt.rni.f32.f32 	%f1265, %f1264;\n"
    "	mul.f32 	%f1266, %f13, %f1265;\n"
    "	sub.f32 	%f36, %f1262, %f1266;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1267, %f36, %f36, %f1260;\n"
    "	ld.shared.f32 	%f1268, [%rd14+376];\n"
    "	sub.f32 	%f1269, %f11, %f1268;\n"
    "	mul.f32 	%f1270, %f1269, %f14;\n"
    "	cvt.rni.f32.f32 	%f1271, %f1270;\n"
    "	mul.f32 	%f1272, %f13, %f1271;\n"
    "	sub.f32 	%f44, %f1269, %f1272;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1267;\n"
    "	mov.f32 	%f1273, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p25, %f45, %f1273;\n"
    "	@!%p25 bra 	$Lt_8_25346;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd85, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd86, %r27;\n"
    "	mul.wide.s32 	%rd87, %r27, 24;\n"
    "	add.u64 	%rd18, %rd85, %rd87;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1274, [%rd18+4];\n"
    "	sub.f32 	%f1275, %f1274, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1275;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1276, [%rd18+12];\n"
    "	mov.f32 	%f1277, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1278, %f1276, %f1277;\n"
    "	mul.f32 	%f1279, %f55, %f1278;\n"
    "	mov.f32 	%f1280, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1281, %f51, %f1280;\n"
    "	ex2.approx.f32 	%f1282, %f1281;\n"
    "	ld.global.f32 	%f1283, [%rd18+0];\n"
    "	mov.f32 	%f1284, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1285, %f1283, %f1284;\n"
    "	mul.f32 	%f1286, %f1282, %f1285;\n"
    "	mul.f32 	%f1287, %f48, %f1286;\n"
    "	mul.f32 	%f1288, %f52, %f1287;\n"
    "	sub.f32 	%f1289, %f1288, %f1279;\n"
    "	ld.global.f32 	%f1290, [%rd18+16];\n"
    "	mov.f32 	%f1291, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1292, %f1290, %f1291;\n"
    "	mul.f32 	%f1293, %f55, %f1292;\n"
    "	mul.f32 	%f1294, %f53, %f1293;\n"
    "	sub.f32 	%f1295, %f1289, %f1294;\n"
    "	ld.global.f32 	%f1296, [%rd18+20];\n"
    "	mul.f32 	%f1297, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1296, %f1297, %f1295;\n"
    "	mov.f32 	%f1298, %f2;\n"
    "	mov.f32 	%f1299, %f27;\n"
    "	mad.f32 	%f1300, %f1299, %f78, %f1298;\n"
    "	mov.f32 	%f2, %f1300;\n"
    "	mov.f32 	%f1301, %f4;\n"
    "	mov.f32 	%f1302, %f37;\n"
    "	mad.f32 	%f1303, %f1302, %f78, %f1301;\n"
    "	mov.f32 	%f4, %f1303;\n"
    "	mov.f32 	%f1304, %f6;\n"
    "	mad.f32 	%f1305, %f44, %f78, %f1304;\n"
    "	mov.f32 	%f6, %f1305;\n"
    "$Lt_8_25346:\n"
    "	ld.shared.s32 	%r51, [%rd13+396];\n"
    "	add.s32 	%r27, %r51, %r6;\n"
    "	ld.shared.f32 	%f1306, [%rd14+384];\n"
    "	sub.f32 	%f1307, %f19, %f1306;\n"
    "	mov.f32 	%f1308, %f1307;\n"
    "	mul.f32 	%f1309, %f14, %f1308;\n"
    "	cvt.rni.f32.f32 	%f1310, %f1309;\n"
    "	mul.f32 	%f1311, %f13, %f1310;\n"
    "	sub.f32 	%f26, %f1307, %f1311;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1312, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1313, %f26, %f26, %f1312;\n"
    "	ld.shared.f32 	%f1314, [%rd14+388];\n"
    "	sub.f32 	%f1315, %f18, %f1314;\n"
    "	mov.f32 	%f1316, %f1315;\n"
    "	mul.f32 	%f1317, %f14, %f1316;\n"
    "	cvt.rni.f32.f32 	%f1318, %f1317;\n"
    "	mul.f32 	%f1319, %f13, %f1318;\n"
    "	sub.f32 	%f36, %f1315, %f1319;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1320, %f36, %f36, %f1313;\n"
    "	ld.shared.f32 	%f1321, [%rd14+392];\n"
    "	sub.f32 	%f1322, %f11, %f1321;\n"
    "	mul.f32 	%f1323, %f1322, %f14;\n"
    "	cvt.rni.f32.f32 	%f1324, %f1323;\n"
    "	mul.f32 	%f1325, %f13, %f1324;\n"
    "	sub.f32 	%f44, %f1322, %f1325;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1320;\n"
    "	mov.f32 	%f1326, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p26, %f45, %f1326;\n"
    "	@!%p26 bra 	$Lt_8_25858;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd88, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd89, %r27;\n"
    "	mul.wide.s32 	%rd90, %r27, 24;\n"
    "	add.u64 	%rd18, %rd88, %rd90;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1327, [%rd18+4];\n"
    "	sub.f32 	%f1328, %f1327, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1328;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1329, [%rd18+12];\n"
    "	mov.f32 	%f1330, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1331, %f1329, %f1330;\n"
    "	mul.f32 	%f1332, %f55, %f1331;\n"
    "	mov.f32 	%f1333, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1334, %f51, %f1333;\n"
    "	ex2.approx.f32 	%f1335, %f1334;\n"
    "	ld.global.f32 	%f1336, [%rd18+0];\n"
    "	mov.f32 	%f1337, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1338, %f1336, %f1337;\n"
    "	mul.f32 	%f1339, %f1335, %f1338;\n"
    "	mul.f32 	%f1340, %f48, %f1339;\n"
    "	mul.f32 	%f1341, %f52, %f1340;\n"
    "	sub.f32 	%f1342, %f1341, %f1332;\n"
    "	ld.global.f32 	%f1343, [%rd18+16];\n"
    "	mov.f32 	%f1344, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1345, %f1343, %f1344;\n"
    "	mul.f32 	%f1346, %f55, %f1345;\n"
    "	mul.f32 	%f1347, %f53, %f1346;\n"
    "	sub.f32 	%f1348, %f1342, %f1347;\n"
    "	ld.global.f32 	%f1349, [%rd18+20];\n"
    "	mul.f32 	%f1350, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1349, %f1350, %f1348;\n"
    "	mov.f32 	%f1351, %f2;\n"
    "	mov.f32 	%f1352, %f27;\n"
    "	mad.f32 	%f1353, %f1352, %f78, %f1351;\n"
    "	mov.f32 	%f2, %f1353;\n"
    "	mov.f32 	%f1354, %f4;\n"
    "	mov.f32 	%f1355, %f37;\n"
    "	mad.f32 	%f1356, %f1355, %f78, %f1354;\n"
    "	mov.f32 	%f4, %f1356;\n"
    "	mov.f32 	%f1357, %f6;\n"
    "	mad.f32 	%f1358, %f44, %f78, %f1357;\n"
    "	mov.f32 	%f6, %f1358;\n"
    "$Lt_8_25858:\n"
    "	ld.shared.s32 	%r52, [%rd13+412];\n"
    "	add.s32 	%r27, %r52, %r6;\n"
    "	ld.shared.f32 	%f1359, [%rd14+400];\n"
    "	sub.f32 	%f1360, %f19, %f1359;\n"
    "	mov.f32 	%f1361, %f1360;\n"
    "	mul.f32 	%f1362, %f14, %f1361;\n"
    "	cvt.rni.f32.f32 	%f1363, %f1362;\n"
    "	mul.f32 	%f1364, %f13, %f1363;\n"
    "	sub.f32 	%f26, %f1360, %f1364;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1365, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1366, %f26, %f26, %f1365;\n"
    "	ld.shared.f32 	%f1367, [%rd14+404];\n"
    "	sub.f32 	%f1368, %f18, %f1367;\n"
    "	mov.f32 	%f1369, %f1368;\n"
    "	mul.f32 	%f1370, %f14, %f1369;\n"
    "	cvt.rni.f32.f32 	%f1371, %f1370;\n"
    "	mul.f32 	%f1372, %f13, %f1371;\n"
    "	sub.f32 	%f36, %f1368, %f1372;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1373, %f36, %f36, %f1366;\n"
    "	ld.shared.f32 	%f1374, [%rd14+408];\n"
    "	sub.f32 	%f1375, %f11, %f1374;\n"
    "	mul.f32 	%f1376, %f1375, %f14;\n"
    "	cvt.rni.f32.f32 	%f1377, %f1376;\n"
    "	mul.f32 	%f1378, %f13, %f1377;\n"
    "	sub.f32 	%f44, %f1375, %f1378;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1373;\n"
    "	mov.f32 	%f1379, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p27, %f45, %f1379;\n"
    "	@!%p27 bra 	$Lt_8_26370;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd91, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd92, %r27;\n"
    "	mul.wide.s32 	%rd93, %r27, 24;\n"
    "	add.u64 	%rd18, %rd91, %rd93;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1380, [%rd18+4];\n"
    "	sub.f32 	%f1381, %f1380, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1381;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1382, [%rd18+12];\n"
    "	mov.f32 	%f1383, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1384, %f1382, %f1383;\n"
    "	mul.f32 	%f1385, %f55, %f1384;\n"
    "	mov.f32 	%f1386, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1387, %f51, %f1386;\n"
    "	ex2.approx.f32 	%f1388, %f1387;\n"
    "	ld.global.f32 	%f1389, [%rd18+0];\n"
    "	mov.f32 	%f1390, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1391, %f1389, %f1390;\n"
    "	mul.f32 	%f1392, %f1388, %f1391;\n"
    "	mul.f32 	%f1393, %f48, %f1392;\n"
    "	mul.f32 	%f1394, %f52, %f1393;\n"
    "	sub.f32 	%f1395, %f1394, %f1385;\n"
    "	ld.global.f32 	%f1396, [%rd18+16];\n"
    "	mov.f32 	%f1397, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1398, %f1396, %f1397;\n"
    "	mul.f32 	%f1399, %f55, %f1398;\n"
    "	mul.f32 	%f1400, %f53, %f1399;\n"
    "	sub.f32 	%f1401, %f1395, %f1400;\n"
    "	ld.global.f32 	%f1402, [%rd18+20];\n"
    "	mul.f32 	%f1403, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1402, %f1403, %f1401;\n"
    "	mov.f32 	%f1404, %f2;\n"
    "	mov.f32 	%f1405, %f27;\n"
    "	mad.f32 	%f1406, %f1405, %f78, %f1404;\n"
    "	mov.f32 	%f2, %f1406;\n"
    "	mov.f32 	%f1407, %f4;\n"
    "	mov.f32 	%f1408, %f37;\n"
    "	mad.f32 	%f1409, %f1408, %f78, %f1407;\n"
    "	mov.f32 	%f4, %f1409;\n"
    "	mov.f32 	%f1410, %f6;\n"
    "	mad.f32 	%f1411, %f44, %f78, %f1410;\n"
    "	mov.f32 	%f6, %f1411;\n"
    "$Lt_8_26370:\n"
    "	ld.shared.s32 	%r53, [%rd13+428];\n"
    "	add.s32 	%r27, %r53, %r6;\n"
    "	ld.shared.f32 	%f1412, [%rd14+416];\n"
    "	sub.f32 	%f1413, %f19, %f1412;\n"
    "	mov.f32 	%f1414, %f1413;\n"
    "	mul.f32 	%f1415, %f14, %f1414;\n"
    "	cvt.rni.f32.f32 	%f1416, %f1415;\n"
    "	mul.f32 	%f1417, %f13, %f1416;\n"
    "	sub.f32 	%f26, %f1413, %f1417;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1418, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1419, %f26, %f26, %f1418;\n"
    "	ld.shared.f32 	%f1420, [%rd14+420];\n"
    "	sub.f32 	%f1421, %f18, %f1420;\n"
    "	mov.f32 	%f1422, %f1421;\n"
    "	mul.f32 	%f1423, %f14, %f1422;\n"
    "	cvt.rni.f32.f32 	%f1424, %f1423;\n"
    "	mul.f32 	%f1425, %f13, %f1424;\n"
    "	sub.f32 	%f36, %f1421, %f1425;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1426, %f36, %f36, %f1419;\n"
    "	ld.shared.f32 	%f1427, [%rd14+424];\n"
    "	sub.f32 	%f1428, %f11, %f1427;\n"
    "	mul.f32 	%f1429, %f1428, %f14;\n"
    "	cvt.rni.f32.f32 	%f1430, %f1429;\n"
    "	mul.f32 	%f1431, %f13, %f1430;\n"
    "	sub.f32 	%f44, %f1428, %f1431;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1426;\n"
    "	mov.f32 	%f1432, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p28, %f45, %f1432;\n"
    "	@!%p28 bra 	$Lt_8_26882;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd94, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd95, %r27;\n"
    "	mul.wide.s32 	%rd96, %r27, 24;\n"
    "	add.u64 	%rd18, %rd94, %rd96;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1433, [%rd18+4];\n"
    "	sub.f32 	%f1434, %f1433, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1434;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1435, [%rd18+12];\n"
    "	mov.f32 	%f1436, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1437, %f1435, %f1436;\n"
    "	mul.f32 	%f1438, %f55, %f1437;\n"
    "	mov.f32 	%f1439, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1440, %f51, %f1439;\n"
    "	ex2.approx.f32 	%f1441, %f1440;\n"
    "	ld.global.f32 	%f1442, [%rd18+0];\n"
    "	mov.f32 	%f1443, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1444, %f1442, %f1443;\n"
    "	mul.f32 	%f1445, %f1441, %f1444;\n"
    "	mul.f32 	%f1446, %f48, %f1445;\n"
    "	mul.f32 	%f1447, %f52, %f1446;\n"
    "	sub.f32 	%f1448, %f1447, %f1438;\n"
    "	ld.global.f32 	%f1449, [%rd18+16];\n"
    "	mov.f32 	%f1450, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1451, %f1449, %f1450;\n"
    "	mul.f32 	%f1452, %f55, %f1451;\n"
    "	mul.f32 	%f1453, %f53, %f1452;\n"
    "	sub.f32 	%f1454, %f1448, %f1453;\n"
    "	ld.global.f32 	%f1455, [%rd18+20];\n"
    "	mul.f32 	%f1456, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1455, %f1456, %f1454;\n"
    "	mov.f32 	%f1457, %f2;\n"
    "	mov.f32 	%f1458, %f27;\n"
    "	mad.f32 	%f1459, %f1458, %f78, %f1457;\n"
    "	mov.f32 	%f2, %f1459;\n"
    "	mov.f32 	%f1460, %f4;\n"
    "	mov.f32 	%f1461, %f37;\n"
    "	mad.f32 	%f1462, %f1461, %f78, %f1460;\n"
    "	mov.f32 	%f4, %f1462;\n"
    "	mov.f32 	%f1463, %f6;\n"
    "	mad.f32 	%f1464, %f44, %f78, %f1463;\n"
    "	mov.f32 	%f6, %f1464;\n"
    "$Lt_8_26882:\n"
    "	ld.shared.s32 	%r54, [%rd13+444];\n"
    "	add.s32 	%r27, %r54, %r6;\n"
    "	ld.shared.f32 	%f1465, [%rd14+432];\n"
    "	sub.f32 	%f1466, %f19, %f1465;\n"
    "	mov.f32 	%f1467, %f1466;\n"
    "	mul.f32 	%f1468, %f14, %f1467;\n"
    "	cvt.rni.f32.f32 	%f1469, %f1468;\n"
    "	mul.f32 	%f1470, %f13, %f1469;\n"
    "	sub.f32 	%f26, %f1466, %f1470;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1471, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1472, %f26, %f26, %f1471;\n"
    "	ld.shared.f32 	%f1473, [%rd14+436];\n"
    "	sub.f32 	%f1474, %f18, %f1473;\n"
    "	mov.f32 	%f1475, %f1474;\n"
    "	mul.f32 	%f1476, %f14, %f1475;\n"
    "	cvt.rni.f32.f32 	%f1477, %f1476;\n"
    "	mul.f32 	%f1478, %f13, %f1477;\n"
    "	sub.f32 	%f36, %f1474, %f1478;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1479, %f36, %f36, %f1472;\n"
    "	ld.shared.f32 	%f1480, [%rd14+440];\n"
    "	sub.f32 	%f1481, %f11, %f1480;\n"
    "	mul.f32 	%f1482, %f1481, %f14;\n"
    "	cvt.rni.f32.f32 	%f1483, %f1482;\n"
    "	mul.f32 	%f1484, %f13, %f1483;\n"
    "	sub.f32 	%f44, %f1481, %f1484;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1479;\n"
    "	mov.f32 	%f1485, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p29, %f45, %f1485;\n"
    "	@!%p29 bra 	$Lt_8_27394;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd97, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd98, %r27;\n"
    "	mul.wide.s32 	%rd99, %r27, 24;\n"
    "	add.u64 	%rd18, %rd97, %rd99;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1486, [%rd18+4];\n"
    "	sub.f32 	%f1487, %f1486, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1487;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1488, [%rd18+12];\n"
    "	mov.f32 	%f1489, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1490, %f1488, %f1489;\n"
    "	mul.f32 	%f1491, %f55, %f1490;\n"
    "	mov.f32 	%f1492, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1493, %f51, %f1492;\n"
    "	ex2.approx.f32 	%f1494, %f1493;\n"
    "	ld.global.f32 	%f1495, [%rd18+0];\n"
    "	mov.f32 	%f1496, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1497, %f1495, %f1496;\n"
    "	mul.f32 	%f1498, %f1494, %f1497;\n"
    "	mul.f32 	%f1499, %f48, %f1498;\n"
    "	mul.f32 	%f1500, %f52, %f1499;\n"
    "	sub.f32 	%f1501, %f1500, %f1491;\n"
    "	ld.global.f32 	%f1502, [%rd18+16];\n"
    "	mov.f32 	%f1503, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1504, %f1502, %f1503;\n"
    "	mul.f32 	%f1505, %f55, %f1504;\n"
    "	mul.f32 	%f1506, %f53, %f1505;\n"
    "	sub.f32 	%f1507, %f1501, %f1506;\n"
    "	ld.global.f32 	%f1508, [%rd18+20];\n"
    "	mul.f32 	%f1509, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1508, %f1509, %f1507;\n"
    "	mov.f32 	%f1510, %f2;\n"
    "	mov.f32 	%f1511, %f27;\n"
    "	mad.f32 	%f1512, %f1511, %f78, %f1510;\n"
    "	mov.f32 	%f2, %f1512;\n"
    "	mov.f32 	%f1513, %f4;\n"
    "	mov.f32 	%f1514, %f37;\n"
    "	mad.f32 	%f1515, %f1514, %f78, %f1513;\n"
    "	mov.f32 	%f4, %f1515;\n"
    "	mov.f32 	%f1516, %f6;\n"
    "	mad.f32 	%f1517, %f44, %f78, %f1516;\n"
    "	mov.f32 	%f6, %f1517;\n"
    "$Lt_8_27394:\n"
    "	ld.shared.s32 	%r55, [%rd13+460];\n"
    "	add.s32 	%r27, %r55, %r6;\n"
    "	ld.shared.f32 	%f1518, [%rd14+448];\n"
    "	sub.f32 	%f1519, %f19, %f1518;\n"
    "	mov.f32 	%f1520, %f1519;\n"
    "	mul.f32 	%f1521, %f14, %f1520;\n"
    "	cvt.rni.f32.f32 	%f1522, %f1521;\n"
    "	mul.f32 	%f1523, %f13, %f1522;\n"
    "	sub.f32 	%f26, %f1519, %f1523;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1524, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1525, %f26, %f26, %f1524;\n"
    "	ld.shared.f32 	%f1526, [%rd14+452];\n"
    "	sub.f32 	%f1527, %f18, %f1526;\n"
    "	mov.f32 	%f1528, %f1527;\n"
    "	mul.f32 	%f1529, %f14, %f1528;\n"
    "	cvt.rni.f32.f32 	%f1530, %f1529;\n"
    "	mul.f32 	%f1531, %f13, %f1530;\n"
    "	sub.f32 	%f36, %f1527, %f1531;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1532, %f36, %f36, %f1525;\n"
    "	ld.shared.f32 	%f1533, [%rd14+456];\n"
    "	sub.f32 	%f1534, %f11, %f1533;\n"
    "	mul.f32 	%f1535, %f1534, %f14;\n"
    "	cvt.rni.f32.f32 	%f1536, %f1535;\n"
    "	mul.f32 	%f1537, %f13, %f1536;\n"
    "	sub.f32 	%f44, %f1534, %f1537;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1532;\n"
    "	mov.f32 	%f1538, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p30, %f45, %f1538;\n"
    "	@!%p30 bra 	$Lt_8_27906;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd100, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd101, %r27;\n"
    "	mul.wide.s32 	%rd102, %r27, 24;\n"
    "	add.u64 	%rd18, %rd100, %rd102;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1539, [%rd18+4];\n"
    "	sub.f32 	%f1540, %f1539, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1540;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1541, [%rd18+12];\n"
    "	mov.f32 	%f1542, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1543, %f1541, %f1542;\n"
    "	mul.f32 	%f1544, %f55, %f1543;\n"
    "	mov.f32 	%f1545, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1546, %f51, %f1545;\n"
    "	ex2.approx.f32 	%f1547, %f1546;\n"
    "	ld.global.f32 	%f1548, [%rd18+0];\n"
    "	mov.f32 	%f1549, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1550, %f1548, %f1549;\n"
    "	mul.f32 	%f1551, %f1547, %f1550;\n"
    "	mul.f32 	%f1552, %f48, %f1551;\n"
    "	mul.f32 	%f1553, %f52, %f1552;\n"
    "	sub.f32 	%f1554, %f1553, %f1544;\n"
    "	ld.global.f32 	%f1555, [%rd18+16];\n"
    "	mov.f32 	%f1556, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1557, %f1555, %f1556;\n"
    "	mul.f32 	%f1558, %f55, %f1557;\n"
    "	mul.f32 	%f1559, %f53, %f1558;\n"
    "	sub.f32 	%f1560, %f1554, %f1559;\n"
    "	ld.global.f32 	%f1561, [%rd18+20];\n"
    "	mul.f32 	%f1562, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1561, %f1562, %f1560;\n"
    "	mov.f32 	%f1563, %f2;\n"
    "	mov.f32 	%f1564, %f27;\n"
    "	mad.f32 	%f1565, %f1564, %f78, %f1563;\n"
    "	mov.f32 	%f2, %f1565;\n"
    "	mov.f32 	%f1566, %f4;\n"
    "	mov.f32 	%f1567, %f37;\n"
    "	mad.f32 	%f1568, %f1567, %f78, %f1566;\n"
    "	mov.f32 	%f4, %f1568;\n"
    "	mov.f32 	%f1569, %f6;\n"
    "	mad.f32 	%f1570, %f44, %f78, %f1569;\n"
    "	mov.f32 	%f6, %f1570;\n"
    "$Lt_8_27906:\n"
    "	ld.shared.s32 	%r56, [%rd13+476];\n"
    "	add.s32 	%r27, %r56, %r6;\n"
    "	ld.shared.f32 	%f1571, [%rd14+464];\n"
    "	sub.f32 	%f1572, %f19, %f1571;\n"
    "	mov.f32 	%f1573, %f1572;\n"
    "	mul.f32 	%f1574, %f14, %f1573;\n"
    "	cvt.rni.f32.f32 	%f1575, %f1574;\n"
    "	mul.f32 	%f1576, %f13, %f1575;\n"
    "	sub.f32 	%f26, %f1572, %f1576;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1577, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1578, %f26, %f26, %f1577;\n"
    "	ld.shared.f32 	%f1579, [%rd14+468];\n"
    "	sub.f32 	%f1580, %f18, %f1579;\n"
    "	mov.f32 	%f1581, %f1580;\n"
    "	mul.f32 	%f1582, %f14, %f1581;\n"
    "	cvt.rni.f32.f32 	%f1583, %f1582;\n"
    "	mul.f32 	%f1584, %f13, %f1583;\n"
    "	sub.f32 	%f36, %f1580, %f1584;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1585, %f36, %f36, %f1578;\n"
    "	ld.shared.f32 	%f1586, [%rd14+472];\n"
    "	sub.f32 	%f1587, %f11, %f1586;\n"
    "	mul.f32 	%f1588, %f1587, %f14;\n"
    "	cvt.rni.f32.f32 	%f1589, %f1588;\n"
    "	mul.f32 	%f1590, %f13, %f1589;\n"
    "	sub.f32 	%f44, %f1587, %f1590;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1585;\n"
    "	mov.f32 	%f1591, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p31, %f45, %f1591;\n"
    "	@!%p31 bra 	$Lt_8_28418;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd103, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd104, %r27;\n"
    "	mul.wide.s32 	%rd105, %r27, 24;\n"
    "	add.u64 	%rd18, %rd103, %rd105;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1592, [%rd18+4];\n"
    "	sub.f32 	%f1593, %f1592, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1593;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1594, [%rd18+12];\n"
    "	mov.f32 	%f1595, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1596, %f1594, %f1595;\n"
    "	mul.f32 	%f1597, %f55, %f1596;\n"
    "	mov.f32 	%f1598, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1599, %f51, %f1598;\n"
    "	ex2.approx.f32 	%f1600, %f1599;\n"
    "	ld.global.f32 	%f1601, [%rd18+0];\n"
    "	mov.f32 	%f1602, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1603, %f1601, %f1602;\n"
    "	mul.f32 	%f1604, %f1600, %f1603;\n"
    "	mul.f32 	%f1605, %f48, %f1604;\n"
    "	mul.f32 	%f1606, %f52, %f1605;\n"
    "	sub.f32 	%f1607, %f1606, %f1597;\n"
    "	ld.global.f32 	%f1608, [%rd18+16];\n"
    "	mov.f32 	%f1609, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1610, %f1608, %f1609;\n"
    "	mul.f32 	%f1611, %f55, %f1610;\n"
    "	mul.f32 	%f1612, %f53, %f1611;\n"
    "	sub.f32 	%f1613, %f1607, %f1612;\n"
    "	ld.global.f32 	%f1614, [%rd18+20];\n"
    "	mul.f32 	%f1615, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1614, %f1615, %f1613;\n"
    "	mov.f32 	%f1616, %f2;\n"
    "	mov.f32 	%f1617, %f27;\n"
    "	mad.f32 	%f1618, %f1617, %f78, %f1616;\n"
    "	mov.f32 	%f2, %f1618;\n"
    "	mov.f32 	%f1619, %f4;\n"
    "	mov.f32 	%f1620, %f37;\n"
    "	mad.f32 	%f1621, %f1620, %f78, %f1619;\n"
    "	mov.f32 	%f4, %f1621;\n"
    "	mov.f32 	%f1622, %f6;\n"
    "	mad.f32 	%f1623, %f44, %f78, %f1622;\n"
    "	mov.f32 	%f6, %f1623;\n"
    "$Lt_8_28418:\n"
    "	ld.shared.s32 	%r57, [%rd13+492];\n"
    "	add.s32 	%r27, %r57, %r6;\n"
    "	ld.shared.f32 	%f1624, [%rd14+480];\n"
    "	sub.f32 	%f1625, %f19, %f1624;\n"
    "	mov.f32 	%f1626, %f1625;\n"
    "	mul.f32 	%f1627, %f14, %f1626;\n"
    "	cvt.rni.f32.f32 	%f1628, %f1627;\n"
    "	mul.f32 	%f1629, %f13, %f1628;\n"
    "	sub.f32 	%f26, %f1625, %f1629;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1630, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1631, %f26, %f26, %f1630;\n"
    "	ld.shared.f32 	%f1632, [%rd14+484];\n"
    "	sub.f32 	%f1633, %f18, %f1632;\n"
    "	mov.f32 	%f1634, %f1633;\n"
    "	mul.f32 	%f1635, %f14, %f1634;\n"
    "	cvt.rni.f32.f32 	%f1636, %f1635;\n"
    "	mul.f32 	%f1637, %f13, %f1636;\n"
    "	sub.f32 	%f36, %f1633, %f1637;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1638, %f36, %f36, %f1631;\n"
    "	ld.shared.f32 	%f1639, [%rd14+488];\n"
    "	sub.f32 	%f1640, %f11, %f1639;\n"
    "	mul.f32 	%f1641, %f1640, %f14;\n"
    "	cvt.rni.f32.f32 	%f1642, %f1641;\n"
    "	mul.f32 	%f1643, %f13, %f1642;\n"
    "	sub.f32 	%f44, %f1640, %f1643;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1638;\n"
    "	mov.f32 	%f1644, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p32, %f45, %f1644;\n"
    "	@!%p32 bra 	$Lt_8_28930;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd106, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd107, %r27;\n"
    "	mul.wide.s32 	%rd108, %r27, 24;\n"
    "	add.u64 	%rd18, %rd106, %rd108;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1645, [%rd18+4];\n"
    "	sub.f32 	%f1646, %f1645, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1646;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1647, [%rd18+12];\n"
    "	mov.f32 	%f1648, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1649, %f1647, %f1648;\n"
    "	mul.f32 	%f1650, %f55, %f1649;\n"
    "	mov.f32 	%f1651, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1652, %f51, %f1651;\n"
    "	ex2.approx.f32 	%f1653, %f1652;\n"
    "	ld.global.f32 	%f1654, [%rd18+0];\n"
    "	mov.f32 	%f1655, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1656, %f1654, %f1655;\n"
    "	mul.f32 	%f1657, %f1653, %f1656;\n"
    "	mul.f32 	%f1658, %f48, %f1657;\n"
    "	mul.f32 	%f1659, %f52, %f1658;\n"
    "	sub.f32 	%f1660, %f1659, %f1650;\n"
    "	ld.global.f32 	%f1661, [%rd18+16];\n"
    "	mov.f32 	%f1662, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1663, %f1661, %f1662;\n"
    "	mul.f32 	%f1664, %f55, %f1663;\n"
    "	mul.f32 	%f1665, %f53, %f1664;\n"
    "	sub.f32 	%f1666, %f1660, %f1665;\n"
    "	ld.global.f32 	%f1667, [%rd18+20];\n"
    "	mul.f32 	%f1668, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1667, %f1668, %f1666;\n"
    "	mov.f32 	%f1669, %f2;\n"
    "	mov.f32 	%f1670, %f27;\n"
    "	mad.f32 	%f1671, %f1670, %f78, %f1669;\n"
    "	mov.f32 	%f2, %f1671;\n"
    "	mov.f32 	%f1672, %f4;\n"
    "	mov.f32 	%f1673, %f37;\n"
    "	mad.f32 	%f1674, %f1673, %f78, %f1672;\n"
    "	mov.f32 	%f4, %f1674;\n"
    "	mov.f32 	%f1675, %f6;\n"
    "	mad.f32 	%f1676, %f44, %f78, %f1675;\n"
    "	mov.f32 	%f6, %f1676;\n"
    "$Lt_8_28930:\n"
    "	ld.shared.s32 	%r58, [%rd13+508];\n"
    "	add.s32 	%r27, %r58, %r6;\n"
    "	ld.shared.f32 	%f1677, [%rd14+496];\n"
    "	sub.f32 	%f1678, %f19, %f1677;\n"
    "	mov.f32 	%f1679, %f1678;\n"
    "	mul.f32 	%f1680, %f14, %f1679;\n"
    "	cvt.rni.f32.f32 	%f1681, %f1680;\n"
    "	mul.f32 	%f1682, %f13, %f1681;\n"
    "	sub.f32 	%f26, %f1678, %f1682;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1683, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1684, %f26, %f26, %f1683;\n"
    "	ld.shared.f32 	%f1685, [%rd14+500];\n"
    "	sub.f32 	%f1686, %f18, %f1685;\n"
    "	mov.f32 	%f1687, %f1686;\n"
    "	mul.f32 	%f1688, %f14, %f1687;\n"
    "	cvt.rni.f32.f32 	%f1689, %f1688;\n"
    "	mul.f32 	%f1690, %f13, %f1689;\n"
    "	sub.f32 	%f36, %f1686, %f1690;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1691, %f36, %f36, %f1684;\n"
    "	ld.shared.f32 	%f1692, [%rd14+504];\n"
    "	sub.f32 	%f1693, %f11, %f1692;\n"
    "	mul.f32 	%f1694, %f1693, %f14;\n"
    "	cvt.rni.f32.f32 	%f1695, %f1694;\n"
    "	mul.f32 	%f1696, %f13, %f1695;\n"
    "	sub.f32 	%f44, %f1693, %f1696;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1691;\n"
    "	mov.f32 	%f1697, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p33, %f45, %f1697;\n"
    "	@!%p33 bra 	$Lt_8_29442;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd109, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd110, %r27;\n"
    "	mul.wide.s32 	%rd111, %r27, 24;\n"
    "	add.u64 	%rd18, %rd109, %rd111;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1698, [%rd18+4];\n"
    "	sub.f32 	%f1699, %f1698, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1699;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1700, [%rd18+12];\n"
    "	mov.f32 	%f1701, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1702, %f1700, %f1701;\n"
    "	mul.f32 	%f1703, %f55, %f1702;\n"
    "	mov.f32 	%f1704, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1705, %f51, %f1704;\n"
    "	ex2.approx.f32 	%f1706, %f1705;\n"
    "	ld.global.f32 	%f1707, [%rd18+0];\n"
    "	mov.f32 	%f1708, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1709, %f1707, %f1708;\n"
    "	mul.f32 	%f1710, %f1706, %f1709;\n"
    "	mul.f32 	%f1711, %f48, %f1710;\n"
    "	mul.f32 	%f1712, %f52, %f1711;\n"
    "	sub.f32 	%f1713, %f1712, %f1703;\n"
    "	ld.global.f32 	%f1714, [%rd18+16];\n"
    "	mov.f32 	%f1715, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1716, %f1714, %f1715;\n"
    "	mul.f32 	%f1717, %f55, %f1716;\n"
    "	mul.f32 	%f1718, %f53, %f1717;\n"
    "	sub.f32 	%f1719, %f1713, %f1718;\n"
    "	ld.global.f32 	%f1720, [%rd18+20];\n"
    "	mul.f32 	%f1721, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1720, %f1721, %f1719;\n"
    "	mov.f32 	%f1722, %f2;\n"
    "	mov.f32 	%f1723, %f27;\n"
    "	mad.f32 	%f1724, %f1723, %f78, %f1722;\n"
    "	mov.f32 	%f2, %f1724;\n"
    "	mov.f32 	%f1725, %f4;\n"
    "	mov.f32 	%f1726, %f37;\n"
    "	mad.f32 	%f1727, %f1726, %f78, %f1725;\n"
    "	mov.f32 	%f4, %f1727;\n"
    "	mov.f32 	%f1728, %f6;\n"
    "	mad.f32 	%f1729, %f44, %f78, %f1728;\n"
    "	mov.f32 	%f6, %f1729;\n"
    "$Lt_8_29442:\n"
    "	ld.shared.s32 	%r59, [%rd13+524];\n"
    "	add.s32 	%r27, %r59, %r6;\n"
    "	ld.shared.f32 	%f1730, [%rd14+512];\n"
    "	sub.f32 	%f1731, %f19, %f1730;\n"
    "	mov.f32 	%f1732, %f1731;\n"
    "	mul.f32 	%f1733, %f14, %f1732;\n"
    "	cvt.rni.f32.f32 	%f1734, %f1733;\n"
    "	mul.f32 	%f1735, %f13, %f1734;\n"
    "	sub.f32 	%f26, %f1731, %f1735;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1736, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1737, %f26, %f26, %f1736;\n"
    "	ld.shared.f32 	%f1738, [%rd14+516];\n"
    "	sub.f32 	%f1739, %f18, %f1738;\n"
    "	mov.f32 	%f1740, %f1739;\n"
    "	mul.f32 	%f1741, %f14, %f1740;\n"
    "	cvt.rni.f32.f32 	%f1742, %f1741;\n"
    "	mul.f32 	%f1743, %f13, %f1742;\n"
    "	sub.f32 	%f36, %f1739, %f1743;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1744, %f36, %f36, %f1737;\n"
    "	ld.shared.f32 	%f1745, [%rd14+520];\n"
    "	sub.f32 	%f1746, %f11, %f1745;\n"
    "	mul.f32 	%f1747, %f1746, %f14;\n"
    "	cvt.rni.f32.f32 	%f1748, %f1747;\n"
    "	mul.f32 	%f1749, %f13, %f1748;\n"
    "	sub.f32 	%f44, %f1746, %f1749;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1744;\n"
    "	mov.f32 	%f1750, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p34, %f45, %f1750;\n"
    "	@!%p34 bra 	$Lt_8_29954;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd112, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd113, %r27;\n"
    "	mul.wide.s32 	%rd114, %r27, 24;\n"
    "	add.u64 	%rd18, %rd112, %rd114;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1751, [%rd18+4];\n"
    "	sub.f32 	%f1752, %f1751, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1752;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1753, [%rd18+12];\n"
    "	mov.f32 	%f1754, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1755, %f1753, %f1754;\n"
    "	mul.f32 	%f1756, %f55, %f1755;\n"
    "	mov.f32 	%f1757, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1758, %f51, %f1757;\n"
    "	ex2.approx.f32 	%f1759, %f1758;\n"
    "	ld.global.f32 	%f1760, [%rd18+0];\n"
    "	mov.f32 	%f1761, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1762, %f1760, %f1761;\n"
    "	mul.f32 	%f1763, %f1759, %f1762;\n"
    "	mul.f32 	%f1764, %f48, %f1763;\n"
    "	mul.f32 	%f1765, %f52, %f1764;\n"
    "	sub.f32 	%f1766, %f1765, %f1756;\n"
    "	ld.global.f32 	%f1767, [%rd18+16];\n"
    "	mov.f32 	%f1768, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1769, %f1767, %f1768;\n"
    "	mul.f32 	%f1770, %f55, %f1769;\n"
    "	mul.f32 	%f1771, %f53, %f1770;\n"
    "	sub.f32 	%f1772, %f1766, %f1771;\n"
    "	ld.global.f32 	%f1773, [%rd18+20];\n"
    "	mul.f32 	%f1774, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1773, %f1774, %f1772;\n"
    "	mov.f32 	%f1775, %f2;\n"
    "	mov.f32 	%f1776, %f27;\n"
    "	mad.f32 	%f1777, %f1776, %f78, %f1775;\n"
    "	mov.f32 	%f2, %f1777;\n"
    "	mov.f32 	%f1778, %f4;\n"
    "	mov.f32 	%f1779, %f37;\n"
    "	mad.f32 	%f1780, %f1779, %f78, %f1778;\n"
    "	mov.f32 	%f4, %f1780;\n"
    "	mov.f32 	%f1781, %f6;\n"
    "	mad.f32 	%f1782, %f44, %f78, %f1781;\n"
    "	mov.f32 	%f6, %f1782;\n"
    "$Lt_8_29954:\n"
    "	ld.shared.s32 	%r60, [%rd13+540];\n"
    "	add.s32 	%r27, %r60, %r6;\n"
    "	ld.shared.f32 	%f1783, [%rd14+528];\n"
    "	sub.f32 	%f1784, %f19, %f1783;\n"
    "	mov.f32 	%f1785, %f1784;\n"
    "	mul.f32 	%f1786, %f14, %f1785;\n"
    "	cvt.rni.f32.f32 	%f1787, %f1786;\n"
    "	mul.f32 	%f1788, %f13, %f1787;\n"
    "	sub.f32 	%f26, %f1784, %f1788;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1789, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1790, %f26, %f26, %f1789;\n"
    "	ld.shared.f32 	%f1791, [%rd14+532];\n"
    "	sub.f32 	%f1792, %f18, %f1791;\n"
    "	mov.f32 	%f1793, %f1792;\n"
    "	mul.f32 	%f1794, %f14, %f1793;\n"
    "	cvt.rni.f32.f32 	%f1795, %f1794;\n"
    "	mul.f32 	%f1796, %f13, %f1795;\n"
    "	sub.f32 	%f36, %f1792, %f1796;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1797, %f36, %f36, %f1790;\n"
    "	ld.shared.f32 	%f1798, [%rd14+536];\n"
    "	sub.f32 	%f1799, %f11, %f1798;\n"
    "	mul.f32 	%f1800, %f1799, %f14;\n"
    "	cvt.rni.f32.f32 	%f1801, %f1800;\n"
    "	mul.f32 	%f1802, %f13, %f1801;\n"
    "	sub.f32 	%f44, %f1799, %f1802;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1797;\n"
    "	mov.f32 	%f1803, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p35, %f45, %f1803;\n"
    "	@!%p35 bra 	$Lt_8_30466;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd115, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd116, %r27;\n"
    "	mul.wide.s32 	%rd117, %r27, 24;\n"
    "	add.u64 	%rd18, %rd115, %rd117;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1804, [%rd18+4];\n"
    "	sub.f32 	%f1805, %f1804, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1805;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1806, [%rd18+12];\n"
    "	mov.f32 	%f1807, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1808, %f1806, %f1807;\n"
    "	mul.f32 	%f1809, %f55, %f1808;\n"
    "	mov.f32 	%f1810, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1811, %f51, %f1810;\n"
    "	ex2.approx.f32 	%f1812, %f1811;\n"
    "	ld.global.f32 	%f1813, [%rd18+0];\n"
    "	mov.f32 	%f1814, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1815, %f1813, %f1814;\n"
    "	mul.f32 	%f1816, %f1812, %f1815;\n"
    "	mul.f32 	%f1817, %f48, %f1816;\n"
    "	mul.f32 	%f1818, %f52, %f1817;\n"
    "	sub.f32 	%f1819, %f1818, %f1809;\n"
    "	ld.global.f32 	%f1820, [%rd18+16];\n"
    "	mov.f32 	%f1821, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1822, %f1820, %f1821;\n"
    "	mul.f32 	%f1823, %f55, %f1822;\n"
    "	mul.f32 	%f1824, %f53, %f1823;\n"
    "	sub.f32 	%f1825, %f1819, %f1824;\n"
    "	ld.global.f32 	%f1826, [%rd18+20];\n"
    "	mul.f32 	%f1827, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1826, %f1827, %f1825;\n"
    "	mov.f32 	%f1828, %f2;\n"
    "	mov.f32 	%f1829, %f27;\n"
    "	mad.f32 	%f1830, %f1829, %f78, %f1828;\n"
    "	mov.f32 	%f2, %f1830;\n"
    "	mov.f32 	%f1831, %f4;\n"
    "	mov.f32 	%f1832, %f37;\n"
    "	mad.f32 	%f1833, %f1832, %f78, %f1831;\n"
    "	mov.f32 	%f4, %f1833;\n"
    "	mov.f32 	%f1834, %f6;\n"
    "	mad.f32 	%f1835, %f44, %f78, %f1834;\n"
    "	mov.f32 	%f6, %f1835;\n"
    "$Lt_8_30466:\n"
    "	ld.shared.s32 	%r61, [%rd13+556];\n"
    "	add.s32 	%r27, %r61, %r6;\n"
    "	ld.shared.f32 	%f1836, [%rd14+544];\n"
    "	sub.f32 	%f1837, %f19, %f1836;\n"
    "	mov.f32 	%f1838, %f1837;\n"
    "	mul.f32 	%f1839, %f14, %f1838;\n"
    "	cvt.rni.f32.f32 	%f1840, %f1839;\n"
    "	mul.f32 	%f1841, %f13, %f1840;\n"
    "	sub.f32 	%f26, %f1837, %f1841;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1842, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1843, %f26, %f26, %f1842;\n"
    "	ld.shared.f32 	%f1844, [%rd14+548];\n"
    "	sub.f32 	%f1845, %f18, %f1844;\n"
    "	mov.f32 	%f1846, %f1845;\n"
    "	mul.f32 	%f1847, %f14, %f1846;\n"
    "	cvt.rni.f32.f32 	%f1848, %f1847;\n"
    "	mul.f32 	%f1849, %f13, %f1848;\n"
    "	sub.f32 	%f36, %f1845, %f1849;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1850, %f36, %f36, %f1843;\n"
    "	ld.shared.f32 	%f1851, [%rd14+552];\n"
    "	sub.f32 	%f1852, %f11, %f1851;\n"
    "	mul.f32 	%f1853, %f1852, %f14;\n"
    "	cvt.rni.f32.f32 	%f1854, %f1853;\n"
    "	mul.f32 	%f1855, %f13, %f1854;\n"
    "	sub.f32 	%f44, %f1852, %f1855;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1850;\n"
    "	mov.f32 	%f1856, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p36, %f45, %f1856;\n"
    "	@!%p36 bra 	$Lt_8_30978;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd118, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd119, %r27;\n"
    "	mul.wide.s32 	%rd120, %r27, 24;\n"
    "	add.u64 	%rd18, %rd118, %rd120;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1857, [%rd18+4];\n"
    "	sub.f32 	%f1858, %f1857, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1858;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1859, [%rd18+12];\n"
    "	mov.f32 	%f1860, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1861, %f1859, %f1860;\n"
    "	mul.f32 	%f1862, %f55, %f1861;\n"
    "	mov.f32 	%f1863, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1864, %f51, %f1863;\n"
    "	ex2.approx.f32 	%f1865, %f1864;\n"
    "	ld.global.f32 	%f1866, [%rd18+0];\n"
    "	mov.f32 	%f1867, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1868, %f1866, %f1867;\n"
    "	mul.f32 	%f1869, %f1865, %f1868;\n"
    "	mul.f32 	%f1870, %f48, %f1869;\n"
    "	mul.f32 	%f1871, %f52, %f1870;\n"
    "	sub.f32 	%f1872, %f1871, %f1862;\n"
    "	ld.global.f32 	%f1873, [%rd18+16];\n"
    "	mov.f32 	%f1874, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1875, %f1873, %f1874;\n"
    "	mul.f32 	%f1876, %f55, %f1875;\n"
    "	mul.f32 	%f1877, %f53, %f1876;\n"
    "	sub.f32 	%f1878, %f1872, %f1877;\n"
    "	ld.global.f32 	%f1879, [%rd18+20];\n"
    "	mul.f32 	%f1880, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1879, %f1880, %f1878;\n"
    "	mov.f32 	%f1881, %f2;\n"
    "	mov.f32 	%f1882, %f27;\n"
    "	mad.f32 	%f1883, %f1882, %f78, %f1881;\n"
    "	mov.f32 	%f2, %f1883;\n"
    "	mov.f32 	%f1884, %f4;\n"
    "	mov.f32 	%f1885, %f37;\n"
    "	mad.f32 	%f1886, %f1885, %f78, %f1884;\n"
    "	mov.f32 	%f4, %f1886;\n"
    "	mov.f32 	%f1887, %f6;\n"
    "	mad.f32 	%f1888, %f44, %f78, %f1887;\n"
    "	mov.f32 	%f6, %f1888;\n"
    "$Lt_8_30978:\n"
    "	ld.shared.s32 	%r62, [%rd13+572];\n"
    "	add.s32 	%r27, %r62, %r6;\n"
    "	ld.shared.f32 	%f1889, [%rd14+560];\n"
    "	sub.f32 	%f1890, %f19, %f1889;\n"
    "	mov.f32 	%f1891, %f1890;\n"
    "	mul.f32 	%f1892, %f14, %f1891;\n"
    "	cvt.rni.f32.f32 	%f1893, %f1892;\n"
    "	mul.f32 	%f1894, %f13, %f1893;\n"
    "	sub.f32 	%f26, %f1890, %f1894;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1895, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1896, %f26, %f26, %f1895;\n"
    "	ld.shared.f32 	%f1897, [%rd14+564];\n"
    "	sub.f32 	%f1898, %f18, %f1897;\n"
    "	mov.f32 	%f1899, %f1898;\n"
    "	mul.f32 	%f1900, %f14, %f1899;\n"
    "	cvt.rni.f32.f32 	%f1901, %f1900;\n"
    "	mul.f32 	%f1902, %f13, %f1901;\n"
    "	sub.f32 	%f36, %f1898, %f1902;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1903, %f36, %f36, %f1896;\n"
    "	ld.shared.f32 	%f1904, [%rd14+568];\n"
    "	sub.f32 	%f1905, %f11, %f1904;\n"
    "	mul.f32 	%f1906, %f1905, %f14;\n"
    "	cvt.rni.f32.f32 	%f1907, %f1906;\n"
    "	mul.f32 	%f1908, %f13, %f1907;\n"
    "	sub.f32 	%f44, %f1905, %f1908;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1903;\n"
    "	mov.f32 	%f1909, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p37, %f45, %f1909;\n"
    "	@!%p37 bra 	$Lt_8_31490;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd121, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd122, %r27;\n"
    "	mul.wide.s32 	%rd123, %r27, 24;\n"
    "	add.u64 	%rd18, %rd121, %rd123;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1910, [%rd18+4];\n"
    "	sub.f32 	%f1911, %f1910, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1911;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1912, [%rd18+12];\n"
    "	mov.f32 	%f1913, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1914, %f1912, %f1913;\n"
    "	mul.f32 	%f1915, %f55, %f1914;\n"
    "	mov.f32 	%f1916, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1917, %f51, %f1916;\n"
    "	ex2.approx.f32 	%f1918, %f1917;\n"
    "	ld.global.f32 	%f1919, [%rd18+0];\n"
    "	mov.f32 	%f1920, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1921, %f1919, %f1920;\n"
    "	mul.f32 	%f1922, %f1918, %f1921;\n"
    "	mul.f32 	%f1923, %f48, %f1922;\n"
    "	mul.f32 	%f1924, %f52, %f1923;\n"
    "	sub.f32 	%f1925, %f1924, %f1915;\n"
    "	ld.global.f32 	%f1926, [%rd18+16];\n"
    "	mov.f32 	%f1927, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1928, %f1926, %f1927;\n"
    "	mul.f32 	%f1929, %f55, %f1928;\n"
    "	mul.f32 	%f1930, %f53, %f1929;\n"
    "	sub.f32 	%f1931, %f1925, %f1930;\n"
    "	ld.global.f32 	%f1932, [%rd18+20];\n"
    "	mul.f32 	%f1933, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1932, %f1933, %f1931;\n"
    "	mov.f32 	%f1934, %f2;\n"
    "	mov.f32 	%f1935, %f27;\n"
    "	mad.f32 	%f1936, %f1935, %f78, %f1934;\n"
    "	mov.f32 	%f2, %f1936;\n"
    "	mov.f32 	%f1937, %f4;\n"
    "	mov.f32 	%f1938, %f37;\n"
    "	mad.f32 	%f1939, %f1938, %f78, %f1937;\n"
    "	mov.f32 	%f4, %f1939;\n"
    "	mov.f32 	%f1940, %f6;\n"
    "	mad.f32 	%f1941, %f44, %f78, %f1940;\n"
    "	mov.f32 	%f6, %f1941;\n"
    "$Lt_8_31490:\n"
    "	ld.shared.s32 	%r63, [%rd13+588];\n"
    "	add.s32 	%r27, %r63, %r6;\n"
    "	ld.shared.f32 	%f1942, [%rd14+576];\n"
    "	sub.f32 	%f1943, %f19, %f1942;\n"
    "	mov.f32 	%f1944, %f1943;\n"
    "	mul.f32 	%f1945, %f14, %f1944;\n"
    "	cvt.rni.f32.f32 	%f1946, %f1945;\n"
    "	mul.f32 	%f1947, %f13, %f1946;\n"
    "	sub.f32 	%f26, %f1943, %f1947;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1948, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1949, %f26, %f26, %f1948;\n"
    "	ld.shared.f32 	%f1950, [%rd14+580];\n"
    "	sub.f32 	%f1951, %f18, %f1950;\n"
    "	mov.f32 	%f1952, %f1951;\n"
    "	mul.f32 	%f1953, %f14, %f1952;\n"
    "	cvt.rni.f32.f32 	%f1954, %f1953;\n"
    "	mul.f32 	%f1955, %f13, %f1954;\n"
    "	sub.f32 	%f36, %f1951, %f1955;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1956, %f36, %f36, %f1949;\n"
    "	ld.shared.f32 	%f1957, [%rd14+584];\n"
    "	sub.f32 	%f1958, %f11, %f1957;\n"
    "	mul.f32 	%f1959, %f1958, %f14;\n"
    "	cvt.rni.f32.f32 	%f1960, %f1959;\n"
    "	mul.f32 	%f1961, %f13, %f1960;\n"
    "	sub.f32 	%f44, %f1958, %f1961;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1956;\n"
    "	mov.f32 	%f1962, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p38, %f45, %f1962;\n"
    "	@!%p38 bra 	$Lt_8_32002;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd124, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd125, %r27;\n"
    "	mul.wide.s32 	%rd126, %r27, 24;\n"
    "	add.u64 	%rd18, %rd124, %rd126;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f1963, [%rd18+4];\n"
    "	sub.f32 	%f1964, %f1963, %f47;\n"
    "	mul.f32 	%f51, %f48, %f1964;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f1965, [%rd18+12];\n"
    "	mov.f32 	%f1966, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1967, %f1965, %f1966;\n"
    "	mul.f32 	%f1968, %f55, %f1967;\n"
    "	mov.f32 	%f1969, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1970, %f51, %f1969;\n"
    "	ex2.approx.f32 	%f1971, %f1970;\n"
    "	ld.global.f32 	%f1972, [%rd18+0];\n"
    "	mov.f32 	%f1973, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1974, %f1972, %f1973;\n"
    "	mul.f32 	%f1975, %f1971, %f1974;\n"
    "	mul.f32 	%f1976, %f48, %f1975;\n"
    "	mul.f32 	%f1977, %f52, %f1976;\n"
    "	sub.f32 	%f1978, %f1977, %f1968;\n"
    "	ld.global.f32 	%f1979, [%rd18+16];\n"
    "	mov.f32 	%f1980, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1981, %f1979, %f1980;\n"
    "	mul.f32 	%f1982, %f55, %f1981;\n"
    "	mul.f32 	%f1983, %f53, %f1982;\n"
    "	sub.f32 	%f1984, %f1978, %f1983;\n"
    "	ld.global.f32 	%f1985, [%rd18+20];\n"
    "	mul.f32 	%f1986, %f52, %f53;\n"
    "	mad.f32 	%f78, %f1985, %f1986, %f1984;\n"
    "	mov.f32 	%f1987, %f2;\n"
    "	mov.f32 	%f1988, %f27;\n"
    "	mad.f32 	%f1989, %f1988, %f78, %f1987;\n"
    "	mov.f32 	%f2, %f1989;\n"
    "	mov.f32 	%f1990, %f4;\n"
    "	mov.f32 	%f1991, %f37;\n"
    "	mad.f32 	%f1992, %f1991, %f78, %f1990;\n"
    "	mov.f32 	%f4, %f1992;\n"
    "	mov.f32 	%f1993, %f6;\n"
    "	mad.f32 	%f1994, %f44, %f78, %f1993;\n"
    "	mov.f32 	%f6, %f1994;\n"
    "$Lt_8_32002:\n"
    "	ld.shared.s32 	%r64, [%rd13+604];\n"
    "	add.s32 	%r27, %r64, %r6;\n"
    "	ld.shared.f32 	%f1995, [%rd14+592];\n"
    "	sub.f32 	%f1996, %f19, %f1995;\n"
    "	mov.f32 	%f1997, %f1996;\n"
    "	mul.f32 	%f1998, %f14, %f1997;\n"
    "	cvt.rni.f32.f32 	%f1999, %f1998;\n"
    "	mul.f32 	%f2000, %f13, %f1999;\n"
    "	sub.f32 	%f26, %f1996, %f2000;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2001, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2002, %f26, %f26, %f2001;\n"
    "	ld.shared.f32 	%f2003, [%rd14+596];\n"
    "	sub.f32 	%f2004, %f18, %f2003;\n"
    "	mov.f32 	%f2005, %f2004;\n"
    "	mul.f32 	%f2006, %f14, %f2005;\n"
    "	cvt.rni.f32.f32 	%f2007, %f2006;\n"
    "	mul.f32 	%f2008, %f13, %f2007;\n"
    "	sub.f32 	%f36, %f2004, %f2008;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2009, %f36, %f36, %f2002;\n"
    "	ld.shared.f32 	%f2010, [%rd14+600];\n"
    "	sub.f32 	%f2011, %f11, %f2010;\n"
    "	mul.f32 	%f2012, %f2011, %f14;\n"
    "	cvt.rni.f32.f32 	%f2013, %f2012;\n"
    "	mul.f32 	%f2014, %f13, %f2013;\n"
    "	sub.f32 	%f44, %f2011, %f2014;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2009;\n"
    "	mov.f32 	%f2015, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p39, %f45, %f2015;\n"
    "	@!%p39 bra 	$Lt_8_32514;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd127, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd128, %r27;\n"
    "	mul.wide.s32 	%rd129, %r27, 24;\n"
    "	add.u64 	%rd18, %rd127, %rd129;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2016, [%rd18+4];\n"
    "	sub.f32 	%f2017, %f2016, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2017;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2018, [%rd18+12];\n"
    "	mov.f32 	%f2019, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2020, %f2018, %f2019;\n"
    "	mul.f32 	%f2021, %f55, %f2020;\n"
    "	mov.f32 	%f2022, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2023, %f51, %f2022;\n"
    "	ex2.approx.f32 	%f2024, %f2023;\n"
    "	ld.global.f32 	%f2025, [%rd18+0];\n"
    "	mov.f32 	%f2026, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2027, %f2025, %f2026;\n"
    "	mul.f32 	%f2028, %f2024, %f2027;\n"
    "	mul.f32 	%f2029, %f48, %f2028;\n"
    "	mul.f32 	%f2030, %f52, %f2029;\n"
    "	sub.f32 	%f2031, %f2030, %f2021;\n"
    "	ld.global.f32 	%f2032, [%rd18+16];\n"
    "	mov.f32 	%f2033, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2034, %f2032, %f2033;\n"
    "	mul.f32 	%f2035, %f55, %f2034;\n"
    "	mul.f32 	%f2036, %f53, %f2035;\n"
    "	sub.f32 	%f2037, %f2031, %f2036;\n"
    "	ld.global.f32 	%f2038, [%rd18+20];\n"
    "	mul.f32 	%f2039, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2038, %f2039, %f2037;\n"
    "	mov.f32 	%f2040, %f2;\n"
    "	mov.f32 	%f2041, %f27;\n"
    "	mad.f32 	%f2042, %f2041, %f78, %f2040;\n"
    "	mov.f32 	%f2, %f2042;\n"
    "	mov.f32 	%f2043, %f4;\n"
    "	mov.f32 	%f2044, %f37;\n"
    "	mad.f32 	%f2045, %f2044, %f78, %f2043;\n"
    "	mov.f32 	%f4, %f2045;\n"
    "	mov.f32 	%f2046, %f6;\n"
    "	mad.f32 	%f2047, %f44, %f78, %f2046;\n"
    "	mov.f32 	%f6, %f2047;\n"
    "$Lt_8_32514:\n"
    "	ld.shared.s32 	%r65, [%rd13+620];\n"
    "	add.s32 	%r27, %r65, %r6;\n"
    "	ld.shared.f32 	%f2048, [%rd14+608];\n"
    "	sub.f32 	%f2049, %f19, %f2048;\n"
    "	mov.f32 	%f2050, %f2049;\n"
    "	mul.f32 	%f2051, %f14, %f2050;\n"
    "	cvt.rni.f32.f32 	%f2052, %f2051;\n"
    "	mul.f32 	%f2053, %f13, %f2052;\n"
    "	sub.f32 	%f26, %f2049, %f2053;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2054, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2055, %f26, %f26, %f2054;\n"
    "	ld.shared.f32 	%f2056, [%rd14+612];\n"
    "	sub.f32 	%f2057, %f18, %f2056;\n"
    "	mov.f32 	%f2058, %f2057;\n"
    "	mul.f32 	%f2059, %f14, %f2058;\n"
    "	cvt.rni.f32.f32 	%f2060, %f2059;\n"
    "	mul.f32 	%f2061, %f13, %f2060;\n"
    "	sub.f32 	%f36, %f2057, %f2061;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2062, %f36, %f36, %f2055;\n"
    "	ld.shared.f32 	%f2063, [%rd14+616];\n"
    "	sub.f32 	%f2064, %f11, %f2063;\n"
    "	mul.f32 	%f2065, %f2064, %f14;\n"
    "	cvt.rni.f32.f32 	%f2066, %f2065;\n"
    "	mul.f32 	%f2067, %f13, %f2066;\n"
    "	sub.f32 	%f44, %f2064, %f2067;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2062;\n"
    "	mov.f32 	%f2068, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p40, %f45, %f2068;\n"
    "	@!%p40 bra 	$Lt_8_33026;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd130, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd131, %r27;\n"
    "	mul.wide.s32 	%rd132, %r27, 24;\n"
    "	add.u64 	%rd18, %rd130, %rd132;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2069, [%rd18+4];\n"
    "	sub.f32 	%f2070, %f2069, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2070;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2071, [%rd18+12];\n"
    "	mov.f32 	%f2072, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2073, %f2071, %f2072;\n"
    "	mul.f32 	%f2074, %f55, %f2073;\n"
    "	mov.f32 	%f2075, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2076, %f51, %f2075;\n"
    "	ex2.approx.f32 	%f2077, %f2076;\n"
    "	ld.global.f32 	%f2078, [%rd18+0];\n"
    "	mov.f32 	%f2079, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2080, %f2078, %f2079;\n"
    "	mul.f32 	%f2081, %f2077, %f2080;\n"
    "	mul.f32 	%f2082, %f48, %f2081;\n"
    "	mul.f32 	%f2083, %f52, %f2082;\n"
    "	sub.f32 	%f2084, %f2083, %f2074;\n"
    "	ld.global.f32 	%f2085, [%rd18+16];\n"
    "	mov.f32 	%f2086, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2087, %f2085, %f2086;\n"
    "	mul.f32 	%f2088, %f55, %f2087;\n"
    "	mul.f32 	%f2089, %f53, %f2088;\n"
    "	sub.f32 	%f2090, %f2084, %f2089;\n"
    "	ld.global.f32 	%f2091, [%rd18+20];\n"
    "	mul.f32 	%f2092, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2091, %f2092, %f2090;\n"
    "	mov.f32 	%f2093, %f2;\n"
    "	mov.f32 	%f2094, %f27;\n"
    "	mad.f32 	%f2095, %f2094, %f78, %f2093;\n"
    "	mov.f32 	%f2, %f2095;\n"
    "	mov.f32 	%f2096, %f4;\n"
    "	mov.f32 	%f2097, %f37;\n"
    "	mad.f32 	%f2098, %f2097, %f78, %f2096;\n"
    "	mov.f32 	%f4, %f2098;\n"
    "	mov.f32 	%f2099, %f6;\n"
    "	mad.f32 	%f2100, %f44, %f78, %f2099;\n"
    "	mov.f32 	%f6, %f2100;\n"
    "$Lt_8_33026:\n"
    "	ld.shared.s32 	%r66, [%rd13+636];\n"
    "	add.s32 	%r27, %r66, %r6;\n"
    "	ld.shared.f32 	%f2101, [%rd14+624];\n"
    "	sub.f32 	%f2102, %f19, %f2101;\n"
    "	mov.f32 	%f2103, %f2102;\n"
    "	mul.f32 	%f2104, %f14, %f2103;\n"
    "	cvt.rni.f32.f32 	%f2105, %f2104;\n"
    "	mul.f32 	%f2106, %f13, %f2105;\n"
    "	sub.f32 	%f26, %f2102, %f2106;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2107, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2108, %f26, %f26, %f2107;\n"
    "	ld.shared.f32 	%f2109, [%rd14+628];\n"
    "	sub.f32 	%f2110, %f18, %f2109;\n"
    "	mov.f32 	%f2111, %f2110;\n"
    "	mul.f32 	%f2112, %f14, %f2111;\n"
    "	cvt.rni.f32.f32 	%f2113, %f2112;\n"
    "	mul.f32 	%f2114, %f13, %f2113;\n"
    "	sub.f32 	%f36, %f2110, %f2114;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2115, %f36, %f36, %f2108;\n"
    "	ld.shared.f32 	%f2116, [%rd14+632];\n"
    "	sub.f32 	%f2117, %f11, %f2116;\n"
    "	mul.f32 	%f2118, %f2117, %f14;\n"
    "	cvt.rni.f32.f32 	%f2119, %f2118;\n"
    "	mul.f32 	%f2120, %f13, %f2119;\n"
    "	sub.f32 	%f44, %f2117, %f2120;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2115;\n"
    "	mov.f32 	%f2121, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p41, %f45, %f2121;\n"
    "	@!%p41 bra 	$Lt_8_33538;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd133, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd134, %r27;\n"
    "	mul.wide.s32 	%rd135, %r27, 24;\n"
    "	add.u64 	%rd18, %rd133, %rd135;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2122, [%rd18+4];\n"
    "	sub.f32 	%f2123, %f2122, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2123;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2124, [%rd18+12];\n"
    "	mov.f32 	%f2125, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2126, %f2124, %f2125;\n"
    "	mul.f32 	%f2127, %f55, %f2126;\n"
    "	mov.f32 	%f2128, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2129, %f51, %f2128;\n"
    "	ex2.approx.f32 	%f2130, %f2129;\n"
    "	ld.global.f32 	%f2131, [%rd18+0];\n"
    "	mov.f32 	%f2132, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2133, %f2131, %f2132;\n"
    "	mul.f32 	%f2134, %f2130, %f2133;\n"
    "	mul.f32 	%f2135, %f48, %f2134;\n"
    "	mul.f32 	%f2136, %f52, %f2135;\n"
    "	sub.f32 	%f2137, %f2136, %f2127;\n"
    "	ld.global.f32 	%f2138, [%rd18+16];\n"
    "	mov.f32 	%f2139, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2140, %f2138, %f2139;\n"
    "	mul.f32 	%f2141, %f55, %f2140;\n"
    "	mul.f32 	%f2142, %f53, %f2141;\n"
    "	sub.f32 	%f2143, %f2137, %f2142;\n"
    "	ld.global.f32 	%f2144, [%rd18+20];\n"
    "	mul.f32 	%f2145, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2144, %f2145, %f2143;\n"
    "	mov.f32 	%f2146, %f2;\n"
    "	mov.f32 	%f2147, %f27;\n"
    "	mad.f32 	%f2148, %f2147, %f78, %f2146;\n"
    "	mov.f32 	%f2, %f2148;\n"
    "	mov.f32 	%f2149, %f4;\n"
    "	mov.f32 	%f2150, %f37;\n"
    "	mad.f32 	%f2151, %f2150, %f78, %f2149;\n"
    "	mov.f32 	%f4, %f2151;\n"
    "	mov.f32 	%f2152, %f6;\n"
    "	mad.f32 	%f2153, %f44, %f78, %f2152;\n"
    "	mov.f32 	%f6, %f2153;\n"
    "$Lt_8_33538:\n"
    "	ld.shared.s32 	%r67, [%rd13+652];\n"
    "	add.s32 	%r27, %r67, %r6;\n"
    "	ld.shared.f32 	%f2154, [%rd14+640];\n"
    "	sub.f32 	%f2155, %f19, %f2154;\n"
    "	mov.f32 	%f2156, %f2155;\n"
    "	mul.f32 	%f2157, %f14, %f2156;\n"
    "	cvt.rni.f32.f32 	%f2158, %f2157;\n"
    "	mul.f32 	%f2159, %f13, %f2158;\n"
    "	sub.f32 	%f26, %f2155, %f2159;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2160, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2161, %f26, %f26, %f2160;\n"
    "	ld.shared.f32 	%f2162, [%rd14+644];\n"
    "	sub.f32 	%f2163, %f18, %f2162;\n"
    "	mov.f32 	%f2164, %f2163;\n"
    "	mul.f32 	%f2165, %f14, %f2164;\n"
    "	cvt.rni.f32.f32 	%f2166, %f2165;\n"
    "	mul.f32 	%f2167, %f13, %f2166;\n"
    "	sub.f32 	%f36, %f2163, %f2167;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2168, %f36, %f36, %f2161;\n"
    "	ld.shared.f32 	%f2169, [%rd14+648];\n"
    "	sub.f32 	%f2170, %f11, %f2169;\n"
    "	mul.f32 	%f2171, %f2170, %f14;\n"
    "	cvt.rni.f32.f32 	%f2172, %f2171;\n"
    "	mul.f32 	%f2173, %f13, %f2172;\n"
    "	sub.f32 	%f44, %f2170, %f2173;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2168;\n"
    "	mov.f32 	%f2174, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p42, %f45, %f2174;\n"
    "	@!%p42 bra 	$Lt_8_34050;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd136, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd137, %r27;\n"
    "	mul.wide.s32 	%rd138, %r27, 24;\n"
    "	add.u64 	%rd18, %rd136, %rd138;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2175, [%rd18+4];\n"
    "	sub.f32 	%f2176, %f2175, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2176;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2177, [%rd18+12];\n"
    "	mov.f32 	%f2178, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2179, %f2177, %f2178;\n"
    "	mul.f32 	%f2180, %f55, %f2179;\n"
    "	mov.f32 	%f2181, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2182, %f51, %f2181;\n"
    "	ex2.approx.f32 	%f2183, %f2182;\n"
    "	ld.global.f32 	%f2184, [%rd18+0];\n"
    "	mov.f32 	%f2185, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2186, %f2184, %f2185;\n"
    "	mul.f32 	%f2187, %f2183, %f2186;\n"
    "	mul.f32 	%f2188, %f48, %f2187;\n"
    "	mul.f32 	%f2189, %f52, %f2188;\n"
    "	sub.f32 	%f2190, %f2189, %f2180;\n"
    "	ld.global.f32 	%f2191, [%rd18+16];\n"
    "	mov.f32 	%f2192, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2193, %f2191, %f2192;\n"
    "	mul.f32 	%f2194, %f55, %f2193;\n"
    "	mul.f32 	%f2195, %f53, %f2194;\n"
    "	sub.f32 	%f2196, %f2190, %f2195;\n"
    "	ld.global.f32 	%f2197, [%rd18+20];\n"
    "	mul.f32 	%f2198, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2197, %f2198, %f2196;\n"
    "	mov.f32 	%f2199, %f2;\n"
    "	mov.f32 	%f2200, %f27;\n"
    "	mad.f32 	%f2201, %f2200, %f78, %f2199;\n"
    "	mov.f32 	%f2, %f2201;\n"
    "	mov.f32 	%f2202, %f4;\n"
    "	mov.f32 	%f2203, %f37;\n"
    "	mad.f32 	%f2204, %f2203, %f78, %f2202;\n"
    "	mov.f32 	%f4, %f2204;\n"
    "	mov.f32 	%f2205, %f6;\n"
    "	mad.f32 	%f2206, %f44, %f78, %f2205;\n"
    "	mov.f32 	%f6, %f2206;\n"
    "$Lt_8_34050:\n"
    "	ld.shared.s32 	%r68, [%rd13+668];\n"
    "	add.s32 	%r27, %r68, %r6;\n"
    "	ld.shared.f32 	%f2207, [%rd14+656];\n"
    "	sub.f32 	%f2208, %f19, %f2207;\n"
    "	mov.f32 	%f2209, %f2208;\n"
    "	mul.f32 	%f2210, %f14, %f2209;\n"
    "	cvt.rni.f32.f32 	%f2211, %f2210;\n"
    "	mul.f32 	%f2212, %f13, %f2211;\n"
    "	sub.f32 	%f26, %f2208, %f2212;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2213, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2214, %f26, %f26, %f2213;\n"
    "	ld.shared.f32 	%f2215, [%rd14+660];\n"
    "	sub.f32 	%f2216, %f18, %f2215;\n"
    "	mov.f32 	%f2217, %f2216;\n"
    "	mul.f32 	%f2218, %f14, %f2217;\n"
    "	cvt.rni.f32.f32 	%f2219, %f2218;\n"
    "	mul.f32 	%f2220, %f13, %f2219;\n"
    "	sub.f32 	%f36, %f2216, %f2220;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2221, %f36, %f36, %f2214;\n"
    "	ld.shared.f32 	%f2222, [%rd14+664];\n"
    "	sub.f32 	%f2223, %f11, %f2222;\n"
    "	mul.f32 	%f2224, %f2223, %f14;\n"
    "	cvt.rni.f32.f32 	%f2225, %f2224;\n"
    "	mul.f32 	%f2226, %f13, %f2225;\n"
    "	sub.f32 	%f44, %f2223, %f2226;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2221;\n"
    "	mov.f32 	%f2227, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p43, %f45, %f2227;\n"
    "	@!%p43 bra 	$Lt_8_34562;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd139, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd140, %r27;\n"
    "	mul.wide.s32 	%rd141, %r27, 24;\n"
    "	add.u64 	%rd18, %rd139, %rd141;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2228, [%rd18+4];\n"
    "	sub.f32 	%f2229, %f2228, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2229;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2230, [%rd18+12];\n"
    "	mov.f32 	%f2231, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2232, %f2230, %f2231;\n"
    "	mul.f32 	%f2233, %f55, %f2232;\n"
    "	mov.f32 	%f2234, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2235, %f51, %f2234;\n"
    "	ex2.approx.f32 	%f2236, %f2235;\n"
    "	ld.global.f32 	%f2237, [%rd18+0];\n"
    "	mov.f32 	%f2238, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2239, %f2237, %f2238;\n"
    "	mul.f32 	%f2240, %f2236, %f2239;\n"
    "	mul.f32 	%f2241, %f48, %f2240;\n"
    "	mul.f32 	%f2242, %f52, %f2241;\n"
    "	sub.f32 	%f2243, %f2242, %f2233;\n"
    "	ld.global.f32 	%f2244, [%rd18+16];\n"
    "	mov.f32 	%f2245, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2246, %f2244, %f2245;\n"
    "	mul.f32 	%f2247, %f55, %f2246;\n"
    "	mul.f32 	%f2248, %f53, %f2247;\n"
    "	sub.f32 	%f2249, %f2243, %f2248;\n"
    "	ld.global.f32 	%f2250, [%rd18+20];\n"
    "	mul.f32 	%f2251, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2250, %f2251, %f2249;\n"
    "	mov.f32 	%f2252, %f2;\n"
    "	mov.f32 	%f2253, %f27;\n"
    "	mad.f32 	%f2254, %f2253, %f78, %f2252;\n"
    "	mov.f32 	%f2, %f2254;\n"
    "	mov.f32 	%f2255, %f4;\n"
    "	mov.f32 	%f2256, %f37;\n"
    "	mad.f32 	%f2257, %f2256, %f78, %f2255;\n"
    "	mov.f32 	%f4, %f2257;\n"
    "	mov.f32 	%f2258, %f6;\n"
    "	mad.f32 	%f2259, %f44, %f78, %f2258;\n"
    "	mov.f32 	%f6, %f2259;\n"
    "$Lt_8_34562:\n"
    "	ld.shared.s32 	%r69, [%rd13+684];\n"
    "	add.s32 	%r27, %r69, %r6;\n"
    "	ld.shared.f32 	%f2260, [%rd14+672];\n"
    "	sub.f32 	%f2261, %f19, %f2260;\n"
    "	mov.f32 	%f2262, %f2261;\n"
    "	mul.f32 	%f2263, %f14, %f2262;\n"
    "	cvt.rni.f32.f32 	%f2264, %f2263;\n"
    "	mul.f32 	%f2265, %f13, %f2264;\n"
    "	sub.f32 	%f26, %f2261, %f2265;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2266, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2267, %f26, %f26, %f2266;\n"
    "	ld.shared.f32 	%f2268, [%rd14+676];\n"
    "	sub.f32 	%f2269, %f18, %f2268;\n"
    "	mov.f32 	%f2270, %f2269;\n"
    "	mul.f32 	%f2271, %f14, %f2270;\n"
    "	cvt.rni.f32.f32 	%f2272, %f2271;\n"
    "	mul.f32 	%f2273, %f13, %f2272;\n"
    "	sub.f32 	%f36, %f2269, %f2273;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2274, %f36, %f36, %f2267;\n"
    "	ld.shared.f32 	%f2275, [%rd14+680];\n"
    "	sub.f32 	%f2276, %f11, %f2275;\n"
    "	mul.f32 	%f2277, %f2276, %f14;\n"
    "	cvt.rni.f32.f32 	%f2278, %f2277;\n"
    "	mul.f32 	%f2279, %f13, %f2278;\n"
    "	sub.f32 	%f44, %f2276, %f2279;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2274;\n"
    "	mov.f32 	%f2280, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p44, %f45, %f2280;\n"
    "	@!%p44 bra 	$Lt_8_35074;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd142, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd143, %r27;\n"
    "	mul.wide.s32 	%rd144, %r27, 24;\n"
    "	add.u64 	%rd18, %rd142, %rd144;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2281, [%rd18+4];\n"
    "	sub.f32 	%f2282, %f2281, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2282;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2283, [%rd18+12];\n"
    "	mov.f32 	%f2284, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2285, %f2283, %f2284;\n"
    "	mul.f32 	%f2286, %f55, %f2285;\n"
    "	mov.f32 	%f2287, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2288, %f51, %f2287;\n"
    "	ex2.approx.f32 	%f2289, %f2288;\n"
    "	ld.global.f32 	%f2290, [%rd18+0];\n"
    "	mov.f32 	%f2291, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2292, %f2290, %f2291;\n"
    "	mul.f32 	%f2293, %f2289, %f2292;\n"
    "	mul.f32 	%f2294, %f48, %f2293;\n"
    "	mul.f32 	%f2295, %f52, %f2294;\n"
    "	sub.f32 	%f2296, %f2295, %f2286;\n"
    "	ld.global.f32 	%f2297, [%rd18+16];\n"
    "	mov.f32 	%f2298, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2299, %f2297, %f2298;\n"
    "	mul.f32 	%f2300, %f55, %f2299;\n"
    "	mul.f32 	%f2301, %f53, %f2300;\n"
    "	sub.f32 	%f2302, %f2296, %f2301;\n"
    "	ld.global.f32 	%f2303, [%rd18+20];\n"
    "	mul.f32 	%f2304, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2303, %f2304, %f2302;\n"
    "	mov.f32 	%f2305, %f2;\n"
    "	mov.f32 	%f2306, %f27;\n"
    "	mad.f32 	%f2307, %f2306, %f78, %f2305;\n"
    "	mov.f32 	%f2, %f2307;\n"
    "	mov.f32 	%f2308, %f4;\n"
    "	mov.f32 	%f2309, %f37;\n"
    "	mad.f32 	%f2310, %f2309, %f78, %f2308;\n"
    "	mov.f32 	%f4, %f2310;\n"
    "	mov.f32 	%f2311, %f6;\n"
    "	mad.f32 	%f2312, %f44, %f78, %f2311;\n"
    "	mov.f32 	%f6, %f2312;\n"
    "$Lt_8_35074:\n"
    "	ld.shared.s32 	%r70, [%rd13+700];\n"
    "	add.s32 	%r27, %r70, %r6;\n"
    "	ld.shared.f32 	%f2313, [%rd14+688];\n"
    "	sub.f32 	%f2314, %f19, %f2313;\n"
    "	mov.f32 	%f2315, %f2314;\n"
    "	mul.f32 	%f2316, %f14, %f2315;\n"
    "	cvt.rni.f32.f32 	%f2317, %f2316;\n"
    "	mul.f32 	%f2318, %f13, %f2317;\n"
    "	sub.f32 	%f26, %f2314, %f2318;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2319, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2320, %f26, %f26, %f2319;\n"
    "	ld.shared.f32 	%f2321, [%rd14+692];\n"
    "	sub.f32 	%f2322, %f18, %f2321;\n"
    "	mov.f32 	%f2323, %f2322;\n"
    "	mul.f32 	%f2324, %f14, %f2323;\n"
    "	cvt.rni.f32.f32 	%f2325, %f2324;\n"
    "	mul.f32 	%f2326, %f13, %f2325;\n"
    "	sub.f32 	%f36, %f2322, %f2326;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2327, %f36, %f36, %f2320;\n"
    "	ld.shared.f32 	%f2328, [%rd14+696];\n"
    "	sub.f32 	%f2329, %f11, %f2328;\n"
    "	mul.f32 	%f2330, %f2329, %f14;\n"
    "	cvt.rni.f32.f32 	%f2331, %f2330;\n"
    "	mul.f32 	%f2332, %f13, %f2331;\n"
    "	sub.f32 	%f44, %f2329, %f2332;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2327;\n"
    "	mov.f32 	%f2333, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p45, %f45, %f2333;\n"
    "	@!%p45 bra 	$Lt_8_35586;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd145, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd146, %r27;\n"
    "	mul.wide.s32 	%rd147, %r27, 24;\n"
    "	add.u64 	%rd18, %rd145, %rd147;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2334, [%rd18+4];\n"
    "	sub.f32 	%f2335, %f2334, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2335;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2336, [%rd18+12];\n"
    "	mov.f32 	%f2337, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2338, %f2336, %f2337;\n"
    "	mul.f32 	%f2339, %f55, %f2338;\n"
    "	mov.f32 	%f2340, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2341, %f51, %f2340;\n"
    "	ex2.approx.f32 	%f2342, %f2341;\n"
    "	ld.global.f32 	%f2343, [%rd18+0];\n"
    "	mov.f32 	%f2344, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2345, %f2343, %f2344;\n"
    "	mul.f32 	%f2346, %f2342, %f2345;\n"
    "	mul.f32 	%f2347, %f48, %f2346;\n"
    "	mul.f32 	%f2348, %f52, %f2347;\n"
    "	sub.f32 	%f2349, %f2348, %f2339;\n"
    "	ld.global.f32 	%f2350, [%rd18+16];\n"
    "	mov.f32 	%f2351, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2352, %f2350, %f2351;\n"
    "	mul.f32 	%f2353, %f55, %f2352;\n"
    "	mul.f32 	%f2354, %f53, %f2353;\n"
    "	sub.f32 	%f2355, %f2349, %f2354;\n"
    "	ld.global.f32 	%f2356, [%rd18+20];\n"
    "	mul.f32 	%f2357, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2356, %f2357, %f2355;\n"
    "	mov.f32 	%f2358, %f2;\n"
    "	mov.f32 	%f2359, %f27;\n"
    "	mad.f32 	%f2360, %f2359, %f78, %f2358;\n"
    "	mov.f32 	%f2, %f2360;\n"
    "	mov.f32 	%f2361, %f4;\n"
    "	mov.f32 	%f2362, %f37;\n"
    "	mad.f32 	%f2363, %f2362, %f78, %f2361;\n"
    "	mov.f32 	%f4, %f2363;\n"
    "	mov.f32 	%f2364, %f6;\n"
    "	mad.f32 	%f2365, %f44, %f78, %f2364;\n"
    "	mov.f32 	%f6, %f2365;\n"
    "$Lt_8_35586:\n"
    "	ld.shared.s32 	%r71, [%rd13+716];\n"
    "	add.s32 	%r27, %r71, %r6;\n"
    "	ld.shared.f32 	%f2366, [%rd14+704];\n"
    "	sub.f32 	%f2367, %f19, %f2366;\n"
    "	mov.f32 	%f2368, %f2367;\n"
    "	mul.f32 	%f2369, %f14, %f2368;\n"
    "	cvt.rni.f32.f32 	%f2370, %f2369;\n"
    "	mul.f32 	%f2371, %f13, %f2370;\n"
    "	sub.f32 	%f26, %f2367, %f2371;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2372, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2373, %f26, %f26, %f2372;\n"
    "	ld.shared.f32 	%f2374, [%rd14+708];\n"
    "	sub.f32 	%f2375, %f18, %f2374;\n"
    "	mov.f32 	%f2376, %f2375;\n"
    "	mul.f32 	%f2377, %f14, %f2376;\n"
    "	cvt.rni.f32.f32 	%f2378, %f2377;\n"
    "	mul.f32 	%f2379, %f13, %f2378;\n"
    "	sub.f32 	%f36, %f2375, %f2379;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2380, %f36, %f36, %f2373;\n"
    "	ld.shared.f32 	%f2381, [%rd14+712];\n"
    "	sub.f32 	%f2382, %f11, %f2381;\n"
    "	mul.f32 	%f2383, %f2382, %f14;\n"
    "	cvt.rni.f32.f32 	%f2384, %f2383;\n"
    "	mul.f32 	%f2385, %f13, %f2384;\n"
    "	sub.f32 	%f44, %f2382, %f2385;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2380;\n"
    "	mov.f32 	%f2386, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p46, %f45, %f2386;\n"
    "	@!%p46 bra 	$Lt_8_36098;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd148, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd149, %r27;\n"
    "	mul.wide.s32 	%rd150, %r27, 24;\n"
    "	add.u64 	%rd18, %rd148, %rd150;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2387, [%rd18+4];\n"
    "	sub.f32 	%f2388, %f2387, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2388;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2389, [%rd18+12];\n"
    "	mov.f32 	%f2390, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2391, %f2389, %f2390;\n"
    "	mul.f32 	%f2392, %f55, %f2391;\n"
    "	mov.f32 	%f2393, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2394, %f51, %f2393;\n"
    "	ex2.approx.f32 	%f2395, %f2394;\n"
    "	ld.global.f32 	%f2396, [%rd18+0];\n"
    "	mov.f32 	%f2397, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2398, %f2396, %f2397;\n"
    "	mul.f32 	%f2399, %f2395, %f2398;\n"
    "	mul.f32 	%f2400, %f48, %f2399;\n"
    "	mul.f32 	%f2401, %f52, %f2400;\n"
    "	sub.f32 	%f2402, %f2401, %f2392;\n"
    "	ld.global.f32 	%f2403, [%rd18+16];\n"
    "	mov.f32 	%f2404, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2405, %f2403, %f2404;\n"
    "	mul.f32 	%f2406, %f55, %f2405;\n"
    "	mul.f32 	%f2407, %f53, %f2406;\n"
    "	sub.f32 	%f2408, %f2402, %f2407;\n"
    "	ld.global.f32 	%f2409, [%rd18+20];\n"
    "	mul.f32 	%f2410, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2409, %f2410, %f2408;\n"
    "	mov.f32 	%f2411, %f2;\n"
    "	mov.f32 	%f2412, %f27;\n"
    "	mad.f32 	%f2413, %f2412, %f78, %f2411;\n"
    "	mov.f32 	%f2, %f2413;\n"
    "	mov.f32 	%f2414, %f4;\n"
    "	mov.f32 	%f2415, %f37;\n"
    "	mad.f32 	%f2416, %f2415, %f78, %f2414;\n"
    "	mov.f32 	%f4, %f2416;\n"
    "	mov.f32 	%f2417, %f6;\n"
    "	mad.f32 	%f2418, %f44, %f78, %f2417;\n"
    "	mov.f32 	%f6, %f2418;\n"
    "$Lt_8_36098:\n"
    "	ld.shared.s32 	%r72, [%rd13+732];\n"
    "	add.s32 	%r27, %r72, %r6;\n"
    "	ld.shared.f32 	%f2419, [%rd14+720];\n"
    "	sub.f32 	%f2420, %f19, %f2419;\n"
    "	mov.f32 	%f2421, %f2420;\n"
    "	mul.f32 	%f2422, %f14, %f2421;\n"
    "	cvt.rni.f32.f32 	%f2423, %f2422;\n"
    "	mul.f32 	%f2424, %f13, %f2423;\n"
    "	sub.f32 	%f26, %f2420, %f2424;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2425, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2426, %f26, %f26, %f2425;\n"
    "	ld.shared.f32 	%f2427, [%rd14+724];\n"
    "	sub.f32 	%f2428, %f18, %f2427;\n"
    "	mov.f32 	%f2429, %f2428;\n"
    "	mul.f32 	%f2430, %f14, %f2429;\n"
    "	cvt.rni.f32.f32 	%f2431, %f2430;\n"
    "	mul.f32 	%f2432, %f13, %f2431;\n"
    "	sub.f32 	%f36, %f2428, %f2432;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2433, %f36, %f36, %f2426;\n"
    "	ld.shared.f32 	%f2434, [%rd14+728];\n"
    "	sub.f32 	%f2435, %f11, %f2434;\n"
    "	mul.f32 	%f2436, %f2435, %f14;\n"
    "	cvt.rni.f32.f32 	%f2437, %f2436;\n"
    "	mul.f32 	%f2438, %f13, %f2437;\n"
    "	sub.f32 	%f44, %f2435, %f2438;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2433;\n"
    "	mov.f32 	%f2439, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p47, %f45, %f2439;\n"
    "	@!%p47 bra 	$Lt_8_36610;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd151, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd152, %r27;\n"
    "	mul.wide.s32 	%rd153, %r27, 24;\n"
    "	add.u64 	%rd18, %rd151, %rd153;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2440, [%rd18+4];\n"
    "	sub.f32 	%f2441, %f2440, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2441;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2442, [%rd18+12];\n"
    "	mov.f32 	%f2443, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2444, %f2442, %f2443;\n"
    "	mul.f32 	%f2445, %f55, %f2444;\n"
    "	mov.f32 	%f2446, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2447, %f51, %f2446;\n"
    "	ex2.approx.f32 	%f2448, %f2447;\n"
    "	ld.global.f32 	%f2449, [%rd18+0];\n"
    "	mov.f32 	%f2450, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2451, %f2449, %f2450;\n"
    "	mul.f32 	%f2452, %f2448, %f2451;\n"
    "	mul.f32 	%f2453, %f48, %f2452;\n"
    "	mul.f32 	%f2454, %f52, %f2453;\n"
    "	sub.f32 	%f2455, %f2454, %f2445;\n"
    "	ld.global.f32 	%f2456, [%rd18+16];\n"
    "	mov.f32 	%f2457, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2458, %f2456, %f2457;\n"
    "	mul.f32 	%f2459, %f55, %f2458;\n"
    "	mul.f32 	%f2460, %f53, %f2459;\n"
    "	sub.f32 	%f2461, %f2455, %f2460;\n"
    "	ld.global.f32 	%f2462, [%rd18+20];\n"
    "	mul.f32 	%f2463, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2462, %f2463, %f2461;\n"
    "	mov.f32 	%f2464, %f2;\n"
    "	mov.f32 	%f2465, %f27;\n"
    "	mad.f32 	%f2466, %f2465, %f78, %f2464;\n"
    "	mov.f32 	%f2, %f2466;\n"
    "	mov.f32 	%f2467, %f4;\n"
    "	mov.f32 	%f2468, %f37;\n"
    "	mad.f32 	%f2469, %f2468, %f78, %f2467;\n"
    "	mov.f32 	%f4, %f2469;\n"
    "	mov.f32 	%f2470, %f6;\n"
    "	mad.f32 	%f2471, %f44, %f78, %f2470;\n"
    "	mov.f32 	%f6, %f2471;\n"
    "$Lt_8_36610:\n"
    "	ld.shared.s32 	%r73, [%rd13+748];\n"
    "	add.s32 	%r27, %r73, %r6;\n"
    "	ld.shared.f32 	%f2472, [%rd14+736];\n"
    "	sub.f32 	%f2473, %f19, %f2472;\n"
    "	mov.f32 	%f2474, %f2473;\n"
    "	mul.f32 	%f2475, %f14, %f2474;\n"
    "	cvt.rni.f32.f32 	%f2476, %f2475;\n"
    "	mul.f32 	%f2477, %f13, %f2476;\n"
    "	sub.f32 	%f26, %f2473, %f2477;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2478, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2479, %f26, %f26, %f2478;\n"
    "	ld.shared.f32 	%f2480, [%rd14+740];\n"
    "	sub.f32 	%f2481, %f18, %f2480;\n"
    "	mov.f32 	%f2482, %f2481;\n"
    "	mul.f32 	%f2483, %f14, %f2482;\n"
    "	cvt.rni.f32.f32 	%f2484, %f2483;\n"
    "	mul.f32 	%f2485, %f13, %f2484;\n"
    "	sub.f32 	%f36, %f2481, %f2485;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2486, %f36, %f36, %f2479;\n"
    "	ld.shared.f32 	%f2487, [%rd14+744];\n"
    "	sub.f32 	%f2488, %f11, %f2487;\n"
    "	mul.f32 	%f2489, %f2488, %f14;\n"
    "	cvt.rni.f32.f32 	%f2490, %f2489;\n"
    "	mul.f32 	%f2491, %f13, %f2490;\n"
    "	sub.f32 	%f44, %f2488, %f2491;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2486;\n"
    "	mov.f32 	%f2492, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p48, %f45, %f2492;\n"
    "	@!%p48 bra 	$Lt_8_37122;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd154, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd155, %r27;\n"
    "	mul.wide.s32 	%rd156, %r27, 24;\n"
    "	add.u64 	%rd18, %rd154, %rd156;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2493, [%rd18+4];\n"
    "	sub.f32 	%f2494, %f2493, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2494;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2495, [%rd18+12];\n"
    "	mov.f32 	%f2496, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2497, %f2495, %f2496;\n"
    "	mul.f32 	%f2498, %f55, %f2497;\n"
    "	mov.f32 	%f2499, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2500, %f51, %f2499;\n"
    "	ex2.approx.f32 	%f2501, %f2500;\n"
    "	ld.global.f32 	%f2502, [%rd18+0];\n"
    "	mov.f32 	%f2503, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2504, %f2502, %f2503;\n"
    "	mul.f32 	%f2505, %f2501, %f2504;\n"
    "	mul.f32 	%f2506, %f48, %f2505;\n"
    "	mul.f32 	%f2507, %f52, %f2506;\n"
    "	sub.f32 	%f2508, %f2507, %f2498;\n"
    "	ld.global.f32 	%f2509, [%rd18+16];\n"
    "	mov.f32 	%f2510, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2511, %f2509, %f2510;\n"
    "	mul.f32 	%f2512, %f55, %f2511;\n"
    "	mul.f32 	%f2513, %f53, %f2512;\n"
    "	sub.f32 	%f2514, %f2508, %f2513;\n"
    "	ld.global.f32 	%f2515, [%rd18+20];\n"
    "	mul.f32 	%f2516, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2515, %f2516, %f2514;\n"
    "	mov.f32 	%f2517, %f2;\n"
    "	mov.f32 	%f2518, %f27;\n"
    "	mad.f32 	%f2519, %f2518, %f78, %f2517;\n"
    "	mov.f32 	%f2, %f2519;\n"
    "	mov.f32 	%f2520, %f4;\n"
    "	mov.f32 	%f2521, %f37;\n"
    "	mad.f32 	%f2522, %f2521, %f78, %f2520;\n"
    "	mov.f32 	%f4, %f2522;\n"
    "	mov.f32 	%f2523, %f6;\n"
    "	mad.f32 	%f2524, %f44, %f78, %f2523;\n"
    "	mov.f32 	%f6, %f2524;\n"
    "$Lt_8_37122:\n"
    "	ld.shared.s32 	%r74, [%rd13+764];\n"
    "	add.s32 	%r27, %r74, %r6;\n"
    "	ld.shared.f32 	%f2525, [%rd14+752];\n"
    "	sub.f32 	%f2526, %f19, %f2525;\n"
    "	mov.f32 	%f2527, %f2526;\n"
    "	mul.f32 	%f2528, %f14, %f2527;\n"
    "	cvt.rni.f32.f32 	%f2529, %f2528;\n"
    "	mul.f32 	%f2530, %f13, %f2529;\n"
    "	sub.f32 	%f26, %f2526, %f2530;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2531, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2532, %f26, %f26, %f2531;\n"
    "	ld.shared.f32 	%f2533, [%rd14+756];\n"
    "	sub.f32 	%f2534, %f18, %f2533;\n"
    "	mov.f32 	%f2535, %f2534;\n"
    "	mul.f32 	%f2536, %f14, %f2535;\n"
    "	cvt.rni.f32.f32 	%f2537, %f2536;\n"
    "	mul.f32 	%f2538, %f13, %f2537;\n"
    "	sub.f32 	%f36, %f2534, %f2538;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2539, %f36, %f36, %f2532;\n"
    "	ld.shared.f32 	%f2540, [%rd14+760];\n"
    "	sub.f32 	%f2541, %f11, %f2540;\n"
    "	mul.f32 	%f2542, %f2541, %f14;\n"
    "	cvt.rni.f32.f32 	%f2543, %f2542;\n"
    "	mul.f32 	%f2544, %f13, %f2543;\n"
    "	sub.f32 	%f44, %f2541, %f2544;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2539;\n"
    "	mov.f32 	%f2545, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p49, %f45, %f2545;\n"
    "	@!%p49 bra 	$Lt_8_37634;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd157, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd158, %r27;\n"
    "	mul.wide.s32 	%rd159, %r27, 24;\n"
    "	add.u64 	%rd18, %rd157, %rd159;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2546, [%rd18+4];\n"
    "	sub.f32 	%f2547, %f2546, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2547;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2548, [%rd18+12];\n"
    "	mov.f32 	%f2549, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2550, %f2548, %f2549;\n"
    "	mul.f32 	%f2551, %f55, %f2550;\n"
    "	mov.f32 	%f2552, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2553, %f51, %f2552;\n"
    "	ex2.approx.f32 	%f2554, %f2553;\n"
    "	ld.global.f32 	%f2555, [%rd18+0];\n"
    "	mov.f32 	%f2556, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2557, %f2555, %f2556;\n"
    "	mul.f32 	%f2558, %f2554, %f2557;\n"
    "	mul.f32 	%f2559, %f48, %f2558;\n"
    "	mul.f32 	%f2560, %f52, %f2559;\n"
    "	sub.f32 	%f2561, %f2560, %f2551;\n"
    "	ld.global.f32 	%f2562, [%rd18+16];\n"
    "	mov.f32 	%f2563, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2564, %f2562, %f2563;\n"
    "	mul.f32 	%f2565, %f55, %f2564;\n"
    "	mul.f32 	%f2566, %f53, %f2565;\n"
    "	sub.f32 	%f2567, %f2561, %f2566;\n"
    "	ld.global.f32 	%f2568, [%rd18+20];\n"
    "	mul.f32 	%f2569, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2568, %f2569, %f2567;\n"
    "	mov.f32 	%f2570, %f2;\n"
    "	mov.f32 	%f2571, %f27;\n"
    "	mad.f32 	%f2572, %f2571, %f78, %f2570;\n"
    "	mov.f32 	%f2, %f2572;\n"
    "	mov.f32 	%f2573, %f4;\n"
    "	mov.f32 	%f2574, %f37;\n"
    "	mad.f32 	%f2575, %f2574, %f78, %f2573;\n"
    "	mov.f32 	%f4, %f2575;\n"
    "	mov.f32 	%f2576, %f6;\n"
    "	mad.f32 	%f2577, %f44, %f78, %f2576;\n"
    "	mov.f32 	%f6, %f2577;\n"
    "$Lt_8_37634:\n"
    "	ld.shared.s32 	%r75, [%rd13+780];\n"
    "	add.s32 	%r27, %r75, %r6;\n"
    "	ld.shared.f32 	%f2578, [%rd14+768];\n"
    "	sub.f32 	%f2579, %f19, %f2578;\n"
    "	mov.f32 	%f2580, %f2579;\n"
    "	mul.f32 	%f2581, %f14, %f2580;\n"
    "	cvt.rni.f32.f32 	%f2582, %f2581;\n"
    "	mul.f32 	%f2583, %f13, %f2582;\n"
    "	sub.f32 	%f26, %f2579, %f2583;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2584, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2585, %f26, %f26, %f2584;\n"
    "	ld.shared.f32 	%f2586, [%rd14+772];\n"
    "	sub.f32 	%f2587, %f18, %f2586;\n"
    "	mov.f32 	%f2588, %f2587;\n"
    "	mul.f32 	%f2589, %f14, %f2588;\n"
    "	cvt.rni.f32.f32 	%f2590, %f2589;\n"
    "	mul.f32 	%f2591, %f13, %f2590;\n"
    "	sub.f32 	%f36, %f2587, %f2591;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2592, %f36, %f36, %f2585;\n"
    "	ld.shared.f32 	%f2593, [%rd14+776];\n"
    "	sub.f32 	%f2594, %f11, %f2593;\n"
    "	mul.f32 	%f2595, %f2594, %f14;\n"
    "	cvt.rni.f32.f32 	%f2596, %f2595;\n"
    "	mul.f32 	%f2597, %f13, %f2596;\n"
    "	sub.f32 	%f44, %f2594, %f2597;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2592;\n"
    "	mov.f32 	%f2598, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p50, %f45, %f2598;\n"
    "	@!%p50 bra 	$Lt_8_38146;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd160, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd161, %r27;\n"
    "	mul.wide.s32 	%rd162, %r27, 24;\n"
    "	add.u64 	%rd18, %rd160, %rd162;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2599, [%rd18+4];\n"
    "	sub.f32 	%f2600, %f2599, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2600;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2601, [%rd18+12];\n"
    "	mov.f32 	%f2602, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2603, %f2601, %f2602;\n"
    "	mul.f32 	%f2604, %f55, %f2603;\n"
    "	mov.f32 	%f2605, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2606, %f51, %f2605;\n"
    "	ex2.approx.f32 	%f2607, %f2606;\n"
    "	ld.global.f32 	%f2608, [%rd18+0];\n"
    "	mov.f32 	%f2609, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2610, %f2608, %f2609;\n"
    "	mul.f32 	%f2611, %f2607, %f2610;\n"
    "	mul.f32 	%f2612, %f48, %f2611;\n"
    "	mul.f32 	%f2613, %f52, %f2612;\n"
    "	sub.f32 	%f2614, %f2613, %f2604;\n"
    "	ld.global.f32 	%f2615, [%rd18+16];\n"
    "	mov.f32 	%f2616, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2617, %f2615, %f2616;\n"
    "	mul.f32 	%f2618, %f55, %f2617;\n"
    "	mul.f32 	%f2619, %f53, %f2618;\n"
    "	sub.f32 	%f2620, %f2614, %f2619;\n"
    "	ld.global.f32 	%f2621, [%rd18+20];\n"
    "	mul.f32 	%f2622, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2621, %f2622, %f2620;\n"
    "	mov.f32 	%f2623, %f2;\n"
    "	mov.f32 	%f2624, %f27;\n"
    "	mad.f32 	%f2625, %f2624, %f78, %f2623;\n"
    "	mov.f32 	%f2, %f2625;\n"
    "	mov.f32 	%f2626, %f4;\n"
    "	mov.f32 	%f2627, %f37;\n"
    "	mad.f32 	%f2628, %f2627, %f78, %f2626;\n"
    "	mov.f32 	%f4, %f2628;\n"
    "	mov.f32 	%f2629, %f6;\n"
    "	mad.f32 	%f2630, %f44, %f78, %f2629;\n"
    "	mov.f32 	%f6, %f2630;\n"
    "$Lt_8_38146:\n"
    "	ld.shared.s32 	%r76, [%rd13+796];\n"
    "	add.s32 	%r27, %r76, %r6;\n"
    "	ld.shared.f32 	%f2631, [%rd14+784];\n"
    "	sub.f32 	%f2632, %f19, %f2631;\n"
    "	mov.f32 	%f2633, %f2632;\n"
    "	mul.f32 	%f2634, %f14, %f2633;\n"
    "	cvt.rni.f32.f32 	%f2635, %f2634;\n"
    "	mul.f32 	%f2636, %f13, %f2635;\n"
    "	sub.f32 	%f26, %f2632, %f2636;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2637, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2638, %f26, %f26, %f2637;\n"
    "	ld.shared.f32 	%f2639, [%rd14+788];\n"
    "	sub.f32 	%f2640, %f18, %f2639;\n"
    "	mov.f32 	%f2641, %f2640;\n"
    "	mul.f32 	%f2642, %f14, %f2641;\n"
    "	cvt.rni.f32.f32 	%f2643, %f2642;\n"
    "	mul.f32 	%f2644, %f13, %f2643;\n"
    "	sub.f32 	%f36, %f2640, %f2644;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2645, %f36, %f36, %f2638;\n"
    "	ld.shared.f32 	%f2646, [%rd14+792];\n"
    "	sub.f32 	%f2647, %f11, %f2646;\n"
    "	mul.f32 	%f2648, %f2647, %f14;\n"
    "	cvt.rni.f32.f32 	%f2649, %f2648;\n"
    "	mul.f32 	%f2650, %f13, %f2649;\n"
    "	sub.f32 	%f44, %f2647, %f2650;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2645;\n"
    "	mov.f32 	%f2651, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p51, %f45, %f2651;\n"
    "	@!%p51 bra 	$Lt_8_38658;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd163, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd164, %r27;\n"
    "	mul.wide.s32 	%rd165, %r27, 24;\n"
    "	add.u64 	%rd18, %rd163, %rd165;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2652, [%rd18+4];\n"
    "	sub.f32 	%f2653, %f2652, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2653;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2654, [%rd18+12];\n"
    "	mov.f32 	%f2655, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2656, %f2654, %f2655;\n"
    "	mul.f32 	%f2657, %f55, %f2656;\n"
    "	mov.f32 	%f2658, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2659, %f51, %f2658;\n"
    "	ex2.approx.f32 	%f2660, %f2659;\n"
    "	ld.global.f32 	%f2661, [%rd18+0];\n"
    "	mov.f32 	%f2662, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2663, %f2661, %f2662;\n"
    "	mul.f32 	%f2664, %f2660, %f2663;\n"
    "	mul.f32 	%f2665, %f48, %f2664;\n"
    "	mul.f32 	%f2666, %f52, %f2665;\n"
    "	sub.f32 	%f2667, %f2666, %f2657;\n"
    "	ld.global.f32 	%f2668, [%rd18+16];\n"
    "	mov.f32 	%f2669, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2670, %f2668, %f2669;\n"
    "	mul.f32 	%f2671, %f55, %f2670;\n"
    "	mul.f32 	%f2672, %f53, %f2671;\n"
    "	sub.f32 	%f2673, %f2667, %f2672;\n"
    "	ld.global.f32 	%f2674, [%rd18+20];\n"
    "	mul.f32 	%f2675, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2674, %f2675, %f2673;\n"
    "	mov.f32 	%f2676, %f2;\n"
    "	mov.f32 	%f2677, %f27;\n"
    "	mad.f32 	%f2678, %f2677, %f78, %f2676;\n"
    "	mov.f32 	%f2, %f2678;\n"
    "	mov.f32 	%f2679, %f4;\n"
    "	mov.f32 	%f2680, %f37;\n"
    "	mad.f32 	%f2681, %f2680, %f78, %f2679;\n"
    "	mov.f32 	%f4, %f2681;\n"
    "	mov.f32 	%f2682, %f6;\n"
    "	mad.f32 	%f2683, %f44, %f78, %f2682;\n"
    "	mov.f32 	%f6, %f2683;\n"
    "$Lt_8_38658:\n"
    "	ld.shared.s32 	%r77, [%rd13+812];\n"
    "	add.s32 	%r27, %r77, %r6;\n"
    "	ld.shared.f32 	%f2684, [%rd14+800];\n"
    "	sub.f32 	%f2685, %f19, %f2684;\n"
    "	mov.f32 	%f2686, %f2685;\n"
    "	mul.f32 	%f2687, %f14, %f2686;\n"
    "	cvt.rni.f32.f32 	%f2688, %f2687;\n"
    "	mul.f32 	%f2689, %f13, %f2688;\n"
    "	sub.f32 	%f26, %f2685, %f2689;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2690, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2691, %f26, %f26, %f2690;\n"
    "	ld.shared.f32 	%f2692, [%rd14+804];\n"
    "	sub.f32 	%f2693, %f18, %f2692;\n"
    "	mov.f32 	%f2694, %f2693;\n"
    "	mul.f32 	%f2695, %f14, %f2694;\n"
    "	cvt.rni.f32.f32 	%f2696, %f2695;\n"
    "	mul.f32 	%f2697, %f13, %f2696;\n"
    "	sub.f32 	%f36, %f2693, %f2697;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2698, %f36, %f36, %f2691;\n"
    "	ld.shared.f32 	%f2699, [%rd14+808];\n"
    "	sub.f32 	%f2700, %f11, %f2699;\n"
    "	mul.f32 	%f2701, %f2700, %f14;\n"
    "	cvt.rni.f32.f32 	%f2702, %f2701;\n"
    "	mul.f32 	%f2703, %f13, %f2702;\n"
    "	sub.f32 	%f44, %f2700, %f2703;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2698;\n"
    "	mov.f32 	%f2704, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p52, %f45, %f2704;\n"
    "	@!%p52 bra 	$Lt_8_39170;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd166, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd167, %r27;\n"
    "	mul.wide.s32 	%rd168, %r27, 24;\n"
    "	add.u64 	%rd18, %rd166, %rd168;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2705, [%rd18+4];\n"
    "	sub.f32 	%f2706, %f2705, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2706;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2707, [%rd18+12];\n"
    "	mov.f32 	%f2708, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2709, %f2707, %f2708;\n"
    "	mul.f32 	%f2710, %f55, %f2709;\n"
    "	mov.f32 	%f2711, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2712, %f51, %f2711;\n"
    "	ex2.approx.f32 	%f2713, %f2712;\n"
    "	ld.global.f32 	%f2714, [%rd18+0];\n"
    "	mov.f32 	%f2715, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2716, %f2714, %f2715;\n"
    "	mul.f32 	%f2717, %f2713, %f2716;\n"
    "	mul.f32 	%f2718, %f48, %f2717;\n"
    "	mul.f32 	%f2719, %f52, %f2718;\n"
    "	sub.f32 	%f2720, %f2719, %f2710;\n"
    "	ld.global.f32 	%f2721, [%rd18+16];\n"
    "	mov.f32 	%f2722, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2723, %f2721, %f2722;\n"
    "	mul.f32 	%f2724, %f55, %f2723;\n"
    "	mul.f32 	%f2725, %f53, %f2724;\n"
    "	sub.f32 	%f2726, %f2720, %f2725;\n"
    "	ld.global.f32 	%f2727, [%rd18+20];\n"
    "	mul.f32 	%f2728, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2727, %f2728, %f2726;\n"
    "	mov.f32 	%f2729, %f2;\n"
    "	mov.f32 	%f2730, %f27;\n"
    "	mad.f32 	%f2731, %f2730, %f78, %f2729;\n"
    "	mov.f32 	%f2, %f2731;\n"
    "	mov.f32 	%f2732, %f4;\n"
    "	mov.f32 	%f2733, %f37;\n"
    "	mad.f32 	%f2734, %f2733, %f78, %f2732;\n"
    "	mov.f32 	%f4, %f2734;\n"
    "	mov.f32 	%f2735, %f6;\n"
    "	mad.f32 	%f2736, %f44, %f78, %f2735;\n"
    "	mov.f32 	%f6, %f2736;\n"
    "$Lt_8_39170:\n"
    "	ld.shared.s32 	%r78, [%rd13+828];\n"
    "	add.s32 	%r27, %r78, %r6;\n"
    "	ld.shared.f32 	%f2737, [%rd14+816];\n"
    "	sub.f32 	%f2738, %f19, %f2737;\n"
    "	mov.f32 	%f2739, %f2738;\n"
    "	mul.f32 	%f2740, %f14, %f2739;\n"
    "	cvt.rni.f32.f32 	%f2741, %f2740;\n"
    "	mul.f32 	%f2742, %f13, %f2741;\n"
    "	sub.f32 	%f26, %f2738, %f2742;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2743, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2744, %f26, %f26, %f2743;\n"
    "	ld.shared.f32 	%f2745, [%rd14+820];\n"
    "	sub.f32 	%f2746, %f18, %f2745;\n"
    "	mov.f32 	%f2747, %f2746;\n"
    "	mul.f32 	%f2748, %f14, %f2747;\n"
    "	cvt.rni.f32.f32 	%f2749, %f2748;\n"
    "	mul.f32 	%f2750, %f13, %f2749;\n"
    "	sub.f32 	%f36, %f2746, %f2750;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2751, %f36, %f36, %f2744;\n"
    "	ld.shared.f32 	%f2752, [%rd14+824];\n"
    "	sub.f32 	%f2753, %f11, %f2752;\n"
    "	mul.f32 	%f2754, %f2753, %f14;\n"
    "	cvt.rni.f32.f32 	%f2755, %f2754;\n"
    "	mul.f32 	%f2756, %f13, %f2755;\n"
    "	sub.f32 	%f44, %f2753, %f2756;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2751;\n"
    "	mov.f32 	%f2757, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p53, %f45, %f2757;\n"
    "	@!%p53 bra 	$Lt_8_39682;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd169, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd170, %r27;\n"
    "	mul.wide.s32 	%rd171, %r27, 24;\n"
    "	add.u64 	%rd18, %rd169, %rd171;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2758, [%rd18+4];\n"
    "	sub.f32 	%f2759, %f2758, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2759;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2760, [%rd18+12];\n"
    "	mov.f32 	%f2761, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2762, %f2760, %f2761;\n"
    "	mul.f32 	%f2763, %f55, %f2762;\n"
    "	mov.f32 	%f2764, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2765, %f51, %f2764;\n"
    "	ex2.approx.f32 	%f2766, %f2765;\n"
    "	ld.global.f32 	%f2767, [%rd18+0];\n"
    "	mov.f32 	%f2768, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2769, %f2767, %f2768;\n"
    "	mul.f32 	%f2770, %f2766, %f2769;\n"
    "	mul.f32 	%f2771, %f48, %f2770;\n"
    "	mul.f32 	%f2772, %f52, %f2771;\n"
    "	sub.f32 	%f2773, %f2772, %f2763;\n"
    "	ld.global.f32 	%f2774, [%rd18+16];\n"
    "	mov.f32 	%f2775, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2776, %f2774, %f2775;\n"
    "	mul.f32 	%f2777, %f55, %f2776;\n"
    "	mul.f32 	%f2778, %f53, %f2777;\n"
    "	sub.f32 	%f2779, %f2773, %f2778;\n"
    "	ld.global.f32 	%f2780, [%rd18+20];\n"
    "	mul.f32 	%f2781, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2780, %f2781, %f2779;\n"
    "	mov.f32 	%f2782, %f2;\n"
    "	mov.f32 	%f2783, %f27;\n"
    "	mad.f32 	%f2784, %f2783, %f78, %f2782;\n"
    "	mov.f32 	%f2, %f2784;\n"
    "	mov.f32 	%f2785, %f4;\n"
    "	mov.f32 	%f2786, %f37;\n"
    "	mad.f32 	%f2787, %f2786, %f78, %f2785;\n"
    "	mov.f32 	%f4, %f2787;\n"
    "	mov.f32 	%f2788, %f6;\n"
    "	mad.f32 	%f2789, %f44, %f78, %f2788;\n"
    "	mov.f32 	%f6, %f2789;\n"
    "$Lt_8_39682:\n"
    "	ld.shared.s32 	%r79, [%rd13+844];\n"
    "	add.s32 	%r27, %r79, %r6;\n"
    "	ld.shared.f32 	%f2790, [%rd14+832];\n"
    "	sub.f32 	%f2791, %f19, %f2790;\n"
    "	mov.f32 	%f2792, %f2791;\n"
    "	mul.f32 	%f2793, %f14, %f2792;\n"
    "	cvt.rni.f32.f32 	%f2794, %f2793;\n"
    "	mul.f32 	%f2795, %f13, %f2794;\n"
    "	sub.f32 	%f26, %f2791, %f2795;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2796, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2797, %f26, %f26, %f2796;\n"
    "	ld.shared.f32 	%f2798, [%rd14+836];\n"
    "	sub.f32 	%f2799, %f18, %f2798;\n"
    "	mov.f32 	%f2800, %f2799;\n"
    "	mul.f32 	%f2801, %f14, %f2800;\n"
    "	cvt.rni.f32.f32 	%f2802, %f2801;\n"
    "	mul.f32 	%f2803, %f13, %f2802;\n"
    "	sub.f32 	%f36, %f2799, %f2803;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2804, %f36, %f36, %f2797;\n"
    "	ld.shared.f32 	%f2805, [%rd14+840];\n"
    "	sub.f32 	%f2806, %f11, %f2805;\n"
    "	mul.f32 	%f2807, %f2806, %f14;\n"
    "	cvt.rni.f32.f32 	%f2808, %f2807;\n"
    "	mul.f32 	%f2809, %f13, %f2808;\n"
    "	sub.f32 	%f44, %f2806, %f2809;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2804;\n"
    "	mov.f32 	%f2810, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p54, %f45, %f2810;\n"
    "	@!%p54 bra 	$Lt_8_40194;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd172, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd173, %r27;\n"
    "	mul.wide.s32 	%rd174, %r27, 24;\n"
    "	add.u64 	%rd18, %rd172, %rd174;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2811, [%rd18+4];\n"
    "	sub.f32 	%f2812, %f2811, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2812;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2813, [%rd18+12];\n"
    "	mov.f32 	%f2814, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2815, %f2813, %f2814;\n"
    "	mul.f32 	%f2816, %f55, %f2815;\n"
    "	mov.f32 	%f2817, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2818, %f51, %f2817;\n"
    "	ex2.approx.f32 	%f2819, %f2818;\n"
    "	ld.global.f32 	%f2820, [%rd18+0];\n"
    "	mov.f32 	%f2821, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2822, %f2820, %f2821;\n"
    "	mul.f32 	%f2823, %f2819, %f2822;\n"
    "	mul.f32 	%f2824, %f48, %f2823;\n"
    "	mul.f32 	%f2825, %f52, %f2824;\n"
    "	sub.f32 	%f2826, %f2825, %f2816;\n"
    "	ld.global.f32 	%f2827, [%rd18+16];\n"
    "	mov.f32 	%f2828, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2829, %f2827, %f2828;\n"
    "	mul.f32 	%f2830, %f55, %f2829;\n"
    "	mul.f32 	%f2831, %f53, %f2830;\n"
    "	sub.f32 	%f2832, %f2826, %f2831;\n"
    "	ld.global.f32 	%f2833, [%rd18+20];\n"
    "	mul.f32 	%f2834, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2833, %f2834, %f2832;\n"
    "	mov.f32 	%f2835, %f2;\n"
    "	mov.f32 	%f2836, %f27;\n"
    "	mad.f32 	%f2837, %f2836, %f78, %f2835;\n"
    "	mov.f32 	%f2, %f2837;\n"
    "	mov.f32 	%f2838, %f4;\n"
    "	mov.f32 	%f2839, %f37;\n"
    "	mad.f32 	%f2840, %f2839, %f78, %f2838;\n"
    "	mov.f32 	%f4, %f2840;\n"
    "	mov.f32 	%f2841, %f6;\n"
    "	mad.f32 	%f2842, %f44, %f78, %f2841;\n"
    "	mov.f32 	%f6, %f2842;\n"
    "$Lt_8_40194:\n"
    "	ld.shared.s32 	%r80, [%rd13+860];\n"
    "	add.s32 	%r27, %r80, %r6;\n"
    "	ld.shared.f32 	%f2843, [%rd14+848];\n"
    "	sub.f32 	%f2844, %f19, %f2843;\n"
    "	mov.f32 	%f2845, %f2844;\n"
    "	mul.f32 	%f2846, %f14, %f2845;\n"
    "	cvt.rni.f32.f32 	%f2847, %f2846;\n"
    "	mul.f32 	%f2848, %f13, %f2847;\n"
    "	sub.f32 	%f26, %f2844, %f2848;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2849, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2850, %f26, %f26, %f2849;\n"
    "	ld.shared.f32 	%f2851, [%rd14+852];\n"
    "	sub.f32 	%f2852, %f18, %f2851;\n"
    "	mov.f32 	%f2853, %f2852;\n"
    "	mul.f32 	%f2854, %f14, %f2853;\n"
    "	cvt.rni.f32.f32 	%f2855, %f2854;\n"
    "	mul.f32 	%f2856, %f13, %f2855;\n"
    "	sub.f32 	%f36, %f2852, %f2856;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2857, %f36, %f36, %f2850;\n"
    "	ld.shared.f32 	%f2858, [%rd14+856];\n"
    "	sub.f32 	%f2859, %f11, %f2858;\n"
    "	mul.f32 	%f2860, %f2859, %f14;\n"
    "	cvt.rni.f32.f32 	%f2861, %f2860;\n"
    "	mul.f32 	%f2862, %f13, %f2861;\n"
    "	sub.f32 	%f44, %f2859, %f2862;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2857;\n"
    "	mov.f32 	%f2863, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p55, %f45, %f2863;\n"
    "	@!%p55 bra 	$Lt_8_40706;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd175, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd176, %r27;\n"
    "	mul.wide.s32 	%rd177, %r27, 24;\n"
    "	add.u64 	%rd18, %rd175, %rd177;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2864, [%rd18+4];\n"
    "	sub.f32 	%f2865, %f2864, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2865;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2866, [%rd18+12];\n"
    "	mov.f32 	%f2867, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2868, %f2866, %f2867;\n"
    "	mul.f32 	%f2869, %f55, %f2868;\n"
    "	mov.f32 	%f2870, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2871, %f51, %f2870;\n"
    "	ex2.approx.f32 	%f2872, %f2871;\n"
    "	ld.global.f32 	%f2873, [%rd18+0];\n"
    "	mov.f32 	%f2874, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2875, %f2873, %f2874;\n"
    "	mul.f32 	%f2876, %f2872, %f2875;\n"
    "	mul.f32 	%f2877, %f48, %f2876;\n"
    "	mul.f32 	%f2878, %f52, %f2877;\n"
    "	sub.f32 	%f2879, %f2878, %f2869;\n"
    "	ld.global.f32 	%f2880, [%rd18+16];\n"
    "	mov.f32 	%f2881, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2882, %f2880, %f2881;\n"
    "	mul.f32 	%f2883, %f55, %f2882;\n"
    "	mul.f32 	%f2884, %f53, %f2883;\n"
    "	sub.f32 	%f2885, %f2879, %f2884;\n"
    "	ld.global.f32 	%f2886, [%rd18+20];\n"
    "	mul.f32 	%f2887, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2886, %f2887, %f2885;\n"
    "	mov.f32 	%f2888, %f2;\n"
    "	mov.f32 	%f2889, %f27;\n"
    "	mad.f32 	%f2890, %f2889, %f78, %f2888;\n"
    "	mov.f32 	%f2, %f2890;\n"
    "	mov.f32 	%f2891, %f4;\n"
    "	mov.f32 	%f2892, %f37;\n"
    "	mad.f32 	%f2893, %f2892, %f78, %f2891;\n"
    "	mov.f32 	%f4, %f2893;\n"
    "	mov.f32 	%f2894, %f6;\n"
    "	mad.f32 	%f2895, %f44, %f78, %f2894;\n"
    "	mov.f32 	%f6, %f2895;\n"
    "$Lt_8_40706:\n"
    "	ld.shared.s32 	%r81, [%rd13+876];\n"
    "	add.s32 	%r27, %r81, %r6;\n"
    "	ld.shared.f32 	%f2896, [%rd14+864];\n"
    "	sub.f32 	%f2897, %f19, %f2896;\n"
    "	mov.f32 	%f2898, %f2897;\n"
    "	mul.f32 	%f2899, %f14, %f2898;\n"
    "	cvt.rni.f32.f32 	%f2900, %f2899;\n"
    "	mul.f32 	%f2901, %f13, %f2900;\n"
    "	sub.f32 	%f26, %f2897, %f2901;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2902, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2903, %f26, %f26, %f2902;\n"
    "	ld.shared.f32 	%f2904, [%rd14+868];\n"
    "	sub.f32 	%f2905, %f18, %f2904;\n"
    "	mov.f32 	%f2906, %f2905;\n"
    "	mul.f32 	%f2907, %f14, %f2906;\n"
    "	cvt.rni.f32.f32 	%f2908, %f2907;\n"
    "	mul.f32 	%f2909, %f13, %f2908;\n"
    "	sub.f32 	%f36, %f2905, %f2909;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2910, %f36, %f36, %f2903;\n"
    "	ld.shared.f32 	%f2911, [%rd14+872];\n"
    "	sub.f32 	%f2912, %f11, %f2911;\n"
    "	mul.f32 	%f2913, %f2912, %f14;\n"
    "	cvt.rni.f32.f32 	%f2914, %f2913;\n"
    "	mul.f32 	%f2915, %f13, %f2914;\n"
    "	sub.f32 	%f44, %f2912, %f2915;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2910;\n"
    "	mov.f32 	%f2916, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p56, %f45, %f2916;\n"
    "	@!%p56 bra 	$Lt_8_41218;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd178, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd179, %r27;\n"
    "	mul.wide.s32 	%rd180, %r27, 24;\n"
    "	add.u64 	%rd18, %rd178, %rd180;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2917, [%rd18+4];\n"
    "	sub.f32 	%f2918, %f2917, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2918;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2919, [%rd18+12];\n"
    "	mov.f32 	%f2920, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2921, %f2919, %f2920;\n"
    "	mul.f32 	%f2922, %f55, %f2921;\n"
    "	mov.f32 	%f2923, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2924, %f51, %f2923;\n"
    "	ex2.approx.f32 	%f2925, %f2924;\n"
    "	ld.global.f32 	%f2926, [%rd18+0];\n"
    "	mov.f32 	%f2927, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2928, %f2926, %f2927;\n"
    "	mul.f32 	%f2929, %f2925, %f2928;\n"
    "	mul.f32 	%f2930, %f48, %f2929;\n"
    "	mul.f32 	%f2931, %f52, %f2930;\n"
    "	sub.f32 	%f2932, %f2931, %f2922;\n"
    "	ld.global.f32 	%f2933, [%rd18+16];\n"
    "	mov.f32 	%f2934, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2935, %f2933, %f2934;\n"
    "	mul.f32 	%f2936, %f55, %f2935;\n"
    "	mul.f32 	%f2937, %f53, %f2936;\n"
    "	sub.f32 	%f2938, %f2932, %f2937;\n"
    "	ld.global.f32 	%f2939, [%rd18+20];\n"
    "	mul.f32 	%f2940, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2939, %f2940, %f2938;\n"
    "	mov.f32 	%f2941, %f2;\n"
    "	mov.f32 	%f2942, %f27;\n"
    "	mad.f32 	%f2943, %f2942, %f78, %f2941;\n"
    "	mov.f32 	%f2, %f2943;\n"
    "	mov.f32 	%f2944, %f4;\n"
    "	mov.f32 	%f2945, %f37;\n"
    "	mad.f32 	%f2946, %f2945, %f78, %f2944;\n"
    "	mov.f32 	%f4, %f2946;\n"
    "	mov.f32 	%f2947, %f6;\n"
    "	mad.f32 	%f2948, %f44, %f78, %f2947;\n"
    "	mov.f32 	%f6, %f2948;\n"
    "$Lt_8_41218:\n"
    "	ld.shared.s32 	%r82, [%rd13+892];\n"
    "	add.s32 	%r27, %r82, %r6;\n"
    "	ld.shared.f32 	%f2949, [%rd14+880];\n"
    "	sub.f32 	%f2950, %f19, %f2949;\n"
    "	mov.f32 	%f2951, %f2950;\n"
    "	mul.f32 	%f2952, %f14, %f2951;\n"
    "	cvt.rni.f32.f32 	%f2953, %f2952;\n"
    "	mul.f32 	%f2954, %f13, %f2953;\n"
    "	sub.f32 	%f26, %f2950, %f2954;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2955, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2956, %f26, %f26, %f2955;\n"
    "	ld.shared.f32 	%f2957, [%rd14+884];\n"
    "	sub.f32 	%f2958, %f18, %f2957;\n"
    "	mov.f32 	%f2959, %f2958;\n"
    "	mul.f32 	%f2960, %f14, %f2959;\n"
    "	cvt.rni.f32.f32 	%f2961, %f2960;\n"
    "	mul.f32 	%f2962, %f13, %f2961;\n"
    "	sub.f32 	%f36, %f2958, %f2962;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2963, %f36, %f36, %f2956;\n"
    "	ld.shared.f32 	%f2964, [%rd14+888];\n"
    "	sub.f32 	%f2965, %f11, %f2964;\n"
    "	mul.f32 	%f2966, %f2965, %f14;\n"
    "	cvt.rni.f32.f32 	%f2967, %f2966;\n"
    "	mul.f32 	%f2968, %f13, %f2967;\n"
    "	sub.f32 	%f44, %f2965, %f2968;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2963;\n"
    "	mov.f32 	%f2969, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p57, %f45, %f2969;\n"
    "	@!%p57 bra 	$Lt_8_41730;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd181, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd182, %r27;\n"
    "	mul.wide.s32 	%rd183, %r27, 24;\n"
    "	add.u64 	%rd18, %rd181, %rd183;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f2970, [%rd18+4];\n"
    "	sub.f32 	%f2971, %f2970, %f47;\n"
    "	mul.f32 	%f51, %f48, %f2971;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f2972, [%rd18+12];\n"
    "	mov.f32 	%f2973, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2974, %f2972, %f2973;\n"
    "	mul.f32 	%f2975, %f55, %f2974;\n"
    "	mov.f32 	%f2976, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2977, %f51, %f2976;\n"
    "	ex2.approx.f32 	%f2978, %f2977;\n"
    "	ld.global.f32 	%f2979, [%rd18+0];\n"
    "	mov.f32 	%f2980, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2981, %f2979, %f2980;\n"
    "	mul.f32 	%f2982, %f2978, %f2981;\n"
    "	mul.f32 	%f2983, %f48, %f2982;\n"
    "	mul.f32 	%f2984, %f52, %f2983;\n"
    "	sub.f32 	%f2985, %f2984, %f2975;\n"
    "	ld.global.f32 	%f2986, [%rd18+16];\n"
    "	mov.f32 	%f2987, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2988, %f2986, %f2987;\n"
    "	mul.f32 	%f2989, %f55, %f2988;\n"
    "	mul.f32 	%f2990, %f53, %f2989;\n"
    "	sub.f32 	%f2991, %f2985, %f2990;\n"
    "	ld.global.f32 	%f2992, [%rd18+20];\n"
    "	mul.f32 	%f2993, %f52, %f53;\n"
    "	mad.f32 	%f78, %f2992, %f2993, %f2991;\n"
    "	mov.f32 	%f2994, %f2;\n"
    "	mov.f32 	%f2995, %f27;\n"
    "	mad.f32 	%f2996, %f2995, %f78, %f2994;\n"
    "	mov.f32 	%f2, %f2996;\n"
    "	mov.f32 	%f2997, %f4;\n"
    "	mov.f32 	%f2998, %f37;\n"
    "	mad.f32 	%f2999, %f2998, %f78, %f2997;\n"
    "	mov.f32 	%f4, %f2999;\n"
    "	mov.f32 	%f3000, %f6;\n"
    "	mad.f32 	%f3001, %f44, %f78, %f3000;\n"
    "	mov.f32 	%f6, %f3001;\n"
    "$Lt_8_41730:\n"
    "	ld.shared.s32 	%r83, [%rd13+908];\n"
    "	add.s32 	%r27, %r83, %r6;\n"
    "	ld.shared.f32 	%f3002, [%rd14+896];\n"
    "	sub.f32 	%f3003, %f19, %f3002;\n"
    "	mov.f32 	%f3004, %f3003;\n"
    "	mul.f32 	%f3005, %f14, %f3004;\n"
    "	cvt.rni.f32.f32 	%f3006, %f3005;\n"
    "	mul.f32 	%f3007, %f13, %f3006;\n"
    "	sub.f32 	%f26, %f3003, %f3007;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3008, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3009, %f26, %f26, %f3008;\n"
    "	ld.shared.f32 	%f3010, [%rd14+900];\n"
    "	sub.f32 	%f3011, %f18, %f3010;\n"
    "	mov.f32 	%f3012, %f3011;\n"
    "	mul.f32 	%f3013, %f14, %f3012;\n"
    "	cvt.rni.f32.f32 	%f3014, %f3013;\n"
    "	mul.f32 	%f3015, %f13, %f3014;\n"
    "	sub.f32 	%f36, %f3011, %f3015;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3016, %f36, %f36, %f3009;\n"
    "	ld.shared.f32 	%f3017, [%rd14+904];\n"
    "	sub.f32 	%f3018, %f11, %f3017;\n"
    "	mul.f32 	%f3019, %f3018, %f14;\n"
    "	cvt.rni.f32.f32 	%f3020, %f3019;\n"
    "	mul.f32 	%f3021, %f13, %f3020;\n"
    "	sub.f32 	%f44, %f3018, %f3021;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3016;\n"
    "	mov.f32 	%f3022, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p58, %f45, %f3022;\n"
    "	@!%p58 bra 	$Lt_8_42242;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd184, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd185, %r27;\n"
    "	mul.wide.s32 	%rd186, %r27, 24;\n"
    "	add.u64 	%rd18, %rd184, %rd186;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f3023, [%rd18+4];\n"
    "	sub.f32 	%f3024, %f3023, %f47;\n"
    "	mul.f32 	%f51, %f48, %f3024;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f3025, [%rd18+12];\n"
    "	mov.f32 	%f3026, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3027, %f3025, %f3026;\n"
    "	mul.f32 	%f3028, %f55, %f3027;\n"
    "	mov.f32 	%f3029, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3030, %f51, %f3029;\n"
    "	ex2.approx.f32 	%f3031, %f3030;\n"
    "	ld.global.f32 	%f3032, [%rd18+0];\n"
    "	mov.f32 	%f3033, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3034, %f3032, %f3033;\n"
    "	mul.f32 	%f3035, %f3031, %f3034;\n"
    "	mul.f32 	%f3036, %f48, %f3035;\n"
    "	mul.f32 	%f3037, %f52, %f3036;\n"
    "	sub.f32 	%f3038, %f3037, %f3028;\n"
    "	ld.global.f32 	%f3039, [%rd18+16];\n"
    "	mov.f32 	%f3040, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3041, %f3039, %f3040;\n"
    "	mul.f32 	%f3042, %f55, %f3041;\n"
    "	mul.f32 	%f3043, %f53, %f3042;\n"
    "	sub.f32 	%f3044, %f3038, %f3043;\n"
    "	ld.global.f32 	%f3045, [%rd18+20];\n"
    "	mul.f32 	%f3046, %f52, %f53;\n"
    "	mad.f32 	%f78, %f3045, %f3046, %f3044;\n"
    "	mov.f32 	%f3047, %f2;\n"
    "	mov.f32 	%f3048, %f27;\n"
    "	mad.f32 	%f3049, %f3048, %f78, %f3047;\n"
    "	mov.f32 	%f2, %f3049;\n"
    "	mov.f32 	%f3050, %f4;\n"
    "	mov.f32 	%f3051, %f37;\n"
    "	mad.f32 	%f3052, %f3051, %f78, %f3050;\n"
    "	mov.f32 	%f4, %f3052;\n"
    "	mov.f32 	%f3053, %f6;\n"
    "	mad.f32 	%f3054, %f44, %f78, %f3053;\n"
    "	mov.f32 	%f6, %f3054;\n"
    "$Lt_8_42242:\n"
    "	ld.shared.s32 	%r84, [%rd13+924];\n"
    "	add.s32 	%r27, %r84, %r6;\n"
    "	ld.shared.f32 	%f3055, [%rd14+912];\n"
    "	sub.f32 	%f3056, %f19, %f3055;\n"
    "	mov.f32 	%f3057, %f3056;\n"
    "	mul.f32 	%f3058, %f14, %f3057;\n"
    "	cvt.rni.f32.f32 	%f3059, %f3058;\n"
    "	mul.f32 	%f3060, %f13, %f3059;\n"
    "	sub.f32 	%f26, %f3056, %f3060;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3061, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3062, %f26, %f26, %f3061;\n"
    "	ld.shared.f32 	%f3063, [%rd14+916];\n"
    "	sub.f32 	%f3064, %f18, %f3063;\n"
    "	mov.f32 	%f3065, %f3064;\n"
    "	mul.f32 	%f3066, %f14, %f3065;\n"
    "	cvt.rni.f32.f32 	%f3067, %f3066;\n"
    "	mul.f32 	%f3068, %f13, %f3067;\n"
    "	sub.f32 	%f36, %f3064, %f3068;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3069, %f36, %f36, %f3062;\n"
    "	ld.shared.f32 	%f3070, [%rd14+920];\n"
    "	sub.f32 	%f3071, %f11, %f3070;\n"
    "	mul.f32 	%f3072, %f3071, %f14;\n"
    "	cvt.rni.f32.f32 	%f3073, %f3072;\n"
    "	mul.f32 	%f3074, %f13, %f3073;\n"
    "	sub.f32 	%f44, %f3071, %f3074;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3069;\n"
    "	mov.f32 	%f3075, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p59, %f45, %f3075;\n"
    "	@!%p59 bra 	$Lt_8_42754;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd187, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd188, %r27;\n"
    "	mul.wide.s32 	%rd189, %r27, 24;\n"
    "	add.u64 	%rd18, %rd187, %rd189;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f3076, [%rd18+4];\n"
    "	sub.f32 	%f3077, %f3076, %f47;\n"
    "	mul.f32 	%f51, %f48, %f3077;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f3078, [%rd18+12];\n"
    "	mov.f32 	%f3079, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3080, %f3078, %f3079;\n"
    "	mul.f32 	%f3081, %f55, %f3080;\n"
    "	mov.f32 	%f3082, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3083, %f51, %f3082;\n"
    "	ex2.approx.f32 	%f3084, %f3083;\n"
    "	ld.global.f32 	%f3085, [%rd18+0];\n"
    "	mov.f32 	%f3086, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3087, %f3085, %f3086;\n"
    "	mul.f32 	%f3088, %f3084, %f3087;\n"
    "	mul.f32 	%f3089, %f48, %f3088;\n"
    "	mul.f32 	%f3090, %f52, %f3089;\n"
    "	sub.f32 	%f3091, %f3090, %f3081;\n"
    "	ld.global.f32 	%f3092, [%rd18+16];\n"
    "	mov.f32 	%f3093, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3094, %f3092, %f3093;\n"
    "	mul.f32 	%f3095, %f55, %f3094;\n"
    "	mul.f32 	%f3096, %f53, %f3095;\n"
    "	sub.f32 	%f3097, %f3091, %f3096;\n"
    "	ld.global.f32 	%f3098, [%rd18+20];\n"
    "	mul.f32 	%f3099, %f52, %f53;\n"
    "	mad.f32 	%f78, %f3098, %f3099, %f3097;\n"
    "	mov.f32 	%f3100, %f2;\n"
    "	mov.f32 	%f3101, %f27;\n"
    "	mad.f32 	%f3102, %f3101, %f78, %f3100;\n"
    "	mov.f32 	%f2, %f3102;\n"
    "	mov.f32 	%f3103, %f4;\n"
    "	mov.f32 	%f3104, %f37;\n"
    "	mad.f32 	%f3105, %f3104, %f78, %f3103;\n"
    "	mov.f32 	%f4, %f3105;\n"
    "	mov.f32 	%f3106, %f6;\n"
    "	mad.f32 	%f3107, %f44, %f78, %f3106;\n"
    "	mov.f32 	%f6, %f3107;\n"
    "$Lt_8_42754:\n"
    "	ld.shared.s32 	%r85, [%rd13+940];\n"
    "	add.s32 	%r27, %r85, %r6;\n"
    "	ld.shared.f32 	%f3108, [%rd14+928];\n"
    "	sub.f32 	%f3109, %f19, %f3108;\n"
    "	mov.f32 	%f3110, %f3109;\n"
    "	mul.f32 	%f3111, %f14, %f3110;\n"
    "	cvt.rni.f32.f32 	%f3112, %f3111;\n"
    "	mul.f32 	%f3113, %f13, %f3112;\n"
    "	sub.f32 	%f26, %f3109, %f3113;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3114, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3115, %f26, %f26, %f3114;\n"
    "	ld.shared.f32 	%f3116, [%rd14+932];\n"
    "	sub.f32 	%f3117, %f18, %f3116;\n"
    "	mov.f32 	%f3118, %f3117;\n"
    "	mul.f32 	%f3119, %f14, %f3118;\n"
    "	cvt.rni.f32.f32 	%f3120, %f3119;\n"
    "	mul.f32 	%f3121, %f13, %f3120;\n"
    "	sub.f32 	%f36, %f3117, %f3121;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3122, %f36, %f36, %f3115;\n"
    "	ld.shared.f32 	%f3123, [%rd14+936];\n"
    "	sub.f32 	%f3124, %f11, %f3123;\n"
    "	mul.f32 	%f3125, %f3124, %f14;\n"
    "	cvt.rni.f32.f32 	%f3126, %f3125;\n"
    "	mul.f32 	%f3127, %f13, %f3126;\n"
    "	sub.f32 	%f44, %f3124, %f3127;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3122;\n"
    "	mov.f32 	%f3128, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p60, %f45, %f3128;\n"
    "	@!%p60 bra 	$Lt_8_43266;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd190, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd191, %r27;\n"
    "	mul.wide.s32 	%rd192, %r27, 24;\n"
    "	add.u64 	%rd18, %rd190, %rd192;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f3129, [%rd18+4];\n"
    "	sub.f32 	%f3130, %f3129, %f47;\n"
    "	mul.f32 	%f51, %f48, %f3130;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f3131, [%rd18+12];\n"
    "	mov.f32 	%f3132, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3133, %f3131, %f3132;\n"
    "	mul.f32 	%f3134, %f55, %f3133;\n"
    "	mov.f32 	%f3135, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3136, %f51, %f3135;\n"
    "	ex2.approx.f32 	%f3137, %f3136;\n"
    "	ld.global.f32 	%f3138, [%rd18+0];\n"
    "	mov.f32 	%f3139, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3140, %f3138, %f3139;\n"
    "	mul.f32 	%f3141, %f3137, %f3140;\n"
    "	mul.f32 	%f3142, %f48, %f3141;\n"
    "	mul.f32 	%f3143, %f52, %f3142;\n"
    "	sub.f32 	%f3144, %f3143, %f3134;\n"
    "	ld.global.f32 	%f3145, [%rd18+16];\n"
    "	mov.f32 	%f3146, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3147, %f3145, %f3146;\n"
    "	mul.f32 	%f3148, %f55, %f3147;\n"
    "	mul.f32 	%f3149, %f53, %f3148;\n"
    "	sub.f32 	%f3150, %f3144, %f3149;\n"
    "	ld.global.f32 	%f3151, [%rd18+20];\n"
    "	mul.f32 	%f3152, %f52, %f53;\n"
    "	mad.f32 	%f78, %f3151, %f3152, %f3150;\n"
    "	mov.f32 	%f3153, %f2;\n"
    "	mov.f32 	%f3154, %f27;\n"
    "	mad.f32 	%f3155, %f3154, %f78, %f3153;\n"
    "	mov.f32 	%f2, %f3155;\n"
    "	mov.f32 	%f3156, %f4;\n"
    "	mov.f32 	%f3157, %f37;\n"
    "	mad.f32 	%f3158, %f3157, %f78, %f3156;\n"
    "	mov.f32 	%f4, %f3158;\n"
    "	mov.f32 	%f3159, %f6;\n"
    "	mad.f32 	%f3160, %f44, %f78, %f3159;\n"
    "	mov.f32 	%f6, %f3160;\n"
    "$Lt_8_43266:\n"
    "	ld.shared.s32 	%r86, [%rd13+956];\n"
    "	add.s32 	%r27, %r86, %r6;\n"
    "	ld.shared.f32 	%f3161, [%rd14+944];\n"
    "	sub.f32 	%f3162, %f19, %f3161;\n"
    "	mov.f32 	%f3163, %f3162;\n"
    "	mul.f32 	%f3164, %f14, %f3163;\n"
    "	cvt.rni.f32.f32 	%f3165, %f3164;\n"
    "	mul.f32 	%f3166, %f13, %f3165;\n"
    "	sub.f32 	%f26, %f3162, %f3166;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3167, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3168, %f26, %f26, %f3167;\n"
    "	ld.shared.f32 	%f3169, [%rd14+948];\n"
    "	sub.f32 	%f3170, %f18, %f3169;\n"
    "	mov.f32 	%f3171, %f3170;\n"
    "	mul.f32 	%f3172, %f14, %f3171;\n"
    "	cvt.rni.f32.f32 	%f3173, %f3172;\n"
    "	mul.f32 	%f3174, %f13, %f3173;\n"
    "	sub.f32 	%f36, %f3170, %f3174;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3175, %f36, %f36, %f3168;\n"
    "	ld.shared.f32 	%f3176, [%rd14+952];\n"
    "	sub.f32 	%f3177, %f11, %f3176;\n"
    "	mul.f32 	%f3178, %f3177, %f14;\n"
    "	cvt.rni.f32.f32 	%f3179, %f3178;\n"
    "	mul.f32 	%f3180, %f13, %f3179;\n"
    "	sub.f32 	%f44, %f3177, %f3180;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3175;\n"
    "	mov.f32 	%f3181, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p61, %f45, %f3181;\n"
    "	@!%p61 bra 	$Lt_8_43778;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd193, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd194, %r27;\n"
    "	mul.wide.s32 	%rd195, %r27, 24;\n"
    "	add.u64 	%rd18, %rd193, %rd195;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f3182, [%rd18+4];\n"
    "	sub.f32 	%f3183, %f3182, %f47;\n"
    "	mul.f32 	%f51, %f48, %f3183;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f3184, [%rd18+12];\n"
    "	mov.f32 	%f3185, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3186, %f3184, %f3185;\n"
    "	mul.f32 	%f3187, %f55, %f3186;\n"
    "	mov.f32 	%f3188, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3189, %f51, %f3188;\n"
    "	ex2.approx.f32 	%f3190, %f3189;\n"
    "	ld.global.f32 	%f3191, [%rd18+0];\n"
    "	mov.f32 	%f3192, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3193, %f3191, %f3192;\n"
    "	mul.f32 	%f3194, %f3190, %f3193;\n"
    "	mul.f32 	%f3195, %f48, %f3194;\n"
    "	mul.f32 	%f3196, %f52, %f3195;\n"
    "	sub.f32 	%f3197, %f3196, %f3187;\n"
    "	ld.global.f32 	%f3198, [%rd18+16];\n"
    "	mov.f32 	%f3199, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3200, %f3198, %f3199;\n"
    "	mul.f32 	%f3201, %f55, %f3200;\n"
    "	mul.f32 	%f3202, %f53, %f3201;\n"
    "	sub.f32 	%f3203, %f3197, %f3202;\n"
    "	ld.global.f32 	%f3204, [%rd18+20];\n"
    "	mul.f32 	%f3205, %f52, %f53;\n"
    "	mad.f32 	%f78, %f3204, %f3205, %f3203;\n"
    "	mov.f32 	%f3206, %f2;\n"
    "	mov.f32 	%f3207, %f27;\n"
    "	mad.f32 	%f3208, %f3207, %f78, %f3206;\n"
    "	mov.f32 	%f2, %f3208;\n"
    "	mov.f32 	%f3209, %f4;\n"
    "	mov.f32 	%f3210, %f37;\n"
    "	mad.f32 	%f3211, %f3210, %f78, %f3209;\n"
    "	mov.f32 	%f4, %f3211;\n"
    "	mov.f32 	%f3212, %f6;\n"
    "	mad.f32 	%f3213, %f44, %f78, %f3212;\n"
    "	mov.f32 	%f6, %f3213;\n"
    "$Lt_8_43778:\n"
    "	ld.shared.s32 	%r87, [%rd13+972];\n"
    "	add.s32 	%r27, %r87, %r6;\n"
    "	ld.shared.f32 	%f3214, [%rd14+960];\n"
    "	sub.f32 	%f3215, %f19, %f3214;\n"
    "	mov.f32 	%f3216, %f3215;\n"
    "	mul.f32 	%f3217, %f14, %f3216;\n"
    "	cvt.rni.f32.f32 	%f3218, %f3217;\n"
    "	mul.f32 	%f3219, %f13, %f3218;\n"
    "	sub.f32 	%f26, %f3215, %f3219;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3220, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3221, %f26, %f26, %f3220;\n"
    "	ld.shared.f32 	%f3222, [%rd14+964];\n"
    "	sub.f32 	%f3223, %f18, %f3222;\n"
    "	mov.f32 	%f3224, %f3223;\n"
    "	mul.f32 	%f3225, %f14, %f3224;\n"
    "	cvt.rni.f32.f32 	%f3226, %f3225;\n"
    "	mul.f32 	%f3227, %f13, %f3226;\n"
    "	sub.f32 	%f36, %f3223, %f3227;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3228, %f36, %f36, %f3221;\n"
    "	ld.shared.f32 	%f3229, [%rd14+968];\n"
    "	sub.f32 	%f3230, %f11, %f3229;\n"
    "	mul.f32 	%f3231, %f3230, %f14;\n"
    "	cvt.rni.f32.f32 	%f3232, %f3231;\n"
    "	mul.f32 	%f3233, %f13, %f3232;\n"
    "	sub.f32 	%f44, %f3230, %f3233;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3228;\n"
    "	mov.f32 	%f3234, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p62, %f45, %f3234;\n"
    "	@!%p62 bra 	$Lt_8_44290;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd196, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd197, %r27;\n"
    "	mul.wide.s32 	%rd198, %r27, 24;\n"
    "	add.u64 	%rd18, %rd196, %rd198;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f3235, [%rd18+4];\n"
    "	sub.f32 	%f3236, %f3235, %f47;\n"
    "	mul.f32 	%f51, %f48, %f3236;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f3237, [%rd18+12];\n"
    "	mov.f32 	%f3238, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3239, %f3237, %f3238;\n"
    "	mul.f32 	%f3240, %f55, %f3239;\n"
    "	mov.f32 	%f3241, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3242, %f51, %f3241;\n"
    "	ex2.approx.f32 	%f3243, %f3242;\n"
    "	ld.global.f32 	%f3244, [%rd18+0];\n"
    "	mov.f32 	%f3245, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3246, %f3244, %f3245;\n"
    "	mul.f32 	%f3247, %f3243, %f3246;\n"
    "	mul.f32 	%f3248, %f48, %f3247;\n"
    "	mul.f32 	%f3249, %f52, %f3248;\n"
    "	sub.f32 	%f3250, %f3249, %f3240;\n"
    "	ld.global.f32 	%f3251, [%rd18+16];\n"
    "	mov.f32 	%f3252, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3253, %f3251, %f3252;\n"
    "	mul.f32 	%f3254, %f55, %f3253;\n"
    "	mul.f32 	%f3255, %f53, %f3254;\n"
    "	sub.f32 	%f3256, %f3250, %f3255;\n"
    "	ld.global.f32 	%f3257, [%rd18+20];\n"
    "	mul.f32 	%f3258, %f52, %f53;\n"
    "	mad.f32 	%f78, %f3257, %f3258, %f3256;\n"
    "	mov.f32 	%f3259, %f2;\n"
    "	mov.f32 	%f3260, %f27;\n"
    "	mad.f32 	%f3261, %f3260, %f78, %f3259;\n"
    "	mov.f32 	%f2, %f3261;\n"
    "	mov.f32 	%f3262, %f4;\n"
    "	mov.f32 	%f3263, %f37;\n"
    "	mad.f32 	%f3264, %f3263, %f78, %f3262;\n"
    "	mov.f32 	%f4, %f3264;\n"
    "	mov.f32 	%f3265, %f6;\n"
    "	mad.f32 	%f3266, %f44, %f78, %f3265;\n"
    "	mov.f32 	%f6, %f3266;\n"
    "$Lt_8_44290:\n"
    "	ld.shared.s32 	%r88, [%rd13+988];\n"
    "	add.s32 	%r27, %r88, %r6;\n"
    "	ld.shared.f32 	%f3267, [%rd14+976];\n"
    "	sub.f32 	%f3268, %f19, %f3267;\n"
    "	mov.f32 	%f3269, %f3268;\n"
    "	mul.f32 	%f3270, %f14, %f3269;\n"
    "	cvt.rni.f32.f32 	%f3271, %f3270;\n"
    "	mul.f32 	%f3272, %f13, %f3271;\n"
    "	sub.f32 	%f26, %f3268, %f3272;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3273, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3274, %f26, %f26, %f3273;\n"
    "	ld.shared.f32 	%f3275, [%rd14+980];\n"
    "	sub.f32 	%f3276, %f18, %f3275;\n"
    "	mov.f32 	%f3277, %f3276;\n"
    "	mul.f32 	%f3278, %f14, %f3277;\n"
    "	cvt.rni.f32.f32 	%f3279, %f3278;\n"
    "	mul.f32 	%f3280, %f13, %f3279;\n"
    "	sub.f32 	%f36, %f3276, %f3280;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3281, %f36, %f36, %f3274;\n"
    "	ld.shared.f32 	%f3282, [%rd14+984];\n"
    "	sub.f32 	%f3283, %f11, %f3282;\n"
    "	mul.f32 	%f3284, %f3283, %f14;\n"
    "	cvt.rni.f32.f32 	%f3285, %f3284;\n"
    "	mul.f32 	%f3286, %f13, %f3285;\n"
    "	sub.f32 	%f44, %f3283, %f3286;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3281;\n"
    "	mov.f32 	%f3287, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p63, %f45, %f3287;\n"
    "	@!%p63 bra 	$Lt_8_44802;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd199, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd200, %r27;\n"
    "	mul.wide.s32 	%rd201, %r27, 24;\n"
    "	add.u64 	%rd18, %rd199, %rd201;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f3288, [%rd18+4];\n"
    "	sub.f32 	%f3289, %f3288, %f47;\n"
    "	mul.f32 	%f51, %f48, %f3289;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f3290, [%rd18+12];\n"
    "	mov.f32 	%f3291, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3292, %f3290, %f3291;\n"
    "	mul.f32 	%f3293, %f55, %f3292;\n"
    "	mov.f32 	%f3294, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3295, %f51, %f3294;\n"
    "	ex2.approx.f32 	%f3296, %f3295;\n"
    "	ld.global.f32 	%f3297, [%rd18+0];\n"
    "	mov.f32 	%f3298, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3299, %f3297, %f3298;\n"
    "	mul.f32 	%f3300, %f3296, %f3299;\n"
    "	mul.f32 	%f3301, %f48, %f3300;\n"
    "	mul.f32 	%f3302, %f52, %f3301;\n"
    "	sub.f32 	%f3303, %f3302, %f3293;\n"
    "	ld.global.f32 	%f3304, [%rd18+16];\n"
    "	mov.f32 	%f3305, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3306, %f3304, %f3305;\n"
    "	mul.f32 	%f3307, %f55, %f3306;\n"
    "	mul.f32 	%f3308, %f53, %f3307;\n"
    "	sub.f32 	%f3309, %f3303, %f3308;\n"
    "	ld.global.f32 	%f3310, [%rd18+20];\n"
    "	mul.f32 	%f3311, %f52, %f53;\n"
    "	mad.f32 	%f78, %f3310, %f3311, %f3309;\n"
    "	mov.f32 	%f3312, %f2;\n"
    "	mov.f32 	%f3313, %f27;\n"
    "	mad.f32 	%f3314, %f3313, %f78, %f3312;\n"
    "	mov.f32 	%f2, %f3314;\n"
    "	mov.f32 	%f3315, %f4;\n"
    "	mov.f32 	%f3316, %f37;\n"
    "	mad.f32 	%f3317, %f3316, %f78, %f3315;\n"
    "	mov.f32 	%f4, %f3317;\n"
    "	mov.f32 	%f3318, %f6;\n"
    "	mad.f32 	%f3319, %f44, %f78, %f3318;\n"
    "	mov.f32 	%f6, %f3319;\n"
    "$Lt_8_44802:\n"
    "	ld.shared.s32 	%r89, [%rd13+1004];\n"
    "	add.s32 	%r27, %r89, %r6;\n"
    "	ld.shared.f32 	%f3320, [%rd14+992];\n"
    "	sub.f32 	%f3321, %f19, %f3320;\n"
    "	mov.f32 	%f3322, %f3321;\n"
    "	mul.f32 	%f3323, %f14, %f3322;\n"
    "	cvt.rni.f32.f32 	%f3324, %f3323;\n"
    "	mul.f32 	%f3325, %f13, %f3324;\n"
    "	sub.f32 	%f26, %f3321, %f3325;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3326, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3327, %f26, %f26, %f3326;\n"
    "	ld.shared.f32 	%f3328, [%rd14+996];\n"
    "	sub.f32 	%f3329, %f18, %f3328;\n"
    "	mov.f32 	%f3330, %f3329;\n"
    "	mul.f32 	%f3331, %f14, %f3330;\n"
    "	cvt.rni.f32.f32 	%f3332, %f3331;\n"
    "	mul.f32 	%f3333, %f13, %f3332;\n"
    "	sub.f32 	%f36, %f3329, %f3333;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3334, %f36, %f36, %f3327;\n"
    "	ld.shared.f32 	%f3335, [%rd14+1000];\n"
    "	sub.f32 	%f3336, %f11, %f3335;\n"
    "	mul.f32 	%f3337, %f3336, %f14;\n"
    "	cvt.rni.f32.f32 	%f3338, %f3337;\n"
    "	mul.f32 	%f3339, %f13, %f3338;\n"
    "	sub.f32 	%f44, %f3336, %f3339;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3334;\n"
    "	mov.f32 	%f3340, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p64, %f45, %f3340;\n"
    "	@!%p64 bra 	$Lt_8_45314;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd202, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd203, %r27;\n"
    "	mul.wide.s32 	%rd204, %r27, 24;\n"
    "	add.u64 	%rd18, %rd202, %rd204;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f3341, [%rd18+4];\n"
    "	sub.f32 	%f3342, %f3341, %f47;\n"
    "	mul.f32 	%f51, %f48, %f3342;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f3343, [%rd18+12];\n"
    "	mov.f32 	%f3344, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3345, %f3343, %f3344;\n"
    "	mul.f32 	%f3346, %f55, %f3345;\n"
    "	mov.f32 	%f3347, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3348, %f51, %f3347;\n"
    "	ex2.approx.f32 	%f3349, %f3348;\n"
    "	ld.global.f32 	%f3350, [%rd18+0];\n"
    "	mov.f32 	%f3351, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3352, %f3350, %f3351;\n"
    "	mul.f32 	%f3353, %f3349, %f3352;\n"
    "	mul.f32 	%f3354, %f48, %f3353;\n"
    "	mul.f32 	%f3355, %f52, %f3354;\n"
    "	sub.f32 	%f3356, %f3355, %f3346;\n"
    "	ld.global.f32 	%f3357, [%rd18+16];\n"
    "	mov.f32 	%f3358, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3359, %f3357, %f3358;\n"
    "	mul.f32 	%f3360, %f55, %f3359;\n"
    "	mul.f32 	%f3361, %f53, %f3360;\n"
    "	sub.f32 	%f3362, %f3356, %f3361;\n"
    "	ld.global.f32 	%f3363, [%rd18+20];\n"
    "	mul.f32 	%f3364, %f52, %f53;\n"
    "	mad.f32 	%f78, %f3363, %f3364, %f3362;\n"
    "	mov.f32 	%f3365, %f2;\n"
    "	mov.f32 	%f3366, %f27;\n"
    "	mad.f32 	%f3367, %f3366, %f78, %f3365;\n"
    "	mov.f32 	%f2, %f3367;\n"
    "	mov.f32 	%f3368, %f4;\n"
    "	mov.f32 	%f3369, %f37;\n"
    "	mad.f32 	%f3370, %f3369, %f78, %f3368;\n"
    "	mov.f32 	%f4, %f3370;\n"
    "	mov.f32 	%f3371, %f6;\n"
    "	mad.f32 	%f3372, %f44, %f78, %f3371;\n"
    "	mov.f32 	%f6, %f3372;\n"
    "$Lt_8_45314:\n"
    "	ld.shared.s32 	%r90, [%rd13+1020];\n"
    "	add.s32 	%r27, %r90, %r6;\n"
    "	ld.shared.f32 	%f3373, [%rd14+1008];\n"
    "	sub.f32 	%f3374, %f19, %f3373;\n"
    "	mov.f32 	%f3375, %f3374;\n"
    "	mul.f32 	%f3376, %f14, %f3375;\n"
    "	cvt.rni.f32.f32 	%f3377, %f3376;\n"
    "	mul.f32 	%f3378, %f13, %f3377;\n"
    "	sub.f32 	%f26, %f3374, %f3378;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3379, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3380, %f26, %f26, %f3379;\n"
    "	ld.shared.f32 	%f3381, [%rd14+1012];\n"
    "	sub.f32 	%f3382, %f18, %f3381;\n"
    "	mov.f32 	%f3383, %f3382;\n"
    "	mov.f32 	%f3384, %f3383;\n"
    "	mul.f32 	%f3385, %f14, %f3383;\n"
    "	cvt.rni.f32.f32 	%f3386, %f3385;\n"
    "	mul.f32 	%f3387, %f13, %f3386;\n"
    "	sub.f32 	%f36, %f3382, %f3387;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3388, %f36, %f36, %f3380;\n"
    "	ld.shared.f32 	%f3389, [%rd14+1016];\n"
    "	sub.f32 	%f3390, %f11, %f3389;\n"
    "	mov.f32 	%f3391, %f3390;\n"
    "	mul.f32 	%f3392, %f3390, %f14;\n"
    "	cvt.rni.f32.f32 	%f3393, %f3392;\n"
    "	mul.f32 	%f3394, %f13, %f3393;\n"
    "	sub.f32 	%f44, %f3390, %f3394;\n"
    "	mov.f32 	%f3395, %f44;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3388;\n"
    "	mov.f32 	%f3396, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p65, %f45, %f3396;\n"
    "	@!%p65 bra 	$Lt_8_45826;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	ld.param.u64 	%rd205, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd206, %r27;\n"
    "	mul.wide.s32 	%rd207, %r27, 24;\n"
    "	add.u64 	%rd18, %rd205, %rd207;\n"
    "	ld.global.f32 	%f48, [%rd18+8];\n"
    "	ld.global.f32 	%f3397, [%rd18+4];\n"
    "	sub.f32 	%f3398, %f3397, %f47;\n"
    "	mul.f32 	%f51, %f48, %f3398;\n"
    "	rcp.approx.f32 	%f52, %f47;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	mul.f32 	%f54, %f53, %f53;\n"
    "	mul.f32 	%f55, %f54, %f54;\n"
    "	ld.global.f32 	%f3399, [%rd18+12];\n"
    "	mov.f32 	%f3400, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3401, %f3399, %f3400;\n"
    "	mul.f32 	%f3402, %f55, %f3401;\n"
    "	mov.f32 	%f3403, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3404, %f51, %f3403;\n"
    "	ex2.approx.f32 	%f3405, %f3404;\n"
    "	ld.global.f32 	%f3406, [%rd18+0];\n"
    "	mov.f32 	%f3407, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3408, %f3406, %f3407;\n"
    "	mul.f32 	%f3409, %f3405, %f3408;\n"
    "	mul.f32 	%f3410, %f48, %f3409;\n"
    "	mul.f32 	%f3411, %f52, %f3410;\n"
    "	sub.f32 	%f3412, %f3411, %f3402;\n"
    "	ld.global.f32 	%f3413, [%rd18+16];\n"
    "	mov.f32 	%f3414, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3415, %f3413, %f3414;\n"
    "	mul.f32 	%f3416, %f55, %f3415;\n"
    "	mul.f32 	%f3417, %f53, %f3416;\n"
    "	sub.f32 	%f3418, %f3412, %f3417;\n"
    "	ld.global.f32 	%f3419, [%rd18+20];\n"
    "	mul.f32 	%f3420, %f52, %f53;\n"
    "	mad.f32 	%f78, %f3419, %f3420, %f3418;\n"
    "	mov.f32 	%f3421, %f2;\n"
    "	mov.f32 	%f3422, %f27;\n"
    "	mad.f32 	%f3423, %f3422, %f78, %f3421;\n"
    "	mov.f32 	%f2, %f3423;\n"
    "	mov.f32 	%f3424, %f4;\n"
    "	mov.f32 	%f3425, %f37;\n"
    "	mad.f32 	%f3426, %f3425, %f78, %f3424;\n"
    "	mov.f32 	%f4, %f3426;\n"
    "	mov.f32 	%f3427, %f6;\n"
    "	mad.f32 	%f3428, %f44, %f78, %f3427;\n"
    "	mov.f32 	%f6, %f3428;\n"
    "$Lt_8_45826:\n"
    "	add.s32 	%r25, %r25, 64;\n"
    "	add.u64 	%rd12, %rd12, 1024;\n"
    "	mov.u32 	%r91, 256;\n"
    "	setp.ne.s32 	%p66, %r25, %r91;\n"
    "	@%p66 bra 	$Lt_8_13314;\n"
    "	add.s32 	%r21, %r21, 256;\n"
    "	setp.gt.s32 	%p67, %r13, %r21;\n"
    "	@%p67 bra 	$Lt_8_12546;\n"
    "$Lt_8_12034:\n"
    "	.loc	3	1180	0\n"
    "	mov.s32 	%r21, %r13;\n"
    "	setp.ge.s32 	%p68, %r13, %r7;\n"
    "	@%p68 bra 	$Lt_8_46850;\n"
    "	sub.s32 	%r92, %r7, %r13;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_shared_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	cvt.s64.s32 	%rd208, %r13;\n"
    "	mul.wide.s32 	%rd209, %r13, 16;\n"
    "	add.u64 	%rd210, %rd1, %rd209;\n"
    "	mov.f32 	%f18, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "	mov.s32 	%r93, %r92;\n"
    "$Lt_8_47362:\n"
    " //<loop> Loop body line 1180, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1181	0\n"
    "	ld.global.s32 	%r94, [%rd210+12];\n"
    "	add.s32 	%r95, %r94, %r6;\n"
    "	ld.global.f32 	%f3429, [%rd210+0];\n"
    "	sub.f32 	%f3430, %f19, %f3429;\n"
    "	mov.f32 	%f3431, %f3430;\n"
    "	mul.f32 	%f3432, %f14, %f3431;\n"
    "	cvt.rni.f32.f32 	%f3433, %f3432;\n"
    "	.loc	3	1180	0\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_shared_xmax];\n"
    "	.loc	3	1181	0\n"
    "	mul.f32 	%f3434, %f13, %f3433;\n"
    "	sub.f32 	%f3435, %f3430, %f3434;\n"
    "	mov.f32 	%f3436, %f3435;\n"
    "	mov.f32 	%f3437, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3438, %f3435, %f3435, %f3437;\n"
    "	ld.global.f32 	%f3439, [%rd210+4];\n"
    "	sub.f32 	%f3440, %f18, %f3439;\n"
    "	mov.f32 	%f3441, %f3440;\n"
    "	mov.f32 	%f3442, %f3441;\n"
    "	mul.f32 	%f3443, %f14, %f3441;\n"
    "	cvt.rni.f32.f32 	%f3444, %f3443;\n"
    "	mul.f32 	%f3445, %f13, %f3444;\n"
    "	sub.f32 	%f3446, %f3440, %f3445;\n"
    "	mov.f32 	%f3447, %f3446;\n"
    "	mad.f32 	%f3448, %f3446, %f3446, %f3438;\n"
    "	ld.global.f32 	%f3449, [%rd210+8];\n"
    "	sub.f32 	%f3450, %f11, %f3449;\n"
    "	mov.f32 	%f3451, %f3450;\n"
    "	mul.f32 	%f3452, %f3450, %f14;\n"
    "	cvt.rni.f32.f32 	%f3453, %f3452;\n"
    "	mul.f32 	%f3454, %f13, %f3453;\n"
    "	sub.f32 	%f3455, %f3450, %f3454;\n"
    "	mov.f32 	%f3456, %f3455;\n"
    "	mad.f32 	%f3457, %f3455, %f3455, %f3448;\n"
    "	mov.f32 	%f3458, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p69, %f3457, %f3458;\n"
    "	@!%p69 bra 	$Lt_8_47618;\n"
    "	sqrt.approx.f32 	%f3459, %f3457;\n"
    "	ld.param.u64 	%rd211, [__cudaparm_nacl_kernel_shared_d_matrix];\n"
    "	cvt.s64.s32 	%rd212, %r95;\n"
    "	mul.wide.s32 	%rd213, %r95, 24;\n"
    "	add.u64 	%rd214, %rd211, %rd213;\n"
    "	ld.global.f32 	%f3460, [%rd214+8];\n"
    "	ld.global.f32 	%f3461, [%rd214+4];\n"
    "	sub.f32 	%f3462, %f3461, %f3459;\n"
    "	mul.f32 	%f3463, %f3460, %f3462;\n"
    "	rcp.approx.f32 	%f3464, %f3459;\n"
    "	mul.f32 	%f3465, %f3464, %f3464;\n"
    "	mul.f32 	%f3466, %f3465, %f3465;\n"
    "	mul.f32 	%f3467, %f3466, %f3466;\n"
    "	ld.global.f32 	%f3468, [%rd214+12];\n"
    "	mov.f32 	%f3469, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3470, %f3468, %f3469;\n"
    "	mul.f32 	%f3471, %f3467, %f3470;\n"
    "	mov.f32 	%f3472, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3473, %f3463, %f3472;\n"
    "	ex2.approx.f32 	%f3474, %f3473;\n"
    "	ld.global.f32 	%f3475, [%rd214+0];\n"
    "	mov.f32 	%f3476, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3477, %f3475, %f3476;\n"
    "	mul.f32 	%f3478, %f3474, %f3477;\n"
    "	mul.f32 	%f3479, %f3460, %f3478;\n"
    "	mul.f32 	%f3480, %f3464, %f3479;\n"
    "	sub.f32 	%f3481, %f3480, %f3471;\n"
    "	ld.global.f32 	%f3482, [%rd214+16];\n"
    "	mov.f32 	%f3483, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3484, %f3482, %f3483;\n"
    "	mul.f32 	%f3485, %f3467, %f3484;\n"
    "	mul.f32 	%f3486, %f3465, %f3485;\n"
    "	sub.f32 	%f3487, %f3481, %f3486;\n"
    "	ld.global.f32 	%f3488, [%rd214+20];\n"
    "	mul.f32 	%f3489, %f3464, %f3465;\n"
    "	mad.f32 	%f3490, %f3488, %f3489, %f3487;\n"
    "	mov.f32 	%f3491, %f2;\n"
    "	mov.f32 	%f3492, %f3436;\n"
    "	mad.f32 	%f3493, %f3492, %f3490, %f3491;\n"
    "	mov.f32 	%f2, %f3493;\n"
    "	mov.f32 	%f3494, %f4;\n"
    "	mov.f32 	%f3495, %f3447;\n"
    "	mad.f32 	%f3496, %f3495, %f3490, %f3494;\n"
    "	mov.f32 	%f4, %f3496;\n"
    "	mov.f32 	%f3497, %f6;\n"
    "	mad.f32 	%f3498, %f3455, %f3490, %f3497;\n"
    "	mov.f32 	%f6, %f3498;\n"
    "$Lt_8_47618:\n"
    "	add.s32 	%r21, %r21, 1;\n"
    "	add.u64 	%rd210, %rd210, 16;\n"
    "	setp.ne.s32 	%p70, %r7, %r21;\n"
    "	@%p70 bra 	$Lt_8_47362;\n"
    "$Lt_8_46850:\n"
    "	.loc	3	1183	0\n"
    "	ld.param.u64 	%rd215, [__cudaparm_nacl_kernel_shared_fvec];\n"
    "	mul.lo.s32 	%r96, %r3, 3;\n"
    "	cvt.s64.s32 	%rd216, %r96;\n"
    "	mul.wide.s32 	%rd217, %r96, 4;\n"
    "	add.u64 	%rd218, %rd215, %rd217;\n"
    "	mov.f32 	%f3499, %f2;\n"
    "	st.global.f32 	[%rd218+0], %f3499;\n"
    "	mov.f32 	%f3500, %f4;\n"
    "	st.global.f32 	[%rd218+4], %f3500;\n"
    "	mov.f32 	%f3501, %f6;\n"
    "	st.global.f32 	[%rd218+8], %f3501;\n"
    "	.loc	3	1184	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_shared:\n"
    "	} // nacl_kernel_shared\n"
    "\n"
    "	.entry nacl_kernel_constant (\n"
    "		.param .u64 __cudaparm_nacl_kernel_constant_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_constant_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_constant_nat,\n"
    "		.param .f32 __cudaparm_nacl_kernel_constant_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_constant_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<98>;\n"
    "	.reg .u64 %rd<156>;\n"
    "	.reg .f32 %f<3566>;\n"
    "	.reg .pred %p<72>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_16784_35_non_const_s_xj42312[4096];\n"
    "	.loc	3	1319	0\n"
    "$LDWbegin_nacl_kernel_constant:\n"
    "	.loc	3	1329	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	1330	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_constant_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	1331	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_constant_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_constant_n];\n"
    "	shr.s32 	%r8, %r7, 31;\n"
    "	mov.s32 	%r9, 255;\n"
    "	and.b32 	%r10, %r8, %r9;\n"
    "	add.s32 	%r11, %r10, %r7;\n"
    "	shr.s32 	%r12, %r11, 8;\n"
    "	mul.lo.s32 	%r13, %r12, 256;\n"
    "	mov.u32 	%r14, 0;\n"
    "	setp.le.s32 	%p1, %r13, %r14;\n"
    "	@%p1 bra 	$Lt_9_12034;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_16784_35_non_const_s_xj42312;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_constant_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	add.s32 	%r15, %r13, 255;\n"
    "	shr.s32 	%r16, %r15, 31;\n"
    "	mov.s32 	%r17, 255;\n"
    "	and.b32 	%r18, %r16, %r17;\n"
    "	add.s32 	%r19, %r18, %r15;\n"
    "	shr.s32 	%r20, %r19, 8;\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd5, %rd7;\n"
    "	mov.s32 	%r21, 0;\n"
    "	mov.u64 	%rd9, c_matrix;\n"
    "	mov.s32 	%r22, %r20;\n"
    "$Lt_9_12546:\n"
    " //<loop> Loop body line 1331, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1336	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	1337	0\n"
    "	add.s32 	%r23, %r21, %r1;\n"
    "	cvt.s64.s32 	%rd10, %r23;\n"
    "	mul.wide.s32 	%rd11, %r23, 16;\n"
    "	add.u64 	%rd12, %rd1, %rd11;\n"
    "	ld.global.f32 	%f15, [%rd12+0];\n"
    "	st.shared.f32 	[%rd8+0], %f15;\n"
    "	ld.global.f32 	%f16, [%rd12+4];\n"
    "	st.shared.f32 	[%rd8+4], %f16;\n"
    "	ld.global.f32 	%f17, [%rd12+8];\n"
    "	st.shared.f32 	[%rd8+8], %f17;\n"
    "	ld.global.s32 	%r24, [%rd12+12];\n"
    "	st.shared.s32 	[%rd8+12], %r24;\n"
    "	.loc	3	1338	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	24	0\n"
    "	mov.s64 	%rd13, 0;\n"
    "	mov.s32 	%r25, 0;\n"
    "	mov.f32 	%f11, %f12;\n"
    "	mov.f32 	%f18, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_9_13314:\n"
    " //<loop> Loop body line 24, nesting depth: 2, iterations: 4\n"
    "	.loc	3	1341	0\n"
    "	add.u64 	%rd14, %rd13, %rd5;\n"
    "	ld.shared.s32 	%r26, [%rd14+12];\n"
    "	add.s32 	%r27, %r26, %r6;\n"
    "	add.u64 	%rd15, %rd13, %rd5;\n"
    "	ld.shared.f32 	%f20, [%rd15+0];\n"
    "	sub.f32 	%f21, %f19, %f20;\n"
    "	mov.f32 	%f22, %f21;\n"
    "	mul.f32 	%f23, %f14, %f22;\n"
    "	cvt.rni.f32.f32 	%f24, %f23;\n"
    "	mul.f32 	%f25, %f13, %f24;\n"
    "	sub.f32 	%f26, %f21, %f25;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f28, 0f00000000;    	// 0\n"
    "	mad.f32 	%f29, %f26, %f26, %f28;\n"
    "	ld.shared.f32 	%f30, [%rd15+4];\n"
    "	sub.f32 	%f31, %f18, %f30;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mul.f32 	%f33, %f14, %f32;\n"
    "	cvt.rni.f32.f32 	%f34, %f33;\n"
    "	mul.f32 	%f35, %f13, %f34;\n"
    "	sub.f32 	%f36, %f31, %f35;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f38, %f36, %f36, %f29;\n"
    "	ld.shared.f32 	%f39, [%rd15+8];\n"
    "	sub.f32 	%f40, %f11, %f39;\n"
    "	mul.f32 	%f41, %f40, %f14;\n"
    "	cvt.rni.f32.f32 	%f42, %f41;\n"
    "	mul.f32 	%f43, %f13, %f42;\n"
    "	sub.f32 	%f44, %f40, %f43;\n"
    "	mad.f32 	%f45, %f44, %f44, %f38;\n"
    "	mov.f32 	%f46, 0f00000000;    	// 0\n"
    "	setp.neu.f32 	%p2, %f45, %f46;\n"
    "	@!%p2 bra 	$Lt_9_13570;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd16, %r27;\n"
    "	mul.wide.s32 	%rd17, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd17;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f53, [%rd18+12];\n"
    "	mov.f32 	%f54, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f55, %f53, %f54;\n"
    "	mul.f32 	%f56, %f52, %f55;\n"
    "	ld.const.f32 	%f57, [%rd18+4];\n"
    "	sub.f32 	%f58, %f57, %f47;\n"
    "	mul.f32 	%f59, %f50, %f58;\n"
    "	mov.f32 	%f60, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f61, %f59, %f60;\n"
    "	ex2.approx.f32 	%f62, %f61;\n"
    "	ld.const.f32 	%f63, [%rd18+0];\n"
    "	mov.f32 	%f64, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f65, %f63, %f64;\n"
    "	mul.f32 	%f66, %f62, %f65;\n"
    "	mul.f32 	%f67, %f50, %f66;\n"
    "	mul.f32 	%f68, %f48, %f67;\n"
    "	sub.f32 	%f69, %f68, %f56;\n"
    "	ld.const.f32 	%f70, [%rd18+16];\n"
    "	mov.f32 	%f71, 0f41000000;    	// 8\n"
    "	mul.f32 	%f72, %f70, %f71;\n"
    "	mul.f32 	%f73, %f52, %f72;\n"
    "	mul.f32 	%f74, %f49, %f73;\n"
    "	sub.f32 	%f75, %f69, %f74;\n"
    "	ld.const.f32 	%f76, [%rd18+20];\n"
    "	mul.f32 	%f77, %f48, %f49;\n"
    "	mad.f32 	%f78, %f76, %f77, %f75;\n"
    "	mov.f32 	%f79, %f2;\n"
    "	mov.f32 	%f80, %f27;\n"
    "	mad.f32 	%f81, %f80, %f78, %f79;\n"
    "	mov.f32 	%f2, %f81;\n"
    "	mov.f32 	%f82, %f4;\n"
    "	mov.f32 	%f83, %f37;\n"
    "	mad.f32 	%f84, %f83, %f78, %f82;\n"
    "	mov.f32 	%f4, %f84;\n"
    "	mov.f32 	%f85, %f6;\n"
    "	mad.f32 	%f86, %f44, %f78, %f85;\n"
    "	mov.f32 	%f6, %f86;\n"
    "$Lt_9_13570:\n"
    "	ld.shared.s32 	%r28, [%rd14+28];\n"
    "	add.s32 	%r27, %r28, %r6;\n"
    "	ld.shared.f32 	%f87, [%rd15+16];\n"
    "	sub.f32 	%f88, %f19, %f87;\n"
    "	mov.f32 	%f89, %f88;\n"
    "	mul.f32 	%f90, %f14, %f89;\n"
    "	cvt.rni.f32.f32 	%f91, %f90;\n"
    "	mul.f32 	%f92, %f13, %f91;\n"
    "	sub.f32 	%f26, %f88, %f92;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f93, 0f00000000;    	// 0\n"
    "	mad.f32 	%f94, %f26, %f26, %f93;\n"
    "	ld.shared.f32 	%f95, [%rd15+20];\n"
    "	sub.f32 	%f96, %f18, %f95;\n"
    "	mov.f32 	%f97, %f96;\n"
    "	mul.f32 	%f98, %f14, %f97;\n"
    "	cvt.rni.f32.f32 	%f99, %f98;\n"
    "	mul.f32 	%f100, %f13, %f99;\n"
    "	sub.f32 	%f36, %f96, %f100;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f101, %f36, %f36, %f94;\n"
    "	ld.shared.f32 	%f102, [%rd15+24];\n"
    "	sub.f32 	%f103, %f11, %f102;\n"
    "	mul.f32 	%f104, %f103, %f14;\n"
    "	cvt.rni.f32.f32 	%f105, %f104;\n"
    "	mul.f32 	%f106, %f13, %f105;\n"
    "	sub.f32 	%f44, %f103, %f106;\n"
    "	mad.f32 	%f45, %f44, %f44, %f101;\n"
    "	mov.f32 	%f107, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p3, %f45, %f107;\n"
    "	@!%p3 bra 	$Lt_9_14082;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd19, %r27;\n"
    "	mul.wide.s32 	%rd20, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd20;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f108, [%rd18+12];\n"
    "	mov.f32 	%f109, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f110, %f108, %f109;\n"
    "	mul.f32 	%f111, %f52, %f110;\n"
    "	ld.const.f32 	%f112, [%rd18+4];\n"
    "	sub.f32 	%f113, %f112, %f47;\n"
    "	mul.f32 	%f114, %f50, %f113;\n"
    "	mov.f32 	%f115, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f116, %f114, %f115;\n"
    "	ex2.approx.f32 	%f117, %f116;\n"
    "	ld.const.f32 	%f118, [%rd18+0];\n"
    "	mov.f32 	%f119, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f120, %f118, %f119;\n"
    "	mul.f32 	%f121, %f117, %f120;\n"
    "	mul.f32 	%f122, %f50, %f121;\n"
    "	mul.f32 	%f123, %f48, %f122;\n"
    "	sub.f32 	%f124, %f123, %f111;\n"
    "	ld.const.f32 	%f125, [%rd18+16];\n"
    "	mov.f32 	%f126, 0f41000000;   	// 8\n"
    "	mul.f32 	%f127, %f125, %f126;\n"
    "	mul.f32 	%f128, %f52, %f127;\n"
    "	mul.f32 	%f129, %f49, %f128;\n"
    "	sub.f32 	%f130, %f124, %f129;\n"
    "	ld.const.f32 	%f131, [%rd18+20];\n"
    "	mul.f32 	%f132, %f48, %f49;\n"
    "	mad.f32 	%f78, %f131, %f132, %f130;\n"
    "	mov.f32 	%f133, %f2;\n"
    "	mov.f32 	%f134, %f27;\n"
    "	mad.f32 	%f135, %f134, %f78, %f133;\n"
    "	mov.f32 	%f2, %f135;\n"
    "	mov.f32 	%f136, %f4;\n"
    "	mov.f32 	%f137, %f37;\n"
    "	mad.f32 	%f138, %f137, %f78, %f136;\n"
    "	mov.f32 	%f4, %f138;\n"
    "	mov.f32 	%f139, %f6;\n"
    "	mad.f32 	%f140, %f44, %f78, %f139;\n"
    "	mov.f32 	%f6, %f140;\n"
    "$Lt_9_14082:\n"
    "	ld.shared.s32 	%r29, [%rd14+44];\n"
    "	add.s32 	%r27, %r29, %r6;\n"
    "	ld.shared.f32 	%f141, [%rd15+32];\n"
    "	sub.f32 	%f142, %f19, %f141;\n"
    "	mov.f32 	%f143, %f142;\n"
    "	mul.f32 	%f144, %f14, %f143;\n"
    "	cvt.rni.f32.f32 	%f145, %f144;\n"
    "	mul.f32 	%f146, %f13, %f145;\n"
    "	sub.f32 	%f26, %f142, %f146;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f147, 0f00000000;   	// 0\n"
    "	mad.f32 	%f148, %f26, %f26, %f147;\n"
    "	ld.shared.f32 	%f149, [%rd15+36];\n"
    "	sub.f32 	%f150, %f18, %f149;\n"
    "	mov.f32 	%f151, %f150;\n"
    "	mul.f32 	%f152, %f14, %f151;\n"
    "	cvt.rni.f32.f32 	%f153, %f152;\n"
    "	mul.f32 	%f154, %f13, %f153;\n"
    "	sub.f32 	%f36, %f150, %f154;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f155, %f36, %f36, %f148;\n"
    "	ld.shared.f32 	%f156, [%rd15+40];\n"
    "	sub.f32 	%f157, %f11, %f156;\n"
    "	mul.f32 	%f158, %f157, %f14;\n"
    "	cvt.rni.f32.f32 	%f159, %f158;\n"
    "	mul.f32 	%f160, %f13, %f159;\n"
    "	sub.f32 	%f44, %f157, %f160;\n"
    "	mad.f32 	%f45, %f44, %f44, %f155;\n"
    "	mov.f32 	%f161, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p4, %f45, %f161;\n"
    "	@!%p4 bra 	$Lt_9_14594;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd21, %r27;\n"
    "	mul.wide.s32 	%rd22, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd22;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f162, [%rd18+12];\n"
    "	mov.f32 	%f163, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f164, %f162, %f163;\n"
    "	mul.f32 	%f165, %f52, %f164;\n"
    "	ld.const.f32 	%f166, [%rd18+4];\n"
    "	sub.f32 	%f167, %f166, %f47;\n"
    "	mul.f32 	%f168, %f50, %f167;\n"
    "	mov.f32 	%f169, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f170, %f168, %f169;\n"
    "	ex2.approx.f32 	%f171, %f170;\n"
    "	ld.const.f32 	%f172, [%rd18+0];\n"
    "	mov.f32 	%f173, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f174, %f172, %f173;\n"
    "	mul.f32 	%f175, %f171, %f174;\n"
    "	mul.f32 	%f176, %f50, %f175;\n"
    "	mul.f32 	%f177, %f48, %f176;\n"
    "	sub.f32 	%f178, %f177, %f165;\n"
    "	ld.const.f32 	%f179, [%rd18+16];\n"
    "	mov.f32 	%f180, 0f41000000;   	// 8\n"
    "	mul.f32 	%f181, %f179, %f180;\n"
    "	mul.f32 	%f182, %f52, %f181;\n"
    "	mul.f32 	%f183, %f49, %f182;\n"
    "	sub.f32 	%f184, %f178, %f183;\n"
    "	ld.const.f32 	%f185, [%rd18+20];\n"
    "	mul.f32 	%f186, %f48, %f49;\n"
    "	mad.f32 	%f78, %f185, %f186, %f184;\n"
    "	mov.f32 	%f187, %f2;\n"
    "	mov.f32 	%f188, %f27;\n"
    "	mad.f32 	%f189, %f188, %f78, %f187;\n"
    "	mov.f32 	%f2, %f189;\n"
    "	mov.f32 	%f190, %f4;\n"
    "	mov.f32 	%f191, %f37;\n"
    "	mad.f32 	%f192, %f191, %f78, %f190;\n"
    "	mov.f32 	%f4, %f192;\n"
    "	mov.f32 	%f193, %f6;\n"
    "	mad.f32 	%f194, %f44, %f78, %f193;\n"
    "	mov.f32 	%f6, %f194;\n"
    "$Lt_9_14594:\n"
    "	ld.shared.s32 	%r30, [%rd14+60];\n"
    "	add.s32 	%r27, %r30, %r6;\n"
    "	ld.shared.f32 	%f195, [%rd15+48];\n"
    "	sub.f32 	%f196, %f19, %f195;\n"
    "	mov.f32 	%f197, %f196;\n"
    "	mul.f32 	%f198, %f14, %f197;\n"
    "	cvt.rni.f32.f32 	%f199, %f198;\n"
    "	mul.f32 	%f200, %f13, %f199;\n"
    "	sub.f32 	%f26, %f196, %f200;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f201, 0f00000000;   	// 0\n"
    "	mad.f32 	%f202, %f26, %f26, %f201;\n"
    "	ld.shared.f32 	%f203, [%rd15+52];\n"
    "	sub.f32 	%f204, %f18, %f203;\n"
    "	mov.f32 	%f205, %f204;\n"
    "	mul.f32 	%f206, %f14, %f205;\n"
    "	cvt.rni.f32.f32 	%f207, %f206;\n"
    "	mul.f32 	%f208, %f13, %f207;\n"
    "	sub.f32 	%f36, %f204, %f208;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f209, %f36, %f36, %f202;\n"
    "	ld.shared.f32 	%f210, [%rd15+56];\n"
    "	sub.f32 	%f211, %f11, %f210;\n"
    "	mul.f32 	%f212, %f211, %f14;\n"
    "	cvt.rni.f32.f32 	%f213, %f212;\n"
    "	mul.f32 	%f214, %f13, %f213;\n"
    "	sub.f32 	%f44, %f211, %f214;\n"
    "	mad.f32 	%f45, %f44, %f44, %f209;\n"
    "	mov.f32 	%f215, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p5, %f45, %f215;\n"
    "	@!%p5 bra 	$Lt_9_15106;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd23, %r27;\n"
    "	mul.wide.s32 	%rd24, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd24;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f216, [%rd18+12];\n"
    "	mov.f32 	%f217, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f218, %f216, %f217;\n"
    "	mul.f32 	%f219, %f52, %f218;\n"
    "	ld.const.f32 	%f220, [%rd18+4];\n"
    "	sub.f32 	%f221, %f220, %f47;\n"
    "	mul.f32 	%f222, %f50, %f221;\n"
    "	mov.f32 	%f223, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f224, %f222, %f223;\n"
    "	ex2.approx.f32 	%f225, %f224;\n"
    "	ld.const.f32 	%f226, [%rd18+0];\n"
    "	mov.f32 	%f227, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f228, %f226, %f227;\n"
    "	mul.f32 	%f229, %f225, %f228;\n"
    "	mul.f32 	%f230, %f50, %f229;\n"
    "	mul.f32 	%f231, %f48, %f230;\n"
    "	sub.f32 	%f232, %f231, %f219;\n"
    "	ld.const.f32 	%f233, [%rd18+16];\n"
    "	mov.f32 	%f234, 0f41000000;   	// 8\n"
    "	mul.f32 	%f235, %f233, %f234;\n"
    "	mul.f32 	%f236, %f52, %f235;\n"
    "	mul.f32 	%f237, %f49, %f236;\n"
    "	sub.f32 	%f238, %f232, %f237;\n"
    "	ld.const.f32 	%f239, [%rd18+20];\n"
    "	mul.f32 	%f240, %f48, %f49;\n"
    "	mad.f32 	%f78, %f239, %f240, %f238;\n"
    "	mov.f32 	%f241, %f2;\n"
    "	mov.f32 	%f242, %f27;\n"
    "	mad.f32 	%f243, %f242, %f78, %f241;\n"
    "	mov.f32 	%f2, %f243;\n"
    "	mov.f32 	%f244, %f4;\n"
    "	mov.f32 	%f245, %f37;\n"
    "	mad.f32 	%f246, %f245, %f78, %f244;\n"
    "	mov.f32 	%f4, %f246;\n"
    "	mov.f32 	%f247, %f6;\n"
    "	mad.f32 	%f248, %f44, %f78, %f247;\n"
    "	mov.f32 	%f6, %f248;\n"
    "$Lt_9_15106:\n"
    "	ld.shared.s32 	%r31, [%rd14+76];\n"
    "	add.s32 	%r27, %r31, %r6;\n"
    "	ld.shared.f32 	%f249, [%rd15+64];\n"
    "	sub.f32 	%f250, %f19, %f249;\n"
    "	mov.f32 	%f251, %f250;\n"
    "	mul.f32 	%f252, %f14, %f251;\n"
    "	cvt.rni.f32.f32 	%f253, %f252;\n"
    "	mul.f32 	%f254, %f13, %f253;\n"
    "	sub.f32 	%f26, %f250, %f254;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f255, 0f00000000;   	// 0\n"
    "	mad.f32 	%f256, %f26, %f26, %f255;\n"
    "	ld.shared.f32 	%f257, [%rd15+68];\n"
    "	sub.f32 	%f258, %f18, %f257;\n"
    "	mov.f32 	%f259, %f258;\n"
    "	mul.f32 	%f260, %f14, %f259;\n"
    "	cvt.rni.f32.f32 	%f261, %f260;\n"
    "	mul.f32 	%f262, %f13, %f261;\n"
    "	sub.f32 	%f36, %f258, %f262;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f263, %f36, %f36, %f256;\n"
    "	ld.shared.f32 	%f264, [%rd15+72];\n"
    "	sub.f32 	%f265, %f11, %f264;\n"
    "	mul.f32 	%f266, %f265, %f14;\n"
    "	cvt.rni.f32.f32 	%f267, %f266;\n"
    "	mul.f32 	%f268, %f13, %f267;\n"
    "	sub.f32 	%f44, %f265, %f268;\n"
    "	mad.f32 	%f45, %f44, %f44, %f263;\n"
    "	mov.f32 	%f269, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p6, %f45, %f269;\n"
    "	@!%p6 bra 	$Lt_9_15618;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd25, %r27;\n"
    "	mul.wide.s32 	%rd26, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd26;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f270, [%rd18+12];\n"
    "	mov.f32 	%f271, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f272, %f270, %f271;\n"
    "	mul.f32 	%f273, %f52, %f272;\n"
    "	ld.const.f32 	%f274, [%rd18+4];\n"
    "	sub.f32 	%f275, %f274, %f47;\n"
    "	mul.f32 	%f276, %f50, %f275;\n"
    "	mov.f32 	%f277, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f278, %f276, %f277;\n"
    "	ex2.approx.f32 	%f279, %f278;\n"
    "	ld.const.f32 	%f280, [%rd18+0];\n"
    "	mov.f32 	%f281, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f282, %f280, %f281;\n"
    "	mul.f32 	%f283, %f279, %f282;\n"
    "	mul.f32 	%f284, %f50, %f283;\n"
    "	mul.f32 	%f285, %f48, %f284;\n"
    "	sub.f32 	%f286, %f285, %f273;\n"
    "	ld.const.f32 	%f287, [%rd18+16];\n"
    "	mov.f32 	%f288, 0f41000000;   	// 8\n"
    "	mul.f32 	%f289, %f287, %f288;\n"
    "	mul.f32 	%f290, %f52, %f289;\n"
    "	mul.f32 	%f291, %f49, %f290;\n"
    "	sub.f32 	%f292, %f286, %f291;\n"
    "	ld.const.f32 	%f293, [%rd18+20];\n"
    "	mul.f32 	%f294, %f48, %f49;\n"
    "	mad.f32 	%f78, %f293, %f294, %f292;\n"
    "	mov.f32 	%f295, %f2;\n"
    "	mov.f32 	%f296, %f27;\n"
    "	mad.f32 	%f297, %f296, %f78, %f295;\n"
    "	mov.f32 	%f2, %f297;\n"
    "	mov.f32 	%f298, %f4;\n"
    "	mov.f32 	%f299, %f37;\n"
    "	mad.f32 	%f300, %f299, %f78, %f298;\n"
    "	mov.f32 	%f4, %f300;\n"
    "	mov.f32 	%f301, %f6;\n"
    "	mad.f32 	%f302, %f44, %f78, %f301;\n"
    "	mov.f32 	%f6, %f302;\n"
    "$Lt_9_15618:\n"
    "	ld.shared.s32 	%r32, [%rd14+92];\n"
    "	add.s32 	%r27, %r32, %r6;\n"
    "	ld.shared.f32 	%f303, [%rd15+80];\n"
    "	sub.f32 	%f304, %f19, %f303;\n"
    "	mov.f32 	%f305, %f304;\n"
    "	mul.f32 	%f306, %f14, %f305;\n"
    "	cvt.rni.f32.f32 	%f307, %f306;\n"
    "	mul.f32 	%f308, %f13, %f307;\n"
    "	sub.f32 	%f26, %f304, %f308;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f309, 0f00000000;   	// 0\n"
    "	mad.f32 	%f310, %f26, %f26, %f309;\n"
    "	ld.shared.f32 	%f311, [%rd15+84];\n"
    "	sub.f32 	%f312, %f18, %f311;\n"
    "	mov.f32 	%f313, %f312;\n"
    "	mul.f32 	%f314, %f14, %f313;\n"
    "	cvt.rni.f32.f32 	%f315, %f314;\n"
    "	mul.f32 	%f316, %f13, %f315;\n"
    "	sub.f32 	%f36, %f312, %f316;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f317, %f36, %f36, %f310;\n"
    "	ld.shared.f32 	%f318, [%rd15+88];\n"
    "	sub.f32 	%f319, %f11, %f318;\n"
    "	mul.f32 	%f320, %f319, %f14;\n"
    "	cvt.rni.f32.f32 	%f321, %f320;\n"
    "	mul.f32 	%f322, %f13, %f321;\n"
    "	sub.f32 	%f44, %f319, %f322;\n"
    "	mad.f32 	%f45, %f44, %f44, %f317;\n"
    "	mov.f32 	%f323, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p7, %f45, %f323;\n"
    "	@!%p7 bra 	$Lt_9_16130;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd27, %r27;\n"
    "	mul.wide.s32 	%rd28, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd28;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f324, [%rd18+12];\n"
    "	mov.f32 	%f325, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f326, %f324, %f325;\n"
    "	mul.f32 	%f327, %f52, %f326;\n"
    "	ld.const.f32 	%f328, [%rd18+4];\n"
    "	sub.f32 	%f329, %f328, %f47;\n"
    "	mul.f32 	%f330, %f50, %f329;\n"
    "	mov.f32 	%f331, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f332, %f330, %f331;\n"
    "	ex2.approx.f32 	%f333, %f332;\n"
    "	ld.const.f32 	%f334, [%rd18+0];\n"
    "	mov.f32 	%f335, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f336, %f334, %f335;\n"
    "	mul.f32 	%f337, %f333, %f336;\n"
    "	mul.f32 	%f338, %f50, %f337;\n"
    "	mul.f32 	%f339, %f48, %f338;\n"
    "	sub.f32 	%f340, %f339, %f327;\n"
    "	ld.const.f32 	%f341, [%rd18+16];\n"
    "	mov.f32 	%f342, 0f41000000;   	// 8\n"
    "	mul.f32 	%f343, %f341, %f342;\n"
    "	mul.f32 	%f344, %f52, %f343;\n"
    "	mul.f32 	%f345, %f49, %f344;\n"
    "	sub.f32 	%f346, %f340, %f345;\n"
    "	ld.const.f32 	%f347, [%rd18+20];\n"
    "	mul.f32 	%f348, %f48, %f49;\n"
    "	mad.f32 	%f78, %f347, %f348, %f346;\n"
    "	mov.f32 	%f349, %f2;\n"
    "	mov.f32 	%f350, %f27;\n"
    "	mad.f32 	%f351, %f350, %f78, %f349;\n"
    "	mov.f32 	%f2, %f351;\n"
    "	mov.f32 	%f352, %f4;\n"
    "	mov.f32 	%f353, %f37;\n"
    "	mad.f32 	%f354, %f353, %f78, %f352;\n"
    "	mov.f32 	%f4, %f354;\n"
    "	mov.f32 	%f355, %f6;\n"
    "	mad.f32 	%f356, %f44, %f78, %f355;\n"
    "	mov.f32 	%f6, %f356;\n"
    "$Lt_9_16130:\n"
    "	ld.shared.s32 	%r33, [%rd14+108];\n"
    "	add.s32 	%r27, %r33, %r6;\n"
    "	ld.shared.f32 	%f357, [%rd15+96];\n"
    "	sub.f32 	%f358, %f19, %f357;\n"
    "	mov.f32 	%f359, %f358;\n"
    "	mul.f32 	%f360, %f14, %f359;\n"
    "	cvt.rni.f32.f32 	%f361, %f360;\n"
    "	mul.f32 	%f362, %f13, %f361;\n"
    "	sub.f32 	%f26, %f358, %f362;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f363, 0f00000000;   	// 0\n"
    "	mad.f32 	%f364, %f26, %f26, %f363;\n"
    "	ld.shared.f32 	%f365, [%rd15+100];\n"
    "	sub.f32 	%f366, %f18, %f365;\n"
    "	mov.f32 	%f367, %f366;\n"
    "	mul.f32 	%f368, %f14, %f367;\n"
    "	cvt.rni.f32.f32 	%f369, %f368;\n"
    "	mul.f32 	%f370, %f13, %f369;\n"
    "	sub.f32 	%f36, %f366, %f370;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f371, %f36, %f36, %f364;\n"
    "	ld.shared.f32 	%f372, [%rd15+104];\n"
    "	sub.f32 	%f373, %f11, %f372;\n"
    "	mul.f32 	%f374, %f373, %f14;\n"
    "	cvt.rni.f32.f32 	%f375, %f374;\n"
    "	mul.f32 	%f376, %f13, %f375;\n"
    "	sub.f32 	%f44, %f373, %f376;\n"
    "	mad.f32 	%f45, %f44, %f44, %f371;\n"
    "	mov.f32 	%f377, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p8, %f45, %f377;\n"
    "	@!%p8 bra 	$Lt_9_16642;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd29, %r27;\n"
    "	mul.wide.s32 	%rd30, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd30;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f378, [%rd18+12];\n"
    "	mov.f32 	%f379, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f380, %f378, %f379;\n"
    "	mul.f32 	%f381, %f52, %f380;\n"
    "	ld.const.f32 	%f382, [%rd18+4];\n"
    "	sub.f32 	%f383, %f382, %f47;\n"
    "	mul.f32 	%f384, %f50, %f383;\n"
    "	mov.f32 	%f385, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f386, %f384, %f385;\n"
    "	ex2.approx.f32 	%f387, %f386;\n"
    "	ld.const.f32 	%f388, [%rd18+0];\n"
    "	mov.f32 	%f389, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f390, %f388, %f389;\n"
    "	mul.f32 	%f391, %f387, %f390;\n"
    "	mul.f32 	%f392, %f50, %f391;\n"
    "	mul.f32 	%f393, %f48, %f392;\n"
    "	sub.f32 	%f394, %f393, %f381;\n"
    "	ld.const.f32 	%f395, [%rd18+16];\n"
    "	mov.f32 	%f396, 0f41000000;   	// 8\n"
    "	mul.f32 	%f397, %f395, %f396;\n"
    "	mul.f32 	%f398, %f52, %f397;\n"
    "	mul.f32 	%f399, %f49, %f398;\n"
    "	sub.f32 	%f400, %f394, %f399;\n"
    "	ld.const.f32 	%f401, [%rd18+20];\n"
    "	mul.f32 	%f402, %f48, %f49;\n"
    "	mad.f32 	%f78, %f401, %f402, %f400;\n"
    "	mov.f32 	%f403, %f2;\n"
    "	mov.f32 	%f404, %f27;\n"
    "	mad.f32 	%f405, %f404, %f78, %f403;\n"
    "	mov.f32 	%f2, %f405;\n"
    "	mov.f32 	%f406, %f4;\n"
    "	mov.f32 	%f407, %f37;\n"
    "	mad.f32 	%f408, %f407, %f78, %f406;\n"
    "	mov.f32 	%f4, %f408;\n"
    "	mov.f32 	%f409, %f6;\n"
    "	mad.f32 	%f410, %f44, %f78, %f409;\n"
    "	mov.f32 	%f6, %f410;\n"
    "$Lt_9_16642:\n"
    "	ld.shared.s32 	%r34, [%rd14+124];\n"
    "	add.s32 	%r27, %r34, %r6;\n"
    "	ld.shared.f32 	%f411, [%rd15+112];\n"
    "	sub.f32 	%f412, %f19, %f411;\n"
    "	mov.f32 	%f413, %f412;\n"
    "	mul.f32 	%f414, %f14, %f413;\n"
    "	cvt.rni.f32.f32 	%f415, %f414;\n"
    "	mul.f32 	%f416, %f13, %f415;\n"
    "	sub.f32 	%f26, %f412, %f416;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f417, 0f00000000;   	// 0\n"
    "	mad.f32 	%f418, %f26, %f26, %f417;\n"
    "	ld.shared.f32 	%f419, [%rd15+116];\n"
    "	sub.f32 	%f420, %f18, %f419;\n"
    "	mov.f32 	%f421, %f420;\n"
    "	mul.f32 	%f422, %f14, %f421;\n"
    "	cvt.rni.f32.f32 	%f423, %f422;\n"
    "	mul.f32 	%f424, %f13, %f423;\n"
    "	sub.f32 	%f36, %f420, %f424;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f425, %f36, %f36, %f418;\n"
    "	ld.shared.f32 	%f426, [%rd15+120];\n"
    "	sub.f32 	%f427, %f11, %f426;\n"
    "	mul.f32 	%f428, %f427, %f14;\n"
    "	cvt.rni.f32.f32 	%f429, %f428;\n"
    "	mul.f32 	%f430, %f13, %f429;\n"
    "	sub.f32 	%f44, %f427, %f430;\n"
    "	mad.f32 	%f45, %f44, %f44, %f425;\n"
    "	mov.f32 	%f431, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p9, %f45, %f431;\n"
    "	@!%p9 bra 	$Lt_9_17154;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd31, %r27;\n"
    "	mul.wide.s32 	%rd32, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd32;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f432, [%rd18+12];\n"
    "	mov.f32 	%f433, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f434, %f432, %f433;\n"
    "	mul.f32 	%f435, %f52, %f434;\n"
    "	ld.const.f32 	%f436, [%rd18+4];\n"
    "	sub.f32 	%f437, %f436, %f47;\n"
    "	mul.f32 	%f438, %f50, %f437;\n"
    "	mov.f32 	%f439, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f440, %f438, %f439;\n"
    "	ex2.approx.f32 	%f441, %f440;\n"
    "	ld.const.f32 	%f442, [%rd18+0];\n"
    "	mov.f32 	%f443, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f444, %f442, %f443;\n"
    "	mul.f32 	%f445, %f441, %f444;\n"
    "	mul.f32 	%f446, %f50, %f445;\n"
    "	mul.f32 	%f447, %f48, %f446;\n"
    "	sub.f32 	%f448, %f447, %f435;\n"
    "	ld.const.f32 	%f449, [%rd18+16];\n"
    "	mov.f32 	%f450, 0f41000000;   	// 8\n"
    "	mul.f32 	%f451, %f449, %f450;\n"
    "	mul.f32 	%f452, %f52, %f451;\n"
    "	mul.f32 	%f453, %f49, %f452;\n"
    "	sub.f32 	%f454, %f448, %f453;\n"
    "	ld.const.f32 	%f455, [%rd18+20];\n"
    "	mul.f32 	%f456, %f48, %f49;\n"
    "	mad.f32 	%f78, %f455, %f456, %f454;\n"
    "	mov.f32 	%f457, %f2;\n"
    "	mov.f32 	%f458, %f27;\n"
    "	mad.f32 	%f459, %f458, %f78, %f457;\n"
    "	mov.f32 	%f2, %f459;\n"
    "	mov.f32 	%f460, %f4;\n"
    "	mov.f32 	%f461, %f37;\n"
    "	mad.f32 	%f462, %f461, %f78, %f460;\n"
    "	mov.f32 	%f4, %f462;\n"
    "	mov.f32 	%f463, %f6;\n"
    "	mad.f32 	%f464, %f44, %f78, %f463;\n"
    "	mov.f32 	%f6, %f464;\n"
    "$Lt_9_17154:\n"
    "	ld.shared.s32 	%r35, [%rd14+140];\n"
    "	add.s32 	%r27, %r35, %r6;\n"
    "	ld.shared.f32 	%f465, [%rd15+128];\n"
    "	sub.f32 	%f466, %f19, %f465;\n"
    "	mov.f32 	%f467, %f466;\n"
    "	mul.f32 	%f468, %f14, %f467;\n"
    "	cvt.rni.f32.f32 	%f469, %f468;\n"
    "	mul.f32 	%f470, %f13, %f469;\n"
    "	sub.f32 	%f26, %f466, %f470;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f471, 0f00000000;   	// 0\n"
    "	mad.f32 	%f472, %f26, %f26, %f471;\n"
    "	ld.shared.f32 	%f473, [%rd15+132];\n"
    "	sub.f32 	%f474, %f18, %f473;\n"
    "	mov.f32 	%f475, %f474;\n"
    "	mul.f32 	%f476, %f14, %f475;\n"
    "	cvt.rni.f32.f32 	%f477, %f476;\n"
    "	mul.f32 	%f478, %f13, %f477;\n"
    "	sub.f32 	%f36, %f474, %f478;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f479, %f36, %f36, %f472;\n"
    "	ld.shared.f32 	%f480, [%rd15+136];\n"
    "	sub.f32 	%f481, %f11, %f480;\n"
    "	mul.f32 	%f482, %f481, %f14;\n"
    "	cvt.rni.f32.f32 	%f483, %f482;\n"
    "	mul.f32 	%f484, %f13, %f483;\n"
    "	sub.f32 	%f44, %f481, %f484;\n"
    "	mad.f32 	%f45, %f44, %f44, %f479;\n"
    "	mov.f32 	%f485, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p10, %f45, %f485;\n"
    "	@!%p10 bra 	$Lt_9_17666;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd33, %r27;\n"
    "	mul.wide.s32 	%rd34, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd34;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f486, [%rd18+12];\n"
    "	mov.f32 	%f487, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f488, %f486, %f487;\n"
    "	mul.f32 	%f489, %f52, %f488;\n"
    "	ld.const.f32 	%f490, [%rd18+4];\n"
    "	sub.f32 	%f491, %f490, %f47;\n"
    "	mul.f32 	%f492, %f50, %f491;\n"
    "	mov.f32 	%f493, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f494, %f492, %f493;\n"
    "	ex2.approx.f32 	%f495, %f494;\n"
    "	ld.const.f32 	%f496, [%rd18+0];\n"
    "	mov.f32 	%f497, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f498, %f496, %f497;\n"
    "	mul.f32 	%f499, %f495, %f498;\n"
    "	mul.f32 	%f500, %f50, %f499;\n"
    "	mul.f32 	%f501, %f48, %f500;\n"
    "	sub.f32 	%f502, %f501, %f489;\n"
    "	ld.const.f32 	%f503, [%rd18+16];\n"
    "	mov.f32 	%f504, 0f41000000;   	// 8\n"
    "	mul.f32 	%f505, %f503, %f504;\n"
    "	mul.f32 	%f506, %f52, %f505;\n"
    "	mul.f32 	%f507, %f49, %f506;\n"
    "	sub.f32 	%f508, %f502, %f507;\n"
    "	ld.const.f32 	%f509, [%rd18+20];\n"
    "	mul.f32 	%f510, %f48, %f49;\n"
    "	mad.f32 	%f78, %f509, %f510, %f508;\n"
    "	mov.f32 	%f511, %f2;\n"
    "	mov.f32 	%f512, %f27;\n"
    "	mad.f32 	%f513, %f512, %f78, %f511;\n"
    "	mov.f32 	%f2, %f513;\n"
    "	mov.f32 	%f514, %f4;\n"
    "	mov.f32 	%f515, %f37;\n"
    "	mad.f32 	%f516, %f515, %f78, %f514;\n"
    "	mov.f32 	%f4, %f516;\n"
    "	mov.f32 	%f517, %f6;\n"
    "	mad.f32 	%f518, %f44, %f78, %f517;\n"
    "	mov.f32 	%f6, %f518;\n"
    "$Lt_9_17666:\n"
    "	ld.shared.s32 	%r36, [%rd14+156];\n"
    "	add.s32 	%r27, %r36, %r6;\n"
    "	ld.shared.f32 	%f519, [%rd15+144];\n"
    "	sub.f32 	%f520, %f19, %f519;\n"
    "	mov.f32 	%f521, %f520;\n"
    "	mul.f32 	%f522, %f14, %f521;\n"
    "	cvt.rni.f32.f32 	%f523, %f522;\n"
    "	mul.f32 	%f524, %f13, %f523;\n"
    "	sub.f32 	%f26, %f520, %f524;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f525, 0f00000000;   	// 0\n"
    "	mad.f32 	%f526, %f26, %f26, %f525;\n"
    "	ld.shared.f32 	%f527, [%rd15+148];\n"
    "	sub.f32 	%f528, %f18, %f527;\n"
    "	mov.f32 	%f529, %f528;\n"
    "	mul.f32 	%f530, %f14, %f529;\n"
    "	cvt.rni.f32.f32 	%f531, %f530;\n"
    "	mul.f32 	%f532, %f13, %f531;\n"
    "	sub.f32 	%f36, %f528, %f532;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f533, %f36, %f36, %f526;\n"
    "	ld.shared.f32 	%f534, [%rd15+152];\n"
    "	sub.f32 	%f535, %f11, %f534;\n"
    "	mul.f32 	%f536, %f535, %f14;\n"
    "	cvt.rni.f32.f32 	%f537, %f536;\n"
    "	mul.f32 	%f538, %f13, %f537;\n"
    "	sub.f32 	%f44, %f535, %f538;\n"
    "	mad.f32 	%f45, %f44, %f44, %f533;\n"
    "	mov.f32 	%f539, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p11, %f45, %f539;\n"
    "	@!%p11 bra 	$Lt_9_18178;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd35, %r27;\n"
    "	mul.wide.s32 	%rd36, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd36;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f540, [%rd18+12];\n"
    "	mov.f32 	%f541, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f542, %f540, %f541;\n"
    "	mul.f32 	%f543, %f52, %f542;\n"
    "	ld.const.f32 	%f544, [%rd18+4];\n"
    "	sub.f32 	%f545, %f544, %f47;\n"
    "	mul.f32 	%f546, %f50, %f545;\n"
    "	mov.f32 	%f547, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f548, %f546, %f547;\n"
    "	ex2.approx.f32 	%f549, %f548;\n"
    "	ld.const.f32 	%f550, [%rd18+0];\n"
    "	mov.f32 	%f551, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f552, %f550, %f551;\n"
    "	mul.f32 	%f553, %f549, %f552;\n"
    "	mul.f32 	%f554, %f50, %f553;\n"
    "	mul.f32 	%f555, %f48, %f554;\n"
    "	sub.f32 	%f556, %f555, %f543;\n"
    "	ld.const.f32 	%f557, [%rd18+16];\n"
    "	mov.f32 	%f558, 0f41000000;   	// 8\n"
    "	mul.f32 	%f559, %f557, %f558;\n"
    "	mul.f32 	%f560, %f52, %f559;\n"
    "	mul.f32 	%f561, %f49, %f560;\n"
    "	sub.f32 	%f562, %f556, %f561;\n"
    "	ld.const.f32 	%f563, [%rd18+20];\n"
    "	mul.f32 	%f564, %f48, %f49;\n"
    "	mad.f32 	%f78, %f563, %f564, %f562;\n"
    "	mov.f32 	%f565, %f2;\n"
    "	mov.f32 	%f566, %f27;\n"
    "	mad.f32 	%f567, %f566, %f78, %f565;\n"
    "	mov.f32 	%f2, %f567;\n"
    "	mov.f32 	%f568, %f4;\n"
    "	mov.f32 	%f569, %f37;\n"
    "	mad.f32 	%f570, %f569, %f78, %f568;\n"
    "	mov.f32 	%f4, %f570;\n"
    "	mov.f32 	%f571, %f6;\n"
    "	mad.f32 	%f572, %f44, %f78, %f571;\n"
    "	mov.f32 	%f6, %f572;\n"
    "$Lt_9_18178:\n"
    "	ld.shared.s32 	%r37, [%rd14+172];\n"
    "	add.s32 	%r27, %r37, %r6;\n"
    "	ld.shared.f32 	%f573, [%rd15+160];\n"
    "	sub.f32 	%f574, %f19, %f573;\n"
    "	mov.f32 	%f575, %f574;\n"
    "	mul.f32 	%f576, %f14, %f575;\n"
    "	cvt.rni.f32.f32 	%f577, %f576;\n"
    "	mul.f32 	%f578, %f13, %f577;\n"
    "	sub.f32 	%f26, %f574, %f578;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f579, 0f00000000;   	// 0\n"
    "	mad.f32 	%f580, %f26, %f26, %f579;\n"
    "	ld.shared.f32 	%f581, [%rd15+164];\n"
    "	sub.f32 	%f582, %f18, %f581;\n"
    "	mov.f32 	%f583, %f582;\n"
    "	mul.f32 	%f584, %f14, %f583;\n"
    "	cvt.rni.f32.f32 	%f585, %f584;\n"
    "	mul.f32 	%f586, %f13, %f585;\n"
    "	sub.f32 	%f36, %f582, %f586;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f587, %f36, %f36, %f580;\n"
    "	ld.shared.f32 	%f588, [%rd15+168];\n"
    "	sub.f32 	%f589, %f11, %f588;\n"
    "	mul.f32 	%f590, %f589, %f14;\n"
    "	cvt.rni.f32.f32 	%f591, %f590;\n"
    "	mul.f32 	%f592, %f13, %f591;\n"
    "	sub.f32 	%f44, %f589, %f592;\n"
    "	mad.f32 	%f45, %f44, %f44, %f587;\n"
    "	mov.f32 	%f593, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p12, %f45, %f593;\n"
    "	@!%p12 bra 	$Lt_9_18690;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd37, %r27;\n"
    "	mul.wide.s32 	%rd38, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd38;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f594, [%rd18+12];\n"
    "	mov.f32 	%f595, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f596, %f594, %f595;\n"
    "	mul.f32 	%f597, %f52, %f596;\n"
    "	ld.const.f32 	%f598, [%rd18+4];\n"
    "	sub.f32 	%f599, %f598, %f47;\n"
    "	mul.f32 	%f600, %f50, %f599;\n"
    "	mov.f32 	%f601, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f602, %f600, %f601;\n"
    "	ex2.approx.f32 	%f603, %f602;\n"
    "	ld.const.f32 	%f604, [%rd18+0];\n"
    "	mov.f32 	%f605, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f606, %f604, %f605;\n"
    "	mul.f32 	%f607, %f603, %f606;\n"
    "	mul.f32 	%f608, %f50, %f607;\n"
    "	mul.f32 	%f609, %f48, %f608;\n"
    "	sub.f32 	%f610, %f609, %f597;\n"
    "	ld.const.f32 	%f611, [%rd18+16];\n"
    "	mov.f32 	%f612, 0f41000000;   	// 8\n"
    "	mul.f32 	%f613, %f611, %f612;\n"
    "	mul.f32 	%f614, %f52, %f613;\n"
    "	mul.f32 	%f615, %f49, %f614;\n"
    "	sub.f32 	%f616, %f610, %f615;\n"
    "	ld.const.f32 	%f617, [%rd18+20];\n"
    "	mul.f32 	%f618, %f48, %f49;\n"
    "	mad.f32 	%f78, %f617, %f618, %f616;\n"
    "	mov.f32 	%f619, %f2;\n"
    "	mov.f32 	%f620, %f27;\n"
    "	mad.f32 	%f621, %f620, %f78, %f619;\n"
    "	mov.f32 	%f2, %f621;\n"
    "	mov.f32 	%f622, %f4;\n"
    "	mov.f32 	%f623, %f37;\n"
    "	mad.f32 	%f624, %f623, %f78, %f622;\n"
    "	mov.f32 	%f4, %f624;\n"
    "	mov.f32 	%f625, %f6;\n"
    "	mad.f32 	%f626, %f44, %f78, %f625;\n"
    "	mov.f32 	%f6, %f626;\n"
    "$Lt_9_18690:\n"
    "	ld.shared.s32 	%r38, [%rd14+188];\n"
    "	add.s32 	%r27, %r38, %r6;\n"
    "	ld.shared.f32 	%f627, [%rd15+176];\n"
    "	sub.f32 	%f628, %f19, %f627;\n"
    "	mov.f32 	%f629, %f628;\n"
    "	mul.f32 	%f630, %f14, %f629;\n"
    "	cvt.rni.f32.f32 	%f631, %f630;\n"
    "	mul.f32 	%f632, %f13, %f631;\n"
    "	sub.f32 	%f26, %f628, %f632;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f633, 0f00000000;   	// 0\n"
    "	mad.f32 	%f634, %f26, %f26, %f633;\n"
    "	ld.shared.f32 	%f635, [%rd15+180];\n"
    "	sub.f32 	%f636, %f18, %f635;\n"
    "	mov.f32 	%f637, %f636;\n"
    "	mul.f32 	%f638, %f14, %f637;\n"
    "	cvt.rni.f32.f32 	%f639, %f638;\n"
    "	mul.f32 	%f640, %f13, %f639;\n"
    "	sub.f32 	%f36, %f636, %f640;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f641, %f36, %f36, %f634;\n"
    "	ld.shared.f32 	%f642, [%rd15+184];\n"
    "	sub.f32 	%f643, %f11, %f642;\n"
    "	mul.f32 	%f644, %f643, %f14;\n"
    "	cvt.rni.f32.f32 	%f645, %f644;\n"
    "	mul.f32 	%f646, %f13, %f645;\n"
    "	sub.f32 	%f44, %f643, %f646;\n"
    "	mad.f32 	%f45, %f44, %f44, %f641;\n"
    "	mov.f32 	%f647, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p13, %f45, %f647;\n"
    "	@!%p13 bra 	$Lt_9_19202;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd39, %r27;\n"
    "	mul.wide.s32 	%rd40, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd40;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f648, [%rd18+12];\n"
    "	mov.f32 	%f649, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f650, %f648, %f649;\n"
    "	mul.f32 	%f651, %f52, %f650;\n"
    "	ld.const.f32 	%f652, [%rd18+4];\n"
    "	sub.f32 	%f653, %f652, %f47;\n"
    "	mul.f32 	%f654, %f50, %f653;\n"
    "	mov.f32 	%f655, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f656, %f654, %f655;\n"
    "	ex2.approx.f32 	%f657, %f656;\n"
    "	ld.const.f32 	%f658, [%rd18+0];\n"
    "	mov.f32 	%f659, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f660, %f658, %f659;\n"
    "	mul.f32 	%f661, %f657, %f660;\n"
    "	mul.f32 	%f662, %f50, %f661;\n"
    "	mul.f32 	%f663, %f48, %f662;\n"
    "	sub.f32 	%f664, %f663, %f651;\n"
    "	ld.const.f32 	%f665, [%rd18+16];\n"
    "	mov.f32 	%f666, 0f41000000;   	// 8\n"
    "	mul.f32 	%f667, %f665, %f666;\n"
    "	mul.f32 	%f668, %f52, %f667;\n"
    "	mul.f32 	%f669, %f49, %f668;\n"
    "	sub.f32 	%f670, %f664, %f669;\n"
    "	ld.const.f32 	%f671, [%rd18+20];\n"
    "	mul.f32 	%f672, %f48, %f49;\n"
    "	mad.f32 	%f78, %f671, %f672, %f670;\n"
    "	mov.f32 	%f673, %f2;\n"
    "	mov.f32 	%f674, %f27;\n"
    "	mad.f32 	%f675, %f674, %f78, %f673;\n"
    "	mov.f32 	%f2, %f675;\n"
    "	mov.f32 	%f676, %f4;\n"
    "	mov.f32 	%f677, %f37;\n"
    "	mad.f32 	%f678, %f677, %f78, %f676;\n"
    "	mov.f32 	%f4, %f678;\n"
    "	mov.f32 	%f679, %f6;\n"
    "	mad.f32 	%f680, %f44, %f78, %f679;\n"
    "	mov.f32 	%f6, %f680;\n"
    "$Lt_9_19202:\n"
    "	ld.shared.s32 	%r39, [%rd14+204];\n"
    "	add.s32 	%r27, %r39, %r6;\n"
    "	ld.shared.f32 	%f681, [%rd15+192];\n"
    "	sub.f32 	%f682, %f19, %f681;\n"
    "	mov.f32 	%f683, %f682;\n"
    "	mul.f32 	%f684, %f14, %f683;\n"
    "	cvt.rni.f32.f32 	%f685, %f684;\n"
    "	mul.f32 	%f686, %f13, %f685;\n"
    "	sub.f32 	%f26, %f682, %f686;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f687, 0f00000000;   	// 0\n"
    "	mad.f32 	%f688, %f26, %f26, %f687;\n"
    "	ld.shared.f32 	%f689, [%rd15+196];\n"
    "	sub.f32 	%f690, %f18, %f689;\n"
    "	mov.f32 	%f691, %f690;\n"
    "	mul.f32 	%f692, %f14, %f691;\n"
    "	cvt.rni.f32.f32 	%f693, %f692;\n"
    "	mul.f32 	%f694, %f13, %f693;\n"
    "	sub.f32 	%f36, %f690, %f694;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f695, %f36, %f36, %f688;\n"
    "	ld.shared.f32 	%f696, [%rd15+200];\n"
    "	sub.f32 	%f697, %f11, %f696;\n"
    "	mul.f32 	%f698, %f697, %f14;\n"
    "	cvt.rni.f32.f32 	%f699, %f698;\n"
    "	mul.f32 	%f700, %f13, %f699;\n"
    "	sub.f32 	%f44, %f697, %f700;\n"
    "	mad.f32 	%f45, %f44, %f44, %f695;\n"
    "	mov.f32 	%f701, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p14, %f45, %f701;\n"
    "	@!%p14 bra 	$Lt_9_19714;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd41, %r27;\n"
    "	mul.wide.s32 	%rd42, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd42;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f702, [%rd18+12];\n"
    "	mov.f32 	%f703, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f704, %f702, %f703;\n"
    "	mul.f32 	%f705, %f52, %f704;\n"
    "	ld.const.f32 	%f706, [%rd18+4];\n"
    "	sub.f32 	%f707, %f706, %f47;\n"
    "	mul.f32 	%f708, %f50, %f707;\n"
    "	mov.f32 	%f709, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f710, %f708, %f709;\n"
    "	ex2.approx.f32 	%f711, %f710;\n"
    "	ld.const.f32 	%f712, [%rd18+0];\n"
    "	mov.f32 	%f713, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f714, %f712, %f713;\n"
    "	mul.f32 	%f715, %f711, %f714;\n"
    "	mul.f32 	%f716, %f50, %f715;\n"
    "	mul.f32 	%f717, %f48, %f716;\n"
    "	sub.f32 	%f718, %f717, %f705;\n"
    "	ld.const.f32 	%f719, [%rd18+16];\n"
    "	mov.f32 	%f720, 0f41000000;   	// 8\n"
    "	mul.f32 	%f721, %f719, %f720;\n"
    "	mul.f32 	%f722, %f52, %f721;\n"
    "	mul.f32 	%f723, %f49, %f722;\n"
    "	sub.f32 	%f724, %f718, %f723;\n"
    "	ld.const.f32 	%f725, [%rd18+20];\n"
    "	mul.f32 	%f726, %f48, %f49;\n"
    "	mad.f32 	%f78, %f725, %f726, %f724;\n"
    "	mov.f32 	%f727, %f2;\n"
    "	mov.f32 	%f728, %f27;\n"
    "	mad.f32 	%f729, %f728, %f78, %f727;\n"
    "	mov.f32 	%f2, %f729;\n"
    "	mov.f32 	%f730, %f4;\n"
    "	mov.f32 	%f731, %f37;\n"
    "	mad.f32 	%f732, %f731, %f78, %f730;\n"
    "	mov.f32 	%f4, %f732;\n"
    "	mov.f32 	%f733, %f6;\n"
    "	mad.f32 	%f734, %f44, %f78, %f733;\n"
    "	mov.f32 	%f6, %f734;\n"
    "$Lt_9_19714:\n"
    "	ld.shared.s32 	%r40, [%rd14+220];\n"
    "	add.s32 	%r27, %r40, %r6;\n"
    "	ld.shared.f32 	%f735, [%rd15+208];\n"
    "	sub.f32 	%f736, %f19, %f735;\n"
    "	mov.f32 	%f737, %f736;\n"
    "	mul.f32 	%f738, %f14, %f737;\n"
    "	cvt.rni.f32.f32 	%f739, %f738;\n"
    "	mul.f32 	%f740, %f13, %f739;\n"
    "	sub.f32 	%f26, %f736, %f740;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f741, 0f00000000;   	// 0\n"
    "	mad.f32 	%f742, %f26, %f26, %f741;\n"
    "	ld.shared.f32 	%f743, [%rd15+212];\n"
    "	sub.f32 	%f744, %f18, %f743;\n"
    "	mov.f32 	%f745, %f744;\n"
    "	mul.f32 	%f746, %f14, %f745;\n"
    "	cvt.rni.f32.f32 	%f747, %f746;\n"
    "	mul.f32 	%f748, %f13, %f747;\n"
    "	sub.f32 	%f36, %f744, %f748;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f749, %f36, %f36, %f742;\n"
    "	ld.shared.f32 	%f750, [%rd15+216];\n"
    "	sub.f32 	%f751, %f11, %f750;\n"
    "	mul.f32 	%f752, %f751, %f14;\n"
    "	cvt.rni.f32.f32 	%f753, %f752;\n"
    "	mul.f32 	%f754, %f13, %f753;\n"
    "	sub.f32 	%f44, %f751, %f754;\n"
    "	mad.f32 	%f45, %f44, %f44, %f749;\n"
    "	mov.f32 	%f755, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p15, %f45, %f755;\n"
    "	@!%p15 bra 	$Lt_9_20226;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd43, %r27;\n"
    "	mul.wide.s32 	%rd44, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd44;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f756, [%rd18+12];\n"
    "	mov.f32 	%f757, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f758, %f756, %f757;\n"
    "	mul.f32 	%f759, %f52, %f758;\n"
    "	ld.const.f32 	%f760, [%rd18+4];\n"
    "	sub.f32 	%f761, %f760, %f47;\n"
    "	mul.f32 	%f762, %f50, %f761;\n"
    "	mov.f32 	%f763, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f764, %f762, %f763;\n"
    "	ex2.approx.f32 	%f765, %f764;\n"
    "	ld.const.f32 	%f766, [%rd18+0];\n"
    "	mov.f32 	%f767, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f768, %f766, %f767;\n"
    "	mul.f32 	%f769, %f765, %f768;\n"
    "	mul.f32 	%f770, %f50, %f769;\n"
    "	mul.f32 	%f771, %f48, %f770;\n"
    "	sub.f32 	%f772, %f771, %f759;\n"
    "	ld.const.f32 	%f773, [%rd18+16];\n"
    "	mov.f32 	%f774, 0f41000000;   	// 8\n"
    "	mul.f32 	%f775, %f773, %f774;\n"
    "	mul.f32 	%f776, %f52, %f775;\n"
    "	mul.f32 	%f777, %f49, %f776;\n"
    "	sub.f32 	%f778, %f772, %f777;\n"
    "	ld.const.f32 	%f779, [%rd18+20];\n"
    "	mul.f32 	%f780, %f48, %f49;\n"
    "	mad.f32 	%f78, %f779, %f780, %f778;\n"
    "	mov.f32 	%f781, %f2;\n"
    "	mov.f32 	%f782, %f27;\n"
    "	mad.f32 	%f783, %f782, %f78, %f781;\n"
    "	mov.f32 	%f2, %f783;\n"
    "	mov.f32 	%f784, %f4;\n"
    "	mov.f32 	%f785, %f37;\n"
    "	mad.f32 	%f786, %f785, %f78, %f784;\n"
    "	mov.f32 	%f4, %f786;\n"
    "	mov.f32 	%f787, %f6;\n"
    "	mad.f32 	%f788, %f44, %f78, %f787;\n"
    "	mov.f32 	%f6, %f788;\n"
    "$Lt_9_20226:\n"
    "	ld.shared.s32 	%r41, [%rd14+236];\n"
    "	add.s32 	%r27, %r41, %r6;\n"
    "	ld.shared.f32 	%f789, [%rd15+224];\n"
    "	sub.f32 	%f790, %f19, %f789;\n"
    "	mov.f32 	%f791, %f790;\n"
    "	mul.f32 	%f792, %f14, %f791;\n"
    "	cvt.rni.f32.f32 	%f793, %f792;\n"
    "	mul.f32 	%f794, %f13, %f793;\n"
    "	sub.f32 	%f26, %f790, %f794;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f795, 0f00000000;   	// 0\n"
    "	mad.f32 	%f796, %f26, %f26, %f795;\n"
    "	ld.shared.f32 	%f797, [%rd15+228];\n"
    "	sub.f32 	%f798, %f18, %f797;\n"
    "	mov.f32 	%f799, %f798;\n"
    "	mul.f32 	%f800, %f14, %f799;\n"
    "	cvt.rni.f32.f32 	%f801, %f800;\n"
    "	mul.f32 	%f802, %f13, %f801;\n"
    "	sub.f32 	%f36, %f798, %f802;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f803, %f36, %f36, %f796;\n"
    "	ld.shared.f32 	%f804, [%rd15+232];\n"
    "	sub.f32 	%f805, %f11, %f804;\n"
    "	mul.f32 	%f806, %f805, %f14;\n"
    "	cvt.rni.f32.f32 	%f807, %f806;\n"
    "	mul.f32 	%f808, %f13, %f807;\n"
    "	sub.f32 	%f44, %f805, %f808;\n"
    "	mad.f32 	%f45, %f44, %f44, %f803;\n"
    "	mov.f32 	%f809, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p16, %f45, %f809;\n"
    "	@!%p16 bra 	$Lt_9_20738;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd45, %r27;\n"
    "	mul.wide.s32 	%rd46, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd46;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f810, [%rd18+12];\n"
    "	mov.f32 	%f811, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f812, %f810, %f811;\n"
    "	mul.f32 	%f813, %f52, %f812;\n"
    "	ld.const.f32 	%f814, [%rd18+4];\n"
    "	sub.f32 	%f815, %f814, %f47;\n"
    "	mul.f32 	%f816, %f50, %f815;\n"
    "	mov.f32 	%f817, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f818, %f816, %f817;\n"
    "	ex2.approx.f32 	%f819, %f818;\n"
    "	ld.const.f32 	%f820, [%rd18+0];\n"
    "	mov.f32 	%f821, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f822, %f820, %f821;\n"
    "	mul.f32 	%f823, %f819, %f822;\n"
    "	mul.f32 	%f824, %f50, %f823;\n"
    "	mul.f32 	%f825, %f48, %f824;\n"
    "	sub.f32 	%f826, %f825, %f813;\n"
    "	ld.const.f32 	%f827, [%rd18+16];\n"
    "	mov.f32 	%f828, 0f41000000;   	// 8\n"
    "	mul.f32 	%f829, %f827, %f828;\n"
    "	mul.f32 	%f830, %f52, %f829;\n"
    "	mul.f32 	%f831, %f49, %f830;\n"
    "	sub.f32 	%f832, %f826, %f831;\n"
    "	ld.const.f32 	%f833, [%rd18+20];\n"
    "	mul.f32 	%f834, %f48, %f49;\n"
    "	mad.f32 	%f78, %f833, %f834, %f832;\n"
    "	mov.f32 	%f835, %f2;\n"
    "	mov.f32 	%f836, %f27;\n"
    "	mad.f32 	%f837, %f836, %f78, %f835;\n"
    "	mov.f32 	%f2, %f837;\n"
    "	mov.f32 	%f838, %f4;\n"
    "	mov.f32 	%f839, %f37;\n"
    "	mad.f32 	%f840, %f839, %f78, %f838;\n"
    "	mov.f32 	%f4, %f840;\n"
    "	mov.f32 	%f841, %f6;\n"
    "	mad.f32 	%f842, %f44, %f78, %f841;\n"
    "	mov.f32 	%f6, %f842;\n"
    "$Lt_9_20738:\n"
    "	ld.shared.s32 	%r42, [%rd14+252];\n"
    "	add.s32 	%r27, %r42, %r6;\n"
    "	ld.shared.f32 	%f843, [%rd15+240];\n"
    "	sub.f32 	%f844, %f19, %f843;\n"
    "	mov.f32 	%f845, %f844;\n"
    "	mul.f32 	%f846, %f14, %f845;\n"
    "	cvt.rni.f32.f32 	%f847, %f846;\n"
    "	mul.f32 	%f848, %f13, %f847;\n"
    "	sub.f32 	%f26, %f844, %f848;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f849, 0f00000000;   	// 0\n"
    "	mad.f32 	%f850, %f26, %f26, %f849;\n"
    "	ld.shared.f32 	%f851, [%rd15+244];\n"
    "	sub.f32 	%f852, %f18, %f851;\n"
    "	mov.f32 	%f853, %f852;\n"
    "	mul.f32 	%f854, %f14, %f853;\n"
    "	cvt.rni.f32.f32 	%f855, %f854;\n"
    "	mul.f32 	%f856, %f13, %f855;\n"
    "	sub.f32 	%f36, %f852, %f856;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f857, %f36, %f36, %f850;\n"
    "	ld.shared.f32 	%f858, [%rd15+248];\n"
    "	sub.f32 	%f859, %f11, %f858;\n"
    "	mul.f32 	%f860, %f859, %f14;\n"
    "	cvt.rni.f32.f32 	%f861, %f860;\n"
    "	mul.f32 	%f862, %f13, %f861;\n"
    "	sub.f32 	%f44, %f859, %f862;\n"
    "	mad.f32 	%f45, %f44, %f44, %f857;\n"
    "	mov.f32 	%f863, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p17, %f45, %f863;\n"
    "	@!%p17 bra 	$Lt_9_21250;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd47, %r27;\n"
    "	mul.wide.s32 	%rd48, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd48;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f864, [%rd18+12];\n"
    "	mov.f32 	%f865, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f866, %f864, %f865;\n"
    "	mul.f32 	%f867, %f52, %f866;\n"
    "	ld.const.f32 	%f868, [%rd18+4];\n"
    "	sub.f32 	%f869, %f868, %f47;\n"
    "	mul.f32 	%f870, %f50, %f869;\n"
    "	mov.f32 	%f871, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f872, %f870, %f871;\n"
    "	ex2.approx.f32 	%f873, %f872;\n"
    "	ld.const.f32 	%f874, [%rd18+0];\n"
    "	mov.f32 	%f875, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f876, %f874, %f875;\n"
    "	mul.f32 	%f877, %f873, %f876;\n"
    "	mul.f32 	%f878, %f50, %f877;\n"
    "	mul.f32 	%f879, %f48, %f878;\n"
    "	sub.f32 	%f880, %f879, %f867;\n"
    "	ld.const.f32 	%f881, [%rd18+16];\n"
    "	mov.f32 	%f882, 0f41000000;   	// 8\n"
    "	mul.f32 	%f883, %f881, %f882;\n"
    "	mul.f32 	%f884, %f52, %f883;\n"
    "	mul.f32 	%f885, %f49, %f884;\n"
    "	sub.f32 	%f886, %f880, %f885;\n"
    "	ld.const.f32 	%f887, [%rd18+20];\n"
    "	mul.f32 	%f888, %f48, %f49;\n"
    "	mad.f32 	%f78, %f887, %f888, %f886;\n"
    "	mov.f32 	%f889, %f2;\n"
    "	mov.f32 	%f890, %f27;\n"
    "	mad.f32 	%f891, %f890, %f78, %f889;\n"
    "	mov.f32 	%f2, %f891;\n"
    "	mov.f32 	%f892, %f4;\n"
    "	mov.f32 	%f893, %f37;\n"
    "	mad.f32 	%f894, %f893, %f78, %f892;\n"
    "	mov.f32 	%f4, %f894;\n"
    "	mov.f32 	%f895, %f6;\n"
    "	mad.f32 	%f896, %f44, %f78, %f895;\n"
    "	mov.f32 	%f6, %f896;\n"
    "$Lt_9_21250:\n"
    "	ld.shared.s32 	%r43, [%rd14+268];\n"
    "	add.s32 	%r27, %r43, %r6;\n"
    "	ld.shared.f32 	%f897, [%rd15+256];\n"
    "	sub.f32 	%f898, %f19, %f897;\n"
    "	mov.f32 	%f899, %f898;\n"
    "	mul.f32 	%f900, %f14, %f899;\n"
    "	cvt.rni.f32.f32 	%f901, %f900;\n"
    "	mul.f32 	%f902, %f13, %f901;\n"
    "	sub.f32 	%f26, %f898, %f902;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f903, 0f00000000;   	// 0\n"
    "	mad.f32 	%f904, %f26, %f26, %f903;\n"
    "	ld.shared.f32 	%f905, [%rd15+260];\n"
    "	sub.f32 	%f906, %f18, %f905;\n"
    "	mov.f32 	%f907, %f906;\n"
    "	mul.f32 	%f908, %f14, %f907;\n"
    "	cvt.rni.f32.f32 	%f909, %f908;\n"
    "	mul.f32 	%f910, %f13, %f909;\n"
    "	sub.f32 	%f36, %f906, %f910;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f911, %f36, %f36, %f904;\n"
    "	ld.shared.f32 	%f912, [%rd15+264];\n"
    "	sub.f32 	%f913, %f11, %f912;\n"
    "	mul.f32 	%f914, %f913, %f14;\n"
    "	cvt.rni.f32.f32 	%f915, %f914;\n"
    "	mul.f32 	%f916, %f13, %f915;\n"
    "	sub.f32 	%f44, %f913, %f916;\n"
    "	mad.f32 	%f45, %f44, %f44, %f911;\n"
    "	mov.f32 	%f917, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p18, %f45, %f917;\n"
    "	@!%p18 bra 	$Lt_9_21762;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd49, %r27;\n"
    "	mul.wide.s32 	%rd50, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd50;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f918, [%rd18+12];\n"
    "	mov.f32 	%f919, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f920, %f918, %f919;\n"
    "	mul.f32 	%f921, %f52, %f920;\n"
    "	ld.const.f32 	%f922, [%rd18+4];\n"
    "	sub.f32 	%f923, %f922, %f47;\n"
    "	mul.f32 	%f924, %f50, %f923;\n"
    "	mov.f32 	%f925, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f926, %f924, %f925;\n"
    "	ex2.approx.f32 	%f927, %f926;\n"
    "	ld.const.f32 	%f928, [%rd18+0];\n"
    "	mov.f32 	%f929, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f930, %f928, %f929;\n"
    "	mul.f32 	%f931, %f927, %f930;\n"
    "	mul.f32 	%f932, %f50, %f931;\n"
    "	mul.f32 	%f933, %f48, %f932;\n"
    "	sub.f32 	%f934, %f933, %f921;\n"
    "	ld.const.f32 	%f935, [%rd18+16];\n"
    "	mov.f32 	%f936, 0f41000000;   	// 8\n"
    "	mul.f32 	%f937, %f935, %f936;\n"
    "	mul.f32 	%f938, %f52, %f937;\n"
    "	mul.f32 	%f939, %f49, %f938;\n"
    "	sub.f32 	%f940, %f934, %f939;\n"
    "	ld.const.f32 	%f941, [%rd18+20];\n"
    "	mul.f32 	%f942, %f48, %f49;\n"
    "	mad.f32 	%f78, %f941, %f942, %f940;\n"
    "	mov.f32 	%f943, %f2;\n"
    "	mov.f32 	%f944, %f27;\n"
    "	mad.f32 	%f945, %f944, %f78, %f943;\n"
    "	mov.f32 	%f2, %f945;\n"
    "	mov.f32 	%f946, %f4;\n"
    "	mov.f32 	%f947, %f37;\n"
    "	mad.f32 	%f948, %f947, %f78, %f946;\n"
    "	mov.f32 	%f4, %f948;\n"
    "	mov.f32 	%f949, %f6;\n"
    "	mad.f32 	%f950, %f44, %f78, %f949;\n"
    "	mov.f32 	%f6, %f950;\n"
    "$Lt_9_21762:\n"
    "	ld.shared.s32 	%r44, [%rd14+284];\n"
    "	add.s32 	%r27, %r44, %r6;\n"
    "	ld.shared.f32 	%f951, [%rd15+272];\n"
    "	sub.f32 	%f952, %f19, %f951;\n"
    "	mov.f32 	%f953, %f952;\n"
    "	mul.f32 	%f954, %f14, %f953;\n"
    "	cvt.rni.f32.f32 	%f955, %f954;\n"
    "	mul.f32 	%f956, %f13, %f955;\n"
    "	sub.f32 	%f26, %f952, %f956;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f957, 0f00000000;   	// 0\n"
    "	mad.f32 	%f958, %f26, %f26, %f957;\n"
    "	ld.shared.f32 	%f959, [%rd15+276];\n"
    "	sub.f32 	%f960, %f18, %f959;\n"
    "	mov.f32 	%f961, %f960;\n"
    "	mul.f32 	%f962, %f14, %f961;\n"
    "	cvt.rni.f32.f32 	%f963, %f962;\n"
    "	mul.f32 	%f964, %f13, %f963;\n"
    "	sub.f32 	%f36, %f960, %f964;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f965, %f36, %f36, %f958;\n"
    "	ld.shared.f32 	%f966, [%rd15+280];\n"
    "	sub.f32 	%f967, %f11, %f966;\n"
    "	mul.f32 	%f968, %f967, %f14;\n"
    "	cvt.rni.f32.f32 	%f969, %f968;\n"
    "	mul.f32 	%f970, %f13, %f969;\n"
    "	sub.f32 	%f44, %f967, %f970;\n"
    "	mad.f32 	%f45, %f44, %f44, %f965;\n"
    "	mov.f32 	%f971, 0f00000000;   	// 0\n"
    "	setp.neu.f32 	%p19, %f45, %f971;\n"
    "	@!%p19 bra 	$Lt_9_22274;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd51, %r27;\n"
    "	mul.wide.s32 	%rd52, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd52;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f972, [%rd18+12];\n"
    "	mov.f32 	%f973, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f974, %f972, %f973;\n"
    "	mul.f32 	%f975, %f52, %f974;\n"
    "	ld.const.f32 	%f976, [%rd18+4];\n"
    "	sub.f32 	%f977, %f976, %f47;\n"
    "	mul.f32 	%f978, %f50, %f977;\n"
    "	mov.f32 	%f979, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f980, %f978, %f979;\n"
    "	ex2.approx.f32 	%f981, %f980;\n"
    "	ld.const.f32 	%f982, [%rd18+0];\n"
    "	mov.f32 	%f983, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f984, %f982, %f983;\n"
    "	mul.f32 	%f985, %f981, %f984;\n"
    "	mul.f32 	%f986, %f50, %f985;\n"
    "	mul.f32 	%f987, %f48, %f986;\n"
    "	sub.f32 	%f988, %f987, %f975;\n"
    "	ld.const.f32 	%f989, [%rd18+16];\n"
    "	mov.f32 	%f990, 0f41000000;   	// 8\n"
    "	mul.f32 	%f991, %f989, %f990;\n"
    "	mul.f32 	%f992, %f52, %f991;\n"
    "	mul.f32 	%f993, %f49, %f992;\n"
    "	sub.f32 	%f994, %f988, %f993;\n"
    "	ld.const.f32 	%f995, [%rd18+20];\n"
    "	mul.f32 	%f996, %f48, %f49;\n"
    "	mad.f32 	%f78, %f995, %f996, %f994;\n"
    "	mov.f32 	%f997, %f2;\n"
    "	mov.f32 	%f998, %f27;\n"
    "	mad.f32 	%f999, %f998, %f78, %f997;\n"
    "	mov.f32 	%f2, %f999;\n"
    "	mov.f32 	%f1000, %f4;\n"
    "	mov.f32 	%f1001, %f37;\n"
    "	mad.f32 	%f1002, %f1001, %f78, %f1000;\n"
    "	mov.f32 	%f4, %f1002;\n"
    "	mov.f32 	%f1003, %f6;\n"
    "	mad.f32 	%f1004, %f44, %f78, %f1003;\n"
    "	mov.f32 	%f6, %f1004;\n"
    "$Lt_9_22274:\n"
    "	ld.shared.s32 	%r45, [%rd14+300];\n"
    "	add.s32 	%r27, %r45, %r6;\n"
    "	ld.shared.f32 	%f1005, [%rd15+288];\n"
    "	sub.f32 	%f1006, %f19, %f1005;\n"
    "	mov.f32 	%f1007, %f1006;\n"
    "	mul.f32 	%f1008, %f14, %f1007;\n"
    "	cvt.rni.f32.f32 	%f1009, %f1008;\n"
    "	mul.f32 	%f1010, %f13, %f1009;\n"
    "	sub.f32 	%f26, %f1006, %f1010;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1011, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1012, %f26, %f26, %f1011;\n"
    "	ld.shared.f32 	%f1013, [%rd15+292];\n"
    "	sub.f32 	%f1014, %f18, %f1013;\n"
    "	mov.f32 	%f1015, %f1014;\n"
    "	mul.f32 	%f1016, %f14, %f1015;\n"
    "	cvt.rni.f32.f32 	%f1017, %f1016;\n"
    "	mul.f32 	%f1018, %f13, %f1017;\n"
    "	sub.f32 	%f36, %f1014, %f1018;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1019, %f36, %f36, %f1012;\n"
    "	ld.shared.f32 	%f1020, [%rd15+296];\n"
    "	sub.f32 	%f1021, %f11, %f1020;\n"
    "	mul.f32 	%f1022, %f1021, %f14;\n"
    "	cvt.rni.f32.f32 	%f1023, %f1022;\n"
    "	mul.f32 	%f1024, %f13, %f1023;\n"
    "	sub.f32 	%f44, %f1021, %f1024;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1019;\n"
    "	mov.f32 	%f1025, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p20, %f45, %f1025;\n"
    "	@!%p20 bra 	$Lt_9_22786;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd53, %r27;\n"
    "	mul.wide.s32 	%rd54, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd54;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1026, [%rd18+12];\n"
    "	mov.f32 	%f1027, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1028, %f1026, %f1027;\n"
    "	mul.f32 	%f1029, %f52, %f1028;\n"
    "	ld.const.f32 	%f1030, [%rd18+4];\n"
    "	sub.f32 	%f1031, %f1030, %f47;\n"
    "	mul.f32 	%f1032, %f50, %f1031;\n"
    "	mov.f32 	%f1033, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1034, %f1032, %f1033;\n"
    "	ex2.approx.f32 	%f1035, %f1034;\n"
    "	ld.const.f32 	%f1036, [%rd18+0];\n"
    "	mov.f32 	%f1037, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1038, %f1036, %f1037;\n"
    "	mul.f32 	%f1039, %f1035, %f1038;\n"
    "	mul.f32 	%f1040, %f50, %f1039;\n"
    "	mul.f32 	%f1041, %f48, %f1040;\n"
    "	sub.f32 	%f1042, %f1041, %f1029;\n"
    "	ld.const.f32 	%f1043, [%rd18+16];\n"
    "	mov.f32 	%f1044, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1045, %f1043, %f1044;\n"
    "	mul.f32 	%f1046, %f52, %f1045;\n"
    "	mul.f32 	%f1047, %f49, %f1046;\n"
    "	sub.f32 	%f1048, %f1042, %f1047;\n"
    "	ld.const.f32 	%f1049, [%rd18+20];\n"
    "	mul.f32 	%f1050, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1049, %f1050, %f1048;\n"
    "	mov.f32 	%f1051, %f2;\n"
    "	mov.f32 	%f1052, %f27;\n"
    "	mad.f32 	%f1053, %f1052, %f78, %f1051;\n"
    "	mov.f32 	%f2, %f1053;\n"
    "	mov.f32 	%f1054, %f4;\n"
    "	mov.f32 	%f1055, %f37;\n"
    "	mad.f32 	%f1056, %f1055, %f78, %f1054;\n"
    "	mov.f32 	%f4, %f1056;\n"
    "	mov.f32 	%f1057, %f6;\n"
    "	mad.f32 	%f1058, %f44, %f78, %f1057;\n"
    "	mov.f32 	%f6, %f1058;\n"
    "$Lt_9_22786:\n"
    "	ld.shared.s32 	%r46, [%rd14+316];\n"
    "	add.s32 	%r27, %r46, %r6;\n"
    "	ld.shared.f32 	%f1059, [%rd15+304];\n"
    "	sub.f32 	%f1060, %f19, %f1059;\n"
    "	mov.f32 	%f1061, %f1060;\n"
    "	mul.f32 	%f1062, %f14, %f1061;\n"
    "	cvt.rni.f32.f32 	%f1063, %f1062;\n"
    "	mul.f32 	%f1064, %f13, %f1063;\n"
    "	sub.f32 	%f26, %f1060, %f1064;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1065, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1066, %f26, %f26, %f1065;\n"
    "	ld.shared.f32 	%f1067, [%rd15+308];\n"
    "	sub.f32 	%f1068, %f18, %f1067;\n"
    "	mov.f32 	%f1069, %f1068;\n"
    "	mul.f32 	%f1070, %f14, %f1069;\n"
    "	cvt.rni.f32.f32 	%f1071, %f1070;\n"
    "	mul.f32 	%f1072, %f13, %f1071;\n"
    "	sub.f32 	%f36, %f1068, %f1072;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1073, %f36, %f36, %f1066;\n"
    "	ld.shared.f32 	%f1074, [%rd15+312];\n"
    "	sub.f32 	%f1075, %f11, %f1074;\n"
    "	mul.f32 	%f1076, %f1075, %f14;\n"
    "	cvt.rni.f32.f32 	%f1077, %f1076;\n"
    "	mul.f32 	%f1078, %f13, %f1077;\n"
    "	sub.f32 	%f44, %f1075, %f1078;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1073;\n"
    "	mov.f32 	%f1079, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p21, %f45, %f1079;\n"
    "	@!%p21 bra 	$Lt_9_23298;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd55, %r27;\n"
    "	mul.wide.s32 	%rd56, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd56;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1080, [%rd18+12];\n"
    "	mov.f32 	%f1081, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1082, %f1080, %f1081;\n"
    "	mul.f32 	%f1083, %f52, %f1082;\n"
    "	ld.const.f32 	%f1084, [%rd18+4];\n"
    "	sub.f32 	%f1085, %f1084, %f47;\n"
    "	mul.f32 	%f1086, %f50, %f1085;\n"
    "	mov.f32 	%f1087, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1088, %f1086, %f1087;\n"
    "	ex2.approx.f32 	%f1089, %f1088;\n"
    "	ld.const.f32 	%f1090, [%rd18+0];\n"
    "	mov.f32 	%f1091, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1092, %f1090, %f1091;\n"
    "	mul.f32 	%f1093, %f1089, %f1092;\n"
    "	mul.f32 	%f1094, %f50, %f1093;\n"
    "	mul.f32 	%f1095, %f48, %f1094;\n"
    "	sub.f32 	%f1096, %f1095, %f1083;\n"
    "	ld.const.f32 	%f1097, [%rd18+16];\n"
    "	mov.f32 	%f1098, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1099, %f1097, %f1098;\n"
    "	mul.f32 	%f1100, %f52, %f1099;\n"
    "	mul.f32 	%f1101, %f49, %f1100;\n"
    "	sub.f32 	%f1102, %f1096, %f1101;\n"
    "	ld.const.f32 	%f1103, [%rd18+20];\n"
    "	mul.f32 	%f1104, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1103, %f1104, %f1102;\n"
    "	mov.f32 	%f1105, %f2;\n"
    "	mov.f32 	%f1106, %f27;\n"
    "	mad.f32 	%f1107, %f1106, %f78, %f1105;\n"
    "	mov.f32 	%f2, %f1107;\n"
    "	mov.f32 	%f1108, %f4;\n"
    "	mov.f32 	%f1109, %f37;\n"
    "	mad.f32 	%f1110, %f1109, %f78, %f1108;\n"
    "	mov.f32 	%f4, %f1110;\n"
    "	mov.f32 	%f1111, %f6;\n"
    "	mad.f32 	%f1112, %f44, %f78, %f1111;\n"
    "	mov.f32 	%f6, %f1112;\n"
    "$Lt_9_23298:\n"
    "	ld.shared.s32 	%r47, [%rd14+332];\n"
    "	add.s32 	%r27, %r47, %r6;\n"
    "	ld.shared.f32 	%f1113, [%rd15+320];\n"
    "	sub.f32 	%f1114, %f19, %f1113;\n"
    "	mov.f32 	%f1115, %f1114;\n"
    "	mul.f32 	%f1116, %f14, %f1115;\n"
    "	cvt.rni.f32.f32 	%f1117, %f1116;\n"
    "	mul.f32 	%f1118, %f13, %f1117;\n"
    "	sub.f32 	%f26, %f1114, %f1118;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1119, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1120, %f26, %f26, %f1119;\n"
    "	ld.shared.f32 	%f1121, [%rd15+324];\n"
    "	sub.f32 	%f1122, %f18, %f1121;\n"
    "	mov.f32 	%f1123, %f1122;\n"
    "	mul.f32 	%f1124, %f14, %f1123;\n"
    "	cvt.rni.f32.f32 	%f1125, %f1124;\n"
    "	mul.f32 	%f1126, %f13, %f1125;\n"
    "	sub.f32 	%f36, %f1122, %f1126;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1127, %f36, %f36, %f1120;\n"
    "	ld.shared.f32 	%f1128, [%rd15+328];\n"
    "	sub.f32 	%f1129, %f11, %f1128;\n"
    "	mul.f32 	%f1130, %f1129, %f14;\n"
    "	cvt.rni.f32.f32 	%f1131, %f1130;\n"
    "	mul.f32 	%f1132, %f13, %f1131;\n"
    "	sub.f32 	%f44, %f1129, %f1132;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1127;\n"
    "	mov.f32 	%f1133, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p22, %f45, %f1133;\n"
    "	@!%p22 bra 	$Lt_9_23810;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd57, %r27;\n"
    "	mul.wide.s32 	%rd58, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd58;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1134, [%rd18+12];\n"
    "	mov.f32 	%f1135, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1136, %f1134, %f1135;\n"
    "	mul.f32 	%f1137, %f52, %f1136;\n"
    "	ld.const.f32 	%f1138, [%rd18+4];\n"
    "	sub.f32 	%f1139, %f1138, %f47;\n"
    "	mul.f32 	%f1140, %f50, %f1139;\n"
    "	mov.f32 	%f1141, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1142, %f1140, %f1141;\n"
    "	ex2.approx.f32 	%f1143, %f1142;\n"
    "	ld.const.f32 	%f1144, [%rd18+0];\n"
    "	mov.f32 	%f1145, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1146, %f1144, %f1145;\n"
    "	mul.f32 	%f1147, %f1143, %f1146;\n"
    "	mul.f32 	%f1148, %f50, %f1147;\n"
    "	mul.f32 	%f1149, %f48, %f1148;\n"
    "	sub.f32 	%f1150, %f1149, %f1137;\n"
    "	ld.const.f32 	%f1151, [%rd18+16];\n"
    "	mov.f32 	%f1152, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1153, %f1151, %f1152;\n"
    "	mul.f32 	%f1154, %f52, %f1153;\n"
    "	mul.f32 	%f1155, %f49, %f1154;\n"
    "	sub.f32 	%f1156, %f1150, %f1155;\n"
    "	ld.const.f32 	%f1157, [%rd18+20];\n"
    "	mul.f32 	%f1158, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1157, %f1158, %f1156;\n"
    "	mov.f32 	%f1159, %f2;\n"
    "	mov.f32 	%f1160, %f27;\n"
    "	mad.f32 	%f1161, %f1160, %f78, %f1159;\n"
    "	mov.f32 	%f2, %f1161;\n"
    "	mov.f32 	%f1162, %f4;\n"
    "	mov.f32 	%f1163, %f37;\n"
    "	mad.f32 	%f1164, %f1163, %f78, %f1162;\n"
    "	mov.f32 	%f4, %f1164;\n"
    "	mov.f32 	%f1165, %f6;\n"
    "	mad.f32 	%f1166, %f44, %f78, %f1165;\n"
    "	mov.f32 	%f6, %f1166;\n"
    "$Lt_9_23810:\n"
    "	ld.shared.s32 	%r48, [%rd14+348];\n"
    "	add.s32 	%r27, %r48, %r6;\n"
    "	ld.shared.f32 	%f1167, [%rd15+336];\n"
    "	sub.f32 	%f1168, %f19, %f1167;\n"
    "	mov.f32 	%f1169, %f1168;\n"
    "	mul.f32 	%f1170, %f14, %f1169;\n"
    "	cvt.rni.f32.f32 	%f1171, %f1170;\n"
    "	mul.f32 	%f1172, %f13, %f1171;\n"
    "	sub.f32 	%f26, %f1168, %f1172;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1173, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1174, %f26, %f26, %f1173;\n"
    "	ld.shared.f32 	%f1175, [%rd15+340];\n"
    "	sub.f32 	%f1176, %f18, %f1175;\n"
    "	mov.f32 	%f1177, %f1176;\n"
    "	mul.f32 	%f1178, %f14, %f1177;\n"
    "	cvt.rni.f32.f32 	%f1179, %f1178;\n"
    "	mul.f32 	%f1180, %f13, %f1179;\n"
    "	sub.f32 	%f36, %f1176, %f1180;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1181, %f36, %f36, %f1174;\n"
    "	ld.shared.f32 	%f1182, [%rd15+344];\n"
    "	sub.f32 	%f1183, %f11, %f1182;\n"
    "	mul.f32 	%f1184, %f1183, %f14;\n"
    "	cvt.rni.f32.f32 	%f1185, %f1184;\n"
    "	mul.f32 	%f1186, %f13, %f1185;\n"
    "	sub.f32 	%f44, %f1183, %f1186;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1181;\n"
    "	mov.f32 	%f1187, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p23, %f45, %f1187;\n"
    "	@!%p23 bra 	$Lt_9_24322;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd59, %r27;\n"
    "	mul.wide.s32 	%rd60, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd60;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1188, [%rd18+12];\n"
    "	mov.f32 	%f1189, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1190, %f1188, %f1189;\n"
    "	mul.f32 	%f1191, %f52, %f1190;\n"
    "	ld.const.f32 	%f1192, [%rd18+4];\n"
    "	sub.f32 	%f1193, %f1192, %f47;\n"
    "	mul.f32 	%f1194, %f50, %f1193;\n"
    "	mov.f32 	%f1195, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1196, %f1194, %f1195;\n"
    "	ex2.approx.f32 	%f1197, %f1196;\n"
    "	ld.const.f32 	%f1198, [%rd18+0];\n"
    "	mov.f32 	%f1199, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1200, %f1198, %f1199;\n"
    "	mul.f32 	%f1201, %f1197, %f1200;\n"
    "	mul.f32 	%f1202, %f50, %f1201;\n"
    "	mul.f32 	%f1203, %f48, %f1202;\n"
    "	sub.f32 	%f1204, %f1203, %f1191;\n"
    "	ld.const.f32 	%f1205, [%rd18+16];\n"
    "	mov.f32 	%f1206, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1207, %f1205, %f1206;\n"
    "	mul.f32 	%f1208, %f52, %f1207;\n"
    "	mul.f32 	%f1209, %f49, %f1208;\n"
    "	sub.f32 	%f1210, %f1204, %f1209;\n"
    "	ld.const.f32 	%f1211, [%rd18+20];\n"
    "	mul.f32 	%f1212, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1211, %f1212, %f1210;\n"
    "	mov.f32 	%f1213, %f2;\n"
    "	mov.f32 	%f1214, %f27;\n"
    "	mad.f32 	%f1215, %f1214, %f78, %f1213;\n"
    "	mov.f32 	%f2, %f1215;\n"
    "	mov.f32 	%f1216, %f4;\n"
    "	mov.f32 	%f1217, %f37;\n"
    "	mad.f32 	%f1218, %f1217, %f78, %f1216;\n"
    "	mov.f32 	%f4, %f1218;\n"
    "	mov.f32 	%f1219, %f6;\n"
    "	mad.f32 	%f1220, %f44, %f78, %f1219;\n"
    "	mov.f32 	%f6, %f1220;\n"
    "$Lt_9_24322:\n"
    "	ld.shared.s32 	%r49, [%rd14+364];\n"
    "	add.s32 	%r27, %r49, %r6;\n"
    "	ld.shared.f32 	%f1221, [%rd15+352];\n"
    "	sub.f32 	%f1222, %f19, %f1221;\n"
    "	mov.f32 	%f1223, %f1222;\n"
    "	mul.f32 	%f1224, %f14, %f1223;\n"
    "	cvt.rni.f32.f32 	%f1225, %f1224;\n"
    "	mul.f32 	%f1226, %f13, %f1225;\n"
    "	sub.f32 	%f26, %f1222, %f1226;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1227, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1228, %f26, %f26, %f1227;\n"
    "	ld.shared.f32 	%f1229, [%rd15+356];\n"
    "	sub.f32 	%f1230, %f18, %f1229;\n"
    "	mov.f32 	%f1231, %f1230;\n"
    "	mul.f32 	%f1232, %f14, %f1231;\n"
    "	cvt.rni.f32.f32 	%f1233, %f1232;\n"
    "	mul.f32 	%f1234, %f13, %f1233;\n"
    "	sub.f32 	%f36, %f1230, %f1234;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1235, %f36, %f36, %f1228;\n"
    "	ld.shared.f32 	%f1236, [%rd15+360];\n"
    "	sub.f32 	%f1237, %f11, %f1236;\n"
    "	mul.f32 	%f1238, %f1237, %f14;\n"
    "	cvt.rni.f32.f32 	%f1239, %f1238;\n"
    "	mul.f32 	%f1240, %f13, %f1239;\n"
    "	sub.f32 	%f44, %f1237, %f1240;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1235;\n"
    "	mov.f32 	%f1241, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p24, %f45, %f1241;\n"
    "	@!%p24 bra 	$Lt_9_24834;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd61, %r27;\n"
    "	mul.wide.s32 	%rd62, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd62;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1242, [%rd18+12];\n"
    "	mov.f32 	%f1243, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1244, %f1242, %f1243;\n"
    "	mul.f32 	%f1245, %f52, %f1244;\n"
    "	ld.const.f32 	%f1246, [%rd18+4];\n"
    "	sub.f32 	%f1247, %f1246, %f47;\n"
    "	mul.f32 	%f1248, %f50, %f1247;\n"
    "	mov.f32 	%f1249, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1250, %f1248, %f1249;\n"
    "	ex2.approx.f32 	%f1251, %f1250;\n"
    "	ld.const.f32 	%f1252, [%rd18+0];\n"
    "	mov.f32 	%f1253, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1254, %f1252, %f1253;\n"
    "	mul.f32 	%f1255, %f1251, %f1254;\n"
    "	mul.f32 	%f1256, %f50, %f1255;\n"
    "	mul.f32 	%f1257, %f48, %f1256;\n"
    "	sub.f32 	%f1258, %f1257, %f1245;\n"
    "	ld.const.f32 	%f1259, [%rd18+16];\n"
    "	mov.f32 	%f1260, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1261, %f1259, %f1260;\n"
    "	mul.f32 	%f1262, %f52, %f1261;\n"
    "	mul.f32 	%f1263, %f49, %f1262;\n"
    "	sub.f32 	%f1264, %f1258, %f1263;\n"
    "	ld.const.f32 	%f1265, [%rd18+20];\n"
    "	mul.f32 	%f1266, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1265, %f1266, %f1264;\n"
    "	mov.f32 	%f1267, %f2;\n"
    "	mov.f32 	%f1268, %f27;\n"
    "	mad.f32 	%f1269, %f1268, %f78, %f1267;\n"
    "	mov.f32 	%f2, %f1269;\n"
    "	mov.f32 	%f1270, %f4;\n"
    "	mov.f32 	%f1271, %f37;\n"
    "	mad.f32 	%f1272, %f1271, %f78, %f1270;\n"
    "	mov.f32 	%f4, %f1272;\n"
    "	mov.f32 	%f1273, %f6;\n"
    "	mad.f32 	%f1274, %f44, %f78, %f1273;\n"
    "	mov.f32 	%f6, %f1274;\n"
    "$Lt_9_24834:\n"
    "	ld.shared.s32 	%r50, [%rd14+380];\n"
    "	add.s32 	%r27, %r50, %r6;\n"
    "	ld.shared.f32 	%f1275, [%rd15+368];\n"
    "	sub.f32 	%f1276, %f19, %f1275;\n"
    "	mov.f32 	%f1277, %f1276;\n"
    "	mul.f32 	%f1278, %f14, %f1277;\n"
    "	cvt.rni.f32.f32 	%f1279, %f1278;\n"
    "	mul.f32 	%f1280, %f13, %f1279;\n"
    "	sub.f32 	%f26, %f1276, %f1280;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1281, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1282, %f26, %f26, %f1281;\n"
    "	ld.shared.f32 	%f1283, [%rd15+372];\n"
    "	sub.f32 	%f1284, %f18, %f1283;\n"
    "	mov.f32 	%f1285, %f1284;\n"
    "	mul.f32 	%f1286, %f14, %f1285;\n"
    "	cvt.rni.f32.f32 	%f1287, %f1286;\n"
    "	mul.f32 	%f1288, %f13, %f1287;\n"
    "	sub.f32 	%f36, %f1284, %f1288;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1289, %f36, %f36, %f1282;\n"
    "	ld.shared.f32 	%f1290, [%rd15+376];\n"
    "	sub.f32 	%f1291, %f11, %f1290;\n"
    "	mul.f32 	%f1292, %f1291, %f14;\n"
    "	cvt.rni.f32.f32 	%f1293, %f1292;\n"
    "	mul.f32 	%f1294, %f13, %f1293;\n"
    "	sub.f32 	%f44, %f1291, %f1294;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1289;\n"
    "	mov.f32 	%f1295, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p25, %f45, %f1295;\n"
    "	@!%p25 bra 	$Lt_9_25346;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd63, %r27;\n"
    "	mul.wide.s32 	%rd64, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd64;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1296, [%rd18+12];\n"
    "	mov.f32 	%f1297, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1298, %f1296, %f1297;\n"
    "	mul.f32 	%f1299, %f52, %f1298;\n"
    "	ld.const.f32 	%f1300, [%rd18+4];\n"
    "	sub.f32 	%f1301, %f1300, %f47;\n"
    "	mul.f32 	%f1302, %f50, %f1301;\n"
    "	mov.f32 	%f1303, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1304, %f1302, %f1303;\n"
    "	ex2.approx.f32 	%f1305, %f1304;\n"
    "	ld.const.f32 	%f1306, [%rd18+0];\n"
    "	mov.f32 	%f1307, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1308, %f1306, %f1307;\n"
    "	mul.f32 	%f1309, %f1305, %f1308;\n"
    "	mul.f32 	%f1310, %f50, %f1309;\n"
    "	mul.f32 	%f1311, %f48, %f1310;\n"
    "	sub.f32 	%f1312, %f1311, %f1299;\n"
    "	ld.const.f32 	%f1313, [%rd18+16];\n"
    "	mov.f32 	%f1314, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1315, %f1313, %f1314;\n"
    "	mul.f32 	%f1316, %f52, %f1315;\n"
    "	mul.f32 	%f1317, %f49, %f1316;\n"
    "	sub.f32 	%f1318, %f1312, %f1317;\n"
    "	ld.const.f32 	%f1319, [%rd18+20];\n"
    "	mul.f32 	%f1320, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1319, %f1320, %f1318;\n"
    "	mov.f32 	%f1321, %f2;\n"
    "	mov.f32 	%f1322, %f27;\n"
    "	mad.f32 	%f1323, %f1322, %f78, %f1321;\n"
    "	mov.f32 	%f2, %f1323;\n"
    "	mov.f32 	%f1324, %f4;\n"
    "	mov.f32 	%f1325, %f37;\n"
    "	mad.f32 	%f1326, %f1325, %f78, %f1324;\n"
    "	mov.f32 	%f4, %f1326;\n"
    "	mov.f32 	%f1327, %f6;\n"
    "	mad.f32 	%f1328, %f44, %f78, %f1327;\n"
    "	mov.f32 	%f6, %f1328;\n"
    "$Lt_9_25346:\n"
    "	ld.shared.s32 	%r51, [%rd14+396];\n"
    "	add.s32 	%r27, %r51, %r6;\n"
    "	ld.shared.f32 	%f1329, [%rd15+384];\n"
    "	sub.f32 	%f1330, %f19, %f1329;\n"
    "	mov.f32 	%f1331, %f1330;\n"
    "	mul.f32 	%f1332, %f14, %f1331;\n"
    "	cvt.rni.f32.f32 	%f1333, %f1332;\n"
    "	mul.f32 	%f1334, %f13, %f1333;\n"
    "	sub.f32 	%f26, %f1330, %f1334;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1335, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1336, %f26, %f26, %f1335;\n"
    "	ld.shared.f32 	%f1337, [%rd15+388];\n"
    "	sub.f32 	%f1338, %f18, %f1337;\n"
    "	mov.f32 	%f1339, %f1338;\n"
    "	mul.f32 	%f1340, %f14, %f1339;\n"
    "	cvt.rni.f32.f32 	%f1341, %f1340;\n"
    "	mul.f32 	%f1342, %f13, %f1341;\n"
    "	sub.f32 	%f36, %f1338, %f1342;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1343, %f36, %f36, %f1336;\n"
    "	ld.shared.f32 	%f1344, [%rd15+392];\n"
    "	sub.f32 	%f1345, %f11, %f1344;\n"
    "	mul.f32 	%f1346, %f1345, %f14;\n"
    "	cvt.rni.f32.f32 	%f1347, %f1346;\n"
    "	mul.f32 	%f1348, %f13, %f1347;\n"
    "	sub.f32 	%f44, %f1345, %f1348;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1343;\n"
    "	mov.f32 	%f1349, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p26, %f45, %f1349;\n"
    "	@!%p26 bra 	$Lt_9_25858;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd65, %r27;\n"
    "	mul.wide.s32 	%rd66, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd66;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1350, [%rd18+12];\n"
    "	mov.f32 	%f1351, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1352, %f1350, %f1351;\n"
    "	mul.f32 	%f1353, %f52, %f1352;\n"
    "	ld.const.f32 	%f1354, [%rd18+4];\n"
    "	sub.f32 	%f1355, %f1354, %f47;\n"
    "	mul.f32 	%f1356, %f50, %f1355;\n"
    "	mov.f32 	%f1357, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1358, %f1356, %f1357;\n"
    "	ex2.approx.f32 	%f1359, %f1358;\n"
    "	ld.const.f32 	%f1360, [%rd18+0];\n"
    "	mov.f32 	%f1361, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1362, %f1360, %f1361;\n"
    "	mul.f32 	%f1363, %f1359, %f1362;\n"
    "	mul.f32 	%f1364, %f50, %f1363;\n"
    "	mul.f32 	%f1365, %f48, %f1364;\n"
    "	sub.f32 	%f1366, %f1365, %f1353;\n"
    "	ld.const.f32 	%f1367, [%rd18+16];\n"
    "	mov.f32 	%f1368, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1369, %f1367, %f1368;\n"
    "	mul.f32 	%f1370, %f52, %f1369;\n"
    "	mul.f32 	%f1371, %f49, %f1370;\n"
    "	sub.f32 	%f1372, %f1366, %f1371;\n"
    "	ld.const.f32 	%f1373, [%rd18+20];\n"
    "	mul.f32 	%f1374, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1373, %f1374, %f1372;\n"
    "	mov.f32 	%f1375, %f2;\n"
    "	mov.f32 	%f1376, %f27;\n"
    "	mad.f32 	%f1377, %f1376, %f78, %f1375;\n"
    "	mov.f32 	%f2, %f1377;\n"
    "	mov.f32 	%f1378, %f4;\n"
    "	mov.f32 	%f1379, %f37;\n"
    "	mad.f32 	%f1380, %f1379, %f78, %f1378;\n"
    "	mov.f32 	%f4, %f1380;\n"
    "	mov.f32 	%f1381, %f6;\n"
    "	mad.f32 	%f1382, %f44, %f78, %f1381;\n"
    "	mov.f32 	%f6, %f1382;\n"
    "$Lt_9_25858:\n"
    "	ld.shared.s32 	%r52, [%rd14+412];\n"
    "	add.s32 	%r27, %r52, %r6;\n"
    "	ld.shared.f32 	%f1383, [%rd15+400];\n"
    "	sub.f32 	%f1384, %f19, %f1383;\n"
    "	mov.f32 	%f1385, %f1384;\n"
    "	mul.f32 	%f1386, %f14, %f1385;\n"
    "	cvt.rni.f32.f32 	%f1387, %f1386;\n"
    "	mul.f32 	%f1388, %f13, %f1387;\n"
    "	sub.f32 	%f26, %f1384, %f1388;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1389, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1390, %f26, %f26, %f1389;\n"
    "	ld.shared.f32 	%f1391, [%rd15+404];\n"
    "	sub.f32 	%f1392, %f18, %f1391;\n"
    "	mov.f32 	%f1393, %f1392;\n"
    "	mul.f32 	%f1394, %f14, %f1393;\n"
    "	cvt.rni.f32.f32 	%f1395, %f1394;\n"
    "	mul.f32 	%f1396, %f13, %f1395;\n"
    "	sub.f32 	%f36, %f1392, %f1396;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1397, %f36, %f36, %f1390;\n"
    "	ld.shared.f32 	%f1398, [%rd15+408];\n"
    "	sub.f32 	%f1399, %f11, %f1398;\n"
    "	mul.f32 	%f1400, %f1399, %f14;\n"
    "	cvt.rni.f32.f32 	%f1401, %f1400;\n"
    "	mul.f32 	%f1402, %f13, %f1401;\n"
    "	sub.f32 	%f44, %f1399, %f1402;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1397;\n"
    "	mov.f32 	%f1403, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p27, %f45, %f1403;\n"
    "	@!%p27 bra 	$Lt_9_26370;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd67, %r27;\n"
    "	mul.wide.s32 	%rd68, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd68;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1404, [%rd18+12];\n"
    "	mov.f32 	%f1405, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1406, %f1404, %f1405;\n"
    "	mul.f32 	%f1407, %f52, %f1406;\n"
    "	ld.const.f32 	%f1408, [%rd18+4];\n"
    "	sub.f32 	%f1409, %f1408, %f47;\n"
    "	mul.f32 	%f1410, %f50, %f1409;\n"
    "	mov.f32 	%f1411, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1412, %f1410, %f1411;\n"
    "	ex2.approx.f32 	%f1413, %f1412;\n"
    "	ld.const.f32 	%f1414, [%rd18+0];\n"
    "	mov.f32 	%f1415, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1416, %f1414, %f1415;\n"
    "	mul.f32 	%f1417, %f1413, %f1416;\n"
    "	mul.f32 	%f1418, %f50, %f1417;\n"
    "	mul.f32 	%f1419, %f48, %f1418;\n"
    "	sub.f32 	%f1420, %f1419, %f1407;\n"
    "	ld.const.f32 	%f1421, [%rd18+16];\n"
    "	mov.f32 	%f1422, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1423, %f1421, %f1422;\n"
    "	mul.f32 	%f1424, %f52, %f1423;\n"
    "	mul.f32 	%f1425, %f49, %f1424;\n"
    "	sub.f32 	%f1426, %f1420, %f1425;\n"
    "	ld.const.f32 	%f1427, [%rd18+20];\n"
    "	mul.f32 	%f1428, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1427, %f1428, %f1426;\n"
    "	mov.f32 	%f1429, %f2;\n"
    "	mov.f32 	%f1430, %f27;\n"
    "	mad.f32 	%f1431, %f1430, %f78, %f1429;\n"
    "	mov.f32 	%f2, %f1431;\n"
    "	mov.f32 	%f1432, %f4;\n"
    "	mov.f32 	%f1433, %f37;\n"
    "	mad.f32 	%f1434, %f1433, %f78, %f1432;\n"
    "	mov.f32 	%f4, %f1434;\n"
    "	mov.f32 	%f1435, %f6;\n"
    "	mad.f32 	%f1436, %f44, %f78, %f1435;\n"
    "	mov.f32 	%f6, %f1436;\n"
    "$Lt_9_26370:\n"
    "	ld.shared.s32 	%r53, [%rd14+428];\n"
    "	add.s32 	%r27, %r53, %r6;\n"
    "	ld.shared.f32 	%f1437, [%rd15+416];\n"
    "	sub.f32 	%f1438, %f19, %f1437;\n"
    "	mov.f32 	%f1439, %f1438;\n"
    "	mul.f32 	%f1440, %f14, %f1439;\n"
    "	cvt.rni.f32.f32 	%f1441, %f1440;\n"
    "	mul.f32 	%f1442, %f13, %f1441;\n"
    "	sub.f32 	%f26, %f1438, %f1442;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1443, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1444, %f26, %f26, %f1443;\n"
    "	ld.shared.f32 	%f1445, [%rd15+420];\n"
    "	sub.f32 	%f1446, %f18, %f1445;\n"
    "	mov.f32 	%f1447, %f1446;\n"
    "	mul.f32 	%f1448, %f14, %f1447;\n"
    "	cvt.rni.f32.f32 	%f1449, %f1448;\n"
    "	mul.f32 	%f1450, %f13, %f1449;\n"
    "	sub.f32 	%f36, %f1446, %f1450;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1451, %f36, %f36, %f1444;\n"
    "	ld.shared.f32 	%f1452, [%rd15+424];\n"
    "	sub.f32 	%f1453, %f11, %f1452;\n"
    "	mul.f32 	%f1454, %f1453, %f14;\n"
    "	cvt.rni.f32.f32 	%f1455, %f1454;\n"
    "	mul.f32 	%f1456, %f13, %f1455;\n"
    "	sub.f32 	%f44, %f1453, %f1456;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1451;\n"
    "	mov.f32 	%f1457, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p28, %f45, %f1457;\n"
    "	@!%p28 bra 	$Lt_9_26882;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd69, %r27;\n"
    "	mul.wide.s32 	%rd70, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd70;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1458, [%rd18+12];\n"
    "	mov.f32 	%f1459, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1460, %f1458, %f1459;\n"
    "	mul.f32 	%f1461, %f52, %f1460;\n"
    "	ld.const.f32 	%f1462, [%rd18+4];\n"
    "	sub.f32 	%f1463, %f1462, %f47;\n"
    "	mul.f32 	%f1464, %f50, %f1463;\n"
    "	mov.f32 	%f1465, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1466, %f1464, %f1465;\n"
    "	ex2.approx.f32 	%f1467, %f1466;\n"
    "	ld.const.f32 	%f1468, [%rd18+0];\n"
    "	mov.f32 	%f1469, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1470, %f1468, %f1469;\n"
    "	mul.f32 	%f1471, %f1467, %f1470;\n"
    "	mul.f32 	%f1472, %f50, %f1471;\n"
    "	mul.f32 	%f1473, %f48, %f1472;\n"
    "	sub.f32 	%f1474, %f1473, %f1461;\n"
    "	ld.const.f32 	%f1475, [%rd18+16];\n"
    "	mov.f32 	%f1476, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1477, %f1475, %f1476;\n"
    "	mul.f32 	%f1478, %f52, %f1477;\n"
    "	mul.f32 	%f1479, %f49, %f1478;\n"
    "	sub.f32 	%f1480, %f1474, %f1479;\n"
    "	ld.const.f32 	%f1481, [%rd18+20];\n"
    "	mul.f32 	%f1482, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1481, %f1482, %f1480;\n"
    "	mov.f32 	%f1483, %f2;\n"
    "	mov.f32 	%f1484, %f27;\n"
    "	mad.f32 	%f1485, %f1484, %f78, %f1483;\n"
    "	mov.f32 	%f2, %f1485;\n"
    "	mov.f32 	%f1486, %f4;\n"
    "	mov.f32 	%f1487, %f37;\n"
    "	mad.f32 	%f1488, %f1487, %f78, %f1486;\n"
    "	mov.f32 	%f4, %f1488;\n"
    "	mov.f32 	%f1489, %f6;\n"
    "	mad.f32 	%f1490, %f44, %f78, %f1489;\n"
    "	mov.f32 	%f6, %f1490;\n"
    "$Lt_9_26882:\n"
    "	ld.shared.s32 	%r54, [%rd14+444];\n"
    "	add.s32 	%r27, %r54, %r6;\n"
    "	ld.shared.f32 	%f1491, [%rd15+432];\n"
    "	sub.f32 	%f1492, %f19, %f1491;\n"
    "	mov.f32 	%f1493, %f1492;\n"
    "	mul.f32 	%f1494, %f14, %f1493;\n"
    "	cvt.rni.f32.f32 	%f1495, %f1494;\n"
    "	mul.f32 	%f1496, %f13, %f1495;\n"
    "	sub.f32 	%f26, %f1492, %f1496;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1497, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1498, %f26, %f26, %f1497;\n"
    "	ld.shared.f32 	%f1499, [%rd15+436];\n"
    "	sub.f32 	%f1500, %f18, %f1499;\n"
    "	mov.f32 	%f1501, %f1500;\n"
    "	mul.f32 	%f1502, %f14, %f1501;\n"
    "	cvt.rni.f32.f32 	%f1503, %f1502;\n"
    "	mul.f32 	%f1504, %f13, %f1503;\n"
    "	sub.f32 	%f36, %f1500, %f1504;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1505, %f36, %f36, %f1498;\n"
    "	ld.shared.f32 	%f1506, [%rd15+440];\n"
    "	sub.f32 	%f1507, %f11, %f1506;\n"
    "	mul.f32 	%f1508, %f1507, %f14;\n"
    "	cvt.rni.f32.f32 	%f1509, %f1508;\n"
    "	mul.f32 	%f1510, %f13, %f1509;\n"
    "	sub.f32 	%f44, %f1507, %f1510;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1505;\n"
    "	mov.f32 	%f1511, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p29, %f45, %f1511;\n"
    "	@!%p29 bra 	$Lt_9_27394;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd71, %r27;\n"
    "	mul.wide.s32 	%rd72, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd72;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1512, [%rd18+12];\n"
    "	mov.f32 	%f1513, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1514, %f1512, %f1513;\n"
    "	mul.f32 	%f1515, %f52, %f1514;\n"
    "	ld.const.f32 	%f1516, [%rd18+4];\n"
    "	sub.f32 	%f1517, %f1516, %f47;\n"
    "	mul.f32 	%f1518, %f50, %f1517;\n"
    "	mov.f32 	%f1519, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1520, %f1518, %f1519;\n"
    "	ex2.approx.f32 	%f1521, %f1520;\n"
    "	ld.const.f32 	%f1522, [%rd18+0];\n"
    "	mov.f32 	%f1523, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1524, %f1522, %f1523;\n"
    "	mul.f32 	%f1525, %f1521, %f1524;\n"
    "	mul.f32 	%f1526, %f50, %f1525;\n"
    "	mul.f32 	%f1527, %f48, %f1526;\n"
    "	sub.f32 	%f1528, %f1527, %f1515;\n"
    "	ld.const.f32 	%f1529, [%rd18+16];\n"
    "	mov.f32 	%f1530, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1531, %f1529, %f1530;\n"
    "	mul.f32 	%f1532, %f52, %f1531;\n"
    "	mul.f32 	%f1533, %f49, %f1532;\n"
    "	sub.f32 	%f1534, %f1528, %f1533;\n"
    "	ld.const.f32 	%f1535, [%rd18+20];\n"
    "	mul.f32 	%f1536, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1535, %f1536, %f1534;\n"
    "	mov.f32 	%f1537, %f2;\n"
    "	mov.f32 	%f1538, %f27;\n"
    "	mad.f32 	%f1539, %f1538, %f78, %f1537;\n"
    "	mov.f32 	%f2, %f1539;\n"
    "	mov.f32 	%f1540, %f4;\n"
    "	mov.f32 	%f1541, %f37;\n"
    "	mad.f32 	%f1542, %f1541, %f78, %f1540;\n"
    "	mov.f32 	%f4, %f1542;\n"
    "	mov.f32 	%f1543, %f6;\n"
    "	mad.f32 	%f1544, %f44, %f78, %f1543;\n"
    "	mov.f32 	%f6, %f1544;\n"
    "$Lt_9_27394:\n"
    "	ld.shared.s32 	%r55, [%rd14+460];\n"
    "	add.s32 	%r27, %r55, %r6;\n"
    "	ld.shared.f32 	%f1545, [%rd15+448];\n"
    "	sub.f32 	%f1546, %f19, %f1545;\n"
    "	mov.f32 	%f1547, %f1546;\n"
    "	mul.f32 	%f1548, %f14, %f1547;\n"
    "	cvt.rni.f32.f32 	%f1549, %f1548;\n"
    "	mul.f32 	%f1550, %f13, %f1549;\n"
    "	sub.f32 	%f26, %f1546, %f1550;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1551, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1552, %f26, %f26, %f1551;\n"
    "	ld.shared.f32 	%f1553, [%rd15+452];\n"
    "	sub.f32 	%f1554, %f18, %f1553;\n"
    "	mov.f32 	%f1555, %f1554;\n"
    "	mul.f32 	%f1556, %f14, %f1555;\n"
    "	cvt.rni.f32.f32 	%f1557, %f1556;\n"
    "	mul.f32 	%f1558, %f13, %f1557;\n"
    "	sub.f32 	%f36, %f1554, %f1558;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1559, %f36, %f36, %f1552;\n"
    "	ld.shared.f32 	%f1560, [%rd15+456];\n"
    "	sub.f32 	%f1561, %f11, %f1560;\n"
    "	mul.f32 	%f1562, %f1561, %f14;\n"
    "	cvt.rni.f32.f32 	%f1563, %f1562;\n"
    "	mul.f32 	%f1564, %f13, %f1563;\n"
    "	sub.f32 	%f44, %f1561, %f1564;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1559;\n"
    "	mov.f32 	%f1565, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p30, %f45, %f1565;\n"
    "	@!%p30 bra 	$Lt_9_27906;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd73, %r27;\n"
    "	mul.wide.s32 	%rd74, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd74;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1566, [%rd18+12];\n"
    "	mov.f32 	%f1567, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1568, %f1566, %f1567;\n"
    "	mul.f32 	%f1569, %f52, %f1568;\n"
    "	ld.const.f32 	%f1570, [%rd18+4];\n"
    "	sub.f32 	%f1571, %f1570, %f47;\n"
    "	mul.f32 	%f1572, %f50, %f1571;\n"
    "	mov.f32 	%f1573, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1574, %f1572, %f1573;\n"
    "	ex2.approx.f32 	%f1575, %f1574;\n"
    "	ld.const.f32 	%f1576, [%rd18+0];\n"
    "	mov.f32 	%f1577, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1578, %f1576, %f1577;\n"
    "	mul.f32 	%f1579, %f1575, %f1578;\n"
    "	mul.f32 	%f1580, %f50, %f1579;\n"
    "	mul.f32 	%f1581, %f48, %f1580;\n"
    "	sub.f32 	%f1582, %f1581, %f1569;\n"
    "	ld.const.f32 	%f1583, [%rd18+16];\n"
    "	mov.f32 	%f1584, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1585, %f1583, %f1584;\n"
    "	mul.f32 	%f1586, %f52, %f1585;\n"
    "	mul.f32 	%f1587, %f49, %f1586;\n"
    "	sub.f32 	%f1588, %f1582, %f1587;\n"
    "	ld.const.f32 	%f1589, [%rd18+20];\n"
    "	mul.f32 	%f1590, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1589, %f1590, %f1588;\n"
    "	mov.f32 	%f1591, %f2;\n"
    "	mov.f32 	%f1592, %f27;\n"
    "	mad.f32 	%f1593, %f1592, %f78, %f1591;\n"
    "	mov.f32 	%f2, %f1593;\n"
    "	mov.f32 	%f1594, %f4;\n"
    "	mov.f32 	%f1595, %f37;\n"
    "	mad.f32 	%f1596, %f1595, %f78, %f1594;\n"
    "	mov.f32 	%f4, %f1596;\n"
    "	mov.f32 	%f1597, %f6;\n"
    "	mad.f32 	%f1598, %f44, %f78, %f1597;\n"
    "	mov.f32 	%f6, %f1598;\n"
    "$Lt_9_27906:\n"
    "	ld.shared.s32 	%r56, [%rd14+476];\n"
    "	add.s32 	%r27, %r56, %r6;\n"
    "	ld.shared.f32 	%f1599, [%rd15+464];\n"
    "	sub.f32 	%f1600, %f19, %f1599;\n"
    "	mov.f32 	%f1601, %f1600;\n"
    "	mul.f32 	%f1602, %f14, %f1601;\n"
    "	cvt.rni.f32.f32 	%f1603, %f1602;\n"
    "	mul.f32 	%f1604, %f13, %f1603;\n"
    "	sub.f32 	%f26, %f1600, %f1604;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1605, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1606, %f26, %f26, %f1605;\n"
    "	ld.shared.f32 	%f1607, [%rd15+468];\n"
    "	sub.f32 	%f1608, %f18, %f1607;\n"
    "	mov.f32 	%f1609, %f1608;\n"
    "	mul.f32 	%f1610, %f14, %f1609;\n"
    "	cvt.rni.f32.f32 	%f1611, %f1610;\n"
    "	mul.f32 	%f1612, %f13, %f1611;\n"
    "	sub.f32 	%f36, %f1608, %f1612;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1613, %f36, %f36, %f1606;\n"
    "	ld.shared.f32 	%f1614, [%rd15+472];\n"
    "	sub.f32 	%f1615, %f11, %f1614;\n"
    "	mul.f32 	%f1616, %f1615, %f14;\n"
    "	cvt.rni.f32.f32 	%f1617, %f1616;\n"
    "	mul.f32 	%f1618, %f13, %f1617;\n"
    "	sub.f32 	%f44, %f1615, %f1618;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1613;\n"
    "	mov.f32 	%f1619, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p31, %f45, %f1619;\n"
    "	@!%p31 bra 	$Lt_9_28418;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd75, %r27;\n"
    "	mul.wide.s32 	%rd76, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd76;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1620, [%rd18+12];\n"
    "	mov.f32 	%f1621, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1622, %f1620, %f1621;\n"
    "	mul.f32 	%f1623, %f52, %f1622;\n"
    "	ld.const.f32 	%f1624, [%rd18+4];\n"
    "	sub.f32 	%f1625, %f1624, %f47;\n"
    "	mul.f32 	%f1626, %f50, %f1625;\n"
    "	mov.f32 	%f1627, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1628, %f1626, %f1627;\n"
    "	ex2.approx.f32 	%f1629, %f1628;\n"
    "	ld.const.f32 	%f1630, [%rd18+0];\n"
    "	mov.f32 	%f1631, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1632, %f1630, %f1631;\n"
    "	mul.f32 	%f1633, %f1629, %f1632;\n"
    "	mul.f32 	%f1634, %f50, %f1633;\n"
    "	mul.f32 	%f1635, %f48, %f1634;\n"
    "	sub.f32 	%f1636, %f1635, %f1623;\n"
    "	ld.const.f32 	%f1637, [%rd18+16];\n"
    "	mov.f32 	%f1638, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1639, %f1637, %f1638;\n"
    "	mul.f32 	%f1640, %f52, %f1639;\n"
    "	mul.f32 	%f1641, %f49, %f1640;\n"
    "	sub.f32 	%f1642, %f1636, %f1641;\n"
    "	ld.const.f32 	%f1643, [%rd18+20];\n"
    "	mul.f32 	%f1644, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1643, %f1644, %f1642;\n"
    "	mov.f32 	%f1645, %f2;\n"
    "	mov.f32 	%f1646, %f27;\n"
    "	mad.f32 	%f1647, %f1646, %f78, %f1645;\n"
    "	mov.f32 	%f2, %f1647;\n"
    "	mov.f32 	%f1648, %f4;\n"
    "	mov.f32 	%f1649, %f37;\n"
    "	mad.f32 	%f1650, %f1649, %f78, %f1648;\n"
    "	mov.f32 	%f4, %f1650;\n"
    "	mov.f32 	%f1651, %f6;\n"
    "	mad.f32 	%f1652, %f44, %f78, %f1651;\n"
    "	mov.f32 	%f6, %f1652;\n"
    "$Lt_9_28418:\n"
    "	ld.shared.s32 	%r57, [%rd14+492];\n"
    "	add.s32 	%r27, %r57, %r6;\n"
    "	ld.shared.f32 	%f1653, [%rd15+480];\n"
    "	sub.f32 	%f1654, %f19, %f1653;\n"
    "	mov.f32 	%f1655, %f1654;\n"
    "	mul.f32 	%f1656, %f14, %f1655;\n"
    "	cvt.rni.f32.f32 	%f1657, %f1656;\n"
    "	mul.f32 	%f1658, %f13, %f1657;\n"
    "	sub.f32 	%f26, %f1654, %f1658;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1659, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1660, %f26, %f26, %f1659;\n"
    "	ld.shared.f32 	%f1661, [%rd15+484];\n"
    "	sub.f32 	%f1662, %f18, %f1661;\n"
    "	mov.f32 	%f1663, %f1662;\n"
    "	mul.f32 	%f1664, %f14, %f1663;\n"
    "	cvt.rni.f32.f32 	%f1665, %f1664;\n"
    "	mul.f32 	%f1666, %f13, %f1665;\n"
    "	sub.f32 	%f36, %f1662, %f1666;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1667, %f36, %f36, %f1660;\n"
    "	ld.shared.f32 	%f1668, [%rd15+488];\n"
    "	sub.f32 	%f1669, %f11, %f1668;\n"
    "	mul.f32 	%f1670, %f1669, %f14;\n"
    "	cvt.rni.f32.f32 	%f1671, %f1670;\n"
    "	mul.f32 	%f1672, %f13, %f1671;\n"
    "	sub.f32 	%f44, %f1669, %f1672;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1667;\n"
    "	mov.f32 	%f1673, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p32, %f45, %f1673;\n"
    "	@!%p32 bra 	$Lt_9_28930;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd77, %r27;\n"
    "	mul.wide.s32 	%rd78, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd78;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1674, [%rd18+12];\n"
    "	mov.f32 	%f1675, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1676, %f1674, %f1675;\n"
    "	mul.f32 	%f1677, %f52, %f1676;\n"
    "	ld.const.f32 	%f1678, [%rd18+4];\n"
    "	sub.f32 	%f1679, %f1678, %f47;\n"
    "	mul.f32 	%f1680, %f50, %f1679;\n"
    "	mov.f32 	%f1681, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1682, %f1680, %f1681;\n"
    "	ex2.approx.f32 	%f1683, %f1682;\n"
    "	ld.const.f32 	%f1684, [%rd18+0];\n"
    "	mov.f32 	%f1685, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1686, %f1684, %f1685;\n"
    "	mul.f32 	%f1687, %f1683, %f1686;\n"
    "	mul.f32 	%f1688, %f50, %f1687;\n"
    "	mul.f32 	%f1689, %f48, %f1688;\n"
    "	sub.f32 	%f1690, %f1689, %f1677;\n"
    "	ld.const.f32 	%f1691, [%rd18+16];\n"
    "	mov.f32 	%f1692, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1693, %f1691, %f1692;\n"
    "	mul.f32 	%f1694, %f52, %f1693;\n"
    "	mul.f32 	%f1695, %f49, %f1694;\n"
    "	sub.f32 	%f1696, %f1690, %f1695;\n"
    "	ld.const.f32 	%f1697, [%rd18+20];\n"
    "	mul.f32 	%f1698, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1697, %f1698, %f1696;\n"
    "	mov.f32 	%f1699, %f2;\n"
    "	mov.f32 	%f1700, %f27;\n"
    "	mad.f32 	%f1701, %f1700, %f78, %f1699;\n"
    "	mov.f32 	%f2, %f1701;\n"
    "	mov.f32 	%f1702, %f4;\n"
    "	mov.f32 	%f1703, %f37;\n"
    "	mad.f32 	%f1704, %f1703, %f78, %f1702;\n"
    "	mov.f32 	%f4, %f1704;\n"
    "	mov.f32 	%f1705, %f6;\n"
    "	mad.f32 	%f1706, %f44, %f78, %f1705;\n"
    "	mov.f32 	%f6, %f1706;\n"
    "$Lt_9_28930:\n"
    "	ld.shared.s32 	%r58, [%rd14+508];\n"
    "	add.s32 	%r27, %r58, %r6;\n"
    "	ld.shared.f32 	%f1707, [%rd15+496];\n"
    "	sub.f32 	%f1708, %f19, %f1707;\n"
    "	mov.f32 	%f1709, %f1708;\n"
    "	mul.f32 	%f1710, %f14, %f1709;\n"
    "	cvt.rni.f32.f32 	%f1711, %f1710;\n"
    "	mul.f32 	%f1712, %f13, %f1711;\n"
    "	sub.f32 	%f26, %f1708, %f1712;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1713, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1714, %f26, %f26, %f1713;\n"
    "	ld.shared.f32 	%f1715, [%rd15+500];\n"
    "	sub.f32 	%f1716, %f18, %f1715;\n"
    "	mov.f32 	%f1717, %f1716;\n"
    "	mul.f32 	%f1718, %f14, %f1717;\n"
    "	cvt.rni.f32.f32 	%f1719, %f1718;\n"
    "	mul.f32 	%f1720, %f13, %f1719;\n"
    "	sub.f32 	%f36, %f1716, %f1720;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1721, %f36, %f36, %f1714;\n"
    "	ld.shared.f32 	%f1722, [%rd15+504];\n"
    "	sub.f32 	%f1723, %f11, %f1722;\n"
    "	mul.f32 	%f1724, %f1723, %f14;\n"
    "	cvt.rni.f32.f32 	%f1725, %f1724;\n"
    "	mul.f32 	%f1726, %f13, %f1725;\n"
    "	sub.f32 	%f44, %f1723, %f1726;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1721;\n"
    "	mov.f32 	%f1727, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p33, %f45, %f1727;\n"
    "	@!%p33 bra 	$Lt_9_29442;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd79, %r27;\n"
    "	mul.wide.s32 	%rd80, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd80;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1728, [%rd18+12];\n"
    "	mov.f32 	%f1729, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1730, %f1728, %f1729;\n"
    "	mul.f32 	%f1731, %f52, %f1730;\n"
    "	ld.const.f32 	%f1732, [%rd18+4];\n"
    "	sub.f32 	%f1733, %f1732, %f47;\n"
    "	mul.f32 	%f1734, %f50, %f1733;\n"
    "	mov.f32 	%f1735, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1736, %f1734, %f1735;\n"
    "	ex2.approx.f32 	%f1737, %f1736;\n"
    "	ld.const.f32 	%f1738, [%rd18+0];\n"
    "	mov.f32 	%f1739, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1740, %f1738, %f1739;\n"
    "	mul.f32 	%f1741, %f1737, %f1740;\n"
    "	mul.f32 	%f1742, %f50, %f1741;\n"
    "	mul.f32 	%f1743, %f48, %f1742;\n"
    "	sub.f32 	%f1744, %f1743, %f1731;\n"
    "	ld.const.f32 	%f1745, [%rd18+16];\n"
    "	mov.f32 	%f1746, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1747, %f1745, %f1746;\n"
    "	mul.f32 	%f1748, %f52, %f1747;\n"
    "	mul.f32 	%f1749, %f49, %f1748;\n"
    "	sub.f32 	%f1750, %f1744, %f1749;\n"
    "	ld.const.f32 	%f1751, [%rd18+20];\n"
    "	mul.f32 	%f1752, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1751, %f1752, %f1750;\n"
    "	mov.f32 	%f1753, %f2;\n"
    "	mov.f32 	%f1754, %f27;\n"
    "	mad.f32 	%f1755, %f1754, %f78, %f1753;\n"
    "	mov.f32 	%f2, %f1755;\n"
    "	mov.f32 	%f1756, %f4;\n"
    "	mov.f32 	%f1757, %f37;\n"
    "	mad.f32 	%f1758, %f1757, %f78, %f1756;\n"
    "	mov.f32 	%f4, %f1758;\n"
    "	mov.f32 	%f1759, %f6;\n"
    "	mad.f32 	%f1760, %f44, %f78, %f1759;\n"
    "	mov.f32 	%f6, %f1760;\n"
    "$Lt_9_29442:\n"
    "	ld.shared.s32 	%r59, [%rd14+524];\n"
    "	add.s32 	%r27, %r59, %r6;\n"
    "	ld.shared.f32 	%f1761, [%rd15+512];\n"
    "	sub.f32 	%f1762, %f19, %f1761;\n"
    "	mov.f32 	%f1763, %f1762;\n"
    "	mul.f32 	%f1764, %f14, %f1763;\n"
    "	cvt.rni.f32.f32 	%f1765, %f1764;\n"
    "	mul.f32 	%f1766, %f13, %f1765;\n"
    "	sub.f32 	%f26, %f1762, %f1766;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1767, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1768, %f26, %f26, %f1767;\n"
    "	ld.shared.f32 	%f1769, [%rd15+516];\n"
    "	sub.f32 	%f1770, %f18, %f1769;\n"
    "	mov.f32 	%f1771, %f1770;\n"
    "	mul.f32 	%f1772, %f14, %f1771;\n"
    "	cvt.rni.f32.f32 	%f1773, %f1772;\n"
    "	mul.f32 	%f1774, %f13, %f1773;\n"
    "	sub.f32 	%f36, %f1770, %f1774;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1775, %f36, %f36, %f1768;\n"
    "	ld.shared.f32 	%f1776, [%rd15+520];\n"
    "	sub.f32 	%f1777, %f11, %f1776;\n"
    "	mul.f32 	%f1778, %f1777, %f14;\n"
    "	cvt.rni.f32.f32 	%f1779, %f1778;\n"
    "	mul.f32 	%f1780, %f13, %f1779;\n"
    "	sub.f32 	%f44, %f1777, %f1780;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1775;\n"
    "	mov.f32 	%f1781, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p34, %f45, %f1781;\n"
    "	@!%p34 bra 	$Lt_9_29954;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd81, %r27;\n"
    "	mul.wide.s32 	%rd82, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd82;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1782, [%rd18+12];\n"
    "	mov.f32 	%f1783, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1784, %f1782, %f1783;\n"
    "	mul.f32 	%f1785, %f52, %f1784;\n"
    "	ld.const.f32 	%f1786, [%rd18+4];\n"
    "	sub.f32 	%f1787, %f1786, %f47;\n"
    "	mul.f32 	%f1788, %f50, %f1787;\n"
    "	mov.f32 	%f1789, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1790, %f1788, %f1789;\n"
    "	ex2.approx.f32 	%f1791, %f1790;\n"
    "	ld.const.f32 	%f1792, [%rd18+0];\n"
    "	mov.f32 	%f1793, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1794, %f1792, %f1793;\n"
    "	mul.f32 	%f1795, %f1791, %f1794;\n"
    "	mul.f32 	%f1796, %f50, %f1795;\n"
    "	mul.f32 	%f1797, %f48, %f1796;\n"
    "	sub.f32 	%f1798, %f1797, %f1785;\n"
    "	ld.const.f32 	%f1799, [%rd18+16];\n"
    "	mov.f32 	%f1800, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1801, %f1799, %f1800;\n"
    "	mul.f32 	%f1802, %f52, %f1801;\n"
    "	mul.f32 	%f1803, %f49, %f1802;\n"
    "	sub.f32 	%f1804, %f1798, %f1803;\n"
    "	ld.const.f32 	%f1805, [%rd18+20];\n"
    "	mul.f32 	%f1806, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1805, %f1806, %f1804;\n"
    "	mov.f32 	%f1807, %f2;\n"
    "	mov.f32 	%f1808, %f27;\n"
    "	mad.f32 	%f1809, %f1808, %f78, %f1807;\n"
    "	mov.f32 	%f2, %f1809;\n"
    "	mov.f32 	%f1810, %f4;\n"
    "	mov.f32 	%f1811, %f37;\n"
    "	mad.f32 	%f1812, %f1811, %f78, %f1810;\n"
    "	mov.f32 	%f4, %f1812;\n"
    "	mov.f32 	%f1813, %f6;\n"
    "	mad.f32 	%f1814, %f44, %f78, %f1813;\n"
    "	mov.f32 	%f6, %f1814;\n"
    "$Lt_9_29954:\n"
    "	ld.shared.s32 	%r60, [%rd14+540];\n"
    "	add.s32 	%r27, %r60, %r6;\n"
    "	ld.shared.f32 	%f1815, [%rd15+528];\n"
    "	sub.f32 	%f1816, %f19, %f1815;\n"
    "	mov.f32 	%f1817, %f1816;\n"
    "	mul.f32 	%f1818, %f14, %f1817;\n"
    "	cvt.rni.f32.f32 	%f1819, %f1818;\n"
    "	mul.f32 	%f1820, %f13, %f1819;\n"
    "	sub.f32 	%f26, %f1816, %f1820;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1821, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1822, %f26, %f26, %f1821;\n"
    "	ld.shared.f32 	%f1823, [%rd15+532];\n"
    "	sub.f32 	%f1824, %f18, %f1823;\n"
    "	mov.f32 	%f1825, %f1824;\n"
    "	mul.f32 	%f1826, %f14, %f1825;\n"
    "	cvt.rni.f32.f32 	%f1827, %f1826;\n"
    "	mul.f32 	%f1828, %f13, %f1827;\n"
    "	sub.f32 	%f36, %f1824, %f1828;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1829, %f36, %f36, %f1822;\n"
    "	ld.shared.f32 	%f1830, [%rd15+536];\n"
    "	sub.f32 	%f1831, %f11, %f1830;\n"
    "	mul.f32 	%f1832, %f1831, %f14;\n"
    "	cvt.rni.f32.f32 	%f1833, %f1832;\n"
    "	mul.f32 	%f1834, %f13, %f1833;\n"
    "	sub.f32 	%f44, %f1831, %f1834;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1829;\n"
    "	mov.f32 	%f1835, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p35, %f45, %f1835;\n"
    "	@!%p35 bra 	$Lt_9_30466;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd83, %r27;\n"
    "	mul.wide.s32 	%rd84, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd84;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1836, [%rd18+12];\n"
    "	mov.f32 	%f1837, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1838, %f1836, %f1837;\n"
    "	mul.f32 	%f1839, %f52, %f1838;\n"
    "	ld.const.f32 	%f1840, [%rd18+4];\n"
    "	sub.f32 	%f1841, %f1840, %f47;\n"
    "	mul.f32 	%f1842, %f50, %f1841;\n"
    "	mov.f32 	%f1843, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1844, %f1842, %f1843;\n"
    "	ex2.approx.f32 	%f1845, %f1844;\n"
    "	ld.const.f32 	%f1846, [%rd18+0];\n"
    "	mov.f32 	%f1847, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1848, %f1846, %f1847;\n"
    "	mul.f32 	%f1849, %f1845, %f1848;\n"
    "	mul.f32 	%f1850, %f50, %f1849;\n"
    "	mul.f32 	%f1851, %f48, %f1850;\n"
    "	sub.f32 	%f1852, %f1851, %f1839;\n"
    "	ld.const.f32 	%f1853, [%rd18+16];\n"
    "	mov.f32 	%f1854, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1855, %f1853, %f1854;\n"
    "	mul.f32 	%f1856, %f52, %f1855;\n"
    "	mul.f32 	%f1857, %f49, %f1856;\n"
    "	sub.f32 	%f1858, %f1852, %f1857;\n"
    "	ld.const.f32 	%f1859, [%rd18+20];\n"
    "	mul.f32 	%f1860, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1859, %f1860, %f1858;\n"
    "	mov.f32 	%f1861, %f2;\n"
    "	mov.f32 	%f1862, %f27;\n"
    "	mad.f32 	%f1863, %f1862, %f78, %f1861;\n"
    "	mov.f32 	%f2, %f1863;\n"
    "	mov.f32 	%f1864, %f4;\n"
    "	mov.f32 	%f1865, %f37;\n"
    "	mad.f32 	%f1866, %f1865, %f78, %f1864;\n"
    "	mov.f32 	%f4, %f1866;\n"
    "	mov.f32 	%f1867, %f6;\n"
    "	mad.f32 	%f1868, %f44, %f78, %f1867;\n"
    "	mov.f32 	%f6, %f1868;\n"
    "$Lt_9_30466:\n"
    "	ld.shared.s32 	%r61, [%rd14+556];\n"
    "	add.s32 	%r27, %r61, %r6;\n"
    "	ld.shared.f32 	%f1869, [%rd15+544];\n"
    "	sub.f32 	%f1870, %f19, %f1869;\n"
    "	mov.f32 	%f1871, %f1870;\n"
    "	mul.f32 	%f1872, %f14, %f1871;\n"
    "	cvt.rni.f32.f32 	%f1873, %f1872;\n"
    "	mul.f32 	%f1874, %f13, %f1873;\n"
    "	sub.f32 	%f26, %f1870, %f1874;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1875, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1876, %f26, %f26, %f1875;\n"
    "	ld.shared.f32 	%f1877, [%rd15+548];\n"
    "	sub.f32 	%f1878, %f18, %f1877;\n"
    "	mov.f32 	%f1879, %f1878;\n"
    "	mul.f32 	%f1880, %f14, %f1879;\n"
    "	cvt.rni.f32.f32 	%f1881, %f1880;\n"
    "	mul.f32 	%f1882, %f13, %f1881;\n"
    "	sub.f32 	%f36, %f1878, %f1882;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1883, %f36, %f36, %f1876;\n"
    "	ld.shared.f32 	%f1884, [%rd15+552];\n"
    "	sub.f32 	%f1885, %f11, %f1884;\n"
    "	mul.f32 	%f1886, %f1885, %f14;\n"
    "	cvt.rni.f32.f32 	%f1887, %f1886;\n"
    "	mul.f32 	%f1888, %f13, %f1887;\n"
    "	sub.f32 	%f44, %f1885, %f1888;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1883;\n"
    "	mov.f32 	%f1889, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p36, %f45, %f1889;\n"
    "	@!%p36 bra 	$Lt_9_30978;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd85, %r27;\n"
    "	mul.wide.s32 	%rd86, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd86;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1890, [%rd18+12];\n"
    "	mov.f32 	%f1891, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1892, %f1890, %f1891;\n"
    "	mul.f32 	%f1893, %f52, %f1892;\n"
    "	ld.const.f32 	%f1894, [%rd18+4];\n"
    "	sub.f32 	%f1895, %f1894, %f47;\n"
    "	mul.f32 	%f1896, %f50, %f1895;\n"
    "	mov.f32 	%f1897, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1898, %f1896, %f1897;\n"
    "	ex2.approx.f32 	%f1899, %f1898;\n"
    "	ld.const.f32 	%f1900, [%rd18+0];\n"
    "	mov.f32 	%f1901, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1902, %f1900, %f1901;\n"
    "	mul.f32 	%f1903, %f1899, %f1902;\n"
    "	mul.f32 	%f1904, %f50, %f1903;\n"
    "	mul.f32 	%f1905, %f48, %f1904;\n"
    "	sub.f32 	%f1906, %f1905, %f1893;\n"
    "	ld.const.f32 	%f1907, [%rd18+16];\n"
    "	mov.f32 	%f1908, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1909, %f1907, %f1908;\n"
    "	mul.f32 	%f1910, %f52, %f1909;\n"
    "	mul.f32 	%f1911, %f49, %f1910;\n"
    "	sub.f32 	%f1912, %f1906, %f1911;\n"
    "	ld.const.f32 	%f1913, [%rd18+20];\n"
    "	mul.f32 	%f1914, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1913, %f1914, %f1912;\n"
    "	mov.f32 	%f1915, %f2;\n"
    "	mov.f32 	%f1916, %f27;\n"
    "	mad.f32 	%f1917, %f1916, %f78, %f1915;\n"
    "	mov.f32 	%f2, %f1917;\n"
    "	mov.f32 	%f1918, %f4;\n"
    "	mov.f32 	%f1919, %f37;\n"
    "	mad.f32 	%f1920, %f1919, %f78, %f1918;\n"
    "	mov.f32 	%f4, %f1920;\n"
    "	mov.f32 	%f1921, %f6;\n"
    "	mad.f32 	%f1922, %f44, %f78, %f1921;\n"
    "	mov.f32 	%f6, %f1922;\n"
    "$Lt_9_30978:\n"
    "	ld.shared.s32 	%r62, [%rd14+572];\n"
    "	add.s32 	%r27, %r62, %r6;\n"
    "	ld.shared.f32 	%f1923, [%rd15+560];\n"
    "	sub.f32 	%f1924, %f19, %f1923;\n"
    "	mov.f32 	%f1925, %f1924;\n"
    "	mul.f32 	%f1926, %f14, %f1925;\n"
    "	cvt.rni.f32.f32 	%f1927, %f1926;\n"
    "	mul.f32 	%f1928, %f13, %f1927;\n"
    "	sub.f32 	%f26, %f1924, %f1928;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1929, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1930, %f26, %f26, %f1929;\n"
    "	ld.shared.f32 	%f1931, [%rd15+564];\n"
    "	sub.f32 	%f1932, %f18, %f1931;\n"
    "	mov.f32 	%f1933, %f1932;\n"
    "	mul.f32 	%f1934, %f14, %f1933;\n"
    "	cvt.rni.f32.f32 	%f1935, %f1934;\n"
    "	mul.f32 	%f1936, %f13, %f1935;\n"
    "	sub.f32 	%f36, %f1932, %f1936;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1937, %f36, %f36, %f1930;\n"
    "	ld.shared.f32 	%f1938, [%rd15+568];\n"
    "	sub.f32 	%f1939, %f11, %f1938;\n"
    "	mul.f32 	%f1940, %f1939, %f14;\n"
    "	cvt.rni.f32.f32 	%f1941, %f1940;\n"
    "	mul.f32 	%f1942, %f13, %f1941;\n"
    "	sub.f32 	%f44, %f1939, %f1942;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1937;\n"
    "	mov.f32 	%f1943, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p37, %f45, %f1943;\n"
    "	@!%p37 bra 	$Lt_9_31490;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd87, %r27;\n"
    "	mul.wide.s32 	%rd88, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd88;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1944, [%rd18+12];\n"
    "	mov.f32 	%f1945, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1946, %f1944, %f1945;\n"
    "	mul.f32 	%f1947, %f52, %f1946;\n"
    "	ld.const.f32 	%f1948, [%rd18+4];\n"
    "	sub.f32 	%f1949, %f1948, %f47;\n"
    "	mul.f32 	%f1950, %f50, %f1949;\n"
    "	mov.f32 	%f1951, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1952, %f1950, %f1951;\n"
    "	ex2.approx.f32 	%f1953, %f1952;\n"
    "	ld.const.f32 	%f1954, [%rd18+0];\n"
    "	mov.f32 	%f1955, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1956, %f1954, %f1955;\n"
    "	mul.f32 	%f1957, %f1953, %f1956;\n"
    "	mul.f32 	%f1958, %f50, %f1957;\n"
    "	mul.f32 	%f1959, %f48, %f1958;\n"
    "	sub.f32 	%f1960, %f1959, %f1947;\n"
    "	ld.const.f32 	%f1961, [%rd18+16];\n"
    "	mov.f32 	%f1962, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1963, %f1961, %f1962;\n"
    "	mul.f32 	%f1964, %f52, %f1963;\n"
    "	mul.f32 	%f1965, %f49, %f1964;\n"
    "	sub.f32 	%f1966, %f1960, %f1965;\n"
    "	ld.const.f32 	%f1967, [%rd18+20];\n"
    "	mul.f32 	%f1968, %f48, %f49;\n"
    "	mad.f32 	%f78, %f1967, %f1968, %f1966;\n"
    "	mov.f32 	%f1969, %f2;\n"
    "	mov.f32 	%f1970, %f27;\n"
    "	mad.f32 	%f1971, %f1970, %f78, %f1969;\n"
    "	mov.f32 	%f2, %f1971;\n"
    "	mov.f32 	%f1972, %f4;\n"
    "	mov.f32 	%f1973, %f37;\n"
    "	mad.f32 	%f1974, %f1973, %f78, %f1972;\n"
    "	mov.f32 	%f4, %f1974;\n"
    "	mov.f32 	%f1975, %f6;\n"
    "	mad.f32 	%f1976, %f44, %f78, %f1975;\n"
    "	mov.f32 	%f6, %f1976;\n"
    "$Lt_9_31490:\n"
    "	ld.shared.s32 	%r63, [%rd14+588];\n"
    "	add.s32 	%r27, %r63, %r6;\n"
    "	ld.shared.f32 	%f1977, [%rd15+576];\n"
    "	sub.f32 	%f1978, %f19, %f1977;\n"
    "	mov.f32 	%f1979, %f1978;\n"
    "	mul.f32 	%f1980, %f14, %f1979;\n"
    "	cvt.rni.f32.f32 	%f1981, %f1980;\n"
    "	mul.f32 	%f1982, %f13, %f1981;\n"
    "	sub.f32 	%f26, %f1978, %f1982;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f1983, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1984, %f26, %f26, %f1983;\n"
    "	ld.shared.f32 	%f1985, [%rd15+580];\n"
    "	sub.f32 	%f1986, %f18, %f1985;\n"
    "	mov.f32 	%f1987, %f1986;\n"
    "	mul.f32 	%f1988, %f14, %f1987;\n"
    "	cvt.rni.f32.f32 	%f1989, %f1988;\n"
    "	mul.f32 	%f1990, %f13, %f1989;\n"
    "	sub.f32 	%f36, %f1986, %f1990;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f1991, %f36, %f36, %f1984;\n"
    "	ld.shared.f32 	%f1992, [%rd15+584];\n"
    "	sub.f32 	%f1993, %f11, %f1992;\n"
    "	mul.f32 	%f1994, %f1993, %f14;\n"
    "	cvt.rni.f32.f32 	%f1995, %f1994;\n"
    "	mul.f32 	%f1996, %f13, %f1995;\n"
    "	sub.f32 	%f44, %f1993, %f1996;\n"
    "	mad.f32 	%f45, %f44, %f44, %f1991;\n"
    "	mov.f32 	%f1997, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p38, %f45, %f1997;\n"
    "	@!%p38 bra 	$Lt_9_32002;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd89, %r27;\n"
    "	mul.wide.s32 	%rd90, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd90;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f1998, [%rd18+12];\n"
    "	mov.f32 	%f1999, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2000, %f1998, %f1999;\n"
    "	mul.f32 	%f2001, %f52, %f2000;\n"
    "	ld.const.f32 	%f2002, [%rd18+4];\n"
    "	sub.f32 	%f2003, %f2002, %f47;\n"
    "	mul.f32 	%f2004, %f50, %f2003;\n"
    "	mov.f32 	%f2005, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2006, %f2004, %f2005;\n"
    "	ex2.approx.f32 	%f2007, %f2006;\n"
    "	ld.const.f32 	%f2008, [%rd18+0];\n"
    "	mov.f32 	%f2009, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2010, %f2008, %f2009;\n"
    "	mul.f32 	%f2011, %f2007, %f2010;\n"
    "	mul.f32 	%f2012, %f50, %f2011;\n"
    "	mul.f32 	%f2013, %f48, %f2012;\n"
    "	sub.f32 	%f2014, %f2013, %f2001;\n"
    "	ld.const.f32 	%f2015, [%rd18+16];\n"
    "	mov.f32 	%f2016, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2017, %f2015, %f2016;\n"
    "	mul.f32 	%f2018, %f52, %f2017;\n"
    "	mul.f32 	%f2019, %f49, %f2018;\n"
    "	sub.f32 	%f2020, %f2014, %f2019;\n"
    "	ld.const.f32 	%f2021, [%rd18+20];\n"
    "	mul.f32 	%f2022, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2021, %f2022, %f2020;\n"
    "	mov.f32 	%f2023, %f2;\n"
    "	mov.f32 	%f2024, %f27;\n"
    "	mad.f32 	%f2025, %f2024, %f78, %f2023;\n"
    "	mov.f32 	%f2, %f2025;\n"
    "	mov.f32 	%f2026, %f4;\n"
    "	mov.f32 	%f2027, %f37;\n"
    "	mad.f32 	%f2028, %f2027, %f78, %f2026;\n"
    "	mov.f32 	%f4, %f2028;\n"
    "	mov.f32 	%f2029, %f6;\n"
    "	mad.f32 	%f2030, %f44, %f78, %f2029;\n"
    "	mov.f32 	%f6, %f2030;\n"
    "$Lt_9_32002:\n"
    "	ld.shared.s32 	%r64, [%rd14+604];\n"
    "	add.s32 	%r27, %r64, %r6;\n"
    "	ld.shared.f32 	%f2031, [%rd15+592];\n"
    "	sub.f32 	%f2032, %f19, %f2031;\n"
    "	mov.f32 	%f2033, %f2032;\n"
    "	mul.f32 	%f2034, %f14, %f2033;\n"
    "	cvt.rni.f32.f32 	%f2035, %f2034;\n"
    "	mul.f32 	%f2036, %f13, %f2035;\n"
    "	sub.f32 	%f26, %f2032, %f2036;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2037, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2038, %f26, %f26, %f2037;\n"
    "	ld.shared.f32 	%f2039, [%rd15+596];\n"
    "	sub.f32 	%f2040, %f18, %f2039;\n"
    "	mov.f32 	%f2041, %f2040;\n"
    "	mul.f32 	%f2042, %f14, %f2041;\n"
    "	cvt.rni.f32.f32 	%f2043, %f2042;\n"
    "	mul.f32 	%f2044, %f13, %f2043;\n"
    "	sub.f32 	%f36, %f2040, %f2044;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2045, %f36, %f36, %f2038;\n"
    "	ld.shared.f32 	%f2046, [%rd15+600];\n"
    "	sub.f32 	%f2047, %f11, %f2046;\n"
    "	mul.f32 	%f2048, %f2047, %f14;\n"
    "	cvt.rni.f32.f32 	%f2049, %f2048;\n"
    "	mul.f32 	%f2050, %f13, %f2049;\n"
    "	sub.f32 	%f44, %f2047, %f2050;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2045;\n"
    "	mov.f32 	%f2051, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p39, %f45, %f2051;\n"
    "	@!%p39 bra 	$Lt_9_32514;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd91, %r27;\n"
    "	mul.wide.s32 	%rd92, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd92;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2052, [%rd18+12];\n"
    "	mov.f32 	%f2053, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2054, %f2052, %f2053;\n"
    "	mul.f32 	%f2055, %f52, %f2054;\n"
    "	ld.const.f32 	%f2056, [%rd18+4];\n"
    "	sub.f32 	%f2057, %f2056, %f47;\n"
    "	mul.f32 	%f2058, %f50, %f2057;\n"
    "	mov.f32 	%f2059, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2060, %f2058, %f2059;\n"
    "	ex2.approx.f32 	%f2061, %f2060;\n"
    "	ld.const.f32 	%f2062, [%rd18+0];\n"
    "	mov.f32 	%f2063, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2064, %f2062, %f2063;\n"
    "	mul.f32 	%f2065, %f2061, %f2064;\n"
    "	mul.f32 	%f2066, %f50, %f2065;\n"
    "	mul.f32 	%f2067, %f48, %f2066;\n"
    "	sub.f32 	%f2068, %f2067, %f2055;\n"
    "	ld.const.f32 	%f2069, [%rd18+16];\n"
    "	mov.f32 	%f2070, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2071, %f2069, %f2070;\n"
    "	mul.f32 	%f2072, %f52, %f2071;\n"
    "	mul.f32 	%f2073, %f49, %f2072;\n"
    "	sub.f32 	%f2074, %f2068, %f2073;\n"
    "	ld.const.f32 	%f2075, [%rd18+20];\n"
    "	mul.f32 	%f2076, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2075, %f2076, %f2074;\n"
    "	mov.f32 	%f2077, %f2;\n"
    "	mov.f32 	%f2078, %f27;\n"
    "	mad.f32 	%f2079, %f2078, %f78, %f2077;\n"
    "	mov.f32 	%f2, %f2079;\n"
    "	mov.f32 	%f2080, %f4;\n"
    "	mov.f32 	%f2081, %f37;\n"
    "	mad.f32 	%f2082, %f2081, %f78, %f2080;\n"
    "	mov.f32 	%f4, %f2082;\n"
    "	mov.f32 	%f2083, %f6;\n"
    "	mad.f32 	%f2084, %f44, %f78, %f2083;\n"
    "	mov.f32 	%f6, %f2084;\n"
    "$Lt_9_32514:\n"
    "	ld.shared.s32 	%r65, [%rd14+620];\n"
    "	add.s32 	%r27, %r65, %r6;\n"
    "	ld.shared.f32 	%f2085, [%rd15+608];\n"
    "	sub.f32 	%f2086, %f19, %f2085;\n"
    "	mov.f32 	%f2087, %f2086;\n"
    "	mul.f32 	%f2088, %f14, %f2087;\n"
    "	cvt.rni.f32.f32 	%f2089, %f2088;\n"
    "	mul.f32 	%f2090, %f13, %f2089;\n"
    "	sub.f32 	%f26, %f2086, %f2090;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2091, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2092, %f26, %f26, %f2091;\n"
    "	ld.shared.f32 	%f2093, [%rd15+612];\n"
    "	sub.f32 	%f2094, %f18, %f2093;\n"
    "	mov.f32 	%f2095, %f2094;\n"
    "	mul.f32 	%f2096, %f14, %f2095;\n"
    "	cvt.rni.f32.f32 	%f2097, %f2096;\n"
    "	mul.f32 	%f2098, %f13, %f2097;\n"
    "	sub.f32 	%f36, %f2094, %f2098;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2099, %f36, %f36, %f2092;\n"
    "	ld.shared.f32 	%f2100, [%rd15+616];\n"
    "	sub.f32 	%f2101, %f11, %f2100;\n"
    "	mul.f32 	%f2102, %f2101, %f14;\n"
    "	cvt.rni.f32.f32 	%f2103, %f2102;\n"
    "	mul.f32 	%f2104, %f13, %f2103;\n"
    "	sub.f32 	%f44, %f2101, %f2104;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2099;\n"
    "	mov.f32 	%f2105, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p40, %f45, %f2105;\n"
    "	@!%p40 bra 	$Lt_9_33026;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd93, %r27;\n"
    "	mul.wide.s32 	%rd94, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd94;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2106, [%rd18+12];\n"
    "	mov.f32 	%f2107, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2108, %f2106, %f2107;\n"
    "	mul.f32 	%f2109, %f52, %f2108;\n"
    "	ld.const.f32 	%f2110, [%rd18+4];\n"
    "	sub.f32 	%f2111, %f2110, %f47;\n"
    "	mul.f32 	%f2112, %f50, %f2111;\n"
    "	mov.f32 	%f2113, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2114, %f2112, %f2113;\n"
    "	ex2.approx.f32 	%f2115, %f2114;\n"
    "	ld.const.f32 	%f2116, [%rd18+0];\n"
    "	mov.f32 	%f2117, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2118, %f2116, %f2117;\n"
    "	mul.f32 	%f2119, %f2115, %f2118;\n"
    "	mul.f32 	%f2120, %f50, %f2119;\n"
    "	mul.f32 	%f2121, %f48, %f2120;\n"
    "	sub.f32 	%f2122, %f2121, %f2109;\n"
    "	ld.const.f32 	%f2123, [%rd18+16];\n"
    "	mov.f32 	%f2124, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2125, %f2123, %f2124;\n"
    "	mul.f32 	%f2126, %f52, %f2125;\n"
    "	mul.f32 	%f2127, %f49, %f2126;\n"
    "	sub.f32 	%f2128, %f2122, %f2127;\n"
    "	ld.const.f32 	%f2129, [%rd18+20];\n"
    "	mul.f32 	%f2130, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2129, %f2130, %f2128;\n"
    "	mov.f32 	%f2131, %f2;\n"
    "	mov.f32 	%f2132, %f27;\n"
    "	mad.f32 	%f2133, %f2132, %f78, %f2131;\n"
    "	mov.f32 	%f2, %f2133;\n"
    "	mov.f32 	%f2134, %f4;\n"
    "	mov.f32 	%f2135, %f37;\n"
    "	mad.f32 	%f2136, %f2135, %f78, %f2134;\n"
    "	mov.f32 	%f4, %f2136;\n"
    "	mov.f32 	%f2137, %f6;\n"
    "	mad.f32 	%f2138, %f44, %f78, %f2137;\n"
    "	mov.f32 	%f6, %f2138;\n"
    "$Lt_9_33026:\n"
    "	ld.shared.s32 	%r66, [%rd14+636];\n"
    "	add.s32 	%r27, %r66, %r6;\n"
    "	ld.shared.f32 	%f2139, [%rd15+624];\n"
    "	sub.f32 	%f2140, %f19, %f2139;\n"
    "	mov.f32 	%f2141, %f2140;\n"
    "	mul.f32 	%f2142, %f14, %f2141;\n"
    "	cvt.rni.f32.f32 	%f2143, %f2142;\n"
    "	mul.f32 	%f2144, %f13, %f2143;\n"
    "	sub.f32 	%f26, %f2140, %f2144;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2145, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2146, %f26, %f26, %f2145;\n"
    "	ld.shared.f32 	%f2147, [%rd15+628];\n"
    "	sub.f32 	%f2148, %f18, %f2147;\n"
    "	mov.f32 	%f2149, %f2148;\n"
    "	mul.f32 	%f2150, %f14, %f2149;\n"
    "	cvt.rni.f32.f32 	%f2151, %f2150;\n"
    "	mul.f32 	%f2152, %f13, %f2151;\n"
    "	sub.f32 	%f36, %f2148, %f2152;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2153, %f36, %f36, %f2146;\n"
    "	ld.shared.f32 	%f2154, [%rd15+632];\n"
    "	sub.f32 	%f2155, %f11, %f2154;\n"
    "	mul.f32 	%f2156, %f2155, %f14;\n"
    "	cvt.rni.f32.f32 	%f2157, %f2156;\n"
    "	mul.f32 	%f2158, %f13, %f2157;\n"
    "	sub.f32 	%f44, %f2155, %f2158;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2153;\n"
    "	mov.f32 	%f2159, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p41, %f45, %f2159;\n"
    "	@!%p41 bra 	$Lt_9_33538;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd95, %r27;\n"
    "	mul.wide.s32 	%rd96, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd96;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2160, [%rd18+12];\n"
    "	mov.f32 	%f2161, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2162, %f2160, %f2161;\n"
    "	mul.f32 	%f2163, %f52, %f2162;\n"
    "	ld.const.f32 	%f2164, [%rd18+4];\n"
    "	sub.f32 	%f2165, %f2164, %f47;\n"
    "	mul.f32 	%f2166, %f50, %f2165;\n"
    "	mov.f32 	%f2167, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2168, %f2166, %f2167;\n"
    "	ex2.approx.f32 	%f2169, %f2168;\n"
    "	ld.const.f32 	%f2170, [%rd18+0];\n"
    "	mov.f32 	%f2171, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2172, %f2170, %f2171;\n"
    "	mul.f32 	%f2173, %f2169, %f2172;\n"
    "	mul.f32 	%f2174, %f50, %f2173;\n"
    "	mul.f32 	%f2175, %f48, %f2174;\n"
    "	sub.f32 	%f2176, %f2175, %f2163;\n"
    "	ld.const.f32 	%f2177, [%rd18+16];\n"
    "	mov.f32 	%f2178, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2179, %f2177, %f2178;\n"
    "	mul.f32 	%f2180, %f52, %f2179;\n"
    "	mul.f32 	%f2181, %f49, %f2180;\n"
    "	sub.f32 	%f2182, %f2176, %f2181;\n"
    "	ld.const.f32 	%f2183, [%rd18+20];\n"
    "	mul.f32 	%f2184, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2183, %f2184, %f2182;\n"
    "	mov.f32 	%f2185, %f2;\n"
    "	mov.f32 	%f2186, %f27;\n"
    "	mad.f32 	%f2187, %f2186, %f78, %f2185;\n"
    "	mov.f32 	%f2, %f2187;\n"
    "	mov.f32 	%f2188, %f4;\n"
    "	mov.f32 	%f2189, %f37;\n"
    "	mad.f32 	%f2190, %f2189, %f78, %f2188;\n"
    "	mov.f32 	%f4, %f2190;\n"
    "	mov.f32 	%f2191, %f6;\n"
    "	mad.f32 	%f2192, %f44, %f78, %f2191;\n"
    "	mov.f32 	%f6, %f2192;\n"
    "$Lt_9_33538:\n"
    "	ld.shared.s32 	%r67, [%rd14+652];\n"
    "	add.s32 	%r27, %r67, %r6;\n"
    "	ld.shared.f32 	%f2193, [%rd15+640];\n"
    "	sub.f32 	%f2194, %f19, %f2193;\n"
    "	mov.f32 	%f2195, %f2194;\n"
    "	mul.f32 	%f2196, %f14, %f2195;\n"
    "	cvt.rni.f32.f32 	%f2197, %f2196;\n"
    "	mul.f32 	%f2198, %f13, %f2197;\n"
    "	sub.f32 	%f26, %f2194, %f2198;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2199, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2200, %f26, %f26, %f2199;\n"
    "	ld.shared.f32 	%f2201, [%rd15+644];\n"
    "	sub.f32 	%f2202, %f18, %f2201;\n"
    "	mov.f32 	%f2203, %f2202;\n"
    "	mul.f32 	%f2204, %f14, %f2203;\n"
    "	cvt.rni.f32.f32 	%f2205, %f2204;\n"
    "	mul.f32 	%f2206, %f13, %f2205;\n"
    "	sub.f32 	%f36, %f2202, %f2206;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2207, %f36, %f36, %f2200;\n"
    "	ld.shared.f32 	%f2208, [%rd15+648];\n"
    "	sub.f32 	%f2209, %f11, %f2208;\n"
    "	mul.f32 	%f2210, %f2209, %f14;\n"
    "	cvt.rni.f32.f32 	%f2211, %f2210;\n"
    "	mul.f32 	%f2212, %f13, %f2211;\n"
    "	sub.f32 	%f44, %f2209, %f2212;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2207;\n"
    "	mov.f32 	%f2213, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p42, %f45, %f2213;\n"
    "	@!%p42 bra 	$Lt_9_34050;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd97, %r27;\n"
    "	mul.wide.s32 	%rd98, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd98;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2214, [%rd18+12];\n"
    "	mov.f32 	%f2215, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2216, %f2214, %f2215;\n"
    "	mul.f32 	%f2217, %f52, %f2216;\n"
    "	ld.const.f32 	%f2218, [%rd18+4];\n"
    "	sub.f32 	%f2219, %f2218, %f47;\n"
    "	mul.f32 	%f2220, %f50, %f2219;\n"
    "	mov.f32 	%f2221, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2222, %f2220, %f2221;\n"
    "	ex2.approx.f32 	%f2223, %f2222;\n"
    "	ld.const.f32 	%f2224, [%rd18+0];\n"
    "	mov.f32 	%f2225, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2226, %f2224, %f2225;\n"
    "	mul.f32 	%f2227, %f2223, %f2226;\n"
    "	mul.f32 	%f2228, %f50, %f2227;\n"
    "	mul.f32 	%f2229, %f48, %f2228;\n"
    "	sub.f32 	%f2230, %f2229, %f2217;\n"
    "	ld.const.f32 	%f2231, [%rd18+16];\n"
    "	mov.f32 	%f2232, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2233, %f2231, %f2232;\n"
    "	mul.f32 	%f2234, %f52, %f2233;\n"
    "	mul.f32 	%f2235, %f49, %f2234;\n"
    "	sub.f32 	%f2236, %f2230, %f2235;\n"
    "	ld.const.f32 	%f2237, [%rd18+20];\n"
    "	mul.f32 	%f2238, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2237, %f2238, %f2236;\n"
    "	mov.f32 	%f2239, %f2;\n"
    "	mov.f32 	%f2240, %f27;\n"
    "	mad.f32 	%f2241, %f2240, %f78, %f2239;\n"
    "	mov.f32 	%f2, %f2241;\n"
    "	mov.f32 	%f2242, %f4;\n"
    "	mov.f32 	%f2243, %f37;\n"
    "	mad.f32 	%f2244, %f2243, %f78, %f2242;\n"
    "	mov.f32 	%f4, %f2244;\n"
    "	mov.f32 	%f2245, %f6;\n"
    "	mad.f32 	%f2246, %f44, %f78, %f2245;\n"
    "	mov.f32 	%f6, %f2246;\n"
    "$Lt_9_34050:\n"
    "	ld.shared.s32 	%r68, [%rd14+668];\n"
    "	add.s32 	%r27, %r68, %r6;\n"
    "	ld.shared.f32 	%f2247, [%rd15+656];\n"
    "	sub.f32 	%f2248, %f19, %f2247;\n"
    "	mov.f32 	%f2249, %f2248;\n"
    "	mul.f32 	%f2250, %f14, %f2249;\n"
    "	cvt.rni.f32.f32 	%f2251, %f2250;\n"
    "	mul.f32 	%f2252, %f13, %f2251;\n"
    "	sub.f32 	%f26, %f2248, %f2252;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2253, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2254, %f26, %f26, %f2253;\n"
    "	ld.shared.f32 	%f2255, [%rd15+660];\n"
    "	sub.f32 	%f2256, %f18, %f2255;\n"
    "	mov.f32 	%f2257, %f2256;\n"
    "	mul.f32 	%f2258, %f14, %f2257;\n"
    "	cvt.rni.f32.f32 	%f2259, %f2258;\n"
    "	mul.f32 	%f2260, %f13, %f2259;\n"
    "	sub.f32 	%f36, %f2256, %f2260;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2261, %f36, %f36, %f2254;\n"
    "	ld.shared.f32 	%f2262, [%rd15+664];\n"
    "	sub.f32 	%f2263, %f11, %f2262;\n"
    "	mul.f32 	%f2264, %f2263, %f14;\n"
    "	cvt.rni.f32.f32 	%f2265, %f2264;\n"
    "	mul.f32 	%f2266, %f13, %f2265;\n"
    "	sub.f32 	%f44, %f2263, %f2266;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2261;\n"
    "	mov.f32 	%f2267, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p43, %f45, %f2267;\n"
    "	@!%p43 bra 	$Lt_9_34562;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd99, %r27;\n"
    "	mul.wide.s32 	%rd100, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd100;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2268, [%rd18+12];\n"
    "	mov.f32 	%f2269, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2270, %f2268, %f2269;\n"
    "	mul.f32 	%f2271, %f52, %f2270;\n"
    "	ld.const.f32 	%f2272, [%rd18+4];\n"
    "	sub.f32 	%f2273, %f2272, %f47;\n"
    "	mul.f32 	%f2274, %f50, %f2273;\n"
    "	mov.f32 	%f2275, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2276, %f2274, %f2275;\n"
    "	ex2.approx.f32 	%f2277, %f2276;\n"
    "	ld.const.f32 	%f2278, [%rd18+0];\n"
    "	mov.f32 	%f2279, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2280, %f2278, %f2279;\n"
    "	mul.f32 	%f2281, %f2277, %f2280;\n"
    "	mul.f32 	%f2282, %f50, %f2281;\n"
    "	mul.f32 	%f2283, %f48, %f2282;\n"
    "	sub.f32 	%f2284, %f2283, %f2271;\n"
    "	ld.const.f32 	%f2285, [%rd18+16];\n"
    "	mov.f32 	%f2286, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2287, %f2285, %f2286;\n"
    "	mul.f32 	%f2288, %f52, %f2287;\n"
    "	mul.f32 	%f2289, %f49, %f2288;\n"
    "	sub.f32 	%f2290, %f2284, %f2289;\n"
    "	ld.const.f32 	%f2291, [%rd18+20];\n"
    "	mul.f32 	%f2292, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2291, %f2292, %f2290;\n"
    "	mov.f32 	%f2293, %f2;\n"
    "	mov.f32 	%f2294, %f27;\n"
    "	mad.f32 	%f2295, %f2294, %f78, %f2293;\n"
    "	mov.f32 	%f2, %f2295;\n"
    "	mov.f32 	%f2296, %f4;\n"
    "	mov.f32 	%f2297, %f37;\n"
    "	mad.f32 	%f2298, %f2297, %f78, %f2296;\n"
    "	mov.f32 	%f4, %f2298;\n"
    "	mov.f32 	%f2299, %f6;\n"
    "	mad.f32 	%f2300, %f44, %f78, %f2299;\n"
    "	mov.f32 	%f6, %f2300;\n"
    "$Lt_9_34562:\n"
    "	ld.shared.s32 	%r69, [%rd14+684];\n"
    "	add.s32 	%r27, %r69, %r6;\n"
    "	ld.shared.f32 	%f2301, [%rd15+672];\n"
    "	sub.f32 	%f2302, %f19, %f2301;\n"
    "	mov.f32 	%f2303, %f2302;\n"
    "	mul.f32 	%f2304, %f14, %f2303;\n"
    "	cvt.rni.f32.f32 	%f2305, %f2304;\n"
    "	mul.f32 	%f2306, %f13, %f2305;\n"
    "	sub.f32 	%f26, %f2302, %f2306;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2307, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2308, %f26, %f26, %f2307;\n"
    "	ld.shared.f32 	%f2309, [%rd15+676];\n"
    "	sub.f32 	%f2310, %f18, %f2309;\n"
    "	mov.f32 	%f2311, %f2310;\n"
    "	mul.f32 	%f2312, %f14, %f2311;\n"
    "	cvt.rni.f32.f32 	%f2313, %f2312;\n"
    "	mul.f32 	%f2314, %f13, %f2313;\n"
    "	sub.f32 	%f36, %f2310, %f2314;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2315, %f36, %f36, %f2308;\n"
    "	ld.shared.f32 	%f2316, [%rd15+680];\n"
    "	sub.f32 	%f2317, %f11, %f2316;\n"
    "	mul.f32 	%f2318, %f2317, %f14;\n"
    "	cvt.rni.f32.f32 	%f2319, %f2318;\n"
    "	mul.f32 	%f2320, %f13, %f2319;\n"
    "	sub.f32 	%f44, %f2317, %f2320;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2315;\n"
    "	mov.f32 	%f2321, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p44, %f45, %f2321;\n"
    "	@!%p44 bra 	$Lt_9_35074;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd101, %r27;\n"
    "	mul.wide.s32 	%rd102, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd102;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2322, [%rd18+12];\n"
    "	mov.f32 	%f2323, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2324, %f2322, %f2323;\n"
    "	mul.f32 	%f2325, %f52, %f2324;\n"
    "	ld.const.f32 	%f2326, [%rd18+4];\n"
    "	sub.f32 	%f2327, %f2326, %f47;\n"
    "	mul.f32 	%f2328, %f50, %f2327;\n"
    "	mov.f32 	%f2329, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2330, %f2328, %f2329;\n"
    "	ex2.approx.f32 	%f2331, %f2330;\n"
    "	ld.const.f32 	%f2332, [%rd18+0];\n"
    "	mov.f32 	%f2333, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2334, %f2332, %f2333;\n"
    "	mul.f32 	%f2335, %f2331, %f2334;\n"
    "	mul.f32 	%f2336, %f50, %f2335;\n"
    "	mul.f32 	%f2337, %f48, %f2336;\n"
    "	sub.f32 	%f2338, %f2337, %f2325;\n"
    "	ld.const.f32 	%f2339, [%rd18+16];\n"
    "	mov.f32 	%f2340, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2341, %f2339, %f2340;\n"
    "	mul.f32 	%f2342, %f52, %f2341;\n"
    "	mul.f32 	%f2343, %f49, %f2342;\n"
    "	sub.f32 	%f2344, %f2338, %f2343;\n"
    "	ld.const.f32 	%f2345, [%rd18+20];\n"
    "	mul.f32 	%f2346, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2345, %f2346, %f2344;\n"
    "	mov.f32 	%f2347, %f2;\n"
    "	mov.f32 	%f2348, %f27;\n"
    "	mad.f32 	%f2349, %f2348, %f78, %f2347;\n"
    "	mov.f32 	%f2, %f2349;\n"
    "	mov.f32 	%f2350, %f4;\n"
    "	mov.f32 	%f2351, %f37;\n"
    "	mad.f32 	%f2352, %f2351, %f78, %f2350;\n"
    "	mov.f32 	%f4, %f2352;\n"
    "	mov.f32 	%f2353, %f6;\n"
    "	mad.f32 	%f2354, %f44, %f78, %f2353;\n"
    "	mov.f32 	%f6, %f2354;\n"
    "$Lt_9_35074:\n"
    "	ld.shared.s32 	%r70, [%rd14+700];\n"
    "	add.s32 	%r27, %r70, %r6;\n"
    "	ld.shared.f32 	%f2355, [%rd15+688];\n"
    "	sub.f32 	%f2356, %f19, %f2355;\n"
    "	mov.f32 	%f2357, %f2356;\n"
    "	mul.f32 	%f2358, %f14, %f2357;\n"
    "	cvt.rni.f32.f32 	%f2359, %f2358;\n"
    "	mul.f32 	%f2360, %f13, %f2359;\n"
    "	sub.f32 	%f26, %f2356, %f2360;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2361, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2362, %f26, %f26, %f2361;\n"
    "	ld.shared.f32 	%f2363, [%rd15+692];\n"
    "	sub.f32 	%f2364, %f18, %f2363;\n"
    "	mov.f32 	%f2365, %f2364;\n"
    "	mul.f32 	%f2366, %f14, %f2365;\n"
    "	cvt.rni.f32.f32 	%f2367, %f2366;\n"
    "	mul.f32 	%f2368, %f13, %f2367;\n"
    "	sub.f32 	%f36, %f2364, %f2368;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2369, %f36, %f36, %f2362;\n"
    "	ld.shared.f32 	%f2370, [%rd15+696];\n"
    "	sub.f32 	%f2371, %f11, %f2370;\n"
    "	mul.f32 	%f2372, %f2371, %f14;\n"
    "	cvt.rni.f32.f32 	%f2373, %f2372;\n"
    "	mul.f32 	%f2374, %f13, %f2373;\n"
    "	sub.f32 	%f44, %f2371, %f2374;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2369;\n"
    "	mov.f32 	%f2375, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p45, %f45, %f2375;\n"
    "	@!%p45 bra 	$Lt_9_35586;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd103, %r27;\n"
    "	mul.wide.s32 	%rd104, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd104;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2376, [%rd18+12];\n"
    "	mov.f32 	%f2377, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2378, %f2376, %f2377;\n"
    "	mul.f32 	%f2379, %f52, %f2378;\n"
    "	ld.const.f32 	%f2380, [%rd18+4];\n"
    "	sub.f32 	%f2381, %f2380, %f47;\n"
    "	mul.f32 	%f2382, %f50, %f2381;\n"
    "	mov.f32 	%f2383, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2384, %f2382, %f2383;\n"
    "	ex2.approx.f32 	%f2385, %f2384;\n"
    "	ld.const.f32 	%f2386, [%rd18+0];\n"
    "	mov.f32 	%f2387, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2388, %f2386, %f2387;\n"
    "	mul.f32 	%f2389, %f2385, %f2388;\n"
    "	mul.f32 	%f2390, %f50, %f2389;\n"
    "	mul.f32 	%f2391, %f48, %f2390;\n"
    "	sub.f32 	%f2392, %f2391, %f2379;\n"
    "	ld.const.f32 	%f2393, [%rd18+16];\n"
    "	mov.f32 	%f2394, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2395, %f2393, %f2394;\n"
    "	mul.f32 	%f2396, %f52, %f2395;\n"
    "	mul.f32 	%f2397, %f49, %f2396;\n"
    "	sub.f32 	%f2398, %f2392, %f2397;\n"
    "	ld.const.f32 	%f2399, [%rd18+20];\n"
    "	mul.f32 	%f2400, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2399, %f2400, %f2398;\n"
    "	mov.f32 	%f2401, %f2;\n"
    "	mov.f32 	%f2402, %f27;\n"
    "	mad.f32 	%f2403, %f2402, %f78, %f2401;\n"
    "	mov.f32 	%f2, %f2403;\n"
    "	mov.f32 	%f2404, %f4;\n"
    "	mov.f32 	%f2405, %f37;\n"
    "	mad.f32 	%f2406, %f2405, %f78, %f2404;\n"
    "	mov.f32 	%f4, %f2406;\n"
    "	mov.f32 	%f2407, %f6;\n"
    "	mad.f32 	%f2408, %f44, %f78, %f2407;\n"
    "	mov.f32 	%f6, %f2408;\n"
    "$Lt_9_35586:\n"
    "	ld.shared.s32 	%r71, [%rd14+716];\n"
    "	add.s32 	%r27, %r71, %r6;\n"
    "	ld.shared.f32 	%f2409, [%rd15+704];\n"
    "	sub.f32 	%f2410, %f19, %f2409;\n"
    "	mov.f32 	%f2411, %f2410;\n"
    "	mul.f32 	%f2412, %f14, %f2411;\n"
    "	cvt.rni.f32.f32 	%f2413, %f2412;\n"
    "	mul.f32 	%f2414, %f13, %f2413;\n"
    "	sub.f32 	%f26, %f2410, %f2414;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2415, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2416, %f26, %f26, %f2415;\n"
    "	ld.shared.f32 	%f2417, [%rd15+708];\n"
    "	sub.f32 	%f2418, %f18, %f2417;\n"
    "	mov.f32 	%f2419, %f2418;\n"
    "	mul.f32 	%f2420, %f14, %f2419;\n"
    "	cvt.rni.f32.f32 	%f2421, %f2420;\n"
    "	mul.f32 	%f2422, %f13, %f2421;\n"
    "	sub.f32 	%f36, %f2418, %f2422;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2423, %f36, %f36, %f2416;\n"
    "	ld.shared.f32 	%f2424, [%rd15+712];\n"
    "	sub.f32 	%f2425, %f11, %f2424;\n"
    "	mul.f32 	%f2426, %f2425, %f14;\n"
    "	cvt.rni.f32.f32 	%f2427, %f2426;\n"
    "	mul.f32 	%f2428, %f13, %f2427;\n"
    "	sub.f32 	%f44, %f2425, %f2428;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2423;\n"
    "	mov.f32 	%f2429, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p46, %f45, %f2429;\n"
    "	@!%p46 bra 	$Lt_9_36098;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd105, %r27;\n"
    "	mul.wide.s32 	%rd106, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd106;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2430, [%rd18+12];\n"
    "	mov.f32 	%f2431, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2432, %f2430, %f2431;\n"
    "	mul.f32 	%f2433, %f52, %f2432;\n"
    "	ld.const.f32 	%f2434, [%rd18+4];\n"
    "	sub.f32 	%f2435, %f2434, %f47;\n"
    "	mul.f32 	%f2436, %f50, %f2435;\n"
    "	mov.f32 	%f2437, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2438, %f2436, %f2437;\n"
    "	ex2.approx.f32 	%f2439, %f2438;\n"
    "	ld.const.f32 	%f2440, [%rd18+0];\n"
    "	mov.f32 	%f2441, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2442, %f2440, %f2441;\n"
    "	mul.f32 	%f2443, %f2439, %f2442;\n"
    "	mul.f32 	%f2444, %f50, %f2443;\n"
    "	mul.f32 	%f2445, %f48, %f2444;\n"
    "	sub.f32 	%f2446, %f2445, %f2433;\n"
    "	ld.const.f32 	%f2447, [%rd18+16];\n"
    "	mov.f32 	%f2448, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2449, %f2447, %f2448;\n"
    "	mul.f32 	%f2450, %f52, %f2449;\n"
    "	mul.f32 	%f2451, %f49, %f2450;\n"
    "	sub.f32 	%f2452, %f2446, %f2451;\n"
    "	ld.const.f32 	%f2453, [%rd18+20];\n"
    "	mul.f32 	%f2454, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2453, %f2454, %f2452;\n"
    "	mov.f32 	%f2455, %f2;\n"
    "	mov.f32 	%f2456, %f27;\n"
    "	mad.f32 	%f2457, %f2456, %f78, %f2455;\n"
    "	mov.f32 	%f2, %f2457;\n"
    "	mov.f32 	%f2458, %f4;\n"
    "	mov.f32 	%f2459, %f37;\n"
    "	mad.f32 	%f2460, %f2459, %f78, %f2458;\n"
    "	mov.f32 	%f4, %f2460;\n"
    "	mov.f32 	%f2461, %f6;\n"
    "	mad.f32 	%f2462, %f44, %f78, %f2461;\n"
    "	mov.f32 	%f6, %f2462;\n"
    "$Lt_9_36098:\n"
    "	ld.shared.s32 	%r72, [%rd14+732];\n"
    "	add.s32 	%r27, %r72, %r6;\n"
    "	ld.shared.f32 	%f2463, [%rd15+720];\n"
    "	sub.f32 	%f2464, %f19, %f2463;\n"
    "	mov.f32 	%f2465, %f2464;\n"
    "	mul.f32 	%f2466, %f14, %f2465;\n"
    "	cvt.rni.f32.f32 	%f2467, %f2466;\n"
    "	mul.f32 	%f2468, %f13, %f2467;\n"
    "	sub.f32 	%f26, %f2464, %f2468;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2469, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2470, %f26, %f26, %f2469;\n"
    "	ld.shared.f32 	%f2471, [%rd15+724];\n"
    "	sub.f32 	%f2472, %f18, %f2471;\n"
    "	mov.f32 	%f2473, %f2472;\n"
    "	mul.f32 	%f2474, %f14, %f2473;\n"
    "	cvt.rni.f32.f32 	%f2475, %f2474;\n"
    "	mul.f32 	%f2476, %f13, %f2475;\n"
    "	sub.f32 	%f36, %f2472, %f2476;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2477, %f36, %f36, %f2470;\n"
    "	ld.shared.f32 	%f2478, [%rd15+728];\n"
    "	sub.f32 	%f2479, %f11, %f2478;\n"
    "	mul.f32 	%f2480, %f2479, %f14;\n"
    "	cvt.rni.f32.f32 	%f2481, %f2480;\n"
    "	mul.f32 	%f2482, %f13, %f2481;\n"
    "	sub.f32 	%f44, %f2479, %f2482;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2477;\n"
    "	mov.f32 	%f2483, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p47, %f45, %f2483;\n"
    "	@!%p47 bra 	$Lt_9_36610;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd107, %r27;\n"
    "	mul.wide.s32 	%rd108, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd108;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2484, [%rd18+12];\n"
    "	mov.f32 	%f2485, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2486, %f2484, %f2485;\n"
    "	mul.f32 	%f2487, %f52, %f2486;\n"
    "	ld.const.f32 	%f2488, [%rd18+4];\n"
    "	sub.f32 	%f2489, %f2488, %f47;\n"
    "	mul.f32 	%f2490, %f50, %f2489;\n"
    "	mov.f32 	%f2491, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2492, %f2490, %f2491;\n"
    "	ex2.approx.f32 	%f2493, %f2492;\n"
    "	ld.const.f32 	%f2494, [%rd18+0];\n"
    "	mov.f32 	%f2495, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2496, %f2494, %f2495;\n"
    "	mul.f32 	%f2497, %f2493, %f2496;\n"
    "	mul.f32 	%f2498, %f50, %f2497;\n"
    "	mul.f32 	%f2499, %f48, %f2498;\n"
    "	sub.f32 	%f2500, %f2499, %f2487;\n"
    "	ld.const.f32 	%f2501, [%rd18+16];\n"
    "	mov.f32 	%f2502, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2503, %f2501, %f2502;\n"
    "	mul.f32 	%f2504, %f52, %f2503;\n"
    "	mul.f32 	%f2505, %f49, %f2504;\n"
    "	sub.f32 	%f2506, %f2500, %f2505;\n"
    "	ld.const.f32 	%f2507, [%rd18+20];\n"
    "	mul.f32 	%f2508, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2507, %f2508, %f2506;\n"
    "	mov.f32 	%f2509, %f2;\n"
    "	mov.f32 	%f2510, %f27;\n"
    "	mad.f32 	%f2511, %f2510, %f78, %f2509;\n"
    "	mov.f32 	%f2, %f2511;\n"
    "	mov.f32 	%f2512, %f4;\n"
    "	mov.f32 	%f2513, %f37;\n"
    "	mad.f32 	%f2514, %f2513, %f78, %f2512;\n"
    "	mov.f32 	%f4, %f2514;\n"
    "	mov.f32 	%f2515, %f6;\n"
    "	mad.f32 	%f2516, %f44, %f78, %f2515;\n"
    "	mov.f32 	%f6, %f2516;\n"
    "$Lt_9_36610:\n"
    "	ld.shared.s32 	%r73, [%rd14+748];\n"
    "	add.s32 	%r27, %r73, %r6;\n"
    "	ld.shared.f32 	%f2517, [%rd15+736];\n"
    "	sub.f32 	%f2518, %f19, %f2517;\n"
    "	mov.f32 	%f2519, %f2518;\n"
    "	mul.f32 	%f2520, %f14, %f2519;\n"
    "	cvt.rni.f32.f32 	%f2521, %f2520;\n"
    "	mul.f32 	%f2522, %f13, %f2521;\n"
    "	sub.f32 	%f26, %f2518, %f2522;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2523, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2524, %f26, %f26, %f2523;\n"
    "	ld.shared.f32 	%f2525, [%rd15+740];\n"
    "	sub.f32 	%f2526, %f18, %f2525;\n"
    "	mov.f32 	%f2527, %f2526;\n"
    "	mul.f32 	%f2528, %f14, %f2527;\n"
    "	cvt.rni.f32.f32 	%f2529, %f2528;\n"
    "	mul.f32 	%f2530, %f13, %f2529;\n"
    "	sub.f32 	%f36, %f2526, %f2530;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2531, %f36, %f36, %f2524;\n"
    "	ld.shared.f32 	%f2532, [%rd15+744];\n"
    "	sub.f32 	%f2533, %f11, %f2532;\n"
    "	mul.f32 	%f2534, %f2533, %f14;\n"
    "	cvt.rni.f32.f32 	%f2535, %f2534;\n"
    "	mul.f32 	%f2536, %f13, %f2535;\n"
    "	sub.f32 	%f44, %f2533, %f2536;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2531;\n"
    "	mov.f32 	%f2537, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p48, %f45, %f2537;\n"
    "	@!%p48 bra 	$Lt_9_37122;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd109, %r27;\n"
    "	mul.wide.s32 	%rd110, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd110;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2538, [%rd18+12];\n"
    "	mov.f32 	%f2539, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2540, %f2538, %f2539;\n"
    "	mul.f32 	%f2541, %f52, %f2540;\n"
    "	ld.const.f32 	%f2542, [%rd18+4];\n"
    "	sub.f32 	%f2543, %f2542, %f47;\n"
    "	mul.f32 	%f2544, %f50, %f2543;\n"
    "	mov.f32 	%f2545, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2546, %f2544, %f2545;\n"
    "	ex2.approx.f32 	%f2547, %f2546;\n"
    "	ld.const.f32 	%f2548, [%rd18+0];\n"
    "	mov.f32 	%f2549, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2550, %f2548, %f2549;\n"
    "	mul.f32 	%f2551, %f2547, %f2550;\n"
    "	mul.f32 	%f2552, %f50, %f2551;\n"
    "	mul.f32 	%f2553, %f48, %f2552;\n"
    "	sub.f32 	%f2554, %f2553, %f2541;\n"
    "	ld.const.f32 	%f2555, [%rd18+16];\n"
    "	mov.f32 	%f2556, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2557, %f2555, %f2556;\n"
    "	mul.f32 	%f2558, %f52, %f2557;\n"
    "	mul.f32 	%f2559, %f49, %f2558;\n"
    "	sub.f32 	%f2560, %f2554, %f2559;\n"
    "	ld.const.f32 	%f2561, [%rd18+20];\n"
    "	mul.f32 	%f2562, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2561, %f2562, %f2560;\n"
    "	mov.f32 	%f2563, %f2;\n"
    "	mov.f32 	%f2564, %f27;\n"
    "	mad.f32 	%f2565, %f2564, %f78, %f2563;\n"
    "	mov.f32 	%f2, %f2565;\n"
    "	mov.f32 	%f2566, %f4;\n"
    "	mov.f32 	%f2567, %f37;\n"
    "	mad.f32 	%f2568, %f2567, %f78, %f2566;\n"
    "	mov.f32 	%f4, %f2568;\n"
    "	mov.f32 	%f2569, %f6;\n"
    "	mad.f32 	%f2570, %f44, %f78, %f2569;\n"
    "	mov.f32 	%f6, %f2570;\n"
    "$Lt_9_37122:\n"
    "	ld.shared.s32 	%r74, [%rd14+764];\n"
    "	add.s32 	%r27, %r74, %r6;\n"
    "	ld.shared.f32 	%f2571, [%rd15+752];\n"
    "	sub.f32 	%f2572, %f19, %f2571;\n"
    "	mov.f32 	%f2573, %f2572;\n"
    "	mul.f32 	%f2574, %f14, %f2573;\n"
    "	cvt.rni.f32.f32 	%f2575, %f2574;\n"
    "	mul.f32 	%f2576, %f13, %f2575;\n"
    "	sub.f32 	%f26, %f2572, %f2576;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2577, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2578, %f26, %f26, %f2577;\n"
    "	ld.shared.f32 	%f2579, [%rd15+756];\n"
    "	sub.f32 	%f2580, %f18, %f2579;\n"
    "	mov.f32 	%f2581, %f2580;\n"
    "	mul.f32 	%f2582, %f14, %f2581;\n"
    "	cvt.rni.f32.f32 	%f2583, %f2582;\n"
    "	mul.f32 	%f2584, %f13, %f2583;\n"
    "	sub.f32 	%f36, %f2580, %f2584;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2585, %f36, %f36, %f2578;\n"
    "	ld.shared.f32 	%f2586, [%rd15+760];\n"
    "	sub.f32 	%f2587, %f11, %f2586;\n"
    "	mul.f32 	%f2588, %f2587, %f14;\n"
    "	cvt.rni.f32.f32 	%f2589, %f2588;\n"
    "	mul.f32 	%f2590, %f13, %f2589;\n"
    "	sub.f32 	%f44, %f2587, %f2590;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2585;\n"
    "	mov.f32 	%f2591, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p49, %f45, %f2591;\n"
    "	@!%p49 bra 	$Lt_9_37634;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd111, %r27;\n"
    "	mul.wide.s32 	%rd112, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd112;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2592, [%rd18+12];\n"
    "	mov.f32 	%f2593, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2594, %f2592, %f2593;\n"
    "	mul.f32 	%f2595, %f52, %f2594;\n"
    "	ld.const.f32 	%f2596, [%rd18+4];\n"
    "	sub.f32 	%f2597, %f2596, %f47;\n"
    "	mul.f32 	%f2598, %f50, %f2597;\n"
    "	mov.f32 	%f2599, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2600, %f2598, %f2599;\n"
    "	ex2.approx.f32 	%f2601, %f2600;\n"
    "	ld.const.f32 	%f2602, [%rd18+0];\n"
    "	mov.f32 	%f2603, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2604, %f2602, %f2603;\n"
    "	mul.f32 	%f2605, %f2601, %f2604;\n"
    "	mul.f32 	%f2606, %f50, %f2605;\n"
    "	mul.f32 	%f2607, %f48, %f2606;\n"
    "	sub.f32 	%f2608, %f2607, %f2595;\n"
    "	ld.const.f32 	%f2609, [%rd18+16];\n"
    "	mov.f32 	%f2610, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2611, %f2609, %f2610;\n"
    "	mul.f32 	%f2612, %f52, %f2611;\n"
    "	mul.f32 	%f2613, %f49, %f2612;\n"
    "	sub.f32 	%f2614, %f2608, %f2613;\n"
    "	ld.const.f32 	%f2615, [%rd18+20];\n"
    "	mul.f32 	%f2616, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2615, %f2616, %f2614;\n"
    "	mov.f32 	%f2617, %f2;\n"
    "	mov.f32 	%f2618, %f27;\n"
    "	mad.f32 	%f2619, %f2618, %f78, %f2617;\n"
    "	mov.f32 	%f2, %f2619;\n"
    "	mov.f32 	%f2620, %f4;\n"
    "	mov.f32 	%f2621, %f37;\n"
    "	mad.f32 	%f2622, %f2621, %f78, %f2620;\n"
    "	mov.f32 	%f4, %f2622;\n"
    "	mov.f32 	%f2623, %f6;\n"
    "	mad.f32 	%f2624, %f44, %f78, %f2623;\n"
    "	mov.f32 	%f6, %f2624;\n"
    "$Lt_9_37634:\n"
    "	ld.shared.s32 	%r75, [%rd14+780];\n"
    "	add.s32 	%r27, %r75, %r6;\n"
    "	ld.shared.f32 	%f2625, [%rd15+768];\n"
    "	sub.f32 	%f2626, %f19, %f2625;\n"
    "	mov.f32 	%f2627, %f2626;\n"
    "	mul.f32 	%f2628, %f14, %f2627;\n"
    "	cvt.rni.f32.f32 	%f2629, %f2628;\n"
    "	mul.f32 	%f2630, %f13, %f2629;\n"
    "	sub.f32 	%f26, %f2626, %f2630;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2631, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2632, %f26, %f26, %f2631;\n"
    "	ld.shared.f32 	%f2633, [%rd15+772];\n"
    "	sub.f32 	%f2634, %f18, %f2633;\n"
    "	mov.f32 	%f2635, %f2634;\n"
    "	mul.f32 	%f2636, %f14, %f2635;\n"
    "	cvt.rni.f32.f32 	%f2637, %f2636;\n"
    "	mul.f32 	%f2638, %f13, %f2637;\n"
    "	sub.f32 	%f36, %f2634, %f2638;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2639, %f36, %f36, %f2632;\n"
    "	ld.shared.f32 	%f2640, [%rd15+776];\n"
    "	sub.f32 	%f2641, %f11, %f2640;\n"
    "	mul.f32 	%f2642, %f2641, %f14;\n"
    "	cvt.rni.f32.f32 	%f2643, %f2642;\n"
    "	mul.f32 	%f2644, %f13, %f2643;\n"
    "	sub.f32 	%f44, %f2641, %f2644;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2639;\n"
    "	mov.f32 	%f2645, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p50, %f45, %f2645;\n"
    "	@!%p50 bra 	$Lt_9_38146;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd113, %r27;\n"
    "	mul.wide.s32 	%rd114, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd114;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2646, [%rd18+12];\n"
    "	mov.f32 	%f2647, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2648, %f2646, %f2647;\n"
    "	mul.f32 	%f2649, %f52, %f2648;\n"
    "	ld.const.f32 	%f2650, [%rd18+4];\n"
    "	sub.f32 	%f2651, %f2650, %f47;\n"
    "	mul.f32 	%f2652, %f50, %f2651;\n"
    "	mov.f32 	%f2653, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2654, %f2652, %f2653;\n"
    "	ex2.approx.f32 	%f2655, %f2654;\n"
    "	ld.const.f32 	%f2656, [%rd18+0];\n"
    "	mov.f32 	%f2657, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2658, %f2656, %f2657;\n"
    "	mul.f32 	%f2659, %f2655, %f2658;\n"
    "	mul.f32 	%f2660, %f50, %f2659;\n"
    "	mul.f32 	%f2661, %f48, %f2660;\n"
    "	sub.f32 	%f2662, %f2661, %f2649;\n"
    "	ld.const.f32 	%f2663, [%rd18+16];\n"
    "	mov.f32 	%f2664, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2665, %f2663, %f2664;\n"
    "	mul.f32 	%f2666, %f52, %f2665;\n"
    "	mul.f32 	%f2667, %f49, %f2666;\n"
    "	sub.f32 	%f2668, %f2662, %f2667;\n"
    "	ld.const.f32 	%f2669, [%rd18+20];\n"
    "	mul.f32 	%f2670, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2669, %f2670, %f2668;\n"
    "	mov.f32 	%f2671, %f2;\n"
    "	mov.f32 	%f2672, %f27;\n"
    "	mad.f32 	%f2673, %f2672, %f78, %f2671;\n"
    "	mov.f32 	%f2, %f2673;\n"
    "	mov.f32 	%f2674, %f4;\n"
    "	mov.f32 	%f2675, %f37;\n"
    "	mad.f32 	%f2676, %f2675, %f78, %f2674;\n"
    "	mov.f32 	%f4, %f2676;\n"
    "	mov.f32 	%f2677, %f6;\n"
    "	mad.f32 	%f2678, %f44, %f78, %f2677;\n"
    "	mov.f32 	%f6, %f2678;\n"
    "$Lt_9_38146:\n"
    "	ld.shared.s32 	%r76, [%rd14+796];\n"
    "	add.s32 	%r27, %r76, %r6;\n"
    "	ld.shared.f32 	%f2679, [%rd15+784];\n"
    "	sub.f32 	%f2680, %f19, %f2679;\n"
    "	mov.f32 	%f2681, %f2680;\n"
    "	mul.f32 	%f2682, %f14, %f2681;\n"
    "	cvt.rni.f32.f32 	%f2683, %f2682;\n"
    "	mul.f32 	%f2684, %f13, %f2683;\n"
    "	sub.f32 	%f26, %f2680, %f2684;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2685, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2686, %f26, %f26, %f2685;\n"
    "	ld.shared.f32 	%f2687, [%rd15+788];\n"
    "	sub.f32 	%f2688, %f18, %f2687;\n"
    "	mov.f32 	%f2689, %f2688;\n"
    "	mul.f32 	%f2690, %f14, %f2689;\n"
    "	cvt.rni.f32.f32 	%f2691, %f2690;\n"
    "	mul.f32 	%f2692, %f13, %f2691;\n"
    "	sub.f32 	%f36, %f2688, %f2692;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2693, %f36, %f36, %f2686;\n"
    "	ld.shared.f32 	%f2694, [%rd15+792];\n"
    "	sub.f32 	%f2695, %f11, %f2694;\n"
    "	mul.f32 	%f2696, %f2695, %f14;\n"
    "	cvt.rni.f32.f32 	%f2697, %f2696;\n"
    "	mul.f32 	%f2698, %f13, %f2697;\n"
    "	sub.f32 	%f44, %f2695, %f2698;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2693;\n"
    "	mov.f32 	%f2699, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p51, %f45, %f2699;\n"
    "	@!%p51 bra 	$Lt_9_38658;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd115, %r27;\n"
    "	mul.wide.s32 	%rd116, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd116;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2700, [%rd18+12];\n"
    "	mov.f32 	%f2701, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2702, %f2700, %f2701;\n"
    "	mul.f32 	%f2703, %f52, %f2702;\n"
    "	ld.const.f32 	%f2704, [%rd18+4];\n"
    "	sub.f32 	%f2705, %f2704, %f47;\n"
    "	mul.f32 	%f2706, %f50, %f2705;\n"
    "	mov.f32 	%f2707, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2708, %f2706, %f2707;\n"
    "	ex2.approx.f32 	%f2709, %f2708;\n"
    "	ld.const.f32 	%f2710, [%rd18+0];\n"
    "	mov.f32 	%f2711, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2712, %f2710, %f2711;\n"
    "	mul.f32 	%f2713, %f2709, %f2712;\n"
    "	mul.f32 	%f2714, %f50, %f2713;\n"
    "	mul.f32 	%f2715, %f48, %f2714;\n"
    "	sub.f32 	%f2716, %f2715, %f2703;\n"
    "	ld.const.f32 	%f2717, [%rd18+16];\n"
    "	mov.f32 	%f2718, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2719, %f2717, %f2718;\n"
    "	mul.f32 	%f2720, %f52, %f2719;\n"
    "	mul.f32 	%f2721, %f49, %f2720;\n"
    "	sub.f32 	%f2722, %f2716, %f2721;\n"
    "	ld.const.f32 	%f2723, [%rd18+20];\n"
    "	mul.f32 	%f2724, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2723, %f2724, %f2722;\n"
    "	mov.f32 	%f2725, %f2;\n"
    "	mov.f32 	%f2726, %f27;\n"
    "	mad.f32 	%f2727, %f2726, %f78, %f2725;\n"
    "	mov.f32 	%f2, %f2727;\n"
    "	mov.f32 	%f2728, %f4;\n"
    "	mov.f32 	%f2729, %f37;\n"
    "	mad.f32 	%f2730, %f2729, %f78, %f2728;\n"
    "	mov.f32 	%f4, %f2730;\n"
    "	mov.f32 	%f2731, %f6;\n"
    "	mad.f32 	%f2732, %f44, %f78, %f2731;\n"
    "	mov.f32 	%f6, %f2732;\n"
    "$Lt_9_38658:\n"
    "	ld.shared.s32 	%r77, [%rd14+812];\n"
    "	add.s32 	%r27, %r77, %r6;\n"
    "	ld.shared.f32 	%f2733, [%rd15+800];\n"
    "	sub.f32 	%f2734, %f19, %f2733;\n"
    "	mov.f32 	%f2735, %f2734;\n"
    "	mul.f32 	%f2736, %f14, %f2735;\n"
    "	cvt.rni.f32.f32 	%f2737, %f2736;\n"
    "	mul.f32 	%f2738, %f13, %f2737;\n"
    "	sub.f32 	%f26, %f2734, %f2738;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2739, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2740, %f26, %f26, %f2739;\n"
    "	ld.shared.f32 	%f2741, [%rd15+804];\n"
    "	sub.f32 	%f2742, %f18, %f2741;\n"
    "	mov.f32 	%f2743, %f2742;\n"
    "	mul.f32 	%f2744, %f14, %f2743;\n"
    "	cvt.rni.f32.f32 	%f2745, %f2744;\n"
    "	mul.f32 	%f2746, %f13, %f2745;\n"
    "	sub.f32 	%f36, %f2742, %f2746;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2747, %f36, %f36, %f2740;\n"
    "	ld.shared.f32 	%f2748, [%rd15+808];\n"
    "	sub.f32 	%f2749, %f11, %f2748;\n"
    "	mul.f32 	%f2750, %f2749, %f14;\n"
    "	cvt.rni.f32.f32 	%f2751, %f2750;\n"
    "	mul.f32 	%f2752, %f13, %f2751;\n"
    "	sub.f32 	%f44, %f2749, %f2752;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2747;\n"
    "	mov.f32 	%f2753, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p52, %f45, %f2753;\n"
    "	@!%p52 bra 	$Lt_9_39170;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd117, %r27;\n"
    "	mul.wide.s32 	%rd118, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd118;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2754, [%rd18+12];\n"
    "	mov.f32 	%f2755, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2756, %f2754, %f2755;\n"
    "	mul.f32 	%f2757, %f52, %f2756;\n"
    "	ld.const.f32 	%f2758, [%rd18+4];\n"
    "	sub.f32 	%f2759, %f2758, %f47;\n"
    "	mul.f32 	%f2760, %f50, %f2759;\n"
    "	mov.f32 	%f2761, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2762, %f2760, %f2761;\n"
    "	ex2.approx.f32 	%f2763, %f2762;\n"
    "	ld.const.f32 	%f2764, [%rd18+0];\n"
    "	mov.f32 	%f2765, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2766, %f2764, %f2765;\n"
    "	mul.f32 	%f2767, %f2763, %f2766;\n"
    "	mul.f32 	%f2768, %f50, %f2767;\n"
    "	mul.f32 	%f2769, %f48, %f2768;\n"
    "	sub.f32 	%f2770, %f2769, %f2757;\n"
    "	ld.const.f32 	%f2771, [%rd18+16];\n"
    "	mov.f32 	%f2772, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2773, %f2771, %f2772;\n"
    "	mul.f32 	%f2774, %f52, %f2773;\n"
    "	mul.f32 	%f2775, %f49, %f2774;\n"
    "	sub.f32 	%f2776, %f2770, %f2775;\n"
    "	ld.const.f32 	%f2777, [%rd18+20];\n"
    "	mul.f32 	%f2778, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2777, %f2778, %f2776;\n"
    "	mov.f32 	%f2779, %f2;\n"
    "	mov.f32 	%f2780, %f27;\n"
    "	mad.f32 	%f2781, %f2780, %f78, %f2779;\n"
    "	mov.f32 	%f2, %f2781;\n"
    "	mov.f32 	%f2782, %f4;\n"
    "	mov.f32 	%f2783, %f37;\n"
    "	mad.f32 	%f2784, %f2783, %f78, %f2782;\n"
    "	mov.f32 	%f4, %f2784;\n"
    "	mov.f32 	%f2785, %f6;\n"
    "	mad.f32 	%f2786, %f44, %f78, %f2785;\n"
    "	mov.f32 	%f6, %f2786;\n"
    "$Lt_9_39170:\n"
    "	ld.shared.s32 	%r78, [%rd14+828];\n"
    "	add.s32 	%r27, %r78, %r6;\n"
    "	ld.shared.f32 	%f2787, [%rd15+816];\n"
    "	sub.f32 	%f2788, %f19, %f2787;\n"
    "	mov.f32 	%f2789, %f2788;\n"
    "	mul.f32 	%f2790, %f14, %f2789;\n"
    "	cvt.rni.f32.f32 	%f2791, %f2790;\n"
    "	mul.f32 	%f2792, %f13, %f2791;\n"
    "	sub.f32 	%f26, %f2788, %f2792;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2793, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2794, %f26, %f26, %f2793;\n"
    "	ld.shared.f32 	%f2795, [%rd15+820];\n"
    "	sub.f32 	%f2796, %f18, %f2795;\n"
    "	mov.f32 	%f2797, %f2796;\n"
    "	mul.f32 	%f2798, %f14, %f2797;\n"
    "	cvt.rni.f32.f32 	%f2799, %f2798;\n"
    "	mul.f32 	%f2800, %f13, %f2799;\n"
    "	sub.f32 	%f36, %f2796, %f2800;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2801, %f36, %f36, %f2794;\n"
    "	ld.shared.f32 	%f2802, [%rd15+824];\n"
    "	sub.f32 	%f2803, %f11, %f2802;\n"
    "	mul.f32 	%f2804, %f2803, %f14;\n"
    "	cvt.rni.f32.f32 	%f2805, %f2804;\n"
    "	mul.f32 	%f2806, %f13, %f2805;\n"
    "	sub.f32 	%f44, %f2803, %f2806;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2801;\n"
    "	mov.f32 	%f2807, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p53, %f45, %f2807;\n"
    "	@!%p53 bra 	$Lt_9_39682;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd119, %r27;\n"
    "	mul.wide.s32 	%rd120, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd120;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2808, [%rd18+12];\n"
    "	mov.f32 	%f2809, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2810, %f2808, %f2809;\n"
    "	mul.f32 	%f2811, %f52, %f2810;\n"
    "	ld.const.f32 	%f2812, [%rd18+4];\n"
    "	sub.f32 	%f2813, %f2812, %f47;\n"
    "	mul.f32 	%f2814, %f50, %f2813;\n"
    "	mov.f32 	%f2815, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2816, %f2814, %f2815;\n"
    "	ex2.approx.f32 	%f2817, %f2816;\n"
    "	ld.const.f32 	%f2818, [%rd18+0];\n"
    "	mov.f32 	%f2819, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2820, %f2818, %f2819;\n"
    "	mul.f32 	%f2821, %f2817, %f2820;\n"
    "	mul.f32 	%f2822, %f50, %f2821;\n"
    "	mul.f32 	%f2823, %f48, %f2822;\n"
    "	sub.f32 	%f2824, %f2823, %f2811;\n"
    "	ld.const.f32 	%f2825, [%rd18+16];\n"
    "	mov.f32 	%f2826, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2827, %f2825, %f2826;\n"
    "	mul.f32 	%f2828, %f52, %f2827;\n"
    "	mul.f32 	%f2829, %f49, %f2828;\n"
    "	sub.f32 	%f2830, %f2824, %f2829;\n"
    "	ld.const.f32 	%f2831, [%rd18+20];\n"
    "	mul.f32 	%f2832, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2831, %f2832, %f2830;\n"
    "	mov.f32 	%f2833, %f2;\n"
    "	mov.f32 	%f2834, %f27;\n"
    "	mad.f32 	%f2835, %f2834, %f78, %f2833;\n"
    "	mov.f32 	%f2, %f2835;\n"
    "	mov.f32 	%f2836, %f4;\n"
    "	mov.f32 	%f2837, %f37;\n"
    "	mad.f32 	%f2838, %f2837, %f78, %f2836;\n"
    "	mov.f32 	%f4, %f2838;\n"
    "	mov.f32 	%f2839, %f6;\n"
    "	mad.f32 	%f2840, %f44, %f78, %f2839;\n"
    "	mov.f32 	%f6, %f2840;\n"
    "$Lt_9_39682:\n"
    "	ld.shared.s32 	%r79, [%rd14+844];\n"
    "	add.s32 	%r27, %r79, %r6;\n"
    "	ld.shared.f32 	%f2841, [%rd15+832];\n"
    "	sub.f32 	%f2842, %f19, %f2841;\n"
    "	mov.f32 	%f2843, %f2842;\n"
    "	mul.f32 	%f2844, %f14, %f2843;\n"
    "	cvt.rni.f32.f32 	%f2845, %f2844;\n"
    "	mul.f32 	%f2846, %f13, %f2845;\n"
    "	sub.f32 	%f26, %f2842, %f2846;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2847, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2848, %f26, %f26, %f2847;\n"
    "	ld.shared.f32 	%f2849, [%rd15+836];\n"
    "	sub.f32 	%f2850, %f18, %f2849;\n"
    "	mov.f32 	%f2851, %f2850;\n"
    "	mul.f32 	%f2852, %f14, %f2851;\n"
    "	cvt.rni.f32.f32 	%f2853, %f2852;\n"
    "	mul.f32 	%f2854, %f13, %f2853;\n"
    "	sub.f32 	%f36, %f2850, %f2854;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2855, %f36, %f36, %f2848;\n"
    "	ld.shared.f32 	%f2856, [%rd15+840];\n"
    "	sub.f32 	%f2857, %f11, %f2856;\n"
    "	mul.f32 	%f2858, %f2857, %f14;\n"
    "	cvt.rni.f32.f32 	%f2859, %f2858;\n"
    "	mul.f32 	%f2860, %f13, %f2859;\n"
    "	sub.f32 	%f44, %f2857, %f2860;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2855;\n"
    "	mov.f32 	%f2861, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p54, %f45, %f2861;\n"
    "	@!%p54 bra 	$Lt_9_40194;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd121, %r27;\n"
    "	mul.wide.s32 	%rd122, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd122;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2862, [%rd18+12];\n"
    "	mov.f32 	%f2863, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2864, %f2862, %f2863;\n"
    "	mul.f32 	%f2865, %f52, %f2864;\n"
    "	ld.const.f32 	%f2866, [%rd18+4];\n"
    "	sub.f32 	%f2867, %f2866, %f47;\n"
    "	mul.f32 	%f2868, %f50, %f2867;\n"
    "	mov.f32 	%f2869, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2870, %f2868, %f2869;\n"
    "	ex2.approx.f32 	%f2871, %f2870;\n"
    "	ld.const.f32 	%f2872, [%rd18+0];\n"
    "	mov.f32 	%f2873, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2874, %f2872, %f2873;\n"
    "	mul.f32 	%f2875, %f2871, %f2874;\n"
    "	mul.f32 	%f2876, %f50, %f2875;\n"
    "	mul.f32 	%f2877, %f48, %f2876;\n"
    "	sub.f32 	%f2878, %f2877, %f2865;\n"
    "	ld.const.f32 	%f2879, [%rd18+16];\n"
    "	mov.f32 	%f2880, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2881, %f2879, %f2880;\n"
    "	mul.f32 	%f2882, %f52, %f2881;\n"
    "	mul.f32 	%f2883, %f49, %f2882;\n"
    "	sub.f32 	%f2884, %f2878, %f2883;\n"
    "	ld.const.f32 	%f2885, [%rd18+20];\n"
    "	mul.f32 	%f2886, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2885, %f2886, %f2884;\n"
    "	mov.f32 	%f2887, %f2;\n"
    "	mov.f32 	%f2888, %f27;\n"
    "	mad.f32 	%f2889, %f2888, %f78, %f2887;\n"
    "	mov.f32 	%f2, %f2889;\n"
    "	mov.f32 	%f2890, %f4;\n"
    "	mov.f32 	%f2891, %f37;\n"
    "	mad.f32 	%f2892, %f2891, %f78, %f2890;\n"
    "	mov.f32 	%f4, %f2892;\n"
    "	mov.f32 	%f2893, %f6;\n"
    "	mad.f32 	%f2894, %f44, %f78, %f2893;\n"
    "	mov.f32 	%f6, %f2894;\n"
    "$Lt_9_40194:\n"
    "	ld.shared.s32 	%r80, [%rd14+860];\n"
    "	add.s32 	%r27, %r80, %r6;\n"
    "	ld.shared.f32 	%f2895, [%rd15+848];\n"
    "	sub.f32 	%f2896, %f19, %f2895;\n"
    "	mov.f32 	%f2897, %f2896;\n"
    "	mul.f32 	%f2898, %f14, %f2897;\n"
    "	cvt.rni.f32.f32 	%f2899, %f2898;\n"
    "	mul.f32 	%f2900, %f13, %f2899;\n"
    "	sub.f32 	%f26, %f2896, %f2900;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2901, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2902, %f26, %f26, %f2901;\n"
    "	ld.shared.f32 	%f2903, [%rd15+852];\n"
    "	sub.f32 	%f2904, %f18, %f2903;\n"
    "	mov.f32 	%f2905, %f2904;\n"
    "	mul.f32 	%f2906, %f14, %f2905;\n"
    "	cvt.rni.f32.f32 	%f2907, %f2906;\n"
    "	mul.f32 	%f2908, %f13, %f2907;\n"
    "	sub.f32 	%f36, %f2904, %f2908;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2909, %f36, %f36, %f2902;\n"
    "	ld.shared.f32 	%f2910, [%rd15+856];\n"
    "	sub.f32 	%f2911, %f11, %f2910;\n"
    "	mul.f32 	%f2912, %f2911, %f14;\n"
    "	cvt.rni.f32.f32 	%f2913, %f2912;\n"
    "	mul.f32 	%f2914, %f13, %f2913;\n"
    "	sub.f32 	%f44, %f2911, %f2914;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2909;\n"
    "	mov.f32 	%f2915, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p55, %f45, %f2915;\n"
    "	@!%p55 bra 	$Lt_9_40706;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd123, %r27;\n"
    "	mul.wide.s32 	%rd124, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd124;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2916, [%rd18+12];\n"
    "	mov.f32 	%f2917, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2918, %f2916, %f2917;\n"
    "	mul.f32 	%f2919, %f52, %f2918;\n"
    "	ld.const.f32 	%f2920, [%rd18+4];\n"
    "	sub.f32 	%f2921, %f2920, %f47;\n"
    "	mul.f32 	%f2922, %f50, %f2921;\n"
    "	mov.f32 	%f2923, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2924, %f2922, %f2923;\n"
    "	ex2.approx.f32 	%f2925, %f2924;\n"
    "	ld.const.f32 	%f2926, [%rd18+0];\n"
    "	mov.f32 	%f2927, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2928, %f2926, %f2927;\n"
    "	mul.f32 	%f2929, %f2925, %f2928;\n"
    "	mul.f32 	%f2930, %f50, %f2929;\n"
    "	mul.f32 	%f2931, %f48, %f2930;\n"
    "	sub.f32 	%f2932, %f2931, %f2919;\n"
    "	ld.const.f32 	%f2933, [%rd18+16];\n"
    "	mov.f32 	%f2934, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2935, %f2933, %f2934;\n"
    "	mul.f32 	%f2936, %f52, %f2935;\n"
    "	mul.f32 	%f2937, %f49, %f2936;\n"
    "	sub.f32 	%f2938, %f2932, %f2937;\n"
    "	ld.const.f32 	%f2939, [%rd18+20];\n"
    "	mul.f32 	%f2940, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2939, %f2940, %f2938;\n"
    "	mov.f32 	%f2941, %f2;\n"
    "	mov.f32 	%f2942, %f27;\n"
    "	mad.f32 	%f2943, %f2942, %f78, %f2941;\n"
    "	mov.f32 	%f2, %f2943;\n"
    "	mov.f32 	%f2944, %f4;\n"
    "	mov.f32 	%f2945, %f37;\n"
    "	mad.f32 	%f2946, %f2945, %f78, %f2944;\n"
    "	mov.f32 	%f4, %f2946;\n"
    "	mov.f32 	%f2947, %f6;\n"
    "	mad.f32 	%f2948, %f44, %f78, %f2947;\n"
    "	mov.f32 	%f6, %f2948;\n"
    "$Lt_9_40706:\n"
    "	ld.shared.s32 	%r81, [%rd14+876];\n"
    "	add.s32 	%r27, %r81, %r6;\n"
    "	ld.shared.f32 	%f2949, [%rd15+864];\n"
    "	sub.f32 	%f2950, %f19, %f2949;\n"
    "	mov.f32 	%f2951, %f2950;\n"
    "	mul.f32 	%f2952, %f14, %f2951;\n"
    "	cvt.rni.f32.f32 	%f2953, %f2952;\n"
    "	mul.f32 	%f2954, %f13, %f2953;\n"
    "	sub.f32 	%f26, %f2950, %f2954;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f2955, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2956, %f26, %f26, %f2955;\n"
    "	ld.shared.f32 	%f2957, [%rd15+868];\n"
    "	sub.f32 	%f2958, %f18, %f2957;\n"
    "	mov.f32 	%f2959, %f2958;\n"
    "	mul.f32 	%f2960, %f14, %f2959;\n"
    "	cvt.rni.f32.f32 	%f2961, %f2960;\n"
    "	mul.f32 	%f2962, %f13, %f2961;\n"
    "	sub.f32 	%f36, %f2958, %f2962;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f2963, %f36, %f36, %f2956;\n"
    "	ld.shared.f32 	%f2964, [%rd15+872];\n"
    "	sub.f32 	%f2965, %f11, %f2964;\n"
    "	mul.f32 	%f2966, %f2965, %f14;\n"
    "	cvt.rni.f32.f32 	%f2967, %f2966;\n"
    "	mul.f32 	%f2968, %f13, %f2967;\n"
    "	sub.f32 	%f44, %f2965, %f2968;\n"
    "	mad.f32 	%f45, %f44, %f44, %f2963;\n"
    "	mov.f32 	%f2969, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p56, %f45, %f2969;\n"
    "	@!%p56 bra 	$Lt_9_41218;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd125, %r27;\n"
    "	mul.wide.s32 	%rd126, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd126;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f2970, [%rd18+12];\n"
    "	mov.f32 	%f2971, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2972, %f2970, %f2971;\n"
    "	mul.f32 	%f2973, %f52, %f2972;\n"
    "	ld.const.f32 	%f2974, [%rd18+4];\n"
    "	sub.f32 	%f2975, %f2974, %f47;\n"
    "	mul.f32 	%f2976, %f50, %f2975;\n"
    "	mov.f32 	%f2977, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2978, %f2976, %f2977;\n"
    "	ex2.approx.f32 	%f2979, %f2978;\n"
    "	ld.const.f32 	%f2980, [%rd18+0];\n"
    "	mov.f32 	%f2981, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2982, %f2980, %f2981;\n"
    "	mul.f32 	%f2983, %f2979, %f2982;\n"
    "	mul.f32 	%f2984, %f50, %f2983;\n"
    "	mul.f32 	%f2985, %f48, %f2984;\n"
    "	sub.f32 	%f2986, %f2985, %f2973;\n"
    "	ld.const.f32 	%f2987, [%rd18+16];\n"
    "	mov.f32 	%f2988, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2989, %f2987, %f2988;\n"
    "	mul.f32 	%f2990, %f52, %f2989;\n"
    "	mul.f32 	%f2991, %f49, %f2990;\n"
    "	sub.f32 	%f2992, %f2986, %f2991;\n"
    "	ld.const.f32 	%f2993, [%rd18+20];\n"
    "	mul.f32 	%f2994, %f48, %f49;\n"
    "	mad.f32 	%f78, %f2993, %f2994, %f2992;\n"
    "	mov.f32 	%f2995, %f2;\n"
    "	mov.f32 	%f2996, %f27;\n"
    "	mad.f32 	%f2997, %f2996, %f78, %f2995;\n"
    "	mov.f32 	%f2, %f2997;\n"
    "	mov.f32 	%f2998, %f4;\n"
    "	mov.f32 	%f2999, %f37;\n"
    "	mad.f32 	%f3000, %f2999, %f78, %f2998;\n"
    "	mov.f32 	%f4, %f3000;\n"
    "	mov.f32 	%f3001, %f6;\n"
    "	mad.f32 	%f3002, %f44, %f78, %f3001;\n"
    "	mov.f32 	%f6, %f3002;\n"
    "$Lt_9_41218:\n"
    "	ld.shared.s32 	%r82, [%rd14+892];\n"
    "	add.s32 	%r27, %r82, %r6;\n"
    "	ld.shared.f32 	%f3003, [%rd15+880];\n"
    "	sub.f32 	%f3004, %f19, %f3003;\n"
    "	mov.f32 	%f3005, %f3004;\n"
    "	mul.f32 	%f3006, %f14, %f3005;\n"
    "	cvt.rni.f32.f32 	%f3007, %f3006;\n"
    "	mul.f32 	%f3008, %f13, %f3007;\n"
    "	sub.f32 	%f26, %f3004, %f3008;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3009, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3010, %f26, %f26, %f3009;\n"
    "	ld.shared.f32 	%f3011, [%rd15+884];\n"
    "	sub.f32 	%f3012, %f18, %f3011;\n"
    "	mov.f32 	%f3013, %f3012;\n"
    "	mul.f32 	%f3014, %f14, %f3013;\n"
    "	cvt.rni.f32.f32 	%f3015, %f3014;\n"
    "	mul.f32 	%f3016, %f13, %f3015;\n"
    "	sub.f32 	%f36, %f3012, %f3016;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3017, %f36, %f36, %f3010;\n"
    "	ld.shared.f32 	%f3018, [%rd15+888];\n"
    "	sub.f32 	%f3019, %f11, %f3018;\n"
    "	mul.f32 	%f3020, %f3019, %f14;\n"
    "	cvt.rni.f32.f32 	%f3021, %f3020;\n"
    "	mul.f32 	%f3022, %f13, %f3021;\n"
    "	sub.f32 	%f44, %f3019, %f3022;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3017;\n"
    "	mov.f32 	%f3023, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p57, %f45, %f3023;\n"
    "	@!%p57 bra 	$Lt_9_41730;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd127, %r27;\n"
    "	mul.wide.s32 	%rd128, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd128;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f3024, [%rd18+12];\n"
    "	mov.f32 	%f3025, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3026, %f3024, %f3025;\n"
    "	mul.f32 	%f3027, %f52, %f3026;\n"
    "	ld.const.f32 	%f3028, [%rd18+4];\n"
    "	sub.f32 	%f3029, %f3028, %f47;\n"
    "	mul.f32 	%f3030, %f50, %f3029;\n"
    "	mov.f32 	%f3031, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3032, %f3030, %f3031;\n"
    "	ex2.approx.f32 	%f3033, %f3032;\n"
    "	ld.const.f32 	%f3034, [%rd18+0];\n"
    "	mov.f32 	%f3035, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3036, %f3034, %f3035;\n"
    "	mul.f32 	%f3037, %f3033, %f3036;\n"
    "	mul.f32 	%f3038, %f50, %f3037;\n"
    "	mul.f32 	%f3039, %f48, %f3038;\n"
    "	sub.f32 	%f3040, %f3039, %f3027;\n"
    "	ld.const.f32 	%f3041, [%rd18+16];\n"
    "	mov.f32 	%f3042, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3043, %f3041, %f3042;\n"
    "	mul.f32 	%f3044, %f52, %f3043;\n"
    "	mul.f32 	%f3045, %f49, %f3044;\n"
    "	sub.f32 	%f3046, %f3040, %f3045;\n"
    "	ld.const.f32 	%f3047, [%rd18+20];\n"
    "	mul.f32 	%f3048, %f48, %f49;\n"
    "	mad.f32 	%f78, %f3047, %f3048, %f3046;\n"
    "	mov.f32 	%f3049, %f2;\n"
    "	mov.f32 	%f3050, %f27;\n"
    "	mad.f32 	%f3051, %f3050, %f78, %f3049;\n"
    "	mov.f32 	%f2, %f3051;\n"
    "	mov.f32 	%f3052, %f4;\n"
    "	mov.f32 	%f3053, %f37;\n"
    "	mad.f32 	%f3054, %f3053, %f78, %f3052;\n"
    "	mov.f32 	%f4, %f3054;\n"
    "	mov.f32 	%f3055, %f6;\n"
    "	mad.f32 	%f3056, %f44, %f78, %f3055;\n"
    "	mov.f32 	%f6, %f3056;\n"
    "$Lt_9_41730:\n"
    "	ld.shared.s32 	%r83, [%rd14+908];\n"
    "	add.s32 	%r27, %r83, %r6;\n"
    "	ld.shared.f32 	%f3057, [%rd15+896];\n"
    "	sub.f32 	%f3058, %f19, %f3057;\n"
    "	mov.f32 	%f3059, %f3058;\n"
    "	mul.f32 	%f3060, %f14, %f3059;\n"
    "	cvt.rni.f32.f32 	%f3061, %f3060;\n"
    "	mul.f32 	%f3062, %f13, %f3061;\n"
    "	sub.f32 	%f26, %f3058, %f3062;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3063, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3064, %f26, %f26, %f3063;\n"
    "	ld.shared.f32 	%f3065, [%rd15+900];\n"
    "	sub.f32 	%f3066, %f18, %f3065;\n"
    "	mov.f32 	%f3067, %f3066;\n"
    "	mul.f32 	%f3068, %f14, %f3067;\n"
    "	cvt.rni.f32.f32 	%f3069, %f3068;\n"
    "	mul.f32 	%f3070, %f13, %f3069;\n"
    "	sub.f32 	%f36, %f3066, %f3070;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3071, %f36, %f36, %f3064;\n"
    "	ld.shared.f32 	%f3072, [%rd15+904];\n"
    "	sub.f32 	%f3073, %f11, %f3072;\n"
    "	mul.f32 	%f3074, %f3073, %f14;\n"
    "	cvt.rni.f32.f32 	%f3075, %f3074;\n"
    "	mul.f32 	%f3076, %f13, %f3075;\n"
    "	sub.f32 	%f44, %f3073, %f3076;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3071;\n"
    "	mov.f32 	%f3077, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p58, %f45, %f3077;\n"
    "	@!%p58 bra 	$Lt_9_42242;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd129, %r27;\n"
    "	mul.wide.s32 	%rd130, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd130;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f3078, [%rd18+12];\n"
    "	mov.f32 	%f3079, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3080, %f3078, %f3079;\n"
    "	mul.f32 	%f3081, %f52, %f3080;\n"
    "	ld.const.f32 	%f3082, [%rd18+4];\n"
    "	sub.f32 	%f3083, %f3082, %f47;\n"
    "	mul.f32 	%f3084, %f50, %f3083;\n"
    "	mov.f32 	%f3085, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3086, %f3084, %f3085;\n"
    "	ex2.approx.f32 	%f3087, %f3086;\n"
    "	ld.const.f32 	%f3088, [%rd18+0];\n"
    "	mov.f32 	%f3089, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3090, %f3088, %f3089;\n"
    "	mul.f32 	%f3091, %f3087, %f3090;\n"
    "	mul.f32 	%f3092, %f50, %f3091;\n"
    "	mul.f32 	%f3093, %f48, %f3092;\n"
    "	sub.f32 	%f3094, %f3093, %f3081;\n"
    "	ld.const.f32 	%f3095, [%rd18+16];\n"
    "	mov.f32 	%f3096, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3097, %f3095, %f3096;\n"
    "	mul.f32 	%f3098, %f52, %f3097;\n"
    "	mul.f32 	%f3099, %f49, %f3098;\n"
    "	sub.f32 	%f3100, %f3094, %f3099;\n"
    "	ld.const.f32 	%f3101, [%rd18+20];\n"
    "	mul.f32 	%f3102, %f48, %f49;\n"
    "	mad.f32 	%f78, %f3101, %f3102, %f3100;\n"
    "	mov.f32 	%f3103, %f2;\n"
    "	mov.f32 	%f3104, %f27;\n"
    "	mad.f32 	%f3105, %f3104, %f78, %f3103;\n"
    "	mov.f32 	%f2, %f3105;\n"
    "	mov.f32 	%f3106, %f4;\n"
    "	mov.f32 	%f3107, %f37;\n"
    "	mad.f32 	%f3108, %f3107, %f78, %f3106;\n"
    "	mov.f32 	%f4, %f3108;\n"
    "	mov.f32 	%f3109, %f6;\n"
    "	mad.f32 	%f3110, %f44, %f78, %f3109;\n"
    "	mov.f32 	%f6, %f3110;\n"
    "$Lt_9_42242:\n"
    "	ld.shared.s32 	%r84, [%rd14+924];\n"
    "	add.s32 	%r27, %r84, %r6;\n"
    "	ld.shared.f32 	%f3111, [%rd15+912];\n"
    "	sub.f32 	%f3112, %f19, %f3111;\n"
    "	mov.f32 	%f3113, %f3112;\n"
    "	mul.f32 	%f3114, %f14, %f3113;\n"
    "	cvt.rni.f32.f32 	%f3115, %f3114;\n"
    "	mul.f32 	%f3116, %f13, %f3115;\n"
    "	sub.f32 	%f26, %f3112, %f3116;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3117, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3118, %f26, %f26, %f3117;\n"
    "	ld.shared.f32 	%f3119, [%rd15+916];\n"
    "	sub.f32 	%f3120, %f18, %f3119;\n"
    "	mov.f32 	%f3121, %f3120;\n"
    "	mul.f32 	%f3122, %f14, %f3121;\n"
    "	cvt.rni.f32.f32 	%f3123, %f3122;\n"
    "	mul.f32 	%f3124, %f13, %f3123;\n"
    "	sub.f32 	%f36, %f3120, %f3124;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3125, %f36, %f36, %f3118;\n"
    "	ld.shared.f32 	%f3126, [%rd15+920];\n"
    "	sub.f32 	%f3127, %f11, %f3126;\n"
    "	mul.f32 	%f3128, %f3127, %f14;\n"
    "	cvt.rni.f32.f32 	%f3129, %f3128;\n"
    "	mul.f32 	%f3130, %f13, %f3129;\n"
    "	sub.f32 	%f44, %f3127, %f3130;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3125;\n"
    "	mov.f32 	%f3131, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p59, %f45, %f3131;\n"
    "	@!%p59 bra 	$Lt_9_42754;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd131, %r27;\n"
    "	mul.wide.s32 	%rd132, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd132;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f3132, [%rd18+12];\n"
    "	mov.f32 	%f3133, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3134, %f3132, %f3133;\n"
    "	mul.f32 	%f3135, %f52, %f3134;\n"
    "	ld.const.f32 	%f3136, [%rd18+4];\n"
    "	sub.f32 	%f3137, %f3136, %f47;\n"
    "	mul.f32 	%f3138, %f50, %f3137;\n"
    "	mov.f32 	%f3139, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3140, %f3138, %f3139;\n"
    "	ex2.approx.f32 	%f3141, %f3140;\n"
    "	ld.const.f32 	%f3142, [%rd18+0];\n"
    "	mov.f32 	%f3143, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3144, %f3142, %f3143;\n"
    "	mul.f32 	%f3145, %f3141, %f3144;\n"
    "	mul.f32 	%f3146, %f50, %f3145;\n"
    "	mul.f32 	%f3147, %f48, %f3146;\n"
    "	sub.f32 	%f3148, %f3147, %f3135;\n"
    "	ld.const.f32 	%f3149, [%rd18+16];\n"
    "	mov.f32 	%f3150, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3151, %f3149, %f3150;\n"
    "	mul.f32 	%f3152, %f52, %f3151;\n"
    "	mul.f32 	%f3153, %f49, %f3152;\n"
    "	sub.f32 	%f3154, %f3148, %f3153;\n"
    "	ld.const.f32 	%f3155, [%rd18+20];\n"
    "	mul.f32 	%f3156, %f48, %f49;\n"
    "	mad.f32 	%f78, %f3155, %f3156, %f3154;\n"
    "	mov.f32 	%f3157, %f2;\n"
    "	mov.f32 	%f3158, %f27;\n"
    "	mad.f32 	%f3159, %f3158, %f78, %f3157;\n"
    "	mov.f32 	%f2, %f3159;\n"
    "	mov.f32 	%f3160, %f4;\n"
    "	mov.f32 	%f3161, %f37;\n"
    "	mad.f32 	%f3162, %f3161, %f78, %f3160;\n"
    "	mov.f32 	%f4, %f3162;\n"
    "	mov.f32 	%f3163, %f6;\n"
    "	mad.f32 	%f3164, %f44, %f78, %f3163;\n"
    "	mov.f32 	%f6, %f3164;\n"
    "$Lt_9_42754:\n"
    "	ld.shared.s32 	%r85, [%rd14+940];\n"
    "	add.s32 	%r27, %r85, %r6;\n"
    "	ld.shared.f32 	%f3165, [%rd15+928];\n"
    "	sub.f32 	%f3166, %f19, %f3165;\n"
    "	mov.f32 	%f3167, %f3166;\n"
    "	mul.f32 	%f3168, %f14, %f3167;\n"
    "	cvt.rni.f32.f32 	%f3169, %f3168;\n"
    "	mul.f32 	%f3170, %f13, %f3169;\n"
    "	sub.f32 	%f26, %f3166, %f3170;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3171, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3172, %f26, %f26, %f3171;\n"
    "	ld.shared.f32 	%f3173, [%rd15+932];\n"
    "	sub.f32 	%f3174, %f18, %f3173;\n"
    "	mov.f32 	%f3175, %f3174;\n"
    "	mul.f32 	%f3176, %f14, %f3175;\n"
    "	cvt.rni.f32.f32 	%f3177, %f3176;\n"
    "	mul.f32 	%f3178, %f13, %f3177;\n"
    "	sub.f32 	%f36, %f3174, %f3178;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3179, %f36, %f36, %f3172;\n"
    "	ld.shared.f32 	%f3180, [%rd15+936];\n"
    "	sub.f32 	%f3181, %f11, %f3180;\n"
    "	mul.f32 	%f3182, %f3181, %f14;\n"
    "	cvt.rni.f32.f32 	%f3183, %f3182;\n"
    "	mul.f32 	%f3184, %f13, %f3183;\n"
    "	sub.f32 	%f44, %f3181, %f3184;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3179;\n"
    "	mov.f32 	%f3185, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p60, %f45, %f3185;\n"
    "	@!%p60 bra 	$Lt_9_43266;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd133, %r27;\n"
    "	mul.wide.s32 	%rd134, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd134;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f3186, [%rd18+12];\n"
    "	mov.f32 	%f3187, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3188, %f3186, %f3187;\n"
    "	mul.f32 	%f3189, %f52, %f3188;\n"
    "	ld.const.f32 	%f3190, [%rd18+4];\n"
    "	sub.f32 	%f3191, %f3190, %f47;\n"
    "	mul.f32 	%f3192, %f50, %f3191;\n"
    "	mov.f32 	%f3193, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3194, %f3192, %f3193;\n"
    "	ex2.approx.f32 	%f3195, %f3194;\n"
    "	ld.const.f32 	%f3196, [%rd18+0];\n"
    "	mov.f32 	%f3197, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3198, %f3196, %f3197;\n"
    "	mul.f32 	%f3199, %f3195, %f3198;\n"
    "	mul.f32 	%f3200, %f50, %f3199;\n"
    "	mul.f32 	%f3201, %f48, %f3200;\n"
    "	sub.f32 	%f3202, %f3201, %f3189;\n"
    "	ld.const.f32 	%f3203, [%rd18+16];\n"
    "	mov.f32 	%f3204, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3205, %f3203, %f3204;\n"
    "	mul.f32 	%f3206, %f52, %f3205;\n"
    "	mul.f32 	%f3207, %f49, %f3206;\n"
    "	sub.f32 	%f3208, %f3202, %f3207;\n"
    "	ld.const.f32 	%f3209, [%rd18+20];\n"
    "	mul.f32 	%f3210, %f48, %f49;\n"
    "	mad.f32 	%f78, %f3209, %f3210, %f3208;\n"
    "	mov.f32 	%f3211, %f2;\n"
    "	mov.f32 	%f3212, %f27;\n"
    "	mad.f32 	%f3213, %f3212, %f78, %f3211;\n"
    "	mov.f32 	%f2, %f3213;\n"
    "	mov.f32 	%f3214, %f4;\n"
    "	mov.f32 	%f3215, %f37;\n"
    "	mad.f32 	%f3216, %f3215, %f78, %f3214;\n"
    "	mov.f32 	%f4, %f3216;\n"
    "	mov.f32 	%f3217, %f6;\n"
    "	mad.f32 	%f3218, %f44, %f78, %f3217;\n"
    "	mov.f32 	%f6, %f3218;\n"
    "$Lt_9_43266:\n"
    "	ld.shared.s32 	%r86, [%rd14+956];\n"
    "	add.s32 	%r27, %r86, %r6;\n"
    "	ld.shared.f32 	%f3219, [%rd15+944];\n"
    "	sub.f32 	%f3220, %f19, %f3219;\n"
    "	mov.f32 	%f3221, %f3220;\n"
    "	mul.f32 	%f3222, %f14, %f3221;\n"
    "	cvt.rni.f32.f32 	%f3223, %f3222;\n"
    "	mul.f32 	%f3224, %f13, %f3223;\n"
    "	sub.f32 	%f26, %f3220, %f3224;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3225, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3226, %f26, %f26, %f3225;\n"
    "	ld.shared.f32 	%f3227, [%rd15+948];\n"
    "	sub.f32 	%f3228, %f18, %f3227;\n"
    "	mov.f32 	%f3229, %f3228;\n"
    "	mul.f32 	%f3230, %f14, %f3229;\n"
    "	cvt.rni.f32.f32 	%f3231, %f3230;\n"
    "	mul.f32 	%f3232, %f13, %f3231;\n"
    "	sub.f32 	%f36, %f3228, %f3232;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3233, %f36, %f36, %f3226;\n"
    "	ld.shared.f32 	%f3234, [%rd15+952];\n"
    "	sub.f32 	%f3235, %f11, %f3234;\n"
    "	mul.f32 	%f3236, %f3235, %f14;\n"
    "	cvt.rni.f32.f32 	%f3237, %f3236;\n"
    "	mul.f32 	%f3238, %f13, %f3237;\n"
    "	sub.f32 	%f44, %f3235, %f3238;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3233;\n"
    "	mov.f32 	%f3239, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p61, %f45, %f3239;\n"
    "	@!%p61 bra 	$Lt_9_43778;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd135, %r27;\n"
    "	mul.wide.s32 	%rd136, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd136;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f3240, [%rd18+12];\n"
    "	mov.f32 	%f3241, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3242, %f3240, %f3241;\n"
    "	mul.f32 	%f3243, %f52, %f3242;\n"
    "	ld.const.f32 	%f3244, [%rd18+4];\n"
    "	sub.f32 	%f3245, %f3244, %f47;\n"
    "	mul.f32 	%f3246, %f50, %f3245;\n"
    "	mov.f32 	%f3247, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3248, %f3246, %f3247;\n"
    "	ex2.approx.f32 	%f3249, %f3248;\n"
    "	ld.const.f32 	%f3250, [%rd18+0];\n"
    "	mov.f32 	%f3251, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3252, %f3250, %f3251;\n"
    "	mul.f32 	%f3253, %f3249, %f3252;\n"
    "	mul.f32 	%f3254, %f50, %f3253;\n"
    "	mul.f32 	%f3255, %f48, %f3254;\n"
    "	sub.f32 	%f3256, %f3255, %f3243;\n"
    "	ld.const.f32 	%f3257, [%rd18+16];\n"
    "	mov.f32 	%f3258, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3259, %f3257, %f3258;\n"
    "	mul.f32 	%f3260, %f52, %f3259;\n"
    "	mul.f32 	%f3261, %f49, %f3260;\n"
    "	sub.f32 	%f3262, %f3256, %f3261;\n"
    "	ld.const.f32 	%f3263, [%rd18+20];\n"
    "	mul.f32 	%f3264, %f48, %f49;\n"
    "	mad.f32 	%f78, %f3263, %f3264, %f3262;\n"
    "	mov.f32 	%f3265, %f2;\n"
    "	mov.f32 	%f3266, %f27;\n"
    "	mad.f32 	%f3267, %f3266, %f78, %f3265;\n"
    "	mov.f32 	%f2, %f3267;\n"
    "	mov.f32 	%f3268, %f4;\n"
    "	mov.f32 	%f3269, %f37;\n"
    "	mad.f32 	%f3270, %f3269, %f78, %f3268;\n"
    "	mov.f32 	%f4, %f3270;\n"
    "	mov.f32 	%f3271, %f6;\n"
    "	mad.f32 	%f3272, %f44, %f78, %f3271;\n"
    "	mov.f32 	%f6, %f3272;\n"
    "$Lt_9_43778:\n"
    "	ld.shared.s32 	%r87, [%rd14+972];\n"
    "	add.s32 	%r27, %r87, %r6;\n"
    "	ld.shared.f32 	%f3273, [%rd15+960];\n"
    "	sub.f32 	%f3274, %f19, %f3273;\n"
    "	mov.f32 	%f3275, %f3274;\n"
    "	mul.f32 	%f3276, %f14, %f3275;\n"
    "	cvt.rni.f32.f32 	%f3277, %f3276;\n"
    "	mul.f32 	%f3278, %f13, %f3277;\n"
    "	sub.f32 	%f26, %f3274, %f3278;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3279, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3280, %f26, %f26, %f3279;\n"
    "	ld.shared.f32 	%f3281, [%rd15+964];\n"
    "	sub.f32 	%f3282, %f18, %f3281;\n"
    "	mov.f32 	%f3283, %f3282;\n"
    "	mul.f32 	%f3284, %f14, %f3283;\n"
    "	cvt.rni.f32.f32 	%f3285, %f3284;\n"
    "	mul.f32 	%f3286, %f13, %f3285;\n"
    "	sub.f32 	%f36, %f3282, %f3286;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3287, %f36, %f36, %f3280;\n"
    "	ld.shared.f32 	%f3288, [%rd15+968];\n"
    "	sub.f32 	%f3289, %f11, %f3288;\n"
    "	mul.f32 	%f3290, %f3289, %f14;\n"
    "	cvt.rni.f32.f32 	%f3291, %f3290;\n"
    "	mul.f32 	%f3292, %f13, %f3291;\n"
    "	sub.f32 	%f44, %f3289, %f3292;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3287;\n"
    "	mov.f32 	%f3293, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p62, %f45, %f3293;\n"
    "	@!%p62 bra 	$Lt_9_44290;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd137, %r27;\n"
    "	mul.wide.s32 	%rd138, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd138;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f3294, [%rd18+12];\n"
    "	mov.f32 	%f3295, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3296, %f3294, %f3295;\n"
    "	mul.f32 	%f3297, %f52, %f3296;\n"
    "	ld.const.f32 	%f3298, [%rd18+4];\n"
    "	sub.f32 	%f3299, %f3298, %f47;\n"
    "	mul.f32 	%f3300, %f50, %f3299;\n"
    "	mov.f32 	%f3301, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3302, %f3300, %f3301;\n"
    "	ex2.approx.f32 	%f3303, %f3302;\n"
    "	ld.const.f32 	%f3304, [%rd18+0];\n"
    "	mov.f32 	%f3305, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3306, %f3304, %f3305;\n"
    "	mul.f32 	%f3307, %f3303, %f3306;\n"
    "	mul.f32 	%f3308, %f50, %f3307;\n"
    "	mul.f32 	%f3309, %f48, %f3308;\n"
    "	sub.f32 	%f3310, %f3309, %f3297;\n"
    "	ld.const.f32 	%f3311, [%rd18+16];\n"
    "	mov.f32 	%f3312, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3313, %f3311, %f3312;\n"
    "	mul.f32 	%f3314, %f52, %f3313;\n"
    "	mul.f32 	%f3315, %f49, %f3314;\n"
    "	sub.f32 	%f3316, %f3310, %f3315;\n"
    "	ld.const.f32 	%f3317, [%rd18+20];\n"
    "	mul.f32 	%f3318, %f48, %f49;\n"
    "	mad.f32 	%f78, %f3317, %f3318, %f3316;\n"
    "	mov.f32 	%f3319, %f2;\n"
    "	mov.f32 	%f3320, %f27;\n"
    "	mad.f32 	%f3321, %f3320, %f78, %f3319;\n"
    "	mov.f32 	%f2, %f3321;\n"
    "	mov.f32 	%f3322, %f4;\n"
    "	mov.f32 	%f3323, %f37;\n"
    "	mad.f32 	%f3324, %f3323, %f78, %f3322;\n"
    "	mov.f32 	%f4, %f3324;\n"
    "	mov.f32 	%f3325, %f6;\n"
    "	mad.f32 	%f3326, %f44, %f78, %f3325;\n"
    "	mov.f32 	%f6, %f3326;\n"
    "$Lt_9_44290:\n"
    "	ld.shared.s32 	%r88, [%rd14+988];\n"
    "	add.s32 	%r27, %r88, %r6;\n"
    "	ld.shared.f32 	%f3327, [%rd15+976];\n"
    "	sub.f32 	%f3328, %f19, %f3327;\n"
    "	mov.f32 	%f3329, %f3328;\n"
    "	mul.f32 	%f3330, %f14, %f3329;\n"
    "	cvt.rni.f32.f32 	%f3331, %f3330;\n"
    "	mul.f32 	%f3332, %f13, %f3331;\n"
    "	sub.f32 	%f26, %f3328, %f3332;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3333, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3334, %f26, %f26, %f3333;\n"
    "	ld.shared.f32 	%f3335, [%rd15+980];\n"
    "	sub.f32 	%f3336, %f18, %f3335;\n"
    "	mov.f32 	%f3337, %f3336;\n"
    "	mul.f32 	%f3338, %f14, %f3337;\n"
    "	cvt.rni.f32.f32 	%f3339, %f3338;\n"
    "	mul.f32 	%f3340, %f13, %f3339;\n"
    "	sub.f32 	%f36, %f3336, %f3340;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3341, %f36, %f36, %f3334;\n"
    "	ld.shared.f32 	%f3342, [%rd15+984];\n"
    "	sub.f32 	%f3343, %f11, %f3342;\n"
    "	mul.f32 	%f3344, %f3343, %f14;\n"
    "	cvt.rni.f32.f32 	%f3345, %f3344;\n"
    "	mul.f32 	%f3346, %f13, %f3345;\n"
    "	sub.f32 	%f44, %f3343, %f3346;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3341;\n"
    "	mov.f32 	%f3347, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p63, %f45, %f3347;\n"
    "	@!%p63 bra 	$Lt_9_44802;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd139, %r27;\n"
    "	mul.wide.s32 	%rd140, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd140;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f3348, [%rd18+12];\n"
    "	mov.f32 	%f3349, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3350, %f3348, %f3349;\n"
    "	mul.f32 	%f3351, %f52, %f3350;\n"
    "	ld.const.f32 	%f3352, [%rd18+4];\n"
    "	sub.f32 	%f3353, %f3352, %f47;\n"
    "	mul.f32 	%f3354, %f50, %f3353;\n"
    "	mov.f32 	%f3355, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3356, %f3354, %f3355;\n"
    "	ex2.approx.f32 	%f3357, %f3356;\n"
    "	ld.const.f32 	%f3358, [%rd18+0];\n"
    "	mov.f32 	%f3359, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3360, %f3358, %f3359;\n"
    "	mul.f32 	%f3361, %f3357, %f3360;\n"
    "	mul.f32 	%f3362, %f50, %f3361;\n"
    "	mul.f32 	%f3363, %f48, %f3362;\n"
    "	sub.f32 	%f3364, %f3363, %f3351;\n"
    "	ld.const.f32 	%f3365, [%rd18+16];\n"
    "	mov.f32 	%f3366, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3367, %f3365, %f3366;\n"
    "	mul.f32 	%f3368, %f52, %f3367;\n"
    "	mul.f32 	%f3369, %f49, %f3368;\n"
    "	sub.f32 	%f3370, %f3364, %f3369;\n"
    "	ld.const.f32 	%f3371, [%rd18+20];\n"
    "	mul.f32 	%f3372, %f48, %f49;\n"
    "	mad.f32 	%f78, %f3371, %f3372, %f3370;\n"
    "	mov.f32 	%f3373, %f2;\n"
    "	mov.f32 	%f3374, %f27;\n"
    "	mad.f32 	%f3375, %f3374, %f78, %f3373;\n"
    "	mov.f32 	%f2, %f3375;\n"
    "	mov.f32 	%f3376, %f4;\n"
    "	mov.f32 	%f3377, %f37;\n"
    "	mad.f32 	%f3378, %f3377, %f78, %f3376;\n"
    "	mov.f32 	%f4, %f3378;\n"
    "	mov.f32 	%f3379, %f6;\n"
    "	mad.f32 	%f3380, %f44, %f78, %f3379;\n"
    "	mov.f32 	%f6, %f3380;\n"
    "$Lt_9_44802:\n"
    "	ld.shared.s32 	%r89, [%rd14+1004];\n"
    "	add.s32 	%r27, %r89, %r6;\n"
    "	ld.shared.f32 	%f3381, [%rd15+992];\n"
    "	sub.f32 	%f3382, %f19, %f3381;\n"
    "	mov.f32 	%f3383, %f3382;\n"
    "	mul.f32 	%f3384, %f14, %f3383;\n"
    "	cvt.rni.f32.f32 	%f3385, %f3384;\n"
    "	mul.f32 	%f3386, %f13, %f3385;\n"
    "	sub.f32 	%f26, %f3382, %f3386;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3387, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3388, %f26, %f26, %f3387;\n"
    "	ld.shared.f32 	%f3389, [%rd15+996];\n"
    "	sub.f32 	%f3390, %f18, %f3389;\n"
    "	mov.f32 	%f3391, %f3390;\n"
    "	mul.f32 	%f3392, %f14, %f3391;\n"
    "	cvt.rni.f32.f32 	%f3393, %f3392;\n"
    "	mul.f32 	%f3394, %f13, %f3393;\n"
    "	sub.f32 	%f36, %f3390, %f3394;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3395, %f36, %f36, %f3388;\n"
    "	ld.shared.f32 	%f3396, [%rd15+1000];\n"
    "	sub.f32 	%f3397, %f11, %f3396;\n"
    "	mul.f32 	%f3398, %f3397, %f14;\n"
    "	cvt.rni.f32.f32 	%f3399, %f3398;\n"
    "	mul.f32 	%f3400, %f13, %f3399;\n"
    "	sub.f32 	%f44, %f3397, %f3400;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3395;\n"
    "	mov.f32 	%f3401, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p64, %f45, %f3401;\n"
    "	@!%p64 bra 	$Lt_9_45314;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd141, %r27;\n"
    "	mul.wide.s32 	%rd142, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd142;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f3402, [%rd18+12];\n"
    "	mov.f32 	%f3403, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3404, %f3402, %f3403;\n"
    "	mul.f32 	%f3405, %f52, %f3404;\n"
    "	ld.const.f32 	%f3406, [%rd18+4];\n"
    "	sub.f32 	%f3407, %f3406, %f47;\n"
    "	mul.f32 	%f3408, %f50, %f3407;\n"
    "	mov.f32 	%f3409, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3410, %f3408, %f3409;\n"
    "	ex2.approx.f32 	%f3411, %f3410;\n"
    "	ld.const.f32 	%f3412, [%rd18+0];\n"
    "	mov.f32 	%f3413, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3414, %f3412, %f3413;\n"
    "	mul.f32 	%f3415, %f3411, %f3414;\n"
    "	mul.f32 	%f3416, %f50, %f3415;\n"
    "	mul.f32 	%f3417, %f48, %f3416;\n"
    "	sub.f32 	%f3418, %f3417, %f3405;\n"
    "	ld.const.f32 	%f3419, [%rd18+16];\n"
    "	mov.f32 	%f3420, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3421, %f3419, %f3420;\n"
    "	mul.f32 	%f3422, %f52, %f3421;\n"
    "	mul.f32 	%f3423, %f49, %f3422;\n"
    "	sub.f32 	%f3424, %f3418, %f3423;\n"
    "	ld.const.f32 	%f3425, [%rd18+20];\n"
    "	mul.f32 	%f3426, %f48, %f49;\n"
    "	mad.f32 	%f78, %f3425, %f3426, %f3424;\n"
    "	mov.f32 	%f3427, %f2;\n"
    "	mov.f32 	%f3428, %f27;\n"
    "	mad.f32 	%f3429, %f3428, %f78, %f3427;\n"
    "	mov.f32 	%f2, %f3429;\n"
    "	mov.f32 	%f3430, %f4;\n"
    "	mov.f32 	%f3431, %f37;\n"
    "	mad.f32 	%f3432, %f3431, %f78, %f3430;\n"
    "	mov.f32 	%f4, %f3432;\n"
    "	mov.f32 	%f3433, %f6;\n"
    "	mad.f32 	%f3434, %f44, %f78, %f3433;\n"
    "	mov.f32 	%f6, %f3434;\n"
    "$Lt_9_45314:\n"
    "	ld.shared.s32 	%r90, [%rd14+1020];\n"
    "	add.s32 	%r27, %r90, %r6;\n"
    "	ld.shared.f32 	%f3435, [%rd15+1008];\n"
    "	sub.f32 	%f3436, %f19, %f3435;\n"
    "	mov.f32 	%f3437, %f3436;\n"
    "	mul.f32 	%f3438, %f14, %f3437;\n"
    "	cvt.rni.f32.f32 	%f3439, %f3438;\n"
    "	mul.f32 	%f3440, %f13, %f3439;\n"
    "	sub.f32 	%f26, %f3436, %f3440;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f3441, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3442, %f26, %f26, %f3441;\n"
    "	ld.shared.f32 	%f3443, [%rd15+1012];\n"
    "	sub.f32 	%f3444, %f18, %f3443;\n"
    "	mov.f32 	%f3445, %f3444;\n"
    "	mov.f32 	%f3446, %f3445;\n"
    "	mul.f32 	%f3447, %f14, %f3445;\n"
    "	cvt.rni.f32.f32 	%f3448, %f3447;\n"
    "	mul.f32 	%f3449, %f13, %f3448;\n"
    "	sub.f32 	%f36, %f3444, %f3449;\n"
    "	mov.f32 	%f37, %f36;\n"
    "	mad.f32 	%f3450, %f36, %f36, %f3442;\n"
    "	ld.shared.f32 	%f3451, [%rd15+1016];\n"
    "	sub.f32 	%f3452, %f11, %f3451;\n"
    "	mov.f32 	%f3453, %f3452;\n"
    "	mul.f32 	%f3454, %f3452, %f14;\n"
    "	cvt.rni.f32.f32 	%f3455, %f3454;\n"
    "	mul.f32 	%f3456, %f13, %f3455;\n"
    "	sub.f32 	%f44, %f3452, %f3456;\n"
    "	mov.f32 	%f3457, %f44;\n"
    "	mad.f32 	%f45, %f44, %f44, %f3450;\n"
    "	mov.f32 	%f3458, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p65, %f45, %f3458;\n"
    "	@!%p65 bra 	$Lt_9_45826;\n"
    "	sqrt.approx.f32 	%f47, %f45;\n"
    "	rcp.approx.f32 	%f48, %f47;\n"
    "	cvt.s64.s32 	%rd143, %r27;\n"
    "	mul.wide.s32 	%rd144, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd144;\n"
    "	mul.f32 	%f49, %f48, %f48;\n"
    "	ld.const.f32 	%f50, [%rd18+8];\n"
    "	mul.f32 	%f51, %f49, %f49;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f3459, [%rd18+12];\n"
    "	mov.f32 	%f3460, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3461, %f3459, %f3460;\n"
    "	mul.f32 	%f3462, %f52, %f3461;\n"
    "	ld.const.f32 	%f3463, [%rd18+4];\n"
    "	sub.f32 	%f3464, %f3463, %f47;\n"
    "	mul.f32 	%f3465, %f50, %f3464;\n"
    "	mov.f32 	%f3466, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3467, %f3465, %f3466;\n"
    "	ex2.approx.f32 	%f3468, %f3467;\n"
    "	ld.const.f32 	%f3469, [%rd18+0];\n"
    "	mov.f32 	%f3470, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3471, %f3469, %f3470;\n"
    "	mul.f32 	%f3472, %f3468, %f3471;\n"
    "	mul.f32 	%f3473, %f50, %f3472;\n"
    "	mul.f32 	%f3474, %f48, %f3473;\n"
    "	sub.f32 	%f3475, %f3474, %f3462;\n"
    "	ld.const.f32 	%f3476, [%rd18+16];\n"
    "	mov.f32 	%f3477, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3478, %f3476, %f3477;\n"
    "	mul.f32 	%f3479, %f52, %f3478;\n"
    "	mul.f32 	%f3480, %f49, %f3479;\n"
    "	sub.f32 	%f3481, %f3475, %f3480;\n"
    "	ld.const.f32 	%f3482, [%rd18+20];\n"
    "	mul.f32 	%f3483, %f48, %f49;\n"
    "	mad.f32 	%f78, %f3482, %f3483, %f3481;\n"
    "	mov.f32 	%f3484, %f2;\n"
    "	mov.f32 	%f3485, %f27;\n"
    "	mad.f32 	%f3486, %f3485, %f78, %f3484;\n"
    "	mov.f32 	%f2, %f3486;\n"
    "	mov.f32 	%f3487, %f4;\n"
    "	mov.f32 	%f3488, %f37;\n"
    "	mad.f32 	%f3489, %f3488, %f78, %f3487;\n"
    "	mov.f32 	%f4, %f3489;\n"
    "	mov.f32 	%f3490, %f6;\n"
    "	mad.f32 	%f3491, %f44, %f78, %f3490;\n"
    "	mov.f32 	%f6, %f3491;\n"
    "$Lt_9_45826:\n"
    "	add.s32 	%r25, %r25, 64;\n"
    "	add.u64 	%rd13, %rd13, 1024;\n"
    "	mov.u32 	%r91, 256;\n"
    "	setp.ne.s32 	%p66, %r25, %r91;\n"
    "	@%p66 bra 	$Lt_9_13314;\n"
    "	add.s32 	%r21, %r21, 256;\n"
    "	setp.gt.s32 	%p67, %r13, %r21;\n"
    "	@%p67 bra 	$Lt_9_12546;\n"
    "$Lt_9_12034:\n"
    "	mov.u64 	%rd9, c_matrix;\n"
    "	.loc	3	1343	0\n"
    "	mov.s32 	%r21, %r13;\n"
    "	setp.ge.s32 	%p68, %r13, %r7;\n"
    "	@%p68 bra 	$Lt_9_46850;\n"
    "	sub.s32 	%r92, %r7, %r13;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_constant_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	cvt.s64.s32 	%rd145, %r13;\n"
    "	mul.wide.s32 	%rd146, %r13, 16;\n"
    "	add.u64 	%rd147, %rd1, %rd146;\n"
    "	mov.f32 	%f18, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "	mov.s32 	%r93, %r92;\n"
    "$Lt_9_47362:\n"
    " //<loop> Loop body line 1343, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1344	0\n"
    "	ld.global.s32 	%r94, [%rd147+12];\n"
    "	add.s32 	%r95, %r94, %r6;\n"
    "	ld.global.f32 	%f3492, [%rd147+0];\n"
    "	sub.f32 	%f3493, %f19, %f3492;\n"
    "	mov.f32 	%f3494, %f3493;\n"
    "	mul.f32 	%f3495, %f14, %f3494;\n"
    "	cvt.rni.f32.f32 	%f3496, %f3495;\n"
    "	.loc	3	1343	0\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_constant_xmax];\n"
    "	.loc	3	1344	0\n"
    "	mul.f32 	%f3497, %f13, %f3496;\n"
    "	sub.f32 	%f3498, %f3493, %f3497;\n"
    "	mov.f32 	%f3499, %f3498;\n"
    "	mov.f32 	%f3500, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3501, %f3498, %f3498, %f3500;\n"
    "	ld.global.f32 	%f3502, [%rd147+4];\n"
    "	sub.f32 	%f3503, %f18, %f3502;\n"
    "	mov.f32 	%f3504, %f3503;\n"
    "	mov.f32 	%f3505, %f3504;\n"
    "	mul.f32 	%f3506, %f14, %f3504;\n"
    "	cvt.rni.f32.f32 	%f3507, %f3506;\n"
    "	mul.f32 	%f3508, %f13, %f3507;\n"
    "	sub.f32 	%f3509, %f3503, %f3508;\n"
    "	mov.f32 	%f3510, %f3509;\n"
    "	mad.f32 	%f3511, %f3509, %f3509, %f3501;\n"
    "	ld.global.f32 	%f3512, [%rd147+8];\n"
    "	sub.f32 	%f3513, %f11, %f3512;\n"
    "	mov.f32 	%f3514, %f3513;\n"
    "	mul.f32 	%f3515, %f3513, %f14;\n"
    "	cvt.rni.f32.f32 	%f3516, %f3515;\n"
    "	mul.f32 	%f3517, %f13, %f3516;\n"
    "	sub.f32 	%f3518, %f3513, %f3517;\n"
    "	mov.f32 	%f3519, %f3518;\n"
    "	mad.f32 	%f3520, %f3518, %f3518, %f3511;\n"
    "	mov.f32 	%f3521, 0f00000000;  	// 0\n"
    "	setp.neu.f32 	%p69, %f3520, %f3521;\n"
    "	@!%p69 bra 	$Lt_9_47618;\n"
    "	sqrt.approx.f32 	%f3522, %f3520;\n"
    "	rcp.approx.f32 	%f3523, %f3522;\n"
    "	cvt.s64.s32 	%rd148, %r95;\n"
    "	mul.wide.s32 	%rd149, %r95, 24;\n"
    "	add.u64 	%rd150, %rd9, %rd149;\n"
    "	mul.f32 	%f3524, %f3523, %f3523;\n"
    "	ld.const.f32 	%f3525, [%rd150+8];\n"
    "	mul.f32 	%f3526, %f3524, %f3524;\n"
    "	mul.f32 	%f3527, %f3526, %f3526;\n"
    "	ld.const.f32 	%f3528, [%rd150+12];\n"
    "	mov.f32 	%f3529, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3530, %f3528, %f3529;\n"
    "	mul.f32 	%f3531, %f3527, %f3530;\n"
    "	ld.const.f32 	%f3532, [%rd150+4];\n"
    "	sub.f32 	%f3533, %f3532, %f3522;\n"
    "	mul.f32 	%f3534, %f3525, %f3533;\n"
    "	mov.f32 	%f3535, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3536, %f3534, %f3535;\n"
    "	ex2.approx.f32 	%f3537, %f3536;\n"
    "	ld.const.f32 	%f3538, [%rd150+0];\n"
    "	mov.f32 	%f3539, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3540, %f3538, %f3539;\n"
    "	mul.f32 	%f3541, %f3537, %f3540;\n"
    "	mul.f32 	%f3542, %f3525, %f3541;\n"
    "	mul.f32 	%f3543, %f3523, %f3542;\n"
    "	sub.f32 	%f3544, %f3543, %f3531;\n"
    "	ld.const.f32 	%f3545, [%rd150+16];\n"
    "	mov.f32 	%f3546, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3547, %f3545, %f3546;\n"
    "	mul.f32 	%f3548, %f3527, %f3547;\n"
    "	mul.f32 	%f3549, %f3524, %f3548;\n"
    "	sub.f32 	%f3550, %f3544, %f3549;\n"
    "	ld.const.f32 	%f3551, [%rd150+20];\n"
    "	mul.f32 	%f3552, %f3523, %f3524;\n"
    "	mad.f32 	%f3553, %f3551, %f3552, %f3550;\n"
    "	mov.f32 	%f3554, %f2;\n"
    "	mov.f32 	%f3555, %f3499;\n"
    "	mad.f32 	%f3556, %f3555, %f3553, %f3554;\n"
    "	mov.f32 	%f2, %f3556;\n"
    "	mov.f32 	%f3557, %f4;\n"
    "	mov.f32 	%f3558, %f3510;\n"
    "	mad.f32 	%f3559, %f3558, %f3553, %f3557;\n"
    "	mov.f32 	%f4, %f3559;\n"
    "	mov.f32 	%f3560, %f6;\n"
    "	mad.f32 	%f3561, %f3518, %f3553, %f3560;\n"
    "	mov.f32 	%f6, %f3561;\n"
    "$Lt_9_47618:\n"
    "	add.s32 	%r21, %r21, 1;\n"
    "	add.u64 	%rd147, %rd147, 16;\n"
    "	setp.ne.s32 	%p70, %r7, %r21;\n"
    "	@%p70 bra 	$Lt_9_47362;\n"
    "$Lt_9_46850:\n"
    "	.loc	3	1346	0\n"
    "	ld.param.u64 	%rd151, [__cudaparm_nacl_kernel_constant_fvec];\n"
    "	mul.lo.s32 	%r96, %r3, 3;\n"
    "	cvt.s64.s32 	%rd152, %r96;\n"
    "	mul.wide.s32 	%rd153, %r96, 4;\n"
    "	add.u64 	%rd154, %rd151, %rd153;\n"
    "	mov.f32 	%f3562, %f2;\n"
    "	st.global.f32 	[%rd154+0], %f3562;\n"
    "	mov.f32 	%f3563, %f4;\n"
    "	st.global.f32 	[%rd154+4], %f3563;\n"
    "	mov.f32 	%f3564, %f6;\n"
    "	st.global.f32 	[%rd154+8], %f3564;\n"
    "	.loc	3	1347	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_constant:\n"
    "	} // nacl_kernel_constant\n"
    "\n"
    "	.entry nacl_kernel_if (\n"
    "		.param .u64 __cudaparm_nacl_kernel_if_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_if_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_if_nat,\n"
    "		.param .f32 __cudaparm_nacl_kernel_if_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_if_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<161>;\n"
    "	.reg .u64 %rd<219>;\n"
    "	.reg .f32 %f<4893>;\n"
    "	.reg .pred %p<72>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_16953_35_non_const_s_xj46440[4096];\n"
    "	.loc	3	1491	0\n"
    "$LDWbegin_nacl_kernel_if:\n"
    "	.loc	3	1501	0\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	mov.f32 	%f2, %f1;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	mov.f32 	%f4, %f3;\n"
    "	mov.f32 	%f5, 0f00000000;     	// 0\n"
    "	mov.f32 	%f6, %f5;\n"
    "	.loc	3	1502	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r2, %rh1, 256;\n"
    "	add.u32 	%r3, %r1, %r2;\n"
    "	ld.param.u64 	%rd1, [__cudaparm_nacl_kernel_if_x];\n"
    "	cvt.s64.s32 	%rd2, %r3;\n"
    "	mul.wide.s32 	%rd3, %r3, 16;\n"
    "	add.u64 	%rd4, %rd1, %rd3;\n"
    "	ld.global.f32 	%f7, [%rd4+0];\n"
    "	mov.f32 	%f8, %f7;\n"
    "	ld.global.f32 	%f9, [%rd4+4];\n"
    "	mov.f32 	%f10, %f9;\n"
    "	ld.global.f32 	%f11, [%rd4+8];\n"
    "	mov.f32 	%f12, %f11;\n"
    "	.loc	3	1503	0\n"
    "	ld.global.s32 	%r4, [%rd4+12];\n"
    "	ld.param.s32 	%r5, [__cudaparm_nacl_kernel_if_nat];\n"
    "	mul.lo.s32 	%r6, %r4, %r5;\n"
    "	ld.param.s32 	%r7, [__cudaparm_nacl_kernel_if_n];\n"
    "	shr.s32 	%r8, %r7, 31;\n"
    "	mov.s32 	%r9, 255;\n"
    "	and.b32 	%r10, %r8, %r9;\n"
    "	add.s32 	%r11, %r10, %r7;\n"
    "	shr.s32 	%r12, %r11, 8;\n"
    "	mul.lo.s32 	%r13, %r12, 256;\n"
    "	mov.u32 	%r14, 0;\n"
    "	setp.le.s32 	%p1, %r13, %r14;\n"
    "	@%p1 bra 	$Lt_10_12034;\n"
    "	mov.u64 	%rd5, __cuda___cuda_local_var_16953_35_non_const_s_xj46440;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_if_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	add.s32 	%r15, %r13, 255;\n"
    "	shr.s32 	%r16, %r15, 31;\n"
    "	mov.s32 	%r17, 255;\n"
    "	and.b32 	%r18, %r16, %r17;\n"
    "	add.s32 	%r19, %r18, %r15;\n"
    "	shr.s32 	%r20, %r19, 8;\n"
    "	cvt.s64.s32 	%rd6, %r1;\n"
    "	mul.wide.s32 	%rd7, %r1, 16;\n"
    "	add.u64 	%rd8, %rd5, %rd7;\n"
    "	mov.s32 	%r21, 0;\n"
    "	mov.u64 	%rd9, c_matrix;\n"
    "	mov.s32 	%r22, %r20;\n"
    "$Lt_10_12546:\n"
    " //<loop> Loop body line 1503, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1508	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	1509	0\n"
    "	add.s32 	%r23, %r21, %r1;\n"
    "	cvt.s64.s32 	%rd10, %r23;\n"
    "	mul.wide.s32 	%rd11, %r23, 16;\n"
    "	add.u64 	%rd12, %rd1, %rd11;\n"
    "	ld.global.f32 	%f15, [%rd12+0];\n"
    "	st.shared.f32 	[%rd8+0], %f15;\n"
    "	ld.global.f32 	%f16, [%rd12+4];\n"
    "	st.shared.f32 	[%rd8+4], %f16;\n"
    "	ld.global.f32 	%f17, [%rd12+8];\n"
    "	st.shared.f32 	[%rd8+8], %f17;\n"
    "	ld.global.s32 	%r24, [%rd12+12];\n"
    "	st.shared.s32 	[%rd8+12], %r24;\n"
    "	.loc	3	1510	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	24	0\n"
    "	mov.s64 	%rd13, 0;\n"
    "	mov.s32 	%r25, 0;\n"
    "	mov.f32 	%f11, %f12;\n"
    "	mov.f32 	%f18, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "$Lt_10_13314:\n"
    " //<loop> Loop body line 24, nesting depth: 2, iterations: 4\n"
    "	.loc	3	1513	0\n"
    "	add.u64 	%rd14, %rd13, %rd5;\n"
    "	ld.shared.s32 	%r26, [%rd14+12];\n"
    "	add.s32 	%r27, %r26, %r6;\n"
    "	add.u64 	%rd15, %rd13, %rd5;\n"
    "	ld.shared.f32 	%f20, [%rd15+0];\n"
    "	sub.f32 	%f21, %f19, %f20;\n"
    "	mov.f32 	%f22, %f21;\n"
    "	mul.f32 	%f23, %f14, %f22;\n"
    "	cvt.rni.f32.f32 	%f24, %f23;\n"
    "	mul.f32 	%f25, %f13, %f24;\n"
    "	sub.f32 	%f26, %f21, %f25;\n"
    "	mov.f32 	%f27, %f26;\n"
    "	mov.f32 	%f28, 0f00000000;    	// 0\n"
    "	mad.f32 	%f29, %f26, %f26, %f28;\n"
    "	ld.shared.f32 	%f30, [%rd15+4];\n"
    "	sub.f32 	%f31, %f18, %f30;\n"
    "	mov.f32 	%f32, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	mul.f32 	%f34, %f14, %f32;\n"
    "	cvt.rni.f32.f32 	%f35, %f34;\n"
    "	mul.f32 	%f36, %f13, %f35;\n"
    "	sub.f32 	%f37, %f31, %f36;\n"
    "	mov.f32 	%f38, %f37;\n"
    "	mad.f32 	%f39, %f37, %f37, %f29;\n"
    "	ld.shared.f32 	%f40, [%rd15+8];\n"
    "	sub.f32 	%f41, %f11, %f40;\n"
    "	mov.f32 	%f42, %f41;\n"
    "	mul.f32 	%f43, %f41, %f14;\n"
    "	cvt.rni.f32.f32 	%f44, %f43;\n"
    "	mul.f32 	%f45, %f13, %f44;\n"
    "	sub.f32 	%f46, %f41, %f45;\n"
    "	mov.f32 	%f47, %f46;\n"
    "	mad.f32 	%f48, %f46, %f46, %f39;\n"
    "	mov.f32 	%f49, 0f00000000;    	// 0\n"
    "	setp.eq.f32 	%p2, %f48, %f49;\n"
    "	sqrt.approx.f32 	%f50, %f48;\n"
    "	rcp.approx.f32 	%f51, %f50;\n"
    "	cvt.s64.s32 	%rd16, %r27;\n"
    "	mul.wide.s32 	%rd17, %r27, 24;\n"
    "	add.u64 	%rd18, %rd9, %rd17;\n"
    "	mul.f32 	%f52, %f51, %f51;\n"
    "	ld.const.f32 	%f53, [%rd18+12];\n"
    "	ld.const.f32 	%f54, [%rd18+8];\n"
    "	ld.const.f32 	%f55, [%rd18+4];\n"
    "	ld.const.f32 	%f56, [%rd18+0];\n"
    "	ld.const.f32 	%f57, [%rd18+16];\n"
    "	ld.const.f32 	%f58, [%rd18+20];\n"
    "	mul.f32 	%f59, %f52, %f52;\n"
    "	mul.f32 	%f60, %f51, %f52;\n"
    "	mov.f32 	%f61, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f62, %f53, %f61;\n"
    "	sub.f32 	%f63, %f55, %f50;\n"
    "	mov.f32 	%f64, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f65, %f56, %f64;\n"
    "	mov.f32 	%f66, 0f41000000;    	// 8\n"
    "	mul.f32 	%f67, %f57, %f66;\n"
    "	mul.f32 	%f68, %f59, %f59;\n"
    "	mul.f32 	%f69, %f54, %f63;\n"
    "	mul.f32 	%f70, %f62, %f68;\n"
    "	mul.f32 	%f71, %f67, %f68;\n"
    "	mov.f32 	%f72, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f73, %f69, %f72;\n"
    "	ex2.approx.f32 	%f74, %f73;\n"
    "	mul.f32 	%f75, %f65, %f74;\n"
    "	mul.f32 	%f76, %f54, %f75;\n"
    "	mul.f32 	%f77, %f51, %f76;\n"
    "	sub.f32 	%f78, %f77, %f70;\n"
    "	mul.f32 	%f79, %f52, %f71;\n"
    "	sub.f32 	%f80, %f78, %f79;\n"
    "	mad.f32 	%f81, %f58, %f60, %f80;\n"
    "	mov.f32 	%f82, 0f00000000;    	// 0\n"
    "	selp.f32 	%f83, %f82, %f81, %p2;\n"
    "	mov.f32 	%f84, %f2;\n"
    "	mov.f32 	%f85, %f27;\n"
    "	mad.f32 	%f86, %f85, %f83, %f84;\n"
    "	mov.f32 	%f87, %f86;\n"
    "	mov.f32 	%f88, %f4;\n"
    "	mov.f32 	%f89, %f38;\n"
    "	mad.f32 	%f90, %f89, %f83, %f88;\n"
    "	mov.f32 	%f91, %f90;\n"
    "	mov.f32 	%f92, %f6;\n"
    "	mad.f32 	%f93, %f46, %f83, %f92;\n"
    "	mov.f32 	%f94, %f93;\n"
    "	ld.shared.s32 	%r28, [%rd14+28];\n"
    "	add.s32 	%r29, %r28, %r6;\n"
    "	ld.shared.f32 	%f95, [%rd15+16];\n"
    "	sub.f32 	%f96, %f19, %f95;\n"
    "	mov.f32 	%f97, %f96;\n"
    "	mul.f32 	%f98, %f14, %f97;\n"
    "	cvt.rni.f32.f32 	%f99, %f98;\n"
    "	mul.f32 	%f100, %f13, %f99;\n"
    "	sub.f32 	%f101, %f96, %f100;\n"
    "	mov.f32 	%f102, %f101;\n"
    "	mov.f32 	%f103, 0f00000000;   	// 0\n"
    "	mad.f32 	%f104, %f101, %f101, %f103;\n"
    "	ld.shared.f32 	%f105, [%rd15+20];\n"
    "	sub.f32 	%f106, %f18, %f105;\n"
    "	mov.f32 	%f107, %f106;\n"
    "	mov.f32 	%f108, %f107;\n"
    "	mul.f32 	%f109, %f14, %f107;\n"
    "	cvt.rni.f32.f32 	%f110, %f109;\n"
    "	mul.f32 	%f111, %f13, %f110;\n"
    "	sub.f32 	%f112, %f106, %f111;\n"
    "	mov.f32 	%f113, %f112;\n"
    "	mad.f32 	%f114, %f112, %f112, %f104;\n"
    "	ld.shared.f32 	%f115, [%rd15+24];\n"
    "	sub.f32 	%f116, %f11, %f115;\n"
    "	mov.f32 	%f117, %f116;\n"
    "	mul.f32 	%f118, %f116, %f14;\n"
    "	cvt.rni.f32.f32 	%f119, %f118;\n"
    "	mul.f32 	%f120, %f13, %f119;\n"
    "	sub.f32 	%f121, %f116, %f120;\n"
    "	mov.f32 	%f122, %f121;\n"
    "	mad.f32 	%f123, %f121, %f121, %f114;\n"
    "	mov.f32 	%f124, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p3, %f123, %f124;\n"
    "	sqrt.approx.f32 	%f125, %f123;\n"
    "	rcp.approx.f32 	%f126, %f125;\n"
    "	cvt.s64.s32 	%rd19, %r29;\n"
    "	mul.wide.s32 	%rd20, %r29, 24;\n"
    "	add.u64 	%rd21, %rd9, %rd20;\n"
    "	mul.f32 	%f127, %f126, %f126;\n"
    "	ld.const.f32 	%f128, [%rd21+12];\n"
    "	ld.const.f32 	%f129, [%rd21+8];\n"
    "	ld.const.f32 	%f130, [%rd21+4];\n"
    "	ld.const.f32 	%f131, [%rd21+0];\n"
    "	ld.const.f32 	%f132, [%rd21+16];\n"
    "	ld.const.f32 	%f133, [%rd21+20];\n"
    "	mul.f32 	%f134, %f127, %f127;\n"
    "	mul.f32 	%f135, %f126, %f127;\n"
    "	mov.f32 	%f136, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f137, %f128, %f136;\n"
    "	sub.f32 	%f138, %f130, %f125;\n"
    "	mov.f32 	%f139, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f140, %f131, %f139;\n"
    "	mov.f32 	%f141, 0f41000000;   	// 8\n"
    "	mul.f32 	%f142, %f132, %f141;\n"
    "	mul.f32 	%f143, %f134, %f134;\n"
    "	mul.f32 	%f144, %f129, %f138;\n"
    "	mul.f32 	%f145, %f137, %f143;\n"
    "	mul.f32 	%f146, %f142, %f143;\n"
    "	mov.f32 	%f147, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f148, %f144, %f147;\n"
    "	ex2.approx.f32 	%f149, %f148;\n"
    "	mul.f32 	%f150, %f140, %f149;\n"
    "	mul.f32 	%f151, %f129, %f150;\n"
    "	mul.f32 	%f152, %f126, %f151;\n"
    "	sub.f32 	%f153, %f152, %f145;\n"
    "	mul.f32 	%f154, %f127, %f146;\n"
    "	sub.f32 	%f155, %f153, %f154;\n"
    "	mad.f32 	%f156, %f133, %f135, %f155;\n"
    "	mov.f32 	%f157, 0f00000000;   	// 0\n"
    "	selp.f32 	%f158, %f157, %f156, %p3;\n"
    "	mov.f32 	%f159, %f87;\n"
    "	mov.f32 	%f160, %f102;\n"
    "	mad.f32 	%f161, %f160, %f158, %f159;\n"
    "	mov.f32 	%f162, %f161;\n"
    "	mov.f32 	%f163, %f91;\n"
    "	mov.f32 	%f164, %f113;\n"
    "	mad.f32 	%f165, %f164, %f158, %f163;\n"
    "	mov.f32 	%f166, %f165;\n"
    "	mov.f32 	%f167, %f94;\n"
    "	mad.f32 	%f168, %f121, %f158, %f167;\n"
    "	mov.f32 	%f169, %f168;\n"
    "	ld.shared.s32 	%r30, [%rd14+44];\n"
    "	add.s32 	%r31, %r30, %r6;\n"
    "	ld.shared.f32 	%f170, [%rd15+32];\n"
    "	sub.f32 	%f171, %f19, %f170;\n"
    "	mov.f32 	%f172, %f171;\n"
    "	mul.f32 	%f173, %f14, %f172;\n"
    "	cvt.rni.f32.f32 	%f174, %f173;\n"
    "	mul.f32 	%f175, %f13, %f174;\n"
    "	sub.f32 	%f176, %f171, %f175;\n"
    "	mov.f32 	%f177, %f176;\n"
    "	mov.f32 	%f178, 0f00000000;   	// 0\n"
    "	mad.f32 	%f179, %f176, %f176, %f178;\n"
    "	ld.shared.f32 	%f180, [%rd15+36];\n"
    "	sub.f32 	%f181, %f18, %f180;\n"
    "	mov.f32 	%f182, %f181;\n"
    "	mov.f32 	%f183, %f182;\n"
    "	mul.f32 	%f184, %f14, %f182;\n"
    "	cvt.rni.f32.f32 	%f185, %f184;\n"
    "	mul.f32 	%f186, %f13, %f185;\n"
    "	sub.f32 	%f187, %f181, %f186;\n"
    "	mov.f32 	%f188, %f187;\n"
    "	mad.f32 	%f189, %f187, %f187, %f179;\n"
    "	ld.shared.f32 	%f190, [%rd15+40];\n"
    "	sub.f32 	%f191, %f11, %f190;\n"
    "	mov.f32 	%f192, %f191;\n"
    "	mul.f32 	%f193, %f191, %f14;\n"
    "	cvt.rni.f32.f32 	%f194, %f193;\n"
    "	mul.f32 	%f195, %f13, %f194;\n"
    "	sub.f32 	%f196, %f191, %f195;\n"
    "	mov.f32 	%f197, %f196;\n"
    "	mad.f32 	%f198, %f196, %f196, %f189;\n"
    "	mov.f32 	%f199, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p4, %f198, %f199;\n"
    "	sqrt.approx.f32 	%f200, %f198;\n"
    "	rcp.approx.f32 	%f201, %f200;\n"
    "	cvt.s64.s32 	%rd22, %r31;\n"
    "	mul.wide.s32 	%rd23, %r31, 24;\n"
    "	add.u64 	%rd24, %rd9, %rd23;\n"
    "	mul.f32 	%f202, %f201, %f201;\n"
    "	ld.const.f32 	%f203, [%rd24+12];\n"
    "	ld.const.f32 	%f204, [%rd24+8];\n"
    "	ld.const.f32 	%f205, [%rd24+4];\n"
    "	ld.const.f32 	%f206, [%rd24+0];\n"
    "	ld.const.f32 	%f207, [%rd24+16];\n"
    "	ld.const.f32 	%f208, [%rd24+20];\n"
    "	mul.f32 	%f209, %f202, %f202;\n"
    "	mul.f32 	%f210, %f201, %f202;\n"
    "	mov.f32 	%f211, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f212, %f203, %f211;\n"
    "	sub.f32 	%f213, %f205, %f200;\n"
    "	mov.f32 	%f214, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f215, %f206, %f214;\n"
    "	mov.f32 	%f216, 0f41000000;   	// 8\n"
    "	mul.f32 	%f217, %f207, %f216;\n"
    "	mul.f32 	%f218, %f209, %f209;\n"
    "	mul.f32 	%f219, %f204, %f213;\n"
    "	mul.f32 	%f220, %f212, %f218;\n"
    "	mul.f32 	%f221, %f217, %f218;\n"
    "	mov.f32 	%f222, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f223, %f219, %f222;\n"
    "	ex2.approx.f32 	%f224, %f223;\n"
    "	mul.f32 	%f225, %f215, %f224;\n"
    "	mul.f32 	%f226, %f204, %f225;\n"
    "	mul.f32 	%f227, %f201, %f226;\n"
    "	sub.f32 	%f228, %f227, %f220;\n"
    "	mul.f32 	%f229, %f202, %f221;\n"
    "	sub.f32 	%f230, %f228, %f229;\n"
    "	mad.f32 	%f231, %f208, %f210, %f230;\n"
    "	mov.f32 	%f232, 0f00000000;   	// 0\n"
    "	selp.f32 	%f233, %f232, %f231, %p4;\n"
    "	mov.f32 	%f234, %f162;\n"
    "	mov.f32 	%f235, %f177;\n"
    "	mad.f32 	%f236, %f235, %f233, %f234;\n"
    "	mov.f32 	%f237, %f236;\n"
    "	mov.f32 	%f238, %f166;\n"
    "	mov.f32 	%f239, %f188;\n"
    "	mad.f32 	%f240, %f239, %f233, %f238;\n"
    "	mov.f32 	%f241, %f240;\n"
    "	mov.f32 	%f242, %f169;\n"
    "	mad.f32 	%f243, %f196, %f233, %f242;\n"
    "	mov.f32 	%f244, %f243;\n"
    "	ld.shared.s32 	%r32, [%rd14+60];\n"
    "	add.s32 	%r33, %r32, %r6;\n"
    "	ld.shared.f32 	%f245, [%rd15+48];\n"
    "	sub.f32 	%f246, %f19, %f245;\n"
    "	mov.f32 	%f247, %f246;\n"
    "	mul.f32 	%f248, %f14, %f247;\n"
    "	cvt.rni.f32.f32 	%f249, %f248;\n"
    "	mul.f32 	%f250, %f13, %f249;\n"
    "	sub.f32 	%f251, %f246, %f250;\n"
    "	mov.f32 	%f252, %f251;\n"
    "	mov.f32 	%f253, 0f00000000;   	// 0\n"
    "	mad.f32 	%f254, %f251, %f251, %f253;\n"
    "	ld.shared.f32 	%f255, [%rd15+52];\n"
    "	sub.f32 	%f256, %f18, %f255;\n"
    "	mov.f32 	%f257, %f256;\n"
    "	mov.f32 	%f258, %f257;\n"
    "	mul.f32 	%f259, %f14, %f257;\n"
    "	cvt.rni.f32.f32 	%f260, %f259;\n"
    "	mul.f32 	%f261, %f13, %f260;\n"
    "	sub.f32 	%f262, %f256, %f261;\n"
    "	mov.f32 	%f263, %f262;\n"
    "	mad.f32 	%f264, %f262, %f262, %f254;\n"
    "	ld.shared.f32 	%f265, [%rd15+56];\n"
    "	sub.f32 	%f266, %f11, %f265;\n"
    "	mov.f32 	%f267, %f266;\n"
    "	mul.f32 	%f268, %f266, %f14;\n"
    "	cvt.rni.f32.f32 	%f269, %f268;\n"
    "	mul.f32 	%f270, %f13, %f269;\n"
    "	sub.f32 	%f271, %f266, %f270;\n"
    "	mov.f32 	%f272, %f271;\n"
    "	mad.f32 	%f273, %f271, %f271, %f264;\n"
    "	mov.f32 	%f274, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p5, %f273, %f274;\n"
    "	sqrt.approx.f32 	%f275, %f273;\n"
    "	rcp.approx.f32 	%f276, %f275;\n"
    "	cvt.s64.s32 	%rd25, %r33;\n"
    "	mul.wide.s32 	%rd26, %r33, 24;\n"
    "	add.u64 	%rd27, %rd9, %rd26;\n"
    "	mul.f32 	%f277, %f276, %f276;\n"
    "	ld.const.f32 	%f278, [%rd27+12];\n"
    "	ld.const.f32 	%f279, [%rd27+8];\n"
    "	ld.const.f32 	%f280, [%rd27+4];\n"
    "	ld.const.f32 	%f281, [%rd27+0];\n"
    "	ld.const.f32 	%f282, [%rd27+16];\n"
    "	ld.const.f32 	%f283, [%rd27+20];\n"
    "	mul.f32 	%f284, %f277, %f277;\n"
    "	mul.f32 	%f285, %f276, %f277;\n"
    "	mov.f32 	%f286, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f287, %f278, %f286;\n"
    "	sub.f32 	%f288, %f280, %f275;\n"
    "	mov.f32 	%f289, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f290, %f281, %f289;\n"
    "	mov.f32 	%f291, 0f41000000;   	// 8\n"
    "	mul.f32 	%f292, %f282, %f291;\n"
    "	mul.f32 	%f293, %f284, %f284;\n"
    "	mul.f32 	%f294, %f279, %f288;\n"
    "	mul.f32 	%f295, %f287, %f293;\n"
    "	mul.f32 	%f296, %f292, %f293;\n"
    "	mov.f32 	%f297, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f298, %f294, %f297;\n"
    "	ex2.approx.f32 	%f299, %f298;\n"
    "	mul.f32 	%f300, %f290, %f299;\n"
    "	mul.f32 	%f301, %f279, %f300;\n"
    "	mul.f32 	%f302, %f276, %f301;\n"
    "	sub.f32 	%f303, %f302, %f295;\n"
    "	mul.f32 	%f304, %f277, %f296;\n"
    "	sub.f32 	%f305, %f303, %f304;\n"
    "	mad.f32 	%f306, %f283, %f285, %f305;\n"
    "	mov.f32 	%f307, 0f00000000;   	// 0\n"
    "	selp.f32 	%f308, %f307, %f306, %p5;\n"
    "	mov.f32 	%f309, %f237;\n"
    "	mov.f32 	%f310, %f252;\n"
    "	mad.f32 	%f311, %f310, %f308, %f309;\n"
    "	mov.f32 	%f312, %f311;\n"
    "	mov.f32 	%f313, %f241;\n"
    "	mov.f32 	%f314, %f263;\n"
    "	mad.f32 	%f315, %f314, %f308, %f313;\n"
    "	mov.f32 	%f316, %f315;\n"
    "	mov.f32 	%f317, %f244;\n"
    "	mad.f32 	%f318, %f271, %f308, %f317;\n"
    "	mov.f32 	%f319, %f318;\n"
    "	ld.shared.s32 	%r34, [%rd14+76];\n"
    "	add.s32 	%r35, %r34, %r6;\n"
    "	ld.shared.f32 	%f320, [%rd15+64];\n"
    "	sub.f32 	%f321, %f19, %f320;\n"
    "	mov.f32 	%f322, %f321;\n"
    "	mul.f32 	%f323, %f14, %f322;\n"
    "	cvt.rni.f32.f32 	%f324, %f323;\n"
    "	mul.f32 	%f325, %f13, %f324;\n"
    "	sub.f32 	%f326, %f321, %f325;\n"
    "	mov.f32 	%f327, %f326;\n"
    "	mov.f32 	%f328, 0f00000000;   	// 0\n"
    "	mad.f32 	%f329, %f326, %f326, %f328;\n"
    "	ld.shared.f32 	%f330, [%rd15+68];\n"
    "	sub.f32 	%f331, %f18, %f330;\n"
    "	mov.f32 	%f332, %f331;\n"
    "	mov.f32 	%f333, %f332;\n"
    "	mul.f32 	%f334, %f14, %f332;\n"
    "	cvt.rni.f32.f32 	%f335, %f334;\n"
    "	mul.f32 	%f336, %f13, %f335;\n"
    "	sub.f32 	%f337, %f331, %f336;\n"
    "	mov.f32 	%f338, %f337;\n"
    "	mad.f32 	%f339, %f337, %f337, %f329;\n"
    "	ld.shared.f32 	%f340, [%rd15+72];\n"
    "	sub.f32 	%f341, %f11, %f340;\n"
    "	mov.f32 	%f342, %f341;\n"
    "	mul.f32 	%f343, %f341, %f14;\n"
    "	cvt.rni.f32.f32 	%f344, %f343;\n"
    "	mul.f32 	%f345, %f13, %f344;\n"
    "	sub.f32 	%f346, %f341, %f345;\n"
    "	mov.f32 	%f347, %f346;\n"
    "	mad.f32 	%f348, %f346, %f346, %f339;\n"
    "	mov.f32 	%f349, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p6, %f348, %f349;\n"
    "	sqrt.approx.f32 	%f350, %f348;\n"
    "	rcp.approx.f32 	%f351, %f350;\n"
    "	cvt.s64.s32 	%rd28, %r35;\n"
    "	mul.wide.s32 	%rd29, %r35, 24;\n"
    "	add.u64 	%rd30, %rd9, %rd29;\n"
    "	mul.f32 	%f352, %f351, %f351;\n"
    "	ld.const.f32 	%f353, [%rd30+12];\n"
    "	ld.const.f32 	%f354, [%rd30+8];\n"
    "	ld.const.f32 	%f355, [%rd30+4];\n"
    "	ld.const.f32 	%f356, [%rd30+0];\n"
    "	ld.const.f32 	%f357, [%rd30+16];\n"
    "	ld.const.f32 	%f358, [%rd30+20];\n"
    "	mul.f32 	%f359, %f352, %f352;\n"
    "	mul.f32 	%f360, %f351, %f352;\n"
    "	mov.f32 	%f361, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f362, %f353, %f361;\n"
    "	sub.f32 	%f363, %f355, %f350;\n"
    "	mov.f32 	%f364, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f365, %f356, %f364;\n"
    "	mov.f32 	%f366, 0f41000000;   	// 8\n"
    "	mul.f32 	%f367, %f357, %f366;\n"
    "	mul.f32 	%f368, %f359, %f359;\n"
    "	mul.f32 	%f369, %f354, %f363;\n"
    "	mul.f32 	%f370, %f362, %f368;\n"
    "	mul.f32 	%f371, %f367, %f368;\n"
    "	mov.f32 	%f372, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f373, %f369, %f372;\n"
    "	ex2.approx.f32 	%f374, %f373;\n"
    "	mul.f32 	%f375, %f365, %f374;\n"
    "	mul.f32 	%f376, %f354, %f375;\n"
    "	mul.f32 	%f377, %f351, %f376;\n"
    "	sub.f32 	%f378, %f377, %f370;\n"
    "	mul.f32 	%f379, %f352, %f371;\n"
    "	sub.f32 	%f380, %f378, %f379;\n"
    "	mad.f32 	%f381, %f358, %f360, %f380;\n"
    "	mov.f32 	%f382, 0f00000000;   	// 0\n"
    "	selp.f32 	%f383, %f382, %f381, %p6;\n"
    "	mov.f32 	%f384, %f312;\n"
    "	mov.f32 	%f385, %f327;\n"
    "	mad.f32 	%f386, %f385, %f383, %f384;\n"
    "	mov.f32 	%f387, %f386;\n"
    "	mov.f32 	%f388, %f316;\n"
    "	mov.f32 	%f389, %f338;\n"
    "	mad.f32 	%f390, %f389, %f383, %f388;\n"
    "	mov.f32 	%f391, %f390;\n"
    "	mov.f32 	%f392, %f319;\n"
    "	mad.f32 	%f393, %f346, %f383, %f392;\n"
    "	mov.f32 	%f394, %f393;\n"
    "	ld.shared.s32 	%r36, [%rd14+92];\n"
    "	add.s32 	%r37, %r36, %r6;\n"
    "	ld.shared.f32 	%f395, [%rd15+80];\n"
    "	sub.f32 	%f396, %f19, %f395;\n"
    "	mov.f32 	%f397, %f396;\n"
    "	mul.f32 	%f398, %f14, %f397;\n"
    "	cvt.rni.f32.f32 	%f399, %f398;\n"
    "	mul.f32 	%f400, %f13, %f399;\n"
    "	sub.f32 	%f401, %f396, %f400;\n"
    "	mov.f32 	%f402, %f401;\n"
    "	mov.f32 	%f403, 0f00000000;   	// 0\n"
    "	mad.f32 	%f404, %f401, %f401, %f403;\n"
    "	ld.shared.f32 	%f405, [%rd15+84];\n"
    "	sub.f32 	%f406, %f18, %f405;\n"
    "	mov.f32 	%f407, %f406;\n"
    "	mov.f32 	%f408, %f407;\n"
    "	mul.f32 	%f409, %f14, %f407;\n"
    "	cvt.rni.f32.f32 	%f410, %f409;\n"
    "	mul.f32 	%f411, %f13, %f410;\n"
    "	sub.f32 	%f412, %f406, %f411;\n"
    "	mov.f32 	%f413, %f412;\n"
    "	mad.f32 	%f414, %f412, %f412, %f404;\n"
    "	ld.shared.f32 	%f415, [%rd15+88];\n"
    "	sub.f32 	%f416, %f11, %f415;\n"
    "	mov.f32 	%f417, %f416;\n"
    "	mul.f32 	%f418, %f416, %f14;\n"
    "	cvt.rni.f32.f32 	%f419, %f418;\n"
    "	mul.f32 	%f420, %f13, %f419;\n"
    "	sub.f32 	%f421, %f416, %f420;\n"
    "	mov.f32 	%f422, %f421;\n"
    "	mad.f32 	%f423, %f421, %f421, %f414;\n"
    "	mov.f32 	%f424, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p7, %f423, %f424;\n"
    "	sqrt.approx.f32 	%f425, %f423;\n"
    "	rcp.approx.f32 	%f426, %f425;\n"
    "	cvt.s64.s32 	%rd31, %r37;\n"
    "	mul.wide.s32 	%rd32, %r37, 24;\n"
    "	add.u64 	%rd33, %rd9, %rd32;\n"
    "	mul.f32 	%f427, %f426, %f426;\n"
    "	ld.const.f32 	%f428, [%rd33+12];\n"
    "	ld.const.f32 	%f429, [%rd33+8];\n"
    "	ld.const.f32 	%f430, [%rd33+4];\n"
    "	ld.const.f32 	%f431, [%rd33+0];\n"
    "	ld.const.f32 	%f432, [%rd33+16];\n"
    "	ld.const.f32 	%f433, [%rd33+20];\n"
    "	mul.f32 	%f434, %f427, %f427;\n"
    "	mul.f32 	%f435, %f426, %f427;\n"
    "	mov.f32 	%f436, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f437, %f428, %f436;\n"
    "	sub.f32 	%f438, %f430, %f425;\n"
    "	mov.f32 	%f439, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f440, %f431, %f439;\n"
    "	mov.f32 	%f441, 0f41000000;   	// 8\n"
    "	mul.f32 	%f442, %f432, %f441;\n"
    "	mul.f32 	%f443, %f434, %f434;\n"
    "	mul.f32 	%f444, %f429, %f438;\n"
    "	mul.f32 	%f445, %f437, %f443;\n"
    "	mul.f32 	%f446, %f442, %f443;\n"
    "	mov.f32 	%f447, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f448, %f444, %f447;\n"
    "	ex2.approx.f32 	%f449, %f448;\n"
    "	mul.f32 	%f450, %f440, %f449;\n"
    "	mul.f32 	%f451, %f429, %f450;\n"
    "	mul.f32 	%f452, %f426, %f451;\n"
    "	sub.f32 	%f453, %f452, %f445;\n"
    "	mul.f32 	%f454, %f427, %f446;\n"
    "	sub.f32 	%f455, %f453, %f454;\n"
    "	mad.f32 	%f456, %f433, %f435, %f455;\n"
    "	mov.f32 	%f457, 0f00000000;   	// 0\n"
    "	selp.f32 	%f458, %f457, %f456, %p7;\n"
    "	mov.f32 	%f459, %f387;\n"
    "	mov.f32 	%f460, %f402;\n"
    "	mad.f32 	%f461, %f460, %f458, %f459;\n"
    "	mov.f32 	%f462, %f461;\n"
    "	mov.f32 	%f463, %f391;\n"
    "	mov.f32 	%f464, %f413;\n"
    "	mad.f32 	%f465, %f464, %f458, %f463;\n"
    "	mov.f32 	%f466, %f465;\n"
    "	mov.f32 	%f467, %f394;\n"
    "	mad.f32 	%f468, %f421, %f458, %f467;\n"
    "	mov.f32 	%f469, %f468;\n"
    "	ld.shared.s32 	%r38, [%rd14+108];\n"
    "	add.s32 	%r39, %r38, %r6;\n"
    "	ld.shared.f32 	%f470, [%rd15+96];\n"
    "	sub.f32 	%f471, %f19, %f470;\n"
    "	mov.f32 	%f472, %f471;\n"
    "	mul.f32 	%f473, %f14, %f472;\n"
    "	cvt.rni.f32.f32 	%f474, %f473;\n"
    "	mul.f32 	%f475, %f13, %f474;\n"
    "	sub.f32 	%f476, %f471, %f475;\n"
    "	mov.f32 	%f477, %f476;\n"
    "	mov.f32 	%f478, 0f00000000;   	// 0\n"
    "	mad.f32 	%f479, %f476, %f476, %f478;\n"
    "	ld.shared.f32 	%f480, [%rd15+100];\n"
    "	sub.f32 	%f481, %f18, %f480;\n"
    "	mov.f32 	%f482, %f481;\n"
    "	mov.f32 	%f483, %f482;\n"
    "	mul.f32 	%f484, %f14, %f482;\n"
    "	cvt.rni.f32.f32 	%f485, %f484;\n"
    "	mul.f32 	%f486, %f13, %f485;\n"
    "	sub.f32 	%f487, %f481, %f486;\n"
    "	mov.f32 	%f488, %f487;\n"
    "	mad.f32 	%f489, %f487, %f487, %f479;\n"
    "	ld.shared.f32 	%f490, [%rd15+104];\n"
    "	sub.f32 	%f491, %f11, %f490;\n"
    "	mov.f32 	%f492, %f491;\n"
    "	mul.f32 	%f493, %f491, %f14;\n"
    "	cvt.rni.f32.f32 	%f494, %f493;\n"
    "	mul.f32 	%f495, %f13, %f494;\n"
    "	sub.f32 	%f496, %f491, %f495;\n"
    "	mov.f32 	%f497, %f496;\n"
    "	mad.f32 	%f498, %f496, %f496, %f489;\n"
    "	mov.f32 	%f499, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p8, %f498, %f499;\n"
    "	sqrt.approx.f32 	%f500, %f498;\n"
    "	rcp.approx.f32 	%f501, %f500;\n"
    "	cvt.s64.s32 	%rd34, %r39;\n"
    "	mul.wide.s32 	%rd35, %r39, 24;\n"
    "	add.u64 	%rd36, %rd9, %rd35;\n"
    "	mul.f32 	%f502, %f501, %f501;\n"
    "	ld.const.f32 	%f503, [%rd36+12];\n"
    "	ld.const.f32 	%f504, [%rd36+8];\n"
    "	ld.const.f32 	%f505, [%rd36+4];\n"
    "	ld.const.f32 	%f506, [%rd36+0];\n"
    "	ld.const.f32 	%f507, [%rd36+16];\n"
    "	ld.const.f32 	%f508, [%rd36+20];\n"
    "	mul.f32 	%f509, %f502, %f502;\n"
    "	mul.f32 	%f510, %f501, %f502;\n"
    "	mov.f32 	%f511, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f512, %f503, %f511;\n"
    "	sub.f32 	%f513, %f505, %f500;\n"
    "	mov.f32 	%f514, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f515, %f506, %f514;\n"
    "	mov.f32 	%f516, 0f41000000;   	// 8\n"
    "	mul.f32 	%f517, %f507, %f516;\n"
    "	mul.f32 	%f518, %f509, %f509;\n"
    "	mul.f32 	%f519, %f504, %f513;\n"
    "	mul.f32 	%f520, %f512, %f518;\n"
    "	mul.f32 	%f521, %f517, %f518;\n"
    "	mov.f32 	%f522, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f523, %f519, %f522;\n"
    "	ex2.approx.f32 	%f524, %f523;\n"
    "	mul.f32 	%f525, %f515, %f524;\n"
    "	mul.f32 	%f526, %f504, %f525;\n"
    "	mul.f32 	%f527, %f501, %f526;\n"
    "	sub.f32 	%f528, %f527, %f520;\n"
    "	mul.f32 	%f529, %f502, %f521;\n"
    "	sub.f32 	%f530, %f528, %f529;\n"
    "	mad.f32 	%f531, %f508, %f510, %f530;\n"
    "	mov.f32 	%f532, 0f00000000;   	// 0\n"
    "	selp.f32 	%f533, %f532, %f531, %p8;\n"
    "	mov.f32 	%f534, %f462;\n"
    "	mov.f32 	%f535, %f477;\n"
    "	mad.f32 	%f536, %f535, %f533, %f534;\n"
    "	mov.f32 	%f537, %f536;\n"
    "	mov.f32 	%f538, %f466;\n"
    "	mov.f32 	%f539, %f488;\n"
    "	mad.f32 	%f540, %f539, %f533, %f538;\n"
    "	mov.f32 	%f541, %f540;\n"
    "	mov.f32 	%f542, %f469;\n"
    "	mad.f32 	%f543, %f496, %f533, %f542;\n"
    "	mov.f32 	%f544, %f543;\n"
    "	ld.shared.s32 	%r40, [%rd14+124];\n"
    "	add.s32 	%r41, %r40, %r6;\n"
    "	ld.shared.f32 	%f545, [%rd15+112];\n"
    "	sub.f32 	%f546, %f19, %f545;\n"
    "	mov.f32 	%f547, %f546;\n"
    "	mul.f32 	%f548, %f14, %f547;\n"
    "	cvt.rni.f32.f32 	%f549, %f548;\n"
    "	mul.f32 	%f550, %f13, %f549;\n"
    "	sub.f32 	%f551, %f546, %f550;\n"
    "	mov.f32 	%f552, %f551;\n"
    "	mov.f32 	%f553, 0f00000000;   	// 0\n"
    "	mad.f32 	%f554, %f551, %f551, %f553;\n"
    "	ld.shared.f32 	%f555, [%rd15+116];\n"
    "	sub.f32 	%f556, %f18, %f555;\n"
    "	mov.f32 	%f557, %f556;\n"
    "	mov.f32 	%f558, %f557;\n"
    "	mul.f32 	%f559, %f14, %f557;\n"
    "	cvt.rni.f32.f32 	%f560, %f559;\n"
    "	mul.f32 	%f561, %f13, %f560;\n"
    "	sub.f32 	%f562, %f556, %f561;\n"
    "	mov.f32 	%f563, %f562;\n"
    "	mad.f32 	%f564, %f562, %f562, %f554;\n"
    "	ld.shared.f32 	%f565, [%rd15+120];\n"
    "	sub.f32 	%f566, %f11, %f565;\n"
    "	mov.f32 	%f567, %f566;\n"
    "	mul.f32 	%f568, %f566, %f14;\n"
    "	cvt.rni.f32.f32 	%f569, %f568;\n"
    "	mul.f32 	%f570, %f13, %f569;\n"
    "	sub.f32 	%f571, %f566, %f570;\n"
    "	mov.f32 	%f572, %f571;\n"
    "	mad.f32 	%f573, %f571, %f571, %f564;\n"
    "	mov.f32 	%f574, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p9, %f573, %f574;\n"
    "	sqrt.approx.f32 	%f575, %f573;\n"
    "	rcp.approx.f32 	%f576, %f575;\n"
    "	cvt.s64.s32 	%rd37, %r41;\n"
    "	mul.wide.s32 	%rd38, %r41, 24;\n"
    "	add.u64 	%rd39, %rd9, %rd38;\n"
    "	mul.f32 	%f577, %f576, %f576;\n"
    "	ld.const.f32 	%f578, [%rd39+12];\n"
    "	ld.const.f32 	%f579, [%rd39+8];\n"
    "	ld.const.f32 	%f580, [%rd39+4];\n"
    "	ld.const.f32 	%f581, [%rd39+0];\n"
    "	ld.const.f32 	%f582, [%rd39+16];\n"
    "	ld.const.f32 	%f583, [%rd39+20];\n"
    "	mul.f32 	%f584, %f577, %f577;\n"
    "	mul.f32 	%f585, %f576, %f577;\n"
    "	mov.f32 	%f586, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f587, %f578, %f586;\n"
    "	sub.f32 	%f588, %f580, %f575;\n"
    "	mov.f32 	%f589, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f590, %f581, %f589;\n"
    "	mov.f32 	%f591, 0f41000000;   	// 8\n"
    "	mul.f32 	%f592, %f582, %f591;\n"
    "	mul.f32 	%f593, %f584, %f584;\n"
    "	mul.f32 	%f594, %f579, %f588;\n"
    "	mul.f32 	%f595, %f587, %f593;\n"
    "	mul.f32 	%f596, %f592, %f593;\n"
    "	mov.f32 	%f597, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f598, %f594, %f597;\n"
    "	ex2.approx.f32 	%f599, %f598;\n"
    "	mul.f32 	%f600, %f590, %f599;\n"
    "	mul.f32 	%f601, %f579, %f600;\n"
    "	mul.f32 	%f602, %f576, %f601;\n"
    "	sub.f32 	%f603, %f602, %f595;\n"
    "	mul.f32 	%f604, %f577, %f596;\n"
    "	sub.f32 	%f605, %f603, %f604;\n"
    "	mad.f32 	%f606, %f583, %f585, %f605;\n"
    "	mov.f32 	%f607, 0f00000000;   	// 0\n"
    "	selp.f32 	%f608, %f607, %f606, %p9;\n"
    "	mov.f32 	%f609, %f537;\n"
    "	mov.f32 	%f610, %f552;\n"
    "	mad.f32 	%f611, %f610, %f608, %f609;\n"
    "	mov.f32 	%f612, %f611;\n"
    "	mov.f32 	%f613, %f541;\n"
    "	mov.f32 	%f614, %f563;\n"
    "	mad.f32 	%f615, %f614, %f608, %f613;\n"
    "	mov.f32 	%f616, %f615;\n"
    "	mov.f32 	%f617, %f544;\n"
    "	mad.f32 	%f618, %f571, %f608, %f617;\n"
    "	mov.f32 	%f619, %f618;\n"
    "	ld.shared.s32 	%r42, [%rd14+140];\n"
    "	add.s32 	%r43, %r42, %r6;\n"
    "	ld.shared.f32 	%f620, [%rd15+128];\n"
    "	sub.f32 	%f621, %f19, %f620;\n"
    "	mov.f32 	%f622, %f621;\n"
    "	mul.f32 	%f623, %f14, %f622;\n"
    "	cvt.rni.f32.f32 	%f624, %f623;\n"
    "	mul.f32 	%f625, %f13, %f624;\n"
    "	sub.f32 	%f626, %f621, %f625;\n"
    "	mov.f32 	%f627, %f626;\n"
    "	mov.f32 	%f628, 0f00000000;   	// 0\n"
    "	mad.f32 	%f629, %f626, %f626, %f628;\n"
    "	ld.shared.f32 	%f630, [%rd15+132];\n"
    "	sub.f32 	%f631, %f18, %f630;\n"
    "	mov.f32 	%f632, %f631;\n"
    "	mov.f32 	%f633, %f632;\n"
    "	mul.f32 	%f634, %f14, %f632;\n"
    "	cvt.rni.f32.f32 	%f635, %f634;\n"
    "	mul.f32 	%f636, %f13, %f635;\n"
    "	sub.f32 	%f637, %f631, %f636;\n"
    "	mov.f32 	%f638, %f637;\n"
    "	mad.f32 	%f639, %f637, %f637, %f629;\n"
    "	ld.shared.f32 	%f640, [%rd15+136];\n"
    "	sub.f32 	%f641, %f11, %f640;\n"
    "	mov.f32 	%f642, %f641;\n"
    "	mul.f32 	%f643, %f641, %f14;\n"
    "	cvt.rni.f32.f32 	%f644, %f643;\n"
    "	mul.f32 	%f645, %f13, %f644;\n"
    "	sub.f32 	%f646, %f641, %f645;\n"
    "	mov.f32 	%f647, %f646;\n"
    "	mad.f32 	%f648, %f646, %f646, %f639;\n"
    "	mov.f32 	%f649, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p10, %f648, %f649;\n"
    "	sqrt.approx.f32 	%f650, %f648;\n"
    "	rcp.approx.f32 	%f651, %f650;\n"
    "	cvt.s64.s32 	%rd40, %r43;\n"
    "	mul.wide.s32 	%rd41, %r43, 24;\n"
    "	add.u64 	%rd42, %rd9, %rd41;\n"
    "	mul.f32 	%f652, %f651, %f651;\n"
    "	ld.const.f32 	%f653, [%rd42+12];\n"
    "	ld.const.f32 	%f654, [%rd42+8];\n"
    "	ld.const.f32 	%f655, [%rd42+4];\n"
    "	ld.const.f32 	%f656, [%rd42+0];\n"
    "	ld.const.f32 	%f657, [%rd42+16];\n"
    "	ld.const.f32 	%f658, [%rd42+20];\n"
    "	mul.f32 	%f659, %f652, %f652;\n"
    "	mul.f32 	%f660, %f651, %f652;\n"
    "	mov.f32 	%f661, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f662, %f653, %f661;\n"
    "	sub.f32 	%f663, %f655, %f650;\n"
    "	mov.f32 	%f664, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f665, %f656, %f664;\n"
    "	mov.f32 	%f666, 0f41000000;   	// 8\n"
    "	mul.f32 	%f667, %f657, %f666;\n"
    "	mul.f32 	%f668, %f659, %f659;\n"
    "	mul.f32 	%f669, %f654, %f663;\n"
    "	mul.f32 	%f670, %f662, %f668;\n"
    "	mul.f32 	%f671, %f667, %f668;\n"
    "	mov.f32 	%f672, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f673, %f669, %f672;\n"
    "	ex2.approx.f32 	%f674, %f673;\n"
    "	mul.f32 	%f675, %f665, %f674;\n"
    "	mul.f32 	%f676, %f654, %f675;\n"
    "	mul.f32 	%f677, %f651, %f676;\n"
    "	sub.f32 	%f678, %f677, %f670;\n"
    "	mul.f32 	%f679, %f652, %f671;\n"
    "	sub.f32 	%f680, %f678, %f679;\n"
    "	mad.f32 	%f681, %f658, %f660, %f680;\n"
    "	mov.f32 	%f682, 0f00000000;   	// 0\n"
    "	selp.f32 	%f683, %f682, %f681, %p10;\n"
    "	mov.f32 	%f684, %f612;\n"
    "	mov.f32 	%f685, %f627;\n"
    "	mad.f32 	%f686, %f685, %f683, %f684;\n"
    "	mov.f32 	%f687, %f686;\n"
    "	mov.f32 	%f688, %f616;\n"
    "	mov.f32 	%f689, %f638;\n"
    "	mad.f32 	%f690, %f689, %f683, %f688;\n"
    "	mov.f32 	%f691, %f690;\n"
    "	mov.f32 	%f692, %f619;\n"
    "	mad.f32 	%f693, %f646, %f683, %f692;\n"
    "	mov.f32 	%f694, %f693;\n"
    "	ld.shared.s32 	%r44, [%rd14+156];\n"
    "	add.s32 	%r45, %r44, %r6;\n"
    "	ld.shared.f32 	%f695, [%rd15+144];\n"
    "	sub.f32 	%f696, %f19, %f695;\n"
    "	mov.f32 	%f697, %f696;\n"
    "	mul.f32 	%f698, %f14, %f697;\n"
    "	cvt.rni.f32.f32 	%f699, %f698;\n"
    "	mul.f32 	%f700, %f13, %f699;\n"
    "	sub.f32 	%f701, %f696, %f700;\n"
    "	mov.f32 	%f702, %f701;\n"
    "	mov.f32 	%f703, 0f00000000;   	// 0\n"
    "	mad.f32 	%f704, %f701, %f701, %f703;\n"
    "	ld.shared.f32 	%f705, [%rd15+148];\n"
    "	sub.f32 	%f706, %f18, %f705;\n"
    "	mov.f32 	%f707, %f706;\n"
    "	mov.f32 	%f708, %f707;\n"
    "	mul.f32 	%f709, %f14, %f707;\n"
    "	cvt.rni.f32.f32 	%f710, %f709;\n"
    "	mul.f32 	%f711, %f13, %f710;\n"
    "	sub.f32 	%f712, %f706, %f711;\n"
    "	mov.f32 	%f713, %f712;\n"
    "	mad.f32 	%f714, %f712, %f712, %f704;\n"
    "	ld.shared.f32 	%f715, [%rd15+152];\n"
    "	sub.f32 	%f716, %f11, %f715;\n"
    "	mov.f32 	%f717, %f716;\n"
    "	mul.f32 	%f718, %f716, %f14;\n"
    "	cvt.rni.f32.f32 	%f719, %f718;\n"
    "	mul.f32 	%f720, %f13, %f719;\n"
    "	sub.f32 	%f721, %f716, %f720;\n"
    "	mov.f32 	%f722, %f721;\n"
    "	mad.f32 	%f723, %f721, %f721, %f714;\n"
    "	mov.f32 	%f724, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p11, %f723, %f724;\n"
    "	sqrt.approx.f32 	%f725, %f723;\n"
    "	rcp.approx.f32 	%f726, %f725;\n"
    "	cvt.s64.s32 	%rd43, %r45;\n"
    "	mul.wide.s32 	%rd44, %r45, 24;\n"
    "	add.u64 	%rd45, %rd9, %rd44;\n"
    "	mul.f32 	%f727, %f726, %f726;\n"
    "	ld.const.f32 	%f728, [%rd45+12];\n"
    "	ld.const.f32 	%f729, [%rd45+8];\n"
    "	ld.const.f32 	%f730, [%rd45+4];\n"
    "	ld.const.f32 	%f731, [%rd45+0];\n"
    "	ld.const.f32 	%f732, [%rd45+16];\n"
    "	ld.const.f32 	%f733, [%rd45+20];\n"
    "	mul.f32 	%f734, %f727, %f727;\n"
    "	mul.f32 	%f735, %f726, %f727;\n"
    "	mov.f32 	%f736, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f737, %f728, %f736;\n"
    "	sub.f32 	%f738, %f730, %f725;\n"
    "	mov.f32 	%f739, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f740, %f731, %f739;\n"
    "	mov.f32 	%f741, 0f41000000;   	// 8\n"
    "	mul.f32 	%f742, %f732, %f741;\n"
    "	mul.f32 	%f743, %f734, %f734;\n"
    "	mul.f32 	%f744, %f729, %f738;\n"
    "	mul.f32 	%f745, %f737, %f743;\n"
    "	mul.f32 	%f746, %f742, %f743;\n"
    "	mov.f32 	%f747, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f748, %f744, %f747;\n"
    "	ex2.approx.f32 	%f749, %f748;\n"
    "	mul.f32 	%f750, %f740, %f749;\n"
    "	mul.f32 	%f751, %f729, %f750;\n"
    "	mul.f32 	%f752, %f726, %f751;\n"
    "	sub.f32 	%f753, %f752, %f745;\n"
    "	mul.f32 	%f754, %f727, %f746;\n"
    "	sub.f32 	%f755, %f753, %f754;\n"
    "	mad.f32 	%f756, %f733, %f735, %f755;\n"
    "	mov.f32 	%f757, 0f00000000;   	// 0\n"
    "	selp.f32 	%f758, %f757, %f756, %p11;\n"
    "	mov.f32 	%f759, %f687;\n"
    "	mov.f32 	%f760, %f702;\n"
    "	mad.f32 	%f761, %f760, %f758, %f759;\n"
    "	mov.f32 	%f762, %f761;\n"
    "	mov.f32 	%f763, %f691;\n"
    "	mov.f32 	%f764, %f713;\n"
    "	mad.f32 	%f765, %f764, %f758, %f763;\n"
    "	mov.f32 	%f766, %f765;\n"
    "	mov.f32 	%f767, %f694;\n"
    "	mad.f32 	%f768, %f721, %f758, %f767;\n"
    "	mov.f32 	%f769, %f768;\n"
    "	ld.shared.s32 	%r46, [%rd14+172];\n"
    "	add.s32 	%r47, %r46, %r6;\n"
    "	ld.shared.f32 	%f770, [%rd15+160];\n"
    "	sub.f32 	%f771, %f19, %f770;\n"
    "	mov.f32 	%f772, %f771;\n"
    "	mul.f32 	%f773, %f14, %f772;\n"
    "	cvt.rni.f32.f32 	%f774, %f773;\n"
    "	mul.f32 	%f775, %f13, %f774;\n"
    "	sub.f32 	%f776, %f771, %f775;\n"
    "	mov.f32 	%f777, %f776;\n"
    "	mov.f32 	%f778, 0f00000000;   	// 0\n"
    "	mad.f32 	%f779, %f776, %f776, %f778;\n"
    "	ld.shared.f32 	%f780, [%rd15+164];\n"
    "	sub.f32 	%f781, %f18, %f780;\n"
    "	mov.f32 	%f782, %f781;\n"
    "	mov.f32 	%f783, %f782;\n"
    "	mul.f32 	%f784, %f14, %f782;\n"
    "	cvt.rni.f32.f32 	%f785, %f784;\n"
    "	mul.f32 	%f786, %f13, %f785;\n"
    "	sub.f32 	%f787, %f781, %f786;\n"
    "	mov.f32 	%f788, %f787;\n"
    "	mad.f32 	%f789, %f787, %f787, %f779;\n"
    "	ld.shared.f32 	%f790, [%rd15+168];\n"
    "	sub.f32 	%f791, %f11, %f790;\n"
    "	mov.f32 	%f792, %f791;\n"
    "	mul.f32 	%f793, %f791, %f14;\n"
    "	cvt.rni.f32.f32 	%f794, %f793;\n"
    "	mul.f32 	%f795, %f13, %f794;\n"
    "	sub.f32 	%f796, %f791, %f795;\n"
    "	mov.f32 	%f797, %f796;\n"
    "	mad.f32 	%f798, %f796, %f796, %f789;\n"
    "	mov.f32 	%f799, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p12, %f798, %f799;\n"
    "	sqrt.approx.f32 	%f800, %f798;\n"
    "	rcp.approx.f32 	%f801, %f800;\n"
    "	cvt.s64.s32 	%rd46, %r47;\n"
    "	mul.wide.s32 	%rd47, %r47, 24;\n"
    "	add.u64 	%rd48, %rd9, %rd47;\n"
    "	mul.f32 	%f802, %f801, %f801;\n"
    "	ld.const.f32 	%f803, [%rd48+12];\n"
    "	ld.const.f32 	%f804, [%rd48+8];\n"
    "	ld.const.f32 	%f805, [%rd48+4];\n"
    "	ld.const.f32 	%f806, [%rd48+0];\n"
    "	ld.const.f32 	%f807, [%rd48+16];\n"
    "	ld.const.f32 	%f808, [%rd48+20];\n"
    "	mul.f32 	%f809, %f802, %f802;\n"
    "	mul.f32 	%f810, %f801, %f802;\n"
    "	mov.f32 	%f811, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f812, %f803, %f811;\n"
    "	sub.f32 	%f813, %f805, %f800;\n"
    "	mov.f32 	%f814, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f815, %f806, %f814;\n"
    "	mov.f32 	%f816, 0f41000000;   	// 8\n"
    "	mul.f32 	%f817, %f807, %f816;\n"
    "	mul.f32 	%f818, %f809, %f809;\n"
    "	mul.f32 	%f819, %f804, %f813;\n"
    "	mul.f32 	%f820, %f812, %f818;\n"
    "	mul.f32 	%f821, %f817, %f818;\n"
    "	mov.f32 	%f822, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f823, %f819, %f822;\n"
    "	ex2.approx.f32 	%f824, %f823;\n"
    "	mul.f32 	%f825, %f815, %f824;\n"
    "	mul.f32 	%f826, %f804, %f825;\n"
    "	mul.f32 	%f827, %f801, %f826;\n"
    "	sub.f32 	%f828, %f827, %f820;\n"
    "	mul.f32 	%f829, %f802, %f821;\n"
    "	sub.f32 	%f830, %f828, %f829;\n"
    "	mad.f32 	%f831, %f808, %f810, %f830;\n"
    "	mov.f32 	%f832, 0f00000000;   	// 0\n"
    "	selp.f32 	%f833, %f832, %f831, %p12;\n"
    "	mov.f32 	%f834, %f762;\n"
    "	mov.f32 	%f835, %f777;\n"
    "	mad.f32 	%f836, %f835, %f833, %f834;\n"
    "	mov.f32 	%f837, %f836;\n"
    "	mov.f32 	%f838, %f766;\n"
    "	mov.f32 	%f839, %f788;\n"
    "	mad.f32 	%f840, %f839, %f833, %f838;\n"
    "	mov.f32 	%f841, %f840;\n"
    "	mov.f32 	%f842, %f769;\n"
    "	mad.f32 	%f843, %f796, %f833, %f842;\n"
    "	mov.f32 	%f844, %f843;\n"
    "	ld.shared.s32 	%r48, [%rd14+188];\n"
    "	add.s32 	%r49, %r48, %r6;\n"
    "	ld.shared.f32 	%f845, [%rd15+176];\n"
    "	sub.f32 	%f846, %f19, %f845;\n"
    "	mov.f32 	%f847, %f846;\n"
    "	mul.f32 	%f848, %f14, %f847;\n"
    "	cvt.rni.f32.f32 	%f849, %f848;\n"
    "	mul.f32 	%f850, %f13, %f849;\n"
    "	sub.f32 	%f851, %f846, %f850;\n"
    "	mov.f32 	%f852, %f851;\n"
    "	mov.f32 	%f853, 0f00000000;   	// 0\n"
    "	mad.f32 	%f854, %f851, %f851, %f853;\n"
    "	ld.shared.f32 	%f855, [%rd15+180];\n"
    "	sub.f32 	%f856, %f18, %f855;\n"
    "	mov.f32 	%f857, %f856;\n"
    "	mov.f32 	%f858, %f857;\n"
    "	mul.f32 	%f859, %f14, %f857;\n"
    "	cvt.rni.f32.f32 	%f860, %f859;\n"
    "	mul.f32 	%f861, %f13, %f860;\n"
    "	sub.f32 	%f862, %f856, %f861;\n"
    "	mov.f32 	%f863, %f862;\n"
    "	mad.f32 	%f864, %f862, %f862, %f854;\n"
    "	ld.shared.f32 	%f865, [%rd15+184];\n"
    "	sub.f32 	%f866, %f11, %f865;\n"
    "	mov.f32 	%f867, %f866;\n"
    "	mul.f32 	%f868, %f866, %f14;\n"
    "	cvt.rni.f32.f32 	%f869, %f868;\n"
    "	mul.f32 	%f870, %f13, %f869;\n"
    "	sub.f32 	%f871, %f866, %f870;\n"
    "	mov.f32 	%f872, %f871;\n"
    "	mad.f32 	%f873, %f871, %f871, %f864;\n"
    "	mov.f32 	%f874, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p13, %f873, %f874;\n"
    "	sqrt.approx.f32 	%f875, %f873;\n"
    "	rcp.approx.f32 	%f876, %f875;\n"
    "	cvt.s64.s32 	%rd49, %r49;\n"
    "	mul.wide.s32 	%rd50, %r49, 24;\n"
    "	add.u64 	%rd51, %rd9, %rd50;\n"
    "	mul.f32 	%f877, %f876, %f876;\n"
    "	ld.const.f32 	%f878, [%rd51+12];\n"
    "	ld.const.f32 	%f879, [%rd51+8];\n"
    "	ld.const.f32 	%f880, [%rd51+4];\n"
    "	ld.const.f32 	%f881, [%rd51+0];\n"
    "	ld.const.f32 	%f882, [%rd51+16];\n"
    "	ld.const.f32 	%f883, [%rd51+20];\n"
    "	mul.f32 	%f884, %f877, %f877;\n"
    "	mul.f32 	%f885, %f876, %f877;\n"
    "	mov.f32 	%f886, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f887, %f878, %f886;\n"
    "	sub.f32 	%f888, %f880, %f875;\n"
    "	mov.f32 	%f889, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f890, %f881, %f889;\n"
    "	mov.f32 	%f891, 0f41000000;   	// 8\n"
    "	mul.f32 	%f892, %f882, %f891;\n"
    "	mul.f32 	%f893, %f884, %f884;\n"
    "	mul.f32 	%f894, %f879, %f888;\n"
    "	mul.f32 	%f895, %f887, %f893;\n"
    "	mul.f32 	%f896, %f892, %f893;\n"
    "	mov.f32 	%f897, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f898, %f894, %f897;\n"
    "	ex2.approx.f32 	%f899, %f898;\n"
    "	mul.f32 	%f900, %f890, %f899;\n"
    "	mul.f32 	%f901, %f879, %f900;\n"
    "	mul.f32 	%f902, %f876, %f901;\n"
    "	sub.f32 	%f903, %f902, %f895;\n"
    "	mul.f32 	%f904, %f877, %f896;\n"
    "	sub.f32 	%f905, %f903, %f904;\n"
    "	mad.f32 	%f906, %f883, %f885, %f905;\n"
    "	mov.f32 	%f907, 0f00000000;   	// 0\n"
    "	selp.f32 	%f908, %f907, %f906, %p13;\n"
    "	mov.f32 	%f909, %f837;\n"
    "	mov.f32 	%f910, %f852;\n"
    "	mad.f32 	%f911, %f910, %f908, %f909;\n"
    "	mov.f32 	%f912, %f911;\n"
    "	mov.f32 	%f913, %f841;\n"
    "	mov.f32 	%f914, %f863;\n"
    "	mad.f32 	%f915, %f914, %f908, %f913;\n"
    "	mov.f32 	%f916, %f915;\n"
    "	mov.f32 	%f917, %f844;\n"
    "	mad.f32 	%f918, %f871, %f908, %f917;\n"
    "	mov.f32 	%f919, %f918;\n"
    "	ld.shared.s32 	%r50, [%rd14+204];\n"
    "	add.s32 	%r51, %r50, %r6;\n"
    "	ld.shared.f32 	%f920, [%rd15+192];\n"
    "	sub.f32 	%f921, %f19, %f920;\n"
    "	mov.f32 	%f922, %f921;\n"
    "	mul.f32 	%f923, %f14, %f922;\n"
    "	cvt.rni.f32.f32 	%f924, %f923;\n"
    "	mul.f32 	%f925, %f13, %f924;\n"
    "	sub.f32 	%f926, %f921, %f925;\n"
    "	mov.f32 	%f927, %f926;\n"
    "	mov.f32 	%f928, 0f00000000;   	// 0\n"
    "	mad.f32 	%f929, %f926, %f926, %f928;\n"
    "	ld.shared.f32 	%f930, [%rd15+196];\n"
    "	sub.f32 	%f931, %f18, %f930;\n"
    "	mov.f32 	%f932, %f931;\n"
    "	mov.f32 	%f933, %f932;\n"
    "	mul.f32 	%f934, %f14, %f932;\n"
    "	cvt.rni.f32.f32 	%f935, %f934;\n"
    "	mul.f32 	%f936, %f13, %f935;\n"
    "	sub.f32 	%f937, %f931, %f936;\n"
    "	mov.f32 	%f938, %f937;\n"
    "	mad.f32 	%f939, %f937, %f937, %f929;\n"
    "	ld.shared.f32 	%f940, [%rd15+200];\n"
    "	sub.f32 	%f941, %f11, %f940;\n"
    "	mov.f32 	%f942, %f941;\n"
    "	mul.f32 	%f943, %f941, %f14;\n"
    "	cvt.rni.f32.f32 	%f944, %f943;\n"
    "	mul.f32 	%f945, %f13, %f944;\n"
    "	sub.f32 	%f946, %f941, %f945;\n"
    "	mov.f32 	%f947, %f946;\n"
    "	mad.f32 	%f948, %f946, %f946, %f939;\n"
    "	mov.f32 	%f949, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p14, %f948, %f949;\n"
    "	sqrt.approx.f32 	%f950, %f948;\n"
    "	rcp.approx.f32 	%f951, %f950;\n"
    "	cvt.s64.s32 	%rd52, %r51;\n"
    "	mul.wide.s32 	%rd53, %r51, 24;\n"
    "	add.u64 	%rd54, %rd9, %rd53;\n"
    "	mul.f32 	%f952, %f951, %f951;\n"
    "	ld.const.f32 	%f953, [%rd54+12];\n"
    "	ld.const.f32 	%f954, [%rd54+8];\n"
    "	ld.const.f32 	%f955, [%rd54+4];\n"
    "	ld.const.f32 	%f956, [%rd54+0];\n"
    "	ld.const.f32 	%f957, [%rd54+16];\n"
    "	ld.const.f32 	%f958, [%rd54+20];\n"
    "	mul.f32 	%f959, %f952, %f952;\n"
    "	mul.f32 	%f960, %f951, %f952;\n"
    "	mov.f32 	%f961, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f962, %f953, %f961;\n"
    "	sub.f32 	%f963, %f955, %f950;\n"
    "	mov.f32 	%f964, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f965, %f956, %f964;\n"
    "	mov.f32 	%f966, 0f41000000;   	// 8\n"
    "	mul.f32 	%f967, %f957, %f966;\n"
    "	mul.f32 	%f968, %f959, %f959;\n"
    "	mul.f32 	%f969, %f954, %f963;\n"
    "	mul.f32 	%f970, %f962, %f968;\n"
    "	mul.f32 	%f971, %f967, %f968;\n"
    "	mov.f32 	%f972, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f973, %f969, %f972;\n"
    "	ex2.approx.f32 	%f974, %f973;\n"
    "	mul.f32 	%f975, %f965, %f974;\n"
    "	mul.f32 	%f976, %f954, %f975;\n"
    "	mul.f32 	%f977, %f951, %f976;\n"
    "	sub.f32 	%f978, %f977, %f970;\n"
    "	mul.f32 	%f979, %f952, %f971;\n"
    "	sub.f32 	%f980, %f978, %f979;\n"
    "	mad.f32 	%f981, %f958, %f960, %f980;\n"
    "	mov.f32 	%f982, 0f00000000;   	// 0\n"
    "	selp.f32 	%f983, %f982, %f981, %p14;\n"
    "	mov.f32 	%f984, %f912;\n"
    "	mov.f32 	%f985, %f927;\n"
    "	mad.f32 	%f986, %f985, %f983, %f984;\n"
    "	mov.f32 	%f987, %f986;\n"
    "	mov.f32 	%f988, %f916;\n"
    "	mov.f32 	%f989, %f938;\n"
    "	mad.f32 	%f990, %f989, %f983, %f988;\n"
    "	mov.f32 	%f991, %f990;\n"
    "	mov.f32 	%f992, %f919;\n"
    "	mad.f32 	%f993, %f946, %f983, %f992;\n"
    "	mov.f32 	%f994, %f993;\n"
    "	ld.shared.s32 	%r52, [%rd14+220];\n"
    "	add.s32 	%r53, %r52, %r6;\n"
    "	ld.shared.f32 	%f995, [%rd15+208];\n"
    "	sub.f32 	%f996, %f19, %f995;\n"
    "	mov.f32 	%f997, %f996;\n"
    "	mul.f32 	%f998, %f14, %f997;\n"
    "	cvt.rni.f32.f32 	%f999, %f998;\n"
    "	mul.f32 	%f1000, %f13, %f999;\n"
    "	sub.f32 	%f1001, %f996, %f1000;\n"
    "	mov.f32 	%f1002, %f1001;\n"
    "	mov.f32 	%f1003, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1004, %f1001, %f1001, %f1003;\n"
    "	ld.shared.f32 	%f1005, [%rd15+212];\n"
    "	sub.f32 	%f1006, %f18, %f1005;\n"
    "	mov.f32 	%f1007, %f1006;\n"
    "	mov.f32 	%f1008, %f1007;\n"
    "	mul.f32 	%f1009, %f14, %f1007;\n"
    "	cvt.rni.f32.f32 	%f1010, %f1009;\n"
    "	mul.f32 	%f1011, %f13, %f1010;\n"
    "	sub.f32 	%f1012, %f1006, %f1011;\n"
    "	mov.f32 	%f1013, %f1012;\n"
    "	mad.f32 	%f1014, %f1012, %f1012, %f1004;\n"
    "	ld.shared.f32 	%f1015, [%rd15+216];\n"
    "	sub.f32 	%f1016, %f11, %f1015;\n"
    "	mov.f32 	%f1017, %f1016;\n"
    "	mul.f32 	%f1018, %f1016, %f14;\n"
    "	cvt.rni.f32.f32 	%f1019, %f1018;\n"
    "	mul.f32 	%f1020, %f13, %f1019;\n"
    "	sub.f32 	%f1021, %f1016, %f1020;\n"
    "	mov.f32 	%f1022, %f1021;\n"
    "	mad.f32 	%f1023, %f1021, %f1021, %f1014;\n"
    "	mov.f32 	%f1024, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p15, %f1023, %f1024;\n"
    "	sqrt.approx.f32 	%f1025, %f1023;\n"
    "	rcp.approx.f32 	%f1026, %f1025;\n"
    "	cvt.s64.s32 	%rd55, %r53;\n"
    "	mul.wide.s32 	%rd56, %r53, 24;\n"
    "	add.u64 	%rd57, %rd9, %rd56;\n"
    "	mul.f32 	%f1027, %f1026, %f1026;\n"
    "	ld.const.f32 	%f1028, [%rd57+12];\n"
    "	ld.const.f32 	%f1029, [%rd57+8];\n"
    "	ld.const.f32 	%f1030, [%rd57+4];\n"
    "	ld.const.f32 	%f1031, [%rd57+0];\n"
    "	ld.const.f32 	%f1032, [%rd57+16];\n"
    "	ld.const.f32 	%f1033, [%rd57+20];\n"
    "	mul.f32 	%f1034, %f1027, %f1027;\n"
    "	mul.f32 	%f1035, %f1026, %f1027;\n"
    "	mov.f32 	%f1036, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1037, %f1028, %f1036;\n"
    "	sub.f32 	%f1038, %f1030, %f1025;\n"
    "	mov.f32 	%f1039, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1040, %f1031, %f1039;\n"
    "	mov.f32 	%f1041, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1042, %f1032, %f1041;\n"
    "	mul.f32 	%f1043, %f1034, %f1034;\n"
    "	mul.f32 	%f1044, %f1029, %f1038;\n"
    "	mul.f32 	%f1045, %f1037, %f1043;\n"
    "	mul.f32 	%f1046, %f1042, %f1043;\n"
    "	mov.f32 	%f1047, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1048, %f1044, %f1047;\n"
    "	ex2.approx.f32 	%f1049, %f1048;\n"
    "	mul.f32 	%f1050, %f1040, %f1049;\n"
    "	mul.f32 	%f1051, %f1029, %f1050;\n"
    "	mul.f32 	%f1052, %f1026, %f1051;\n"
    "	sub.f32 	%f1053, %f1052, %f1045;\n"
    "	mul.f32 	%f1054, %f1027, %f1046;\n"
    "	sub.f32 	%f1055, %f1053, %f1054;\n"
    "	mad.f32 	%f1056, %f1033, %f1035, %f1055;\n"
    "	mov.f32 	%f1057, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1058, %f1057, %f1056, %p15;\n"
    "	mov.f32 	%f1059, %f987;\n"
    "	mov.f32 	%f1060, %f1002;\n"
    "	mad.f32 	%f1061, %f1060, %f1058, %f1059;\n"
    "	mov.f32 	%f1062, %f1061;\n"
    "	mov.f32 	%f1063, %f991;\n"
    "	mov.f32 	%f1064, %f1013;\n"
    "	mad.f32 	%f1065, %f1064, %f1058, %f1063;\n"
    "	mov.f32 	%f1066, %f1065;\n"
    "	mov.f32 	%f1067, %f994;\n"
    "	mad.f32 	%f1068, %f1021, %f1058, %f1067;\n"
    "	mov.f32 	%f1069, %f1068;\n"
    "	ld.shared.s32 	%r54, [%rd14+236];\n"
    "	add.s32 	%r55, %r54, %r6;\n"
    "	ld.shared.f32 	%f1070, [%rd15+224];\n"
    "	sub.f32 	%f1071, %f19, %f1070;\n"
    "	mov.f32 	%f1072, %f1071;\n"
    "	mul.f32 	%f1073, %f14, %f1072;\n"
    "	cvt.rni.f32.f32 	%f1074, %f1073;\n"
    "	mul.f32 	%f1075, %f13, %f1074;\n"
    "	sub.f32 	%f1076, %f1071, %f1075;\n"
    "	mov.f32 	%f1077, %f1076;\n"
    "	mov.f32 	%f1078, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1079, %f1076, %f1076, %f1078;\n"
    "	ld.shared.f32 	%f1080, [%rd15+228];\n"
    "	sub.f32 	%f1081, %f18, %f1080;\n"
    "	mov.f32 	%f1082, %f1081;\n"
    "	mov.f32 	%f1083, %f1082;\n"
    "	mul.f32 	%f1084, %f14, %f1082;\n"
    "	cvt.rni.f32.f32 	%f1085, %f1084;\n"
    "	mul.f32 	%f1086, %f13, %f1085;\n"
    "	sub.f32 	%f1087, %f1081, %f1086;\n"
    "	mov.f32 	%f1088, %f1087;\n"
    "	mad.f32 	%f1089, %f1087, %f1087, %f1079;\n"
    "	ld.shared.f32 	%f1090, [%rd15+232];\n"
    "	sub.f32 	%f1091, %f11, %f1090;\n"
    "	mov.f32 	%f1092, %f1091;\n"
    "	mul.f32 	%f1093, %f1091, %f14;\n"
    "	cvt.rni.f32.f32 	%f1094, %f1093;\n"
    "	mul.f32 	%f1095, %f13, %f1094;\n"
    "	sub.f32 	%f1096, %f1091, %f1095;\n"
    "	mov.f32 	%f1097, %f1096;\n"
    "	mad.f32 	%f1098, %f1096, %f1096, %f1089;\n"
    "	mov.f32 	%f1099, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p16, %f1098, %f1099;\n"
    "	sqrt.approx.f32 	%f1100, %f1098;\n"
    "	rcp.approx.f32 	%f1101, %f1100;\n"
    "	cvt.s64.s32 	%rd58, %r55;\n"
    "	mul.wide.s32 	%rd59, %r55, 24;\n"
    "	add.u64 	%rd60, %rd9, %rd59;\n"
    "	mul.f32 	%f1102, %f1101, %f1101;\n"
    "	ld.const.f32 	%f1103, [%rd60+12];\n"
    "	ld.const.f32 	%f1104, [%rd60+8];\n"
    "	ld.const.f32 	%f1105, [%rd60+4];\n"
    "	ld.const.f32 	%f1106, [%rd60+0];\n"
    "	ld.const.f32 	%f1107, [%rd60+16];\n"
    "	ld.const.f32 	%f1108, [%rd60+20];\n"
    "	mul.f32 	%f1109, %f1102, %f1102;\n"
    "	mul.f32 	%f1110, %f1101, %f1102;\n"
    "	mov.f32 	%f1111, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1112, %f1103, %f1111;\n"
    "	sub.f32 	%f1113, %f1105, %f1100;\n"
    "	mov.f32 	%f1114, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1115, %f1106, %f1114;\n"
    "	mov.f32 	%f1116, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1117, %f1107, %f1116;\n"
    "	mul.f32 	%f1118, %f1109, %f1109;\n"
    "	mul.f32 	%f1119, %f1104, %f1113;\n"
    "	mul.f32 	%f1120, %f1112, %f1118;\n"
    "	mul.f32 	%f1121, %f1117, %f1118;\n"
    "	mov.f32 	%f1122, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1123, %f1119, %f1122;\n"
    "	ex2.approx.f32 	%f1124, %f1123;\n"
    "	mul.f32 	%f1125, %f1115, %f1124;\n"
    "	mul.f32 	%f1126, %f1104, %f1125;\n"
    "	mul.f32 	%f1127, %f1101, %f1126;\n"
    "	sub.f32 	%f1128, %f1127, %f1120;\n"
    "	mul.f32 	%f1129, %f1102, %f1121;\n"
    "	sub.f32 	%f1130, %f1128, %f1129;\n"
    "	mad.f32 	%f1131, %f1108, %f1110, %f1130;\n"
    "	mov.f32 	%f1132, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1133, %f1132, %f1131, %p16;\n"
    "	mov.f32 	%f1134, %f1062;\n"
    "	mov.f32 	%f1135, %f1077;\n"
    "	mad.f32 	%f1136, %f1135, %f1133, %f1134;\n"
    "	mov.f32 	%f1137, %f1136;\n"
    "	mov.f32 	%f1138, %f1066;\n"
    "	mov.f32 	%f1139, %f1088;\n"
    "	mad.f32 	%f1140, %f1139, %f1133, %f1138;\n"
    "	mov.f32 	%f1141, %f1140;\n"
    "	mov.f32 	%f1142, %f1069;\n"
    "	mad.f32 	%f1143, %f1096, %f1133, %f1142;\n"
    "	mov.f32 	%f1144, %f1143;\n"
    "	ld.shared.s32 	%r56, [%rd14+252];\n"
    "	add.s32 	%r57, %r56, %r6;\n"
    "	ld.shared.f32 	%f1145, [%rd15+240];\n"
    "	sub.f32 	%f1146, %f19, %f1145;\n"
    "	mov.f32 	%f1147, %f1146;\n"
    "	mul.f32 	%f1148, %f14, %f1147;\n"
    "	cvt.rni.f32.f32 	%f1149, %f1148;\n"
    "	mul.f32 	%f1150, %f13, %f1149;\n"
    "	sub.f32 	%f1151, %f1146, %f1150;\n"
    "	mov.f32 	%f1152, %f1151;\n"
    "	mov.f32 	%f1153, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1154, %f1151, %f1151, %f1153;\n"
    "	ld.shared.f32 	%f1155, [%rd15+244];\n"
    "	sub.f32 	%f1156, %f18, %f1155;\n"
    "	mov.f32 	%f1157, %f1156;\n"
    "	mov.f32 	%f1158, %f1157;\n"
    "	mul.f32 	%f1159, %f14, %f1157;\n"
    "	cvt.rni.f32.f32 	%f1160, %f1159;\n"
    "	mul.f32 	%f1161, %f13, %f1160;\n"
    "	sub.f32 	%f1162, %f1156, %f1161;\n"
    "	mov.f32 	%f1163, %f1162;\n"
    "	mad.f32 	%f1164, %f1162, %f1162, %f1154;\n"
    "	ld.shared.f32 	%f1165, [%rd15+248];\n"
    "	sub.f32 	%f1166, %f11, %f1165;\n"
    "	mov.f32 	%f1167, %f1166;\n"
    "	mul.f32 	%f1168, %f1166, %f14;\n"
    "	cvt.rni.f32.f32 	%f1169, %f1168;\n"
    "	mul.f32 	%f1170, %f13, %f1169;\n"
    "	sub.f32 	%f1171, %f1166, %f1170;\n"
    "	mov.f32 	%f1172, %f1171;\n"
    "	mad.f32 	%f1173, %f1171, %f1171, %f1164;\n"
    "	mov.f32 	%f1174, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p17, %f1173, %f1174;\n"
    "	sqrt.approx.f32 	%f1175, %f1173;\n"
    "	rcp.approx.f32 	%f1176, %f1175;\n"
    "	cvt.s64.s32 	%rd61, %r57;\n"
    "	mul.wide.s32 	%rd62, %r57, 24;\n"
    "	add.u64 	%rd63, %rd9, %rd62;\n"
    "	mul.f32 	%f1177, %f1176, %f1176;\n"
    "	ld.const.f32 	%f1178, [%rd63+12];\n"
    "	ld.const.f32 	%f1179, [%rd63+8];\n"
    "	ld.const.f32 	%f1180, [%rd63+4];\n"
    "	ld.const.f32 	%f1181, [%rd63+0];\n"
    "	ld.const.f32 	%f1182, [%rd63+16];\n"
    "	ld.const.f32 	%f1183, [%rd63+20];\n"
    "	mul.f32 	%f1184, %f1177, %f1177;\n"
    "	mul.f32 	%f1185, %f1176, %f1177;\n"
    "	mov.f32 	%f1186, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1187, %f1178, %f1186;\n"
    "	sub.f32 	%f1188, %f1180, %f1175;\n"
    "	mov.f32 	%f1189, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1190, %f1181, %f1189;\n"
    "	mov.f32 	%f1191, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1192, %f1182, %f1191;\n"
    "	mul.f32 	%f1193, %f1184, %f1184;\n"
    "	mul.f32 	%f1194, %f1179, %f1188;\n"
    "	mul.f32 	%f1195, %f1187, %f1193;\n"
    "	mul.f32 	%f1196, %f1192, %f1193;\n"
    "	mov.f32 	%f1197, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1198, %f1194, %f1197;\n"
    "	ex2.approx.f32 	%f1199, %f1198;\n"
    "	mul.f32 	%f1200, %f1190, %f1199;\n"
    "	mul.f32 	%f1201, %f1179, %f1200;\n"
    "	mul.f32 	%f1202, %f1176, %f1201;\n"
    "	sub.f32 	%f1203, %f1202, %f1195;\n"
    "	mul.f32 	%f1204, %f1177, %f1196;\n"
    "	sub.f32 	%f1205, %f1203, %f1204;\n"
    "	mad.f32 	%f1206, %f1183, %f1185, %f1205;\n"
    "	mov.f32 	%f1207, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1208, %f1207, %f1206, %p17;\n"
    "	mov.f32 	%f1209, %f1137;\n"
    "	mov.f32 	%f1210, %f1152;\n"
    "	mad.f32 	%f1211, %f1210, %f1208, %f1209;\n"
    "	mov.f32 	%f1212, %f1211;\n"
    "	mov.f32 	%f1213, %f1141;\n"
    "	mov.f32 	%f1214, %f1163;\n"
    "	mad.f32 	%f1215, %f1214, %f1208, %f1213;\n"
    "	mov.f32 	%f1216, %f1215;\n"
    "	mov.f32 	%f1217, %f1144;\n"
    "	mad.f32 	%f1218, %f1171, %f1208, %f1217;\n"
    "	mov.f32 	%f1219, %f1218;\n"
    "	ld.shared.s32 	%r58, [%rd14+268];\n"
    "	add.s32 	%r59, %r58, %r6;\n"
    "	ld.shared.f32 	%f1220, [%rd15+256];\n"
    "	sub.f32 	%f1221, %f19, %f1220;\n"
    "	mov.f32 	%f1222, %f1221;\n"
    "	mul.f32 	%f1223, %f14, %f1222;\n"
    "	cvt.rni.f32.f32 	%f1224, %f1223;\n"
    "	mul.f32 	%f1225, %f13, %f1224;\n"
    "	sub.f32 	%f1226, %f1221, %f1225;\n"
    "	mov.f32 	%f1227, %f1226;\n"
    "	mov.f32 	%f1228, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1229, %f1226, %f1226, %f1228;\n"
    "	ld.shared.f32 	%f1230, [%rd15+260];\n"
    "	sub.f32 	%f1231, %f18, %f1230;\n"
    "	mov.f32 	%f1232, %f1231;\n"
    "	mov.f32 	%f1233, %f1232;\n"
    "	mul.f32 	%f1234, %f14, %f1232;\n"
    "	cvt.rni.f32.f32 	%f1235, %f1234;\n"
    "	mul.f32 	%f1236, %f13, %f1235;\n"
    "	sub.f32 	%f1237, %f1231, %f1236;\n"
    "	mov.f32 	%f1238, %f1237;\n"
    "	mad.f32 	%f1239, %f1237, %f1237, %f1229;\n"
    "	ld.shared.f32 	%f1240, [%rd15+264];\n"
    "	sub.f32 	%f1241, %f11, %f1240;\n"
    "	mov.f32 	%f1242, %f1241;\n"
    "	mul.f32 	%f1243, %f1241, %f14;\n"
    "	cvt.rni.f32.f32 	%f1244, %f1243;\n"
    "	mul.f32 	%f1245, %f13, %f1244;\n"
    "	sub.f32 	%f1246, %f1241, %f1245;\n"
    "	mov.f32 	%f1247, %f1246;\n"
    "	mad.f32 	%f1248, %f1246, %f1246, %f1239;\n"
    "	mov.f32 	%f1249, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p18, %f1248, %f1249;\n"
    "	sqrt.approx.f32 	%f1250, %f1248;\n"
    "	rcp.approx.f32 	%f1251, %f1250;\n"
    "	cvt.s64.s32 	%rd64, %r59;\n"
    "	mul.wide.s32 	%rd65, %r59, 24;\n"
    "	add.u64 	%rd66, %rd9, %rd65;\n"
    "	mul.f32 	%f1252, %f1251, %f1251;\n"
    "	ld.const.f32 	%f1253, [%rd66+12];\n"
    "	ld.const.f32 	%f1254, [%rd66+8];\n"
    "	ld.const.f32 	%f1255, [%rd66+4];\n"
    "	ld.const.f32 	%f1256, [%rd66+0];\n"
    "	ld.const.f32 	%f1257, [%rd66+16];\n"
    "	ld.const.f32 	%f1258, [%rd66+20];\n"
    "	mul.f32 	%f1259, %f1252, %f1252;\n"
    "	mul.f32 	%f1260, %f1251, %f1252;\n"
    "	mov.f32 	%f1261, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1262, %f1253, %f1261;\n"
    "	sub.f32 	%f1263, %f1255, %f1250;\n"
    "	mov.f32 	%f1264, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1265, %f1256, %f1264;\n"
    "	mov.f32 	%f1266, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1267, %f1257, %f1266;\n"
    "	mul.f32 	%f1268, %f1259, %f1259;\n"
    "	mul.f32 	%f1269, %f1254, %f1263;\n"
    "	mul.f32 	%f1270, %f1262, %f1268;\n"
    "	mul.f32 	%f1271, %f1267, %f1268;\n"
    "	mov.f32 	%f1272, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1273, %f1269, %f1272;\n"
    "	ex2.approx.f32 	%f1274, %f1273;\n"
    "	mul.f32 	%f1275, %f1265, %f1274;\n"
    "	mul.f32 	%f1276, %f1254, %f1275;\n"
    "	mul.f32 	%f1277, %f1251, %f1276;\n"
    "	sub.f32 	%f1278, %f1277, %f1270;\n"
    "	mul.f32 	%f1279, %f1252, %f1271;\n"
    "	sub.f32 	%f1280, %f1278, %f1279;\n"
    "	mad.f32 	%f1281, %f1258, %f1260, %f1280;\n"
    "	mov.f32 	%f1282, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1283, %f1282, %f1281, %p18;\n"
    "	mov.f32 	%f1284, %f1212;\n"
    "	mov.f32 	%f1285, %f1227;\n"
    "	mad.f32 	%f1286, %f1285, %f1283, %f1284;\n"
    "	mov.f32 	%f1287, %f1286;\n"
    "	mov.f32 	%f1288, %f1216;\n"
    "	mov.f32 	%f1289, %f1238;\n"
    "	mad.f32 	%f1290, %f1289, %f1283, %f1288;\n"
    "	mov.f32 	%f1291, %f1290;\n"
    "	mov.f32 	%f1292, %f1219;\n"
    "	mad.f32 	%f1293, %f1246, %f1283, %f1292;\n"
    "	mov.f32 	%f1294, %f1293;\n"
    "	ld.shared.s32 	%r60, [%rd14+284];\n"
    "	add.s32 	%r61, %r60, %r6;\n"
    "	ld.shared.f32 	%f1295, [%rd15+272];\n"
    "	sub.f32 	%f1296, %f19, %f1295;\n"
    "	mov.f32 	%f1297, %f1296;\n"
    "	mul.f32 	%f1298, %f14, %f1297;\n"
    "	cvt.rni.f32.f32 	%f1299, %f1298;\n"
    "	mul.f32 	%f1300, %f13, %f1299;\n"
    "	sub.f32 	%f1301, %f1296, %f1300;\n"
    "	mov.f32 	%f1302, %f1301;\n"
    "	mov.f32 	%f1303, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1304, %f1301, %f1301, %f1303;\n"
    "	ld.shared.f32 	%f1305, [%rd15+276];\n"
    "	sub.f32 	%f1306, %f18, %f1305;\n"
    "	mov.f32 	%f1307, %f1306;\n"
    "	mov.f32 	%f1308, %f1307;\n"
    "	mul.f32 	%f1309, %f14, %f1307;\n"
    "	cvt.rni.f32.f32 	%f1310, %f1309;\n"
    "	mul.f32 	%f1311, %f13, %f1310;\n"
    "	sub.f32 	%f1312, %f1306, %f1311;\n"
    "	mov.f32 	%f1313, %f1312;\n"
    "	mad.f32 	%f1314, %f1312, %f1312, %f1304;\n"
    "	ld.shared.f32 	%f1315, [%rd15+280];\n"
    "	sub.f32 	%f1316, %f11, %f1315;\n"
    "	mov.f32 	%f1317, %f1316;\n"
    "	mul.f32 	%f1318, %f1316, %f14;\n"
    "	cvt.rni.f32.f32 	%f1319, %f1318;\n"
    "	mul.f32 	%f1320, %f13, %f1319;\n"
    "	sub.f32 	%f1321, %f1316, %f1320;\n"
    "	mov.f32 	%f1322, %f1321;\n"
    "	mad.f32 	%f1323, %f1321, %f1321, %f1314;\n"
    "	mov.f32 	%f1324, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p19, %f1323, %f1324;\n"
    "	sqrt.approx.f32 	%f1325, %f1323;\n"
    "	rcp.approx.f32 	%f1326, %f1325;\n"
    "	cvt.s64.s32 	%rd67, %r61;\n"
    "	mul.wide.s32 	%rd68, %r61, 24;\n"
    "	add.u64 	%rd69, %rd9, %rd68;\n"
    "	mul.f32 	%f1327, %f1326, %f1326;\n"
    "	ld.const.f32 	%f1328, [%rd69+12];\n"
    "	ld.const.f32 	%f1329, [%rd69+8];\n"
    "	ld.const.f32 	%f1330, [%rd69+4];\n"
    "	ld.const.f32 	%f1331, [%rd69+0];\n"
    "	ld.const.f32 	%f1332, [%rd69+16];\n"
    "	ld.const.f32 	%f1333, [%rd69+20];\n"
    "	mul.f32 	%f1334, %f1327, %f1327;\n"
    "	mul.f32 	%f1335, %f1326, %f1327;\n"
    "	mov.f32 	%f1336, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1337, %f1328, %f1336;\n"
    "	sub.f32 	%f1338, %f1330, %f1325;\n"
    "	mov.f32 	%f1339, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1340, %f1331, %f1339;\n"
    "	mov.f32 	%f1341, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1342, %f1332, %f1341;\n"
    "	mul.f32 	%f1343, %f1334, %f1334;\n"
    "	mul.f32 	%f1344, %f1329, %f1338;\n"
    "	mul.f32 	%f1345, %f1337, %f1343;\n"
    "	mul.f32 	%f1346, %f1342, %f1343;\n"
    "	mov.f32 	%f1347, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1348, %f1344, %f1347;\n"
    "	ex2.approx.f32 	%f1349, %f1348;\n"
    "	mul.f32 	%f1350, %f1340, %f1349;\n"
    "	mul.f32 	%f1351, %f1329, %f1350;\n"
    "	mul.f32 	%f1352, %f1326, %f1351;\n"
    "	sub.f32 	%f1353, %f1352, %f1345;\n"
    "	mul.f32 	%f1354, %f1327, %f1346;\n"
    "	sub.f32 	%f1355, %f1353, %f1354;\n"
    "	mad.f32 	%f1356, %f1333, %f1335, %f1355;\n"
    "	mov.f32 	%f1357, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1358, %f1357, %f1356, %p19;\n"
    "	mov.f32 	%f1359, %f1287;\n"
    "	mov.f32 	%f1360, %f1302;\n"
    "	mad.f32 	%f1361, %f1360, %f1358, %f1359;\n"
    "	mov.f32 	%f1362, %f1361;\n"
    "	mov.f32 	%f1363, %f1291;\n"
    "	mov.f32 	%f1364, %f1313;\n"
    "	mad.f32 	%f1365, %f1364, %f1358, %f1363;\n"
    "	mov.f32 	%f1366, %f1365;\n"
    "	mov.f32 	%f1367, %f1294;\n"
    "	mad.f32 	%f1368, %f1321, %f1358, %f1367;\n"
    "	mov.f32 	%f1369, %f1368;\n"
    "	ld.shared.s32 	%r62, [%rd14+300];\n"
    "	add.s32 	%r63, %r62, %r6;\n"
    "	ld.shared.f32 	%f1370, [%rd15+288];\n"
    "	sub.f32 	%f1371, %f19, %f1370;\n"
    "	mov.f32 	%f1372, %f1371;\n"
    "	mul.f32 	%f1373, %f14, %f1372;\n"
    "	cvt.rni.f32.f32 	%f1374, %f1373;\n"
    "	mul.f32 	%f1375, %f13, %f1374;\n"
    "	sub.f32 	%f1376, %f1371, %f1375;\n"
    "	mov.f32 	%f1377, %f1376;\n"
    "	mov.f32 	%f1378, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1379, %f1376, %f1376, %f1378;\n"
    "	ld.shared.f32 	%f1380, [%rd15+292];\n"
    "	sub.f32 	%f1381, %f18, %f1380;\n"
    "	mov.f32 	%f1382, %f1381;\n"
    "	mov.f32 	%f1383, %f1382;\n"
    "	mul.f32 	%f1384, %f14, %f1382;\n"
    "	cvt.rni.f32.f32 	%f1385, %f1384;\n"
    "	mul.f32 	%f1386, %f13, %f1385;\n"
    "	sub.f32 	%f1387, %f1381, %f1386;\n"
    "	mov.f32 	%f1388, %f1387;\n"
    "	mad.f32 	%f1389, %f1387, %f1387, %f1379;\n"
    "	ld.shared.f32 	%f1390, [%rd15+296];\n"
    "	sub.f32 	%f1391, %f11, %f1390;\n"
    "	mov.f32 	%f1392, %f1391;\n"
    "	mul.f32 	%f1393, %f1391, %f14;\n"
    "	cvt.rni.f32.f32 	%f1394, %f1393;\n"
    "	mul.f32 	%f1395, %f13, %f1394;\n"
    "	sub.f32 	%f1396, %f1391, %f1395;\n"
    "	mov.f32 	%f1397, %f1396;\n"
    "	mad.f32 	%f1398, %f1396, %f1396, %f1389;\n"
    "	mov.f32 	%f1399, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p20, %f1398, %f1399;\n"
    "	sqrt.approx.f32 	%f1400, %f1398;\n"
    "	rcp.approx.f32 	%f1401, %f1400;\n"
    "	cvt.s64.s32 	%rd70, %r63;\n"
    "	mul.wide.s32 	%rd71, %r63, 24;\n"
    "	add.u64 	%rd72, %rd9, %rd71;\n"
    "	mul.f32 	%f1402, %f1401, %f1401;\n"
    "	ld.const.f32 	%f1403, [%rd72+12];\n"
    "	ld.const.f32 	%f1404, [%rd72+8];\n"
    "	ld.const.f32 	%f1405, [%rd72+4];\n"
    "	ld.const.f32 	%f1406, [%rd72+0];\n"
    "	ld.const.f32 	%f1407, [%rd72+16];\n"
    "	ld.const.f32 	%f1408, [%rd72+20];\n"
    "	mul.f32 	%f1409, %f1402, %f1402;\n"
    "	mul.f32 	%f1410, %f1401, %f1402;\n"
    "	mov.f32 	%f1411, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1412, %f1403, %f1411;\n"
    "	sub.f32 	%f1413, %f1405, %f1400;\n"
    "	mov.f32 	%f1414, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1415, %f1406, %f1414;\n"
    "	mov.f32 	%f1416, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1417, %f1407, %f1416;\n"
    "	mul.f32 	%f1418, %f1409, %f1409;\n"
    "	mul.f32 	%f1419, %f1404, %f1413;\n"
    "	mul.f32 	%f1420, %f1412, %f1418;\n"
    "	mul.f32 	%f1421, %f1417, %f1418;\n"
    "	mov.f32 	%f1422, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1423, %f1419, %f1422;\n"
    "	ex2.approx.f32 	%f1424, %f1423;\n"
    "	mul.f32 	%f1425, %f1415, %f1424;\n"
    "	mul.f32 	%f1426, %f1404, %f1425;\n"
    "	mul.f32 	%f1427, %f1401, %f1426;\n"
    "	sub.f32 	%f1428, %f1427, %f1420;\n"
    "	mul.f32 	%f1429, %f1402, %f1421;\n"
    "	sub.f32 	%f1430, %f1428, %f1429;\n"
    "	mad.f32 	%f1431, %f1408, %f1410, %f1430;\n"
    "	mov.f32 	%f1432, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1433, %f1432, %f1431, %p20;\n"
    "	mov.f32 	%f1434, %f1362;\n"
    "	mov.f32 	%f1435, %f1377;\n"
    "	mad.f32 	%f1436, %f1435, %f1433, %f1434;\n"
    "	mov.f32 	%f1437, %f1436;\n"
    "	mov.f32 	%f1438, %f1366;\n"
    "	mov.f32 	%f1439, %f1388;\n"
    "	mad.f32 	%f1440, %f1439, %f1433, %f1438;\n"
    "	mov.f32 	%f1441, %f1440;\n"
    "	mov.f32 	%f1442, %f1369;\n"
    "	mad.f32 	%f1443, %f1396, %f1433, %f1442;\n"
    "	mov.f32 	%f1444, %f1443;\n"
    "	ld.shared.s32 	%r64, [%rd14+316];\n"
    "	add.s32 	%r65, %r64, %r6;\n"
    "	ld.shared.f32 	%f1445, [%rd15+304];\n"
    "	sub.f32 	%f1446, %f19, %f1445;\n"
    "	mov.f32 	%f1447, %f1446;\n"
    "	mul.f32 	%f1448, %f14, %f1447;\n"
    "	cvt.rni.f32.f32 	%f1449, %f1448;\n"
    "	mul.f32 	%f1450, %f13, %f1449;\n"
    "	sub.f32 	%f1451, %f1446, %f1450;\n"
    "	mov.f32 	%f1452, %f1451;\n"
    "	mov.f32 	%f1453, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1454, %f1451, %f1451, %f1453;\n"
    "	ld.shared.f32 	%f1455, [%rd15+308];\n"
    "	sub.f32 	%f1456, %f18, %f1455;\n"
    "	mov.f32 	%f1457, %f1456;\n"
    "	mov.f32 	%f1458, %f1457;\n"
    "	mul.f32 	%f1459, %f14, %f1457;\n"
    "	cvt.rni.f32.f32 	%f1460, %f1459;\n"
    "	mul.f32 	%f1461, %f13, %f1460;\n"
    "	sub.f32 	%f1462, %f1456, %f1461;\n"
    "	mov.f32 	%f1463, %f1462;\n"
    "	mad.f32 	%f1464, %f1462, %f1462, %f1454;\n"
    "	ld.shared.f32 	%f1465, [%rd15+312];\n"
    "	sub.f32 	%f1466, %f11, %f1465;\n"
    "	mov.f32 	%f1467, %f1466;\n"
    "	mul.f32 	%f1468, %f1466, %f14;\n"
    "	cvt.rni.f32.f32 	%f1469, %f1468;\n"
    "	mul.f32 	%f1470, %f13, %f1469;\n"
    "	sub.f32 	%f1471, %f1466, %f1470;\n"
    "	mov.f32 	%f1472, %f1471;\n"
    "	mad.f32 	%f1473, %f1471, %f1471, %f1464;\n"
    "	mov.f32 	%f1474, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p21, %f1473, %f1474;\n"
    "	sqrt.approx.f32 	%f1475, %f1473;\n"
    "	rcp.approx.f32 	%f1476, %f1475;\n"
    "	cvt.s64.s32 	%rd73, %r65;\n"
    "	mul.wide.s32 	%rd74, %r65, 24;\n"
    "	add.u64 	%rd75, %rd9, %rd74;\n"
    "	mul.f32 	%f1477, %f1476, %f1476;\n"
    "	ld.const.f32 	%f1478, [%rd75+12];\n"
    "	ld.const.f32 	%f1479, [%rd75+8];\n"
    "	ld.const.f32 	%f1480, [%rd75+4];\n"
    "	ld.const.f32 	%f1481, [%rd75+0];\n"
    "	ld.const.f32 	%f1482, [%rd75+16];\n"
    "	ld.const.f32 	%f1483, [%rd75+20];\n"
    "	mul.f32 	%f1484, %f1477, %f1477;\n"
    "	mul.f32 	%f1485, %f1476, %f1477;\n"
    "	mov.f32 	%f1486, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1487, %f1478, %f1486;\n"
    "	sub.f32 	%f1488, %f1480, %f1475;\n"
    "	mov.f32 	%f1489, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1490, %f1481, %f1489;\n"
    "	mov.f32 	%f1491, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1492, %f1482, %f1491;\n"
    "	mul.f32 	%f1493, %f1484, %f1484;\n"
    "	mul.f32 	%f1494, %f1479, %f1488;\n"
    "	mul.f32 	%f1495, %f1487, %f1493;\n"
    "	mul.f32 	%f1496, %f1492, %f1493;\n"
    "	mov.f32 	%f1497, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1498, %f1494, %f1497;\n"
    "	ex2.approx.f32 	%f1499, %f1498;\n"
    "	mul.f32 	%f1500, %f1490, %f1499;\n"
    "	mul.f32 	%f1501, %f1479, %f1500;\n"
    "	mul.f32 	%f1502, %f1476, %f1501;\n"
    "	sub.f32 	%f1503, %f1502, %f1495;\n"
    "	mul.f32 	%f1504, %f1477, %f1496;\n"
    "	sub.f32 	%f1505, %f1503, %f1504;\n"
    "	mad.f32 	%f1506, %f1483, %f1485, %f1505;\n"
    "	mov.f32 	%f1507, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1508, %f1507, %f1506, %p21;\n"
    "	mov.f32 	%f1509, %f1437;\n"
    "	mov.f32 	%f1510, %f1452;\n"
    "	mad.f32 	%f1511, %f1510, %f1508, %f1509;\n"
    "	mov.f32 	%f1512, %f1511;\n"
    "	mov.f32 	%f1513, %f1441;\n"
    "	mov.f32 	%f1514, %f1463;\n"
    "	mad.f32 	%f1515, %f1514, %f1508, %f1513;\n"
    "	mov.f32 	%f1516, %f1515;\n"
    "	mov.f32 	%f1517, %f1444;\n"
    "	mad.f32 	%f1518, %f1471, %f1508, %f1517;\n"
    "	mov.f32 	%f1519, %f1518;\n"
    "	ld.shared.s32 	%r66, [%rd14+332];\n"
    "	add.s32 	%r67, %r66, %r6;\n"
    "	ld.shared.f32 	%f1520, [%rd15+320];\n"
    "	sub.f32 	%f1521, %f19, %f1520;\n"
    "	mov.f32 	%f1522, %f1521;\n"
    "	mul.f32 	%f1523, %f14, %f1522;\n"
    "	cvt.rni.f32.f32 	%f1524, %f1523;\n"
    "	mul.f32 	%f1525, %f13, %f1524;\n"
    "	sub.f32 	%f1526, %f1521, %f1525;\n"
    "	mov.f32 	%f1527, %f1526;\n"
    "	mov.f32 	%f1528, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1529, %f1526, %f1526, %f1528;\n"
    "	ld.shared.f32 	%f1530, [%rd15+324];\n"
    "	sub.f32 	%f1531, %f18, %f1530;\n"
    "	mov.f32 	%f1532, %f1531;\n"
    "	mov.f32 	%f1533, %f1532;\n"
    "	mul.f32 	%f1534, %f14, %f1532;\n"
    "	cvt.rni.f32.f32 	%f1535, %f1534;\n"
    "	mul.f32 	%f1536, %f13, %f1535;\n"
    "	sub.f32 	%f1537, %f1531, %f1536;\n"
    "	mov.f32 	%f1538, %f1537;\n"
    "	mad.f32 	%f1539, %f1537, %f1537, %f1529;\n"
    "	ld.shared.f32 	%f1540, [%rd15+328];\n"
    "	sub.f32 	%f1541, %f11, %f1540;\n"
    "	mov.f32 	%f1542, %f1541;\n"
    "	mul.f32 	%f1543, %f1541, %f14;\n"
    "	cvt.rni.f32.f32 	%f1544, %f1543;\n"
    "	mul.f32 	%f1545, %f13, %f1544;\n"
    "	sub.f32 	%f1546, %f1541, %f1545;\n"
    "	mov.f32 	%f1547, %f1546;\n"
    "	mad.f32 	%f1548, %f1546, %f1546, %f1539;\n"
    "	mov.f32 	%f1549, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p22, %f1548, %f1549;\n"
    "	sqrt.approx.f32 	%f1550, %f1548;\n"
    "	rcp.approx.f32 	%f1551, %f1550;\n"
    "	cvt.s64.s32 	%rd76, %r67;\n"
    "	mul.wide.s32 	%rd77, %r67, 24;\n"
    "	add.u64 	%rd78, %rd9, %rd77;\n"
    "	mul.f32 	%f1552, %f1551, %f1551;\n"
    "	ld.const.f32 	%f1553, [%rd78+12];\n"
    "	ld.const.f32 	%f1554, [%rd78+8];\n"
    "	ld.const.f32 	%f1555, [%rd78+4];\n"
    "	ld.const.f32 	%f1556, [%rd78+0];\n"
    "	ld.const.f32 	%f1557, [%rd78+16];\n"
    "	ld.const.f32 	%f1558, [%rd78+20];\n"
    "	mul.f32 	%f1559, %f1552, %f1552;\n"
    "	mul.f32 	%f1560, %f1551, %f1552;\n"
    "	mov.f32 	%f1561, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1562, %f1553, %f1561;\n"
    "	sub.f32 	%f1563, %f1555, %f1550;\n"
    "	mov.f32 	%f1564, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1565, %f1556, %f1564;\n"
    "	mov.f32 	%f1566, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1567, %f1557, %f1566;\n"
    "	mul.f32 	%f1568, %f1559, %f1559;\n"
    "	mul.f32 	%f1569, %f1554, %f1563;\n"
    "	mul.f32 	%f1570, %f1562, %f1568;\n"
    "	mul.f32 	%f1571, %f1567, %f1568;\n"
    "	mov.f32 	%f1572, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1573, %f1569, %f1572;\n"
    "	ex2.approx.f32 	%f1574, %f1573;\n"
    "	mul.f32 	%f1575, %f1565, %f1574;\n"
    "	mul.f32 	%f1576, %f1554, %f1575;\n"
    "	mul.f32 	%f1577, %f1551, %f1576;\n"
    "	sub.f32 	%f1578, %f1577, %f1570;\n"
    "	mul.f32 	%f1579, %f1552, %f1571;\n"
    "	sub.f32 	%f1580, %f1578, %f1579;\n"
    "	mad.f32 	%f1581, %f1558, %f1560, %f1580;\n"
    "	mov.f32 	%f1582, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1583, %f1582, %f1581, %p22;\n"
    "	mov.f32 	%f1584, %f1512;\n"
    "	mov.f32 	%f1585, %f1527;\n"
    "	mad.f32 	%f1586, %f1585, %f1583, %f1584;\n"
    "	mov.f32 	%f1587, %f1586;\n"
    "	mov.f32 	%f1588, %f1516;\n"
    "	mov.f32 	%f1589, %f1538;\n"
    "	mad.f32 	%f1590, %f1589, %f1583, %f1588;\n"
    "	mov.f32 	%f1591, %f1590;\n"
    "	mov.f32 	%f1592, %f1519;\n"
    "	mad.f32 	%f1593, %f1546, %f1583, %f1592;\n"
    "	mov.f32 	%f1594, %f1593;\n"
    "	ld.shared.s32 	%r68, [%rd14+348];\n"
    "	add.s32 	%r69, %r68, %r6;\n"
    "	ld.shared.f32 	%f1595, [%rd15+336];\n"
    "	sub.f32 	%f1596, %f19, %f1595;\n"
    "	mov.f32 	%f1597, %f1596;\n"
    "	mul.f32 	%f1598, %f14, %f1597;\n"
    "	cvt.rni.f32.f32 	%f1599, %f1598;\n"
    "	mul.f32 	%f1600, %f13, %f1599;\n"
    "	sub.f32 	%f1601, %f1596, %f1600;\n"
    "	mov.f32 	%f1602, %f1601;\n"
    "	mov.f32 	%f1603, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1604, %f1601, %f1601, %f1603;\n"
    "	ld.shared.f32 	%f1605, [%rd15+340];\n"
    "	sub.f32 	%f1606, %f18, %f1605;\n"
    "	mov.f32 	%f1607, %f1606;\n"
    "	mov.f32 	%f1608, %f1607;\n"
    "	mul.f32 	%f1609, %f14, %f1607;\n"
    "	cvt.rni.f32.f32 	%f1610, %f1609;\n"
    "	mul.f32 	%f1611, %f13, %f1610;\n"
    "	sub.f32 	%f1612, %f1606, %f1611;\n"
    "	mov.f32 	%f1613, %f1612;\n"
    "	mad.f32 	%f1614, %f1612, %f1612, %f1604;\n"
    "	ld.shared.f32 	%f1615, [%rd15+344];\n"
    "	sub.f32 	%f1616, %f11, %f1615;\n"
    "	mov.f32 	%f1617, %f1616;\n"
    "	mul.f32 	%f1618, %f1616, %f14;\n"
    "	cvt.rni.f32.f32 	%f1619, %f1618;\n"
    "	mul.f32 	%f1620, %f13, %f1619;\n"
    "	sub.f32 	%f1621, %f1616, %f1620;\n"
    "	mov.f32 	%f1622, %f1621;\n"
    "	mad.f32 	%f1623, %f1621, %f1621, %f1614;\n"
    "	mov.f32 	%f1624, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p23, %f1623, %f1624;\n"
    "	sqrt.approx.f32 	%f1625, %f1623;\n"
    "	rcp.approx.f32 	%f1626, %f1625;\n"
    "	cvt.s64.s32 	%rd79, %r69;\n"
    "	mul.wide.s32 	%rd80, %r69, 24;\n"
    "	add.u64 	%rd81, %rd9, %rd80;\n"
    "	mul.f32 	%f1627, %f1626, %f1626;\n"
    "	ld.const.f32 	%f1628, [%rd81+12];\n"
    "	ld.const.f32 	%f1629, [%rd81+8];\n"
    "	ld.const.f32 	%f1630, [%rd81+4];\n"
    "	ld.const.f32 	%f1631, [%rd81+0];\n"
    "	ld.const.f32 	%f1632, [%rd81+16];\n"
    "	ld.const.f32 	%f1633, [%rd81+20];\n"
    "	mul.f32 	%f1634, %f1627, %f1627;\n"
    "	mul.f32 	%f1635, %f1626, %f1627;\n"
    "	mov.f32 	%f1636, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1637, %f1628, %f1636;\n"
    "	sub.f32 	%f1638, %f1630, %f1625;\n"
    "	mov.f32 	%f1639, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1640, %f1631, %f1639;\n"
    "	mov.f32 	%f1641, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1642, %f1632, %f1641;\n"
    "	mul.f32 	%f1643, %f1634, %f1634;\n"
    "	mul.f32 	%f1644, %f1629, %f1638;\n"
    "	mul.f32 	%f1645, %f1637, %f1643;\n"
    "	mul.f32 	%f1646, %f1642, %f1643;\n"
    "	mov.f32 	%f1647, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1648, %f1644, %f1647;\n"
    "	ex2.approx.f32 	%f1649, %f1648;\n"
    "	mul.f32 	%f1650, %f1640, %f1649;\n"
    "	mul.f32 	%f1651, %f1629, %f1650;\n"
    "	mul.f32 	%f1652, %f1626, %f1651;\n"
    "	sub.f32 	%f1653, %f1652, %f1645;\n"
    "	mul.f32 	%f1654, %f1627, %f1646;\n"
    "	sub.f32 	%f1655, %f1653, %f1654;\n"
    "	mad.f32 	%f1656, %f1633, %f1635, %f1655;\n"
    "	mov.f32 	%f1657, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1658, %f1657, %f1656, %p23;\n"
    "	mov.f32 	%f1659, %f1587;\n"
    "	mov.f32 	%f1660, %f1602;\n"
    "	mad.f32 	%f1661, %f1660, %f1658, %f1659;\n"
    "	mov.f32 	%f1662, %f1661;\n"
    "	mov.f32 	%f1663, %f1591;\n"
    "	mov.f32 	%f1664, %f1613;\n"
    "	mad.f32 	%f1665, %f1664, %f1658, %f1663;\n"
    "	mov.f32 	%f1666, %f1665;\n"
    "	mov.f32 	%f1667, %f1594;\n"
    "	mad.f32 	%f1668, %f1621, %f1658, %f1667;\n"
    "	mov.f32 	%f1669, %f1668;\n"
    "	ld.shared.s32 	%r70, [%rd14+364];\n"
    "	add.s32 	%r71, %r70, %r6;\n"
    "	ld.shared.f32 	%f1670, [%rd15+352];\n"
    "	sub.f32 	%f1671, %f19, %f1670;\n"
    "	mov.f32 	%f1672, %f1671;\n"
    "	mul.f32 	%f1673, %f14, %f1672;\n"
    "	cvt.rni.f32.f32 	%f1674, %f1673;\n"
    "	mul.f32 	%f1675, %f13, %f1674;\n"
    "	sub.f32 	%f1676, %f1671, %f1675;\n"
    "	mov.f32 	%f1677, %f1676;\n"
    "	mov.f32 	%f1678, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1679, %f1676, %f1676, %f1678;\n"
    "	ld.shared.f32 	%f1680, [%rd15+356];\n"
    "	sub.f32 	%f1681, %f18, %f1680;\n"
    "	mov.f32 	%f1682, %f1681;\n"
    "	mov.f32 	%f1683, %f1682;\n"
    "	mul.f32 	%f1684, %f14, %f1682;\n"
    "	cvt.rni.f32.f32 	%f1685, %f1684;\n"
    "	mul.f32 	%f1686, %f13, %f1685;\n"
    "	sub.f32 	%f1687, %f1681, %f1686;\n"
    "	mov.f32 	%f1688, %f1687;\n"
    "	mad.f32 	%f1689, %f1687, %f1687, %f1679;\n"
    "	ld.shared.f32 	%f1690, [%rd15+360];\n"
    "	sub.f32 	%f1691, %f11, %f1690;\n"
    "	mov.f32 	%f1692, %f1691;\n"
    "	mul.f32 	%f1693, %f1691, %f14;\n"
    "	cvt.rni.f32.f32 	%f1694, %f1693;\n"
    "	mul.f32 	%f1695, %f13, %f1694;\n"
    "	sub.f32 	%f1696, %f1691, %f1695;\n"
    "	mov.f32 	%f1697, %f1696;\n"
    "	mad.f32 	%f1698, %f1696, %f1696, %f1689;\n"
    "	mov.f32 	%f1699, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p24, %f1698, %f1699;\n"
    "	sqrt.approx.f32 	%f1700, %f1698;\n"
    "	rcp.approx.f32 	%f1701, %f1700;\n"
    "	cvt.s64.s32 	%rd82, %r71;\n"
    "	mul.wide.s32 	%rd83, %r71, 24;\n"
    "	add.u64 	%rd84, %rd9, %rd83;\n"
    "	mul.f32 	%f1702, %f1701, %f1701;\n"
    "	ld.const.f32 	%f1703, [%rd84+12];\n"
    "	ld.const.f32 	%f1704, [%rd84+8];\n"
    "	ld.const.f32 	%f1705, [%rd84+4];\n"
    "	ld.const.f32 	%f1706, [%rd84+0];\n"
    "	ld.const.f32 	%f1707, [%rd84+16];\n"
    "	ld.const.f32 	%f1708, [%rd84+20];\n"
    "	mul.f32 	%f1709, %f1702, %f1702;\n"
    "	mul.f32 	%f1710, %f1701, %f1702;\n"
    "	mov.f32 	%f1711, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1712, %f1703, %f1711;\n"
    "	sub.f32 	%f1713, %f1705, %f1700;\n"
    "	mov.f32 	%f1714, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1715, %f1706, %f1714;\n"
    "	mov.f32 	%f1716, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1717, %f1707, %f1716;\n"
    "	mul.f32 	%f1718, %f1709, %f1709;\n"
    "	mul.f32 	%f1719, %f1704, %f1713;\n"
    "	mul.f32 	%f1720, %f1712, %f1718;\n"
    "	mul.f32 	%f1721, %f1717, %f1718;\n"
    "	mov.f32 	%f1722, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1723, %f1719, %f1722;\n"
    "	ex2.approx.f32 	%f1724, %f1723;\n"
    "	mul.f32 	%f1725, %f1715, %f1724;\n"
    "	mul.f32 	%f1726, %f1704, %f1725;\n"
    "	mul.f32 	%f1727, %f1701, %f1726;\n"
    "	sub.f32 	%f1728, %f1727, %f1720;\n"
    "	mul.f32 	%f1729, %f1702, %f1721;\n"
    "	sub.f32 	%f1730, %f1728, %f1729;\n"
    "	mad.f32 	%f1731, %f1708, %f1710, %f1730;\n"
    "	mov.f32 	%f1732, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1733, %f1732, %f1731, %p24;\n"
    "	mov.f32 	%f1734, %f1662;\n"
    "	mov.f32 	%f1735, %f1677;\n"
    "	mad.f32 	%f1736, %f1735, %f1733, %f1734;\n"
    "	mov.f32 	%f1737, %f1736;\n"
    "	mov.f32 	%f1738, %f1666;\n"
    "	mov.f32 	%f1739, %f1688;\n"
    "	mad.f32 	%f1740, %f1739, %f1733, %f1738;\n"
    "	mov.f32 	%f1741, %f1740;\n"
    "	mov.f32 	%f1742, %f1669;\n"
    "	mad.f32 	%f1743, %f1696, %f1733, %f1742;\n"
    "	mov.f32 	%f1744, %f1743;\n"
    "	ld.shared.s32 	%r72, [%rd14+380];\n"
    "	add.s32 	%r73, %r72, %r6;\n"
    "	ld.shared.f32 	%f1745, [%rd15+368];\n"
    "	sub.f32 	%f1746, %f19, %f1745;\n"
    "	mov.f32 	%f1747, %f1746;\n"
    "	mul.f32 	%f1748, %f14, %f1747;\n"
    "	cvt.rni.f32.f32 	%f1749, %f1748;\n"
    "	mul.f32 	%f1750, %f13, %f1749;\n"
    "	sub.f32 	%f1751, %f1746, %f1750;\n"
    "	mov.f32 	%f1752, %f1751;\n"
    "	mov.f32 	%f1753, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1754, %f1751, %f1751, %f1753;\n"
    "	ld.shared.f32 	%f1755, [%rd15+372];\n"
    "	sub.f32 	%f1756, %f18, %f1755;\n"
    "	mov.f32 	%f1757, %f1756;\n"
    "	mov.f32 	%f1758, %f1757;\n"
    "	mul.f32 	%f1759, %f14, %f1757;\n"
    "	cvt.rni.f32.f32 	%f1760, %f1759;\n"
    "	mul.f32 	%f1761, %f13, %f1760;\n"
    "	sub.f32 	%f1762, %f1756, %f1761;\n"
    "	mov.f32 	%f1763, %f1762;\n"
    "	mad.f32 	%f1764, %f1762, %f1762, %f1754;\n"
    "	ld.shared.f32 	%f1765, [%rd15+376];\n"
    "	sub.f32 	%f1766, %f11, %f1765;\n"
    "	mov.f32 	%f1767, %f1766;\n"
    "	mul.f32 	%f1768, %f1766, %f14;\n"
    "	cvt.rni.f32.f32 	%f1769, %f1768;\n"
    "	mul.f32 	%f1770, %f13, %f1769;\n"
    "	sub.f32 	%f1771, %f1766, %f1770;\n"
    "	mov.f32 	%f1772, %f1771;\n"
    "	mad.f32 	%f1773, %f1771, %f1771, %f1764;\n"
    "	mov.f32 	%f1774, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p25, %f1773, %f1774;\n"
    "	sqrt.approx.f32 	%f1775, %f1773;\n"
    "	rcp.approx.f32 	%f1776, %f1775;\n"
    "	cvt.s64.s32 	%rd85, %r73;\n"
    "	mul.wide.s32 	%rd86, %r73, 24;\n"
    "	add.u64 	%rd87, %rd9, %rd86;\n"
    "	mul.f32 	%f1777, %f1776, %f1776;\n"
    "	ld.const.f32 	%f1778, [%rd87+12];\n"
    "	ld.const.f32 	%f1779, [%rd87+8];\n"
    "	ld.const.f32 	%f1780, [%rd87+4];\n"
    "	ld.const.f32 	%f1781, [%rd87+0];\n"
    "	ld.const.f32 	%f1782, [%rd87+16];\n"
    "	ld.const.f32 	%f1783, [%rd87+20];\n"
    "	mul.f32 	%f1784, %f1777, %f1777;\n"
    "	mul.f32 	%f1785, %f1776, %f1777;\n"
    "	mov.f32 	%f1786, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1787, %f1778, %f1786;\n"
    "	sub.f32 	%f1788, %f1780, %f1775;\n"
    "	mov.f32 	%f1789, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1790, %f1781, %f1789;\n"
    "	mov.f32 	%f1791, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1792, %f1782, %f1791;\n"
    "	mul.f32 	%f1793, %f1784, %f1784;\n"
    "	mul.f32 	%f1794, %f1779, %f1788;\n"
    "	mul.f32 	%f1795, %f1787, %f1793;\n"
    "	mul.f32 	%f1796, %f1792, %f1793;\n"
    "	mov.f32 	%f1797, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1798, %f1794, %f1797;\n"
    "	ex2.approx.f32 	%f1799, %f1798;\n"
    "	mul.f32 	%f1800, %f1790, %f1799;\n"
    "	mul.f32 	%f1801, %f1779, %f1800;\n"
    "	mul.f32 	%f1802, %f1776, %f1801;\n"
    "	sub.f32 	%f1803, %f1802, %f1795;\n"
    "	mul.f32 	%f1804, %f1777, %f1796;\n"
    "	sub.f32 	%f1805, %f1803, %f1804;\n"
    "	mad.f32 	%f1806, %f1783, %f1785, %f1805;\n"
    "	mov.f32 	%f1807, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1808, %f1807, %f1806, %p25;\n"
    "	mov.f32 	%f1809, %f1737;\n"
    "	mov.f32 	%f1810, %f1752;\n"
    "	mad.f32 	%f1811, %f1810, %f1808, %f1809;\n"
    "	mov.f32 	%f1812, %f1811;\n"
    "	mov.f32 	%f1813, %f1741;\n"
    "	mov.f32 	%f1814, %f1763;\n"
    "	mad.f32 	%f1815, %f1814, %f1808, %f1813;\n"
    "	mov.f32 	%f1816, %f1815;\n"
    "	mov.f32 	%f1817, %f1744;\n"
    "	mad.f32 	%f1818, %f1771, %f1808, %f1817;\n"
    "	mov.f32 	%f1819, %f1818;\n"
    "	ld.shared.s32 	%r74, [%rd14+396];\n"
    "	add.s32 	%r75, %r74, %r6;\n"
    "	ld.shared.f32 	%f1820, [%rd15+384];\n"
    "	sub.f32 	%f1821, %f19, %f1820;\n"
    "	mov.f32 	%f1822, %f1821;\n"
    "	mul.f32 	%f1823, %f14, %f1822;\n"
    "	cvt.rni.f32.f32 	%f1824, %f1823;\n"
    "	mul.f32 	%f1825, %f13, %f1824;\n"
    "	sub.f32 	%f1826, %f1821, %f1825;\n"
    "	mov.f32 	%f1827, %f1826;\n"
    "	mov.f32 	%f1828, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1829, %f1826, %f1826, %f1828;\n"
    "	ld.shared.f32 	%f1830, [%rd15+388];\n"
    "	sub.f32 	%f1831, %f18, %f1830;\n"
    "	mov.f32 	%f1832, %f1831;\n"
    "	mov.f32 	%f1833, %f1832;\n"
    "	mul.f32 	%f1834, %f14, %f1832;\n"
    "	cvt.rni.f32.f32 	%f1835, %f1834;\n"
    "	mul.f32 	%f1836, %f13, %f1835;\n"
    "	sub.f32 	%f1837, %f1831, %f1836;\n"
    "	mov.f32 	%f1838, %f1837;\n"
    "	mad.f32 	%f1839, %f1837, %f1837, %f1829;\n"
    "	ld.shared.f32 	%f1840, [%rd15+392];\n"
    "	sub.f32 	%f1841, %f11, %f1840;\n"
    "	mov.f32 	%f1842, %f1841;\n"
    "	mul.f32 	%f1843, %f1841, %f14;\n"
    "	cvt.rni.f32.f32 	%f1844, %f1843;\n"
    "	mul.f32 	%f1845, %f13, %f1844;\n"
    "	sub.f32 	%f1846, %f1841, %f1845;\n"
    "	mov.f32 	%f1847, %f1846;\n"
    "	mad.f32 	%f1848, %f1846, %f1846, %f1839;\n"
    "	mov.f32 	%f1849, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p26, %f1848, %f1849;\n"
    "	sqrt.approx.f32 	%f1850, %f1848;\n"
    "	rcp.approx.f32 	%f1851, %f1850;\n"
    "	cvt.s64.s32 	%rd88, %r75;\n"
    "	mul.wide.s32 	%rd89, %r75, 24;\n"
    "	add.u64 	%rd90, %rd9, %rd89;\n"
    "	mul.f32 	%f1852, %f1851, %f1851;\n"
    "	ld.const.f32 	%f1853, [%rd90+12];\n"
    "	ld.const.f32 	%f1854, [%rd90+8];\n"
    "	ld.const.f32 	%f1855, [%rd90+4];\n"
    "	ld.const.f32 	%f1856, [%rd90+0];\n"
    "	ld.const.f32 	%f1857, [%rd90+16];\n"
    "	ld.const.f32 	%f1858, [%rd90+20];\n"
    "	mul.f32 	%f1859, %f1852, %f1852;\n"
    "	mul.f32 	%f1860, %f1851, %f1852;\n"
    "	mov.f32 	%f1861, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1862, %f1853, %f1861;\n"
    "	sub.f32 	%f1863, %f1855, %f1850;\n"
    "	mov.f32 	%f1864, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1865, %f1856, %f1864;\n"
    "	mov.f32 	%f1866, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1867, %f1857, %f1866;\n"
    "	mul.f32 	%f1868, %f1859, %f1859;\n"
    "	mul.f32 	%f1869, %f1854, %f1863;\n"
    "	mul.f32 	%f1870, %f1862, %f1868;\n"
    "	mul.f32 	%f1871, %f1867, %f1868;\n"
    "	mov.f32 	%f1872, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1873, %f1869, %f1872;\n"
    "	ex2.approx.f32 	%f1874, %f1873;\n"
    "	mul.f32 	%f1875, %f1865, %f1874;\n"
    "	mul.f32 	%f1876, %f1854, %f1875;\n"
    "	mul.f32 	%f1877, %f1851, %f1876;\n"
    "	sub.f32 	%f1878, %f1877, %f1870;\n"
    "	mul.f32 	%f1879, %f1852, %f1871;\n"
    "	sub.f32 	%f1880, %f1878, %f1879;\n"
    "	mad.f32 	%f1881, %f1858, %f1860, %f1880;\n"
    "	mov.f32 	%f1882, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1883, %f1882, %f1881, %p26;\n"
    "	mov.f32 	%f1884, %f1812;\n"
    "	mov.f32 	%f1885, %f1827;\n"
    "	mad.f32 	%f1886, %f1885, %f1883, %f1884;\n"
    "	mov.f32 	%f1887, %f1886;\n"
    "	mov.f32 	%f1888, %f1816;\n"
    "	mov.f32 	%f1889, %f1838;\n"
    "	mad.f32 	%f1890, %f1889, %f1883, %f1888;\n"
    "	mov.f32 	%f1891, %f1890;\n"
    "	mov.f32 	%f1892, %f1819;\n"
    "	mad.f32 	%f1893, %f1846, %f1883, %f1892;\n"
    "	mov.f32 	%f1894, %f1893;\n"
    "	ld.shared.s32 	%r76, [%rd14+412];\n"
    "	add.s32 	%r77, %r76, %r6;\n"
    "	ld.shared.f32 	%f1895, [%rd15+400];\n"
    "	sub.f32 	%f1896, %f19, %f1895;\n"
    "	mov.f32 	%f1897, %f1896;\n"
    "	mul.f32 	%f1898, %f14, %f1897;\n"
    "	cvt.rni.f32.f32 	%f1899, %f1898;\n"
    "	mul.f32 	%f1900, %f13, %f1899;\n"
    "	sub.f32 	%f1901, %f1896, %f1900;\n"
    "	mov.f32 	%f1902, %f1901;\n"
    "	mov.f32 	%f1903, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1904, %f1901, %f1901, %f1903;\n"
    "	ld.shared.f32 	%f1905, [%rd15+404];\n"
    "	sub.f32 	%f1906, %f18, %f1905;\n"
    "	mov.f32 	%f1907, %f1906;\n"
    "	mov.f32 	%f1908, %f1907;\n"
    "	mul.f32 	%f1909, %f14, %f1907;\n"
    "	cvt.rni.f32.f32 	%f1910, %f1909;\n"
    "	mul.f32 	%f1911, %f13, %f1910;\n"
    "	sub.f32 	%f1912, %f1906, %f1911;\n"
    "	mov.f32 	%f1913, %f1912;\n"
    "	mad.f32 	%f1914, %f1912, %f1912, %f1904;\n"
    "	ld.shared.f32 	%f1915, [%rd15+408];\n"
    "	sub.f32 	%f1916, %f11, %f1915;\n"
    "	mov.f32 	%f1917, %f1916;\n"
    "	mul.f32 	%f1918, %f1916, %f14;\n"
    "	cvt.rni.f32.f32 	%f1919, %f1918;\n"
    "	mul.f32 	%f1920, %f13, %f1919;\n"
    "	sub.f32 	%f1921, %f1916, %f1920;\n"
    "	mov.f32 	%f1922, %f1921;\n"
    "	mad.f32 	%f1923, %f1921, %f1921, %f1914;\n"
    "	mov.f32 	%f1924, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p27, %f1923, %f1924;\n"
    "	sqrt.approx.f32 	%f1925, %f1923;\n"
    "	rcp.approx.f32 	%f1926, %f1925;\n"
    "	cvt.s64.s32 	%rd91, %r77;\n"
    "	mul.wide.s32 	%rd92, %r77, 24;\n"
    "	add.u64 	%rd93, %rd9, %rd92;\n"
    "	mul.f32 	%f1927, %f1926, %f1926;\n"
    "	ld.const.f32 	%f1928, [%rd93+12];\n"
    "	ld.const.f32 	%f1929, [%rd93+8];\n"
    "	ld.const.f32 	%f1930, [%rd93+4];\n"
    "	ld.const.f32 	%f1931, [%rd93+0];\n"
    "	ld.const.f32 	%f1932, [%rd93+16];\n"
    "	ld.const.f32 	%f1933, [%rd93+20];\n"
    "	mul.f32 	%f1934, %f1927, %f1927;\n"
    "	mul.f32 	%f1935, %f1926, %f1927;\n"
    "	mov.f32 	%f1936, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1937, %f1928, %f1936;\n"
    "	sub.f32 	%f1938, %f1930, %f1925;\n"
    "	mov.f32 	%f1939, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1940, %f1931, %f1939;\n"
    "	mov.f32 	%f1941, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1942, %f1932, %f1941;\n"
    "	mul.f32 	%f1943, %f1934, %f1934;\n"
    "	mul.f32 	%f1944, %f1929, %f1938;\n"
    "	mul.f32 	%f1945, %f1937, %f1943;\n"
    "	mul.f32 	%f1946, %f1942, %f1943;\n"
    "	mov.f32 	%f1947, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1948, %f1944, %f1947;\n"
    "	ex2.approx.f32 	%f1949, %f1948;\n"
    "	mul.f32 	%f1950, %f1940, %f1949;\n"
    "	mul.f32 	%f1951, %f1929, %f1950;\n"
    "	mul.f32 	%f1952, %f1926, %f1951;\n"
    "	sub.f32 	%f1953, %f1952, %f1945;\n"
    "	mul.f32 	%f1954, %f1927, %f1946;\n"
    "	sub.f32 	%f1955, %f1953, %f1954;\n"
    "	mad.f32 	%f1956, %f1933, %f1935, %f1955;\n"
    "	mov.f32 	%f1957, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1958, %f1957, %f1956, %p27;\n"
    "	mov.f32 	%f1959, %f1887;\n"
    "	mov.f32 	%f1960, %f1902;\n"
    "	mad.f32 	%f1961, %f1960, %f1958, %f1959;\n"
    "	mov.f32 	%f1962, %f1961;\n"
    "	mov.f32 	%f1963, %f1891;\n"
    "	mov.f32 	%f1964, %f1913;\n"
    "	mad.f32 	%f1965, %f1964, %f1958, %f1963;\n"
    "	mov.f32 	%f1966, %f1965;\n"
    "	mov.f32 	%f1967, %f1894;\n"
    "	mad.f32 	%f1968, %f1921, %f1958, %f1967;\n"
    "	mov.f32 	%f1969, %f1968;\n"
    "	ld.shared.s32 	%r78, [%rd14+428];\n"
    "	add.s32 	%r79, %r78, %r6;\n"
    "	ld.shared.f32 	%f1970, [%rd15+416];\n"
    "	sub.f32 	%f1971, %f19, %f1970;\n"
    "	mov.f32 	%f1972, %f1971;\n"
    "	mul.f32 	%f1973, %f14, %f1972;\n"
    "	cvt.rni.f32.f32 	%f1974, %f1973;\n"
    "	mul.f32 	%f1975, %f13, %f1974;\n"
    "	sub.f32 	%f1976, %f1971, %f1975;\n"
    "	mov.f32 	%f1977, %f1976;\n"
    "	mov.f32 	%f1978, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1979, %f1976, %f1976, %f1978;\n"
    "	ld.shared.f32 	%f1980, [%rd15+420];\n"
    "	sub.f32 	%f1981, %f18, %f1980;\n"
    "	mov.f32 	%f1982, %f1981;\n"
    "	mov.f32 	%f1983, %f1982;\n"
    "	mul.f32 	%f1984, %f14, %f1982;\n"
    "	cvt.rni.f32.f32 	%f1985, %f1984;\n"
    "	mul.f32 	%f1986, %f13, %f1985;\n"
    "	sub.f32 	%f1987, %f1981, %f1986;\n"
    "	mov.f32 	%f1988, %f1987;\n"
    "	mad.f32 	%f1989, %f1987, %f1987, %f1979;\n"
    "	ld.shared.f32 	%f1990, [%rd15+424];\n"
    "	sub.f32 	%f1991, %f11, %f1990;\n"
    "	mov.f32 	%f1992, %f1991;\n"
    "	mul.f32 	%f1993, %f1991, %f14;\n"
    "	cvt.rni.f32.f32 	%f1994, %f1993;\n"
    "	mul.f32 	%f1995, %f13, %f1994;\n"
    "	sub.f32 	%f1996, %f1991, %f1995;\n"
    "	mov.f32 	%f1997, %f1996;\n"
    "	mad.f32 	%f1998, %f1996, %f1996, %f1989;\n"
    "	mov.f32 	%f1999, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p28, %f1998, %f1999;\n"
    "	sqrt.approx.f32 	%f2000, %f1998;\n"
    "	rcp.approx.f32 	%f2001, %f2000;\n"
    "	cvt.s64.s32 	%rd94, %r79;\n"
    "	mul.wide.s32 	%rd95, %r79, 24;\n"
    "	add.u64 	%rd96, %rd9, %rd95;\n"
    "	mul.f32 	%f2002, %f2001, %f2001;\n"
    "	ld.const.f32 	%f2003, [%rd96+12];\n"
    "	ld.const.f32 	%f2004, [%rd96+8];\n"
    "	ld.const.f32 	%f2005, [%rd96+4];\n"
    "	ld.const.f32 	%f2006, [%rd96+0];\n"
    "	ld.const.f32 	%f2007, [%rd96+16];\n"
    "	ld.const.f32 	%f2008, [%rd96+20];\n"
    "	mul.f32 	%f2009, %f2002, %f2002;\n"
    "	mul.f32 	%f2010, %f2001, %f2002;\n"
    "	mov.f32 	%f2011, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2012, %f2003, %f2011;\n"
    "	sub.f32 	%f2013, %f2005, %f2000;\n"
    "	mov.f32 	%f2014, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2015, %f2006, %f2014;\n"
    "	mov.f32 	%f2016, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2017, %f2007, %f2016;\n"
    "	mul.f32 	%f2018, %f2009, %f2009;\n"
    "	mul.f32 	%f2019, %f2004, %f2013;\n"
    "	mul.f32 	%f2020, %f2012, %f2018;\n"
    "	mul.f32 	%f2021, %f2017, %f2018;\n"
    "	mov.f32 	%f2022, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2023, %f2019, %f2022;\n"
    "	ex2.approx.f32 	%f2024, %f2023;\n"
    "	mul.f32 	%f2025, %f2015, %f2024;\n"
    "	mul.f32 	%f2026, %f2004, %f2025;\n"
    "	mul.f32 	%f2027, %f2001, %f2026;\n"
    "	sub.f32 	%f2028, %f2027, %f2020;\n"
    "	mul.f32 	%f2029, %f2002, %f2021;\n"
    "	sub.f32 	%f2030, %f2028, %f2029;\n"
    "	mad.f32 	%f2031, %f2008, %f2010, %f2030;\n"
    "	mov.f32 	%f2032, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2033, %f2032, %f2031, %p28;\n"
    "	mov.f32 	%f2034, %f1962;\n"
    "	mov.f32 	%f2035, %f1977;\n"
    "	mad.f32 	%f2036, %f2035, %f2033, %f2034;\n"
    "	mov.f32 	%f2037, %f2036;\n"
    "	mov.f32 	%f2038, %f1966;\n"
    "	mov.f32 	%f2039, %f1988;\n"
    "	mad.f32 	%f2040, %f2039, %f2033, %f2038;\n"
    "	mov.f32 	%f2041, %f2040;\n"
    "	mov.f32 	%f2042, %f1969;\n"
    "	mad.f32 	%f2043, %f1996, %f2033, %f2042;\n"
    "	mov.f32 	%f2044, %f2043;\n"
    "	ld.shared.s32 	%r80, [%rd14+444];\n"
    "	add.s32 	%r81, %r80, %r6;\n"
    "	ld.shared.f32 	%f2045, [%rd15+432];\n"
    "	sub.f32 	%f2046, %f19, %f2045;\n"
    "	mov.f32 	%f2047, %f2046;\n"
    "	mul.f32 	%f2048, %f14, %f2047;\n"
    "	cvt.rni.f32.f32 	%f2049, %f2048;\n"
    "	mul.f32 	%f2050, %f13, %f2049;\n"
    "	sub.f32 	%f2051, %f2046, %f2050;\n"
    "	mov.f32 	%f2052, %f2051;\n"
    "	mov.f32 	%f2053, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2054, %f2051, %f2051, %f2053;\n"
    "	ld.shared.f32 	%f2055, [%rd15+436];\n"
    "	sub.f32 	%f2056, %f18, %f2055;\n"
    "	mov.f32 	%f2057, %f2056;\n"
    "	mov.f32 	%f2058, %f2057;\n"
    "	mul.f32 	%f2059, %f14, %f2057;\n"
    "	cvt.rni.f32.f32 	%f2060, %f2059;\n"
    "	mul.f32 	%f2061, %f13, %f2060;\n"
    "	sub.f32 	%f2062, %f2056, %f2061;\n"
    "	mov.f32 	%f2063, %f2062;\n"
    "	mad.f32 	%f2064, %f2062, %f2062, %f2054;\n"
    "	ld.shared.f32 	%f2065, [%rd15+440];\n"
    "	sub.f32 	%f2066, %f11, %f2065;\n"
    "	mov.f32 	%f2067, %f2066;\n"
    "	mul.f32 	%f2068, %f2066, %f14;\n"
    "	cvt.rni.f32.f32 	%f2069, %f2068;\n"
    "	mul.f32 	%f2070, %f13, %f2069;\n"
    "	sub.f32 	%f2071, %f2066, %f2070;\n"
    "	mov.f32 	%f2072, %f2071;\n"
    "	mad.f32 	%f2073, %f2071, %f2071, %f2064;\n"
    "	mov.f32 	%f2074, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p29, %f2073, %f2074;\n"
    "	sqrt.approx.f32 	%f2075, %f2073;\n"
    "	rcp.approx.f32 	%f2076, %f2075;\n"
    "	cvt.s64.s32 	%rd97, %r81;\n"
    "	mul.wide.s32 	%rd98, %r81, 24;\n"
    "	add.u64 	%rd99, %rd9, %rd98;\n"
    "	mul.f32 	%f2077, %f2076, %f2076;\n"
    "	ld.const.f32 	%f2078, [%rd99+12];\n"
    "	ld.const.f32 	%f2079, [%rd99+8];\n"
    "	ld.const.f32 	%f2080, [%rd99+4];\n"
    "	ld.const.f32 	%f2081, [%rd99+0];\n"
    "	ld.const.f32 	%f2082, [%rd99+16];\n"
    "	ld.const.f32 	%f2083, [%rd99+20];\n"
    "	mul.f32 	%f2084, %f2077, %f2077;\n"
    "	mul.f32 	%f2085, %f2076, %f2077;\n"
    "	mov.f32 	%f2086, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2087, %f2078, %f2086;\n"
    "	sub.f32 	%f2088, %f2080, %f2075;\n"
    "	mov.f32 	%f2089, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2090, %f2081, %f2089;\n"
    "	mov.f32 	%f2091, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2092, %f2082, %f2091;\n"
    "	mul.f32 	%f2093, %f2084, %f2084;\n"
    "	mul.f32 	%f2094, %f2079, %f2088;\n"
    "	mul.f32 	%f2095, %f2087, %f2093;\n"
    "	mul.f32 	%f2096, %f2092, %f2093;\n"
    "	mov.f32 	%f2097, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2098, %f2094, %f2097;\n"
    "	ex2.approx.f32 	%f2099, %f2098;\n"
    "	mul.f32 	%f2100, %f2090, %f2099;\n"
    "	mul.f32 	%f2101, %f2079, %f2100;\n"
    "	mul.f32 	%f2102, %f2076, %f2101;\n"
    "	sub.f32 	%f2103, %f2102, %f2095;\n"
    "	mul.f32 	%f2104, %f2077, %f2096;\n"
    "	sub.f32 	%f2105, %f2103, %f2104;\n"
    "	mad.f32 	%f2106, %f2083, %f2085, %f2105;\n"
    "	mov.f32 	%f2107, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2108, %f2107, %f2106, %p29;\n"
    "	mov.f32 	%f2109, %f2037;\n"
    "	mov.f32 	%f2110, %f2052;\n"
    "	mad.f32 	%f2111, %f2110, %f2108, %f2109;\n"
    "	mov.f32 	%f2112, %f2111;\n"
    "	mov.f32 	%f2113, %f2041;\n"
    "	mov.f32 	%f2114, %f2063;\n"
    "	mad.f32 	%f2115, %f2114, %f2108, %f2113;\n"
    "	mov.f32 	%f2116, %f2115;\n"
    "	mov.f32 	%f2117, %f2044;\n"
    "	mad.f32 	%f2118, %f2071, %f2108, %f2117;\n"
    "	mov.f32 	%f2119, %f2118;\n"
    "	ld.shared.s32 	%r82, [%rd14+460];\n"
    "	add.s32 	%r83, %r82, %r6;\n"
    "	ld.shared.f32 	%f2120, [%rd15+448];\n"
    "	sub.f32 	%f2121, %f19, %f2120;\n"
    "	mov.f32 	%f2122, %f2121;\n"
    "	mul.f32 	%f2123, %f14, %f2122;\n"
    "	cvt.rni.f32.f32 	%f2124, %f2123;\n"
    "	mul.f32 	%f2125, %f13, %f2124;\n"
    "	sub.f32 	%f2126, %f2121, %f2125;\n"
    "	mov.f32 	%f2127, %f2126;\n"
    "	mov.f32 	%f2128, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2129, %f2126, %f2126, %f2128;\n"
    "	ld.shared.f32 	%f2130, [%rd15+452];\n"
    "	sub.f32 	%f2131, %f18, %f2130;\n"
    "	mov.f32 	%f2132, %f2131;\n"
    "	mov.f32 	%f2133, %f2132;\n"
    "	mul.f32 	%f2134, %f14, %f2132;\n"
    "	cvt.rni.f32.f32 	%f2135, %f2134;\n"
    "	mul.f32 	%f2136, %f13, %f2135;\n"
    "	sub.f32 	%f2137, %f2131, %f2136;\n"
    "	mov.f32 	%f2138, %f2137;\n"
    "	mad.f32 	%f2139, %f2137, %f2137, %f2129;\n"
    "	ld.shared.f32 	%f2140, [%rd15+456];\n"
    "	sub.f32 	%f2141, %f11, %f2140;\n"
    "	mov.f32 	%f2142, %f2141;\n"
    "	mul.f32 	%f2143, %f2141, %f14;\n"
    "	cvt.rni.f32.f32 	%f2144, %f2143;\n"
    "	mul.f32 	%f2145, %f13, %f2144;\n"
    "	sub.f32 	%f2146, %f2141, %f2145;\n"
    "	mov.f32 	%f2147, %f2146;\n"
    "	mad.f32 	%f2148, %f2146, %f2146, %f2139;\n"
    "	mov.f32 	%f2149, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p30, %f2148, %f2149;\n"
    "	sqrt.approx.f32 	%f2150, %f2148;\n"
    "	rcp.approx.f32 	%f2151, %f2150;\n"
    "	cvt.s64.s32 	%rd100, %r83;\n"
    "	mul.wide.s32 	%rd101, %r83, 24;\n"
    "	add.u64 	%rd102, %rd9, %rd101;\n"
    "	mul.f32 	%f2152, %f2151, %f2151;\n"
    "	ld.const.f32 	%f2153, [%rd102+12];\n"
    "	ld.const.f32 	%f2154, [%rd102+8];\n"
    "	ld.const.f32 	%f2155, [%rd102+4];\n"
    "	ld.const.f32 	%f2156, [%rd102+0];\n"
    "	ld.const.f32 	%f2157, [%rd102+16];\n"
    "	ld.const.f32 	%f2158, [%rd102+20];\n"
    "	mul.f32 	%f2159, %f2152, %f2152;\n"
    "	mul.f32 	%f2160, %f2151, %f2152;\n"
    "	mov.f32 	%f2161, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2162, %f2153, %f2161;\n"
    "	sub.f32 	%f2163, %f2155, %f2150;\n"
    "	mov.f32 	%f2164, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2165, %f2156, %f2164;\n"
    "	mov.f32 	%f2166, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2167, %f2157, %f2166;\n"
    "	mul.f32 	%f2168, %f2159, %f2159;\n"
    "	mul.f32 	%f2169, %f2154, %f2163;\n"
    "	mul.f32 	%f2170, %f2162, %f2168;\n"
    "	mul.f32 	%f2171, %f2167, %f2168;\n"
    "	mov.f32 	%f2172, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2173, %f2169, %f2172;\n"
    "	ex2.approx.f32 	%f2174, %f2173;\n"
    "	mul.f32 	%f2175, %f2165, %f2174;\n"
    "	mul.f32 	%f2176, %f2154, %f2175;\n"
    "	mul.f32 	%f2177, %f2151, %f2176;\n"
    "	sub.f32 	%f2178, %f2177, %f2170;\n"
    "	mul.f32 	%f2179, %f2152, %f2171;\n"
    "	sub.f32 	%f2180, %f2178, %f2179;\n"
    "	mad.f32 	%f2181, %f2158, %f2160, %f2180;\n"
    "	mov.f32 	%f2182, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2183, %f2182, %f2181, %p30;\n"
    "	mov.f32 	%f2184, %f2112;\n"
    "	mov.f32 	%f2185, %f2127;\n"
    "	mad.f32 	%f2186, %f2185, %f2183, %f2184;\n"
    "	mov.f32 	%f2187, %f2186;\n"
    "	mov.f32 	%f2188, %f2116;\n"
    "	mov.f32 	%f2189, %f2138;\n"
    "	mad.f32 	%f2190, %f2189, %f2183, %f2188;\n"
    "	mov.f32 	%f2191, %f2190;\n"
    "	mov.f32 	%f2192, %f2119;\n"
    "	mad.f32 	%f2193, %f2146, %f2183, %f2192;\n"
    "	mov.f32 	%f2194, %f2193;\n"
    "	ld.shared.s32 	%r84, [%rd14+476];\n"
    "	add.s32 	%r85, %r84, %r6;\n"
    "	ld.shared.f32 	%f2195, [%rd15+464];\n"
    "	sub.f32 	%f2196, %f19, %f2195;\n"
    "	mov.f32 	%f2197, %f2196;\n"
    "	mul.f32 	%f2198, %f14, %f2197;\n"
    "	cvt.rni.f32.f32 	%f2199, %f2198;\n"
    "	mul.f32 	%f2200, %f13, %f2199;\n"
    "	sub.f32 	%f2201, %f2196, %f2200;\n"
    "	mov.f32 	%f2202, %f2201;\n"
    "	mov.f32 	%f2203, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2204, %f2201, %f2201, %f2203;\n"
    "	ld.shared.f32 	%f2205, [%rd15+468];\n"
    "	sub.f32 	%f2206, %f18, %f2205;\n"
    "	mov.f32 	%f2207, %f2206;\n"
    "	mov.f32 	%f2208, %f2207;\n"
    "	mul.f32 	%f2209, %f14, %f2207;\n"
    "	cvt.rni.f32.f32 	%f2210, %f2209;\n"
    "	mul.f32 	%f2211, %f13, %f2210;\n"
    "	sub.f32 	%f2212, %f2206, %f2211;\n"
    "	mov.f32 	%f2213, %f2212;\n"
    "	mad.f32 	%f2214, %f2212, %f2212, %f2204;\n"
    "	ld.shared.f32 	%f2215, [%rd15+472];\n"
    "	sub.f32 	%f2216, %f11, %f2215;\n"
    "	mov.f32 	%f2217, %f2216;\n"
    "	mul.f32 	%f2218, %f2216, %f14;\n"
    "	cvt.rni.f32.f32 	%f2219, %f2218;\n"
    "	mul.f32 	%f2220, %f13, %f2219;\n"
    "	sub.f32 	%f2221, %f2216, %f2220;\n"
    "	mov.f32 	%f2222, %f2221;\n"
    "	mad.f32 	%f2223, %f2221, %f2221, %f2214;\n"
    "	mov.f32 	%f2224, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p31, %f2223, %f2224;\n"
    "	sqrt.approx.f32 	%f2225, %f2223;\n"
    "	rcp.approx.f32 	%f2226, %f2225;\n"
    "	cvt.s64.s32 	%rd103, %r85;\n"
    "	mul.wide.s32 	%rd104, %r85, 24;\n"
    "	add.u64 	%rd105, %rd9, %rd104;\n"
    "	mul.f32 	%f2227, %f2226, %f2226;\n"
    "	ld.const.f32 	%f2228, [%rd105+12];\n"
    "	ld.const.f32 	%f2229, [%rd105+8];\n"
    "	ld.const.f32 	%f2230, [%rd105+4];\n"
    "	ld.const.f32 	%f2231, [%rd105+0];\n"
    "	ld.const.f32 	%f2232, [%rd105+16];\n"
    "	ld.const.f32 	%f2233, [%rd105+20];\n"
    "	mul.f32 	%f2234, %f2227, %f2227;\n"
    "	mul.f32 	%f2235, %f2226, %f2227;\n"
    "	mov.f32 	%f2236, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2237, %f2228, %f2236;\n"
    "	sub.f32 	%f2238, %f2230, %f2225;\n"
    "	mov.f32 	%f2239, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2240, %f2231, %f2239;\n"
    "	mov.f32 	%f2241, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2242, %f2232, %f2241;\n"
    "	mul.f32 	%f2243, %f2234, %f2234;\n"
    "	mul.f32 	%f2244, %f2229, %f2238;\n"
    "	mul.f32 	%f2245, %f2237, %f2243;\n"
    "	mul.f32 	%f2246, %f2242, %f2243;\n"
    "	mov.f32 	%f2247, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2248, %f2244, %f2247;\n"
    "	ex2.approx.f32 	%f2249, %f2248;\n"
    "	mul.f32 	%f2250, %f2240, %f2249;\n"
    "	mul.f32 	%f2251, %f2229, %f2250;\n"
    "	mul.f32 	%f2252, %f2226, %f2251;\n"
    "	sub.f32 	%f2253, %f2252, %f2245;\n"
    "	mul.f32 	%f2254, %f2227, %f2246;\n"
    "	sub.f32 	%f2255, %f2253, %f2254;\n"
    "	mad.f32 	%f2256, %f2233, %f2235, %f2255;\n"
    "	mov.f32 	%f2257, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2258, %f2257, %f2256, %p31;\n"
    "	mov.f32 	%f2259, %f2187;\n"
    "	mov.f32 	%f2260, %f2202;\n"
    "	mad.f32 	%f2261, %f2260, %f2258, %f2259;\n"
    "	mov.f32 	%f2262, %f2261;\n"
    "	mov.f32 	%f2263, %f2191;\n"
    "	mov.f32 	%f2264, %f2213;\n"
    "	mad.f32 	%f2265, %f2264, %f2258, %f2263;\n"
    "	mov.f32 	%f2266, %f2265;\n"
    "	mov.f32 	%f2267, %f2194;\n"
    "	mad.f32 	%f2268, %f2221, %f2258, %f2267;\n"
    "	mov.f32 	%f2269, %f2268;\n"
    "	ld.shared.s32 	%r86, [%rd14+492];\n"
    "	add.s32 	%r87, %r86, %r6;\n"
    "	ld.shared.f32 	%f2270, [%rd15+480];\n"
    "	sub.f32 	%f2271, %f19, %f2270;\n"
    "	mov.f32 	%f2272, %f2271;\n"
    "	mul.f32 	%f2273, %f14, %f2272;\n"
    "	cvt.rni.f32.f32 	%f2274, %f2273;\n"
    "	mul.f32 	%f2275, %f13, %f2274;\n"
    "	sub.f32 	%f2276, %f2271, %f2275;\n"
    "	mov.f32 	%f2277, %f2276;\n"
    "	mov.f32 	%f2278, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2279, %f2276, %f2276, %f2278;\n"
    "	ld.shared.f32 	%f2280, [%rd15+484];\n"
    "	sub.f32 	%f2281, %f18, %f2280;\n"
    "	mov.f32 	%f2282, %f2281;\n"
    "	mov.f32 	%f2283, %f2282;\n"
    "	mul.f32 	%f2284, %f14, %f2282;\n"
    "	cvt.rni.f32.f32 	%f2285, %f2284;\n"
    "	mul.f32 	%f2286, %f13, %f2285;\n"
    "	sub.f32 	%f2287, %f2281, %f2286;\n"
    "	mov.f32 	%f2288, %f2287;\n"
    "	mad.f32 	%f2289, %f2287, %f2287, %f2279;\n"
    "	ld.shared.f32 	%f2290, [%rd15+488];\n"
    "	sub.f32 	%f2291, %f11, %f2290;\n"
    "	mov.f32 	%f2292, %f2291;\n"
    "	mul.f32 	%f2293, %f2291, %f14;\n"
    "	cvt.rni.f32.f32 	%f2294, %f2293;\n"
    "	mul.f32 	%f2295, %f13, %f2294;\n"
    "	sub.f32 	%f2296, %f2291, %f2295;\n"
    "	mov.f32 	%f2297, %f2296;\n"
    "	mad.f32 	%f2298, %f2296, %f2296, %f2289;\n"
    "	mov.f32 	%f2299, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p32, %f2298, %f2299;\n"
    "	sqrt.approx.f32 	%f2300, %f2298;\n"
    "	rcp.approx.f32 	%f2301, %f2300;\n"
    "	cvt.s64.s32 	%rd106, %r87;\n"
    "	mul.wide.s32 	%rd107, %r87, 24;\n"
    "	add.u64 	%rd108, %rd9, %rd107;\n"
    "	mul.f32 	%f2302, %f2301, %f2301;\n"
    "	ld.const.f32 	%f2303, [%rd108+12];\n"
    "	ld.const.f32 	%f2304, [%rd108+8];\n"
    "	ld.const.f32 	%f2305, [%rd108+4];\n"
    "	ld.const.f32 	%f2306, [%rd108+0];\n"
    "	ld.const.f32 	%f2307, [%rd108+16];\n"
    "	ld.const.f32 	%f2308, [%rd108+20];\n"
    "	mul.f32 	%f2309, %f2302, %f2302;\n"
    "	mul.f32 	%f2310, %f2301, %f2302;\n"
    "	mov.f32 	%f2311, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2312, %f2303, %f2311;\n"
    "	sub.f32 	%f2313, %f2305, %f2300;\n"
    "	mov.f32 	%f2314, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2315, %f2306, %f2314;\n"
    "	mov.f32 	%f2316, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2317, %f2307, %f2316;\n"
    "	mul.f32 	%f2318, %f2309, %f2309;\n"
    "	mul.f32 	%f2319, %f2304, %f2313;\n"
    "	mul.f32 	%f2320, %f2312, %f2318;\n"
    "	mul.f32 	%f2321, %f2317, %f2318;\n"
    "	mov.f32 	%f2322, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2323, %f2319, %f2322;\n"
    "	ex2.approx.f32 	%f2324, %f2323;\n"
    "	mul.f32 	%f2325, %f2315, %f2324;\n"
    "	mul.f32 	%f2326, %f2304, %f2325;\n"
    "	mul.f32 	%f2327, %f2301, %f2326;\n"
    "	sub.f32 	%f2328, %f2327, %f2320;\n"
    "	mul.f32 	%f2329, %f2302, %f2321;\n"
    "	sub.f32 	%f2330, %f2328, %f2329;\n"
    "	mad.f32 	%f2331, %f2308, %f2310, %f2330;\n"
    "	mov.f32 	%f2332, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2333, %f2332, %f2331, %p32;\n"
    "	mov.f32 	%f2334, %f2262;\n"
    "	mov.f32 	%f2335, %f2277;\n"
    "	mad.f32 	%f2336, %f2335, %f2333, %f2334;\n"
    "	mov.f32 	%f2337, %f2336;\n"
    "	mov.f32 	%f2338, %f2266;\n"
    "	mov.f32 	%f2339, %f2288;\n"
    "	mad.f32 	%f2340, %f2339, %f2333, %f2338;\n"
    "	mov.f32 	%f2341, %f2340;\n"
    "	mov.f32 	%f2342, %f2269;\n"
    "	mad.f32 	%f2343, %f2296, %f2333, %f2342;\n"
    "	mov.f32 	%f2344, %f2343;\n"
    "	ld.shared.s32 	%r88, [%rd14+508];\n"
    "	add.s32 	%r89, %r88, %r6;\n"
    "	ld.shared.f32 	%f2345, [%rd15+496];\n"
    "	sub.f32 	%f2346, %f19, %f2345;\n"
    "	mov.f32 	%f2347, %f2346;\n"
    "	mul.f32 	%f2348, %f14, %f2347;\n"
    "	cvt.rni.f32.f32 	%f2349, %f2348;\n"
    "	mul.f32 	%f2350, %f13, %f2349;\n"
    "	sub.f32 	%f2351, %f2346, %f2350;\n"
    "	mov.f32 	%f2352, %f2351;\n"
    "	mov.f32 	%f2353, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2354, %f2351, %f2351, %f2353;\n"
    "	ld.shared.f32 	%f2355, [%rd15+500];\n"
    "	sub.f32 	%f2356, %f18, %f2355;\n"
    "	mov.f32 	%f2357, %f2356;\n"
    "	mov.f32 	%f2358, %f2357;\n"
    "	mul.f32 	%f2359, %f14, %f2357;\n"
    "	cvt.rni.f32.f32 	%f2360, %f2359;\n"
    "	mul.f32 	%f2361, %f13, %f2360;\n"
    "	sub.f32 	%f2362, %f2356, %f2361;\n"
    "	mov.f32 	%f2363, %f2362;\n"
    "	mad.f32 	%f2364, %f2362, %f2362, %f2354;\n"
    "	ld.shared.f32 	%f2365, [%rd15+504];\n"
    "	sub.f32 	%f2366, %f11, %f2365;\n"
    "	mov.f32 	%f2367, %f2366;\n"
    "	mul.f32 	%f2368, %f2366, %f14;\n"
    "	cvt.rni.f32.f32 	%f2369, %f2368;\n"
    "	mul.f32 	%f2370, %f13, %f2369;\n"
    "	sub.f32 	%f2371, %f2366, %f2370;\n"
    "	mov.f32 	%f2372, %f2371;\n"
    "	mad.f32 	%f2373, %f2371, %f2371, %f2364;\n"
    "	mov.f32 	%f2374, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p33, %f2373, %f2374;\n"
    "	sqrt.approx.f32 	%f2375, %f2373;\n"
    "	rcp.approx.f32 	%f2376, %f2375;\n"
    "	cvt.s64.s32 	%rd109, %r89;\n"
    "	mul.wide.s32 	%rd110, %r89, 24;\n"
    "	add.u64 	%rd111, %rd9, %rd110;\n"
    "	mul.f32 	%f2377, %f2376, %f2376;\n"
    "	ld.const.f32 	%f2378, [%rd111+12];\n"
    "	ld.const.f32 	%f2379, [%rd111+8];\n"
    "	ld.const.f32 	%f2380, [%rd111+4];\n"
    "	ld.const.f32 	%f2381, [%rd111+0];\n"
    "	ld.const.f32 	%f2382, [%rd111+16];\n"
    "	ld.const.f32 	%f2383, [%rd111+20];\n"
    "	mul.f32 	%f2384, %f2377, %f2377;\n"
    "	mul.f32 	%f2385, %f2376, %f2377;\n"
    "	mov.f32 	%f2386, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2387, %f2378, %f2386;\n"
    "	sub.f32 	%f2388, %f2380, %f2375;\n"
    "	mov.f32 	%f2389, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2390, %f2381, %f2389;\n"
    "	mov.f32 	%f2391, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2392, %f2382, %f2391;\n"
    "	mul.f32 	%f2393, %f2384, %f2384;\n"
    "	mul.f32 	%f2394, %f2379, %f2388;\n"
    "	mul.f32 	%f2395, %f2387, %f2393;\n"
    "	mul.f32 	%f2396, %f2392, %f2393;\n"
    "	mov.f32 	%f2397, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2398, %f2394, %f2397;\n"
    "	ex2.approx.f32 	%f2399, %f2398;\n"
    "	mul.f32 	%f2400, %f2390, %f2399;\n"
    "	mul.f32 	%f2401, %f2379, %f2400;\n"
    "	mul.f32 	%f2402, %f2376, %f2401;\n"
    "	sub.f32 	%f2403, %f2402, %f2395;\n"
    "	mul.f32 	%f2404, %f2377, %f2396;\n"
    "	sub.f32 	%f2405, %f2403, %f2404;\n"
    "	mad.f32 	%f2406, %f2383, %f2385, %f2405;\n"
    "	mov.f32 	%f2407, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2408, %f2407, %f2406, %p33;\n"
    "	mov.f32 	%f2409, %f2337;\n"
    "	mov.f32 	%f2410, %f2352;\n"
    "	mad.f32 	%f2411, %f2410, %f2408, %f2409;\n"
    "	mov.f32 	%f2412, %f2411;\n"
    "	mov.f32 	%f2413, %f2341;\n"
    "	mov.f32 	%f2414, %f2363;\n"
    "	mad.f32 	%f2415, %f2414, %f2408, %f2413;\n"
    "	mov.f32 	%f2416, %f2415;\n"
    "	mov.f32 	%f2417, %f2344;\n"
    "	mad.f32 	%f2418, %f2371, %f2408, %f2417;\n"
    "	mov.f32 	%f2419, %f2418;\n"
    "	ld.shared.s32 	%r90, [%rd14+524];\n"
    "	add.s32 	%r91, %r90, %r6;\n"
    "	ld.shared.f32 	%f2420, [%rd15+512];\n"
    "	sub.f32 	%f2421, %f19, %f2420;\n"
    "	mov.f32 	%f2422, %f2421;\n"
    "	mul.f32 	%f2423, %f14, %f2422;\n"
    "	cvt.rni.f32.f32 	%f2424, %f2423;\n"
    "	mul.f32 	%f2425, %f13, %f2424;\n"
    "	sub.f32 	%f2426, %f2421, %f2425;\n"
    "	mov.f32 	%f2427, %f2426;\n"
    "	mov.f32 	%f2428, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2429, %f2426, %f2426, %f2428;\n"
    "	ld.shared.f32 	%f2430, [%rd15+516];\n"
    "	sub.f32 	%f2431, %f18, %f2430;\n"
    "	mov.f32 	%f2432, %f2431;\n"
    "	mov.f32 	%f2433, %f2432;\n"
    "	mul.f32 	%f2434, %f14, %f2432;\n"
    "	cvt.rni.f32.f32 	%f2435, %f2434;\n"
    "	mul.f32 	%f2436, %f13, %f2435;\n"
    "	sub.f32 	%f2437, %f2431, %f2436;\n"
    "	mov.f32 	%f2438, %f2437;\n"
    "	mad.f32 	%f2439, %f2437, %f2437, %f2429;\n"
    "	ld.shared.f32 	%f2440, [%rd15+520];\n"
    "	sub.f32 	%f2441, %f11, %f2440;\n"
    "	mov.f32 	%f2442, %f2441;\n"
    "	mul.f32 	%f2443, %f2441, %f14;\n"
    "	cvt.rni.f32.f32 	%f2444, %f2443;\n"
    "	mul.f32 	%f2445, %f13, %f2444;\n"
    "	sub.f32 	%f2446, %f2441, %f2445;\n"
    "	mov.f32 	%f2447, %f2446;\n"
    "	mad.f32 	%f2448, %f2446, %f2446, %f2439;\n"
    "	mov.f32 	%f2449, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p34, %f2448, %f2449;\n"
    "	sqrt.approx.f32 	%f2450, %f2448;\n"
    "	rcp.approx.f32 	%f2451, %f2450;\n"
    "	cvt.s64.s32 	%rd112, %r91;\n"
    "	mul.wide.s32 	%rd113, %r91, 24;\n"
    "	add.u64 	%rd114, %rd9, %rd113;\n"
    "	mul.f32 	%f2452, %f2451, %f2451;\n"
    "	ld.const.f32 	%f2453, [%rd114+12];\n"
    "	ld.const.f32 	%f2454, [%rd114+8];\n"
    "	ld.const.f32 	%f2455, [%rd114+4];\n"
    "	ld.const.f32 	%f2456, [%rd114+0];\n"
    "	ld.const.f32 	%f2457, [%rd114+16];\n"
    "	ld.const.f32 	%f2458, [%rd114+20];\n"
    "	mul.f32 	%f2459, %f2452, %f2452;\n"
    "	mul.f32 	%f2460, %f2451, %f2452;\n"
    "	mov.f32 	%f2461, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2462, %f2453, %f2461;\n"
    "	sub.f32 	%f2463, %f2455, %f2450;\n"
    "	mov.f32 	%f2464, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2465, %f2456, %f2464;\n"
    "	mov.f32 	%f2466, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2467, %f2457, %f2466;\n"
    "	mul.f32 	%f2468, %f2459, %f2459;\n"
    "	mul.f32 	%f2469, %f2454, %f2463;\n"
    "	mul.f32 	%f2470, %f2462, %f2468;\n"
    "	mul.f32 	%f2471, %f2467, %f2468;\n"
    "	mov.f32 	%f2472, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2473, %f2469, %f2472;\n"
    "	ex2.approx.f32 	%f2474, %f2473;\n"
    "	mul.f32 	%f2475, %f2465, %f2474;\n"
    "	mul.f32 	%f2476, %f2454, %f2475;\n"
    "	mul.f32 	%f2477, %f2451, %f2476;\n"
    "	sub.f32 	%f2478, %f2477, %f2470;\n"
    "	mul.f32 	%f2479, %f2452, %f2471;\n"
    "	sub.f32 	%f2480, %f2478, %f2479;\n"
    "	mad.f32 	%f2481, %f2458, %f2460, %f2480;\n"
    "	mov.f32 	%f2482, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2483, %f2482, %f2481, %p34;\n"
    "	mov.f32 	%f2484, %f2412;\n"
    "	mov.f32 	%f2485, %f2427;\n"
    "	mad.f32 	%f2486, %f2485, %f2483, %f2484;\n"
    "	mov.f32 	%f2487, %f2486;\n"
    "	mov.f32 	%f2488, %f2416;\n"
    "	mov.f32 	%f2489, %f2438;\n"
    "	mad.f32 	%f2490, %f2489, %f2483, %f2488;\n"
    "	mov.f32 	%f2491, %f2490;\n"
    "	mov.f32 	%f2492, %f2419;\n"
    "	mad.f32 	%f2493, %f2446, %f2483, %f2492;\n"
    "	mov.f32 	%f2494, %f2493;\n"
    "	ld.shared.s32 	%r92, [%rd14+540];\n"
    "	add.s32 	%r93, %r92, %r6;\n"
    "	ld.shared.f32 	%f2495, [%rd15+528];\n"
    "	sub.f32 	%f2496, %f19, %f2495;\n"
    "	mov.f32 	%f2497, %f2496;\n"
    "	mul.f32 	%f2498, %f14, %f2497;\n"
    "	cvt.rni.f32.f32 	%f2499, %f2498;\n"
    "	mul.f32 	%f2500, %f13, %f2499;\n"
    "	sub.f32 	%f2501, %f2496, %f2500;\n"
    "	mov.f32 	%f2502, %f2501;\n"
    "	mov.f32 	%f2503, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2504, %f2501, %f2501, %f2503;\n"
    "	ld.shared.f32 	%f2505, [%rd15+532];\n"
    "	sub.f32 	%f2506, %f18, %f2505;\n"
    "	mov.f32 	%f2507, %f2506;\n"
    "	mov.f32 	%f2508, %f2507;\n"
    "	mul.f32 	%f2509, %f14, %f2507;\n"
    "	cvt.rni.f32.f32 	%f2510, %f2509;\n"
    "	mul.f32 	%f2511, %f13, %f2510;\n"
    "	sub.f32 	%f2512, %f2506, %f2511;\n"
    "	mov.f32 	%f2513, %f2512;\n"
    "	mad.f32 	%f2514, %f2512, %f2512, %f2504;\n"
    "	ld.shared.f32 	%f2515, [%rd15+536];\n"
    "	sub.f32 	%f2516, %f11, %f2515;\n"
    "	mov.f32 	%f2517, %f2516;\n"
    "	mul.f32 	%f2518, %f2516, %f14;\n"
    "	cvt.rni.f32.f32 	%f2519, %f2518;\n"
    "	mul.f32 	%f2520, %f13, %f2519;\n"
    "	sub.f32 	%f2521, %f2516, %f2520;\n"
    "	mov.f32 	%f2522, %f2521;\n"
    "	mad.f32 	%f2523, %f2521, %f2521, %f2514;\n"
    "	mov.f32 	%f2524, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p35, %f2523, %f2524;\n"
    "	sqrt.approx.f32 	%f2525, %f2523;\n"
    "	rcp.approx.f32 	%f2526, %f2525;\n"
    "	cvt.s64.s32 	%rd115, %r93;\n"
    "	mul.wide.s32 	%rd116, %r93, 24;\n"
    "	add.u64 	%rd117, %rd9, %rd116;\n"
    "	mul.f32 	%f2527, %f2526, %f2526;\n"
    "	ld.const.f32 	%f2528, [%rd117+12];\n"
    "	ld.const.f32 	%f2529, [%rd117+8];\n"
    "	ld.const.f32 	%f2530, [%rd117+4];\n"
    "	ld.const.f32 	%f2531, [%rd117+0];\n"
    "	ld.const.f32 	%f2532, [%rd117+16];\n"
    "	ld.const.f32 	%f2533, [%rd117+20];\n"
    "	mul.f32 	%f2534, %f2527, %f2527;\n"
    "	mul.f32 	%f2535, %f2526, %f2527;\n"
    "	mov.f32 	%f2536, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2537, %f2528, %f2536;\n"
    "	sub.f32 	%f2538, %f2530, %f2525;\n"
    "	mov.f32 	%f2539, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2540, %f2531, %f2539;\n"
    "	mov.f32 	%f2541, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2542, %f2532, %f2541;\n"
    "	mul.f32 	%f2543, %f2534, %f2534;\n"
    "	mul.f32 	%f2544, %f2529, %f2538;\n"
    "	mul.f32 	%f2545, %f2537, %f2543;\n"
    "	mul.f32 	%f2546, %f2542, %f2543;\n"
    "	mov.f32 	%f2547, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2548, %f2544, %f2547;\n"
    "	ex2.approx.f32 	%f2549, %f2548;\n"
    "	mul.f32 	%f2550, %f2540, %f2549;\n"
    "	mul.f32 	%f2551, %f2529, %f2550;\n"
    "	mul.f32 	%f2552, %f2526, %f2551;\n"
    "	sub.f32 	%f2553, %f2552, %f2545;\n"
    "	mul.f32 	%f2554, %f2527, %f2546;\n"
    "	sub.f32 	%f2555, %f2553, %f2554;\n"
    "	mad.f32 	%f2556, %f2533, %f2535, %f2555;\n"
    "	mov.f32 	%f2557, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2558, %f2557, %f2556, %p35;\n"
    "	mov.f32 	%f2559, %f2487;\n"
    "	mov.f32 	%f2560, %f2502;\n"
    "	mad.f32 	%f2561, %f2560, %f2558, %f2559;\n"
    "	mov.f32 	%f2562, %f2561;\n"
    "	mov.f32 	%f2563, %f2491;\n"
    "	mov.f32 	%f2564, %f2513;\n"
    "	mad.f32 	%f2565, %f2564, %f2558, %f2563;\n"
    "	mov.f32 	%f2566, %f2565;\n"
    "	mov.f32 	%f2567, %f2494;\n"
    "	mad.f32 	%f2568, %f2521, %f2558, %f2567;\n"
    "	mov.f32 	%f2569, %f2568;\n"
    "	ld.shared.s32 	%r94, [%rd14+556];\n"
    "	add.s32 	%r95, %r94, %r6;\n"
    "	ld.shared.f32 	%f2570, [%rd15+544];\n"
    "	sub.f32 	%f2571, %f19, %f2570;\n"
    "	mov.f32 	%f2572, %f2571;\n"
    "	mul.f32 	%f2573, %f14, %f2572;\n"
    "	cvt.rni.f32.f32 	%f2574, %f2573;\n"
    "	mul.f32 	%f2575, %f13, %f2574;\n"
    "	sub.f32 	%f2576, %f2571, %f2575;\n"
    "	mov.f32 	%f2577, %f2576;\n"
    "	mov.f32 	%f2578, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2579, %f2576, %f2576, %f2578;\n"
    "	ld.shared.f32 	%f2580, [%rd15+548];\n"
    "	sub.f32 	%f2581, %f18, %f2580;\n"
    "	mov.f32 	%f2582, %f2581;\n"
    "	mov.f32 	%f2583, %f2582;\n"
    "	mul.f32 	%f2584, %f14, %f2582;\n"
    "	cvt.rni.f32.f32 	%f2585, %f2584;\n"
    "	mul.f32 	%f2586, %f13, %f2585;\n"
    "	sub.f32 	%f2587, %f2581, %f2586;\n"
    "	mov.f32 	%f2588, %f2587;\n"
    "	mad.f32 	%f2589, %f2587, %f2587, %f2579;\n"
    "	ld.shared.f32 	%f2590, [%rd15+552];\n"
    "	sub.f32 	%f2591, %f11, %f2590;\n"
    "	mov.f32 	%f2592, %f2591;\n"
    "	mul.f32 	%f2593, %f2591, %f14;\n"
    "	cvt.rni.f32.f32 	%f2594, %f2593;\n"
    "	mul.f32 	%f2595, %f13, %f2594;\n"
    "	sub.f32 	%f2596, %f2591, %f2595;\n"
    "	mov.f32 	%f2597, %f2596;\n"
    "	mad.f32 	%f2598, %f2596, %f2596, %f2589;\n"
    "	mov.f32 	%f2599, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p36, %f2598, %f2599;\n"
    "	sqrt.approx.f32 	%f2600, %f2598;\n"
    "	rcp.approx.f32 	%f2601, %f2600;\n"
    "	cvt.s64.s32 	%rd118, %r95;\n"
    "	mul.wide.s32 	%rd119, %r95, 24;\n"
    "	add.u64 	%rd120, %rd9, %rd119;\n"
    "	mul.f32 	%f2602, %f2601, %f2601;\n"
    "	ld.const.f32 	%f2603, [%rd120+12];\n"
    "	ld.const.f32 	%f2604, [%rd120+8];\n"
    "	ld.const.f32 	%f2605, [%rd120+4];\n"
    "	ld.const.f32 	%f2606, [%rd120+0];\n"
    "	ld.const.f32 	%f2607, [%rd120+16];\n"
    "	ld.const.f32 	%f2608, [%rd120+20];\n"
    "	mul.f32 	%f2609, %f2602, %f2602;\n"
    "	mul.f32 	%f2610, %f2601, %f2602;\n"
    "	mov.f32 	%f2611, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2612, %f2603, %f2611;\n"
    "	sub.f32 	%f2613, %f2605, %f2600;\n"
    "	mov.f32 	%f2614, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2615, %f2606, %f2614;\n"
    "	mov.f32 	%f2616, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2617, %f2607, %f2616;\n"
    "	mul.f32 	%f2618, %f2609, %f2609;\n"
    "	mul.f32 	%f2619, %f2604, %f2613;\n"
    "	mul.f32 	%f2620, %f2612, %f2618;\n"
    "	mul.f32 	%f2621, %f2617, %f2618;\n"
    "	mov.f32 	%f2622, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2623, %f2619, %f2622;\n"
    "	ex2.approx.f32 	%f2624, %f2623;\n"
    "	mul.f32 	%f2625, %f2615, %f2624;\n"
    "	mul.f32 	%f2626, %f2604, %f2625;\n"
    "	mul.f32 	%f2627, %f2601, %f2626;\n"
    "	sub.f32 	%f2628, %f2627, %f2620;\n"
    "	mul.f32 	%f2629, %f2602, %f2621;\n"
    "	sub.f32 	%f2630, %f2628, %f2629;\n"
    "	mad.f32 	%f2631, %f2608, %f2610, %f2630;\n"
    "	mov.f32 	%f2632, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2633, %f2632, %f2631, %p36;\n"
    "	mov.f32 	%f2634, %f2562;\n"
    "	mov.f32 	%f2635, %f2577;\n"
    "	mad.f32 	%f2636, %f2635, %f2633, %f2634;\n"
    "	mov.f32 	%f2637, %f2636;\n"
    "	mov.f32 	%f2638, %f2566;\n"
    "	mov.f32 	%f2639, %f2588;\n"
    "	mad.f32 	%f2640, %f2639, %f2633, %f2638;\n"
    "	mov.f32 	%f2641, %f2640;\n"
    "	mov.f32 	%f2642, %f2569;\n"
    "	mad.f32 	%f2643, %f2596, %f2633, %f2642;\n"
    "	mov.f32 	%f2644, %f2643;\n"
    "	ld.shared.s32 	%r96, [%rd14+572];\n"
    "	add.s32 	%r97, %r96, %r6;\n"
    "	ld.shared.f32 	%f2645, [%rd15+560];\n"
    "	sub.f32 	%f2646, %f19, %f2645;\n"
    "	mov.f32 	%f2647, %f2646;\n"
    "	mul.f32 	%f2648, %f14, %f2647;\n"
    "	cvt.rni.f32.f32 	%f2649, %f2648;\n"
    "	mul.f32 	%f2650, %f13, %f2649;\n"
    "	sub.f32 	%f2651, %f2646, %f2650;\n"
    "	mov.f32 	%f2652, %f2651;\n"
    "	mov.f32 	%f2653, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2654, %f2651, %f2651, %f2653;\n"
    "	ld.shared.f32 	%f2655, [%rd15+564];\n"
    "	sub.f32 	%f2656, %f18, %f2655;\n"
    "	mov.f32 	%f2657, %f2656;\n"
    "	mov.f32 	%f2658, %f2657;\n"
    "	mul.f32 	%f2659, %f14, %f2657;\n"
    "	cvt.rni.f32.f32 	%f2660, %f2659;\n"
    "	mul.f32 	%f2661, %f13, %f2660;\n"
    "	sub.f32 	%f2662, %f2656, %f2661;\n"
    "	mov.f32 	%f2663, %f2662;\n"
    "	mad.f32 	%f2664, %f2662, %f2662, %f2654;\n"
    "	ld.shared.f32 	%f2665, [%rd15+568];\n"
    "	sub.f32 	%f2666, %f11, %f2665;\n"
    "	mov.f32 	%f2667, %f2666;\n"
    "	mul.f32 	%f2668, %f2666, %f14;\n"
    "	cvt.rni.f32.f32 	%f2669, %f2668;\n"
    "	mul.f32 	%f2670, %f13, %f2669;\n"
    "	sub.f32 	%f2671, %f2666, %f2670;\n"
    "	mov.f32 	%f2672, %f2671;\n"
    "	mad.f32 	%f2673, %f2671, %f2671, %f2664;\n"
    "	mov.f32 	%f2674, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p37, %f2673, %f2674;\n"
    "	sqrt.approx.f32 	%f2675, %f2673;\n"
    "	rcp.approx.f32 	%f2676, %f2675;\n"
    "	cvt.s64.s32 	%rd121, %r97;\n"
    "	mul.wide.s32 	%rd122, %r97, 24;\n"
    "	add.u64 	%rd123, %rd9, %rd122;\n"
    "	mul.f32 	%f2677, %f2676, %f2676;\n"
    "	ld.const.f32 	%f2678, [%rd123+12];\n"
    "	ld.const.f32 	%f2679, [%rd123+8];\n"
    "	ld.const.f32 	%f2680, [%rd123+4];\n"
    "	ld.const.f32 	%f2681, [%rd123+0];\n"
    "	ld.const.f32 	%f2682, [%rd123+16];\n"
    "	ld.const.f32 	%f2683, [%rd123+20];\n"
    "	mul.f32 	%f2684, %f2677, %f2677;\n"
    "	mul.f32 	%f2685, %f2676, %f2677;\n"
    "	mov.f32 	%f2686, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2687, %f2678, %f2686;\n"
    "	sub.f32 	%f2688, %f2680, %f2675;\n"
    "	mov.f32 	%f2689, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2690, %f2681, %f2689;\n"
    "	mov.f32 	%f2691, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2692, %f2682, %f2691;\n"
    "	mul.f32 	%f2693, %f2684, %f2684;\n"
    "	mul.f32 	%f2694, %f2679, %f2688;\n"
    "	mul.f32 	%f2695, %f2687, %f2693;\n"
    "	mul.f32 	%f2696, %f2692, %f2693;\n"
    "	mov.f32 	%f2697, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2698, %f2694, %f2697;\n"
    "	ex2.approx.f32 	%f2699, %f2698;\n"
    "	mul.f32 	%f2700, %f2690, %f2699;\n"
    "	mul.f32 	%f2701, %f2679, %f2700;\n"
    "	mul.f32 	%f2702, %f2676, %f2701;\n"
    "	sub.f32 	%f2703, %f2702, %f2695;\n"
    "	mul.f32 	%f2704, %f2677, %f2696;\n"
    "	sub.f32 	%f2705, %f2703, %f2704;\n"
    "	mad.f32 	%f2706, %f2683, %f2685, %f2705;\n"
    "	mov.f32 	%f2707, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2708, %f2707, %f2706, %p37;\n"
    "	mov.f32 	%f2709, %f2637;\n"
    "	mov.f32 	%f2710, %f2652;\n"
    "	mad.f32 	%f2711, %f2710, %f2708, %f2709;\n"
    "	mov.f32 	%f2712, %f2711;\n"
    "	mov.f32 	%f2713, %f2641;\n"
    "	mov.f32 	%f2714, %f2663;\n"
    "	mad.f32 	%f2715, %f2714, %f2708, %f2713;\n"
    "	mov.f32 	%f2716, %f2715;\n"
    "	mov.f32 	%f2717, %f2644;\n"
    "	mad.f32 	%f2718, %f2671, %f2708, %f2717;\n"
    "	mov.f32 	%f2719, %f2718;\n"
    "	ld.shared.s32 	%r98, [%rd14+588];\n"
    "	add.s32 	%r99, %r98, %r6;\n"
    "	ld.shared.f32 	%f2720, [%rd15+576];\n"
    "	sub.f32 	%f2721, %f19, %f2720;\n"
    "	mov.f32 	%f2722, %f2721;\n"
    "	mul.f32 	%f2723, %f14, %f2722;\n"
    "	cvt.rni.f32.f32 	%f2724, %f2723;\n"
    "	mul.f32 	%f2725, %f13, %f2724;\n"
    "	sub.f32 	%f2726, %f2721, %f2725;\n"
    "	mov.f32 	%f2727, %f2726;\n"
    "	mov.f32 	%f2728, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2729, %f2726, %f2726, %f2728;\n"
    "	ld.shared.f32 	%f2730, [%rd15+580];\n"
    "	sub.f32 	%f2731, %f18, %f2730;\n"
    "	mov.f32 	%f2732, %f2731;\n"
    "	mov.f32 	%f2733, %f2732;\n"
    "	mul.f32 	%f2734, %f14, %f2732;\n"
    "	cvt.rni.f32.f32 	%f2735, %f2734;\n"
    "	mul.f32 	%f2736, %f13, %f2735;\n"
    "	sub.f32 	%f2737, %f2731, %f2736;\n"
    "	mov.f32 	%f2738, %f2737;\n"
    "	mad.f32 	%f2739, %f2737, %f2737, %f2729;\n"
    "	ld.shared.f32 	%f2740, [%rd15+584];\n"
    "	sub.f32 	%f2741, %f11, %f2740;\n"
    "	mov.f32 	%f2742, %f2741;\n"
    "	mul.f32 	%f2743, %f2741, %f14;\n"
    "	cvt.rni.f32.f32 	%f2744, %f2743;\n"
    "	mul.f32 	%f2745, %f13, %f2744;\n"
    "	sub.f32 	%f2746, %f2741, %f2745;\n"
    "	mov.f32 	%f2747, %f2746;\n"
    "	mad.f32 	%f2748, %f2746, %f2746, %f2739;\n"
    "	mov.f32 	%f2749, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p38, %f2748, %f2749;\n"
    "	sqrt.approx.f32 	%f2750, %f2748;\n"
    "	rcp.approx.f32 	%f2751, %f2750;\n"
    "	cvt.s64.s32 	%rd124, %r99;\n"
    "	mul.wide.s32 	%rd125, %r99, 24;\n"
    "	add.u64 	%rd126, %rd9, %rd125;\n"
    "	mul.f32 	%f2752, %f2751, %f2751;\n"
    "	ld.const.f32 	%f2753, [%rd126+12];\n"
    "	ld.const.f32 	%f2754, [%rd126+8];\n"
    "	ld.const.f32 	%f2755, [%rd126+4];\n"
    "	ld.const.f32 	%f2756, [%rd126+0];\n"
    "	ld.const.f32 	%f2757, [%rd126+16];\n"
    "	ld.const.f32 	%f2758, [%rd126+20];\n"
    "	mul.f32 	%f2759, %f2752, %f2752;\n"
    "	mul.f32 	%f2760, %f2751, %f2752;\n"
    "	mov.f32 	%f2761, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2762, %f2753, %f2761;\n"
    "	sub.f32 	%f2763, %f2755, %f2750;\n"
    "	mov.f32 	%f2764, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2765, %f2756, %f2764;\n"
    "	mov.f32 	%f2766, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2767, %f2757, %f2766;\n"
    "	mul.f32 	%f2768, %f2759, %f2759;\n"
    "	mul.f32 	%f2769, %f2754, %f2763;\n"
    "	mul.f32 	%f2770, %f2762, %f2768;\n"
    "	mul.f32 	%f2771, %f2767, %f2768;\n"
    "	mov.f32 	%f2772, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2773, %f2769, %f2772;\n"
    "	ex2.approx.f32 	%f2774, %f2773;\n"
    "	mul.f32 	%f2775, %f2765, %f2774;\n"
    "	mul.f32 	%f2776, %f2754, %f2775;\n"
    "	mul.f32 	%f2777, %f2751, %f2776;\n"
    "	sub.f32 	%f2778, %f2777, %f2770;\n"
    "	mul.f32 	%f2779, %f2752, %f2771;\n"
    "	sub.f32 	%f2780, %f2778, %f2779;\n"
    "	mad.f32 	%f2781, %f2758, %f2760, %f2780;\n"
    "	mov.f32 	%f2782, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2783, %f2782, %f2781, %p38;\n"
    "	mov.f32 	%f2784, %f2712;\n"
    "	mov.f32 	%f2785, %f2727;\n"
    "	mad.f32 	%f2786, %f2785, %f2783, %f2784;\n"
    "	mov.f32 	%f2787, %f2786;\n"
    "	mov.f32 	%f2788, %f2716;\n"
    "	mov.f32 	%f2789, %f2738;\n"
    "	mad.f32 	%f2790, %f2789, %f2783, %f2788;\n"
    "	mov.f32 	%f2791, %f2790;\n"
    "	mov.f32 	%f2792, %f2719;\n"
    "	mad.f32 	%f2793, %f2746, %f2783, %f2792;\n"
    "	mov.f32 	%f2794, %f2793;\n"
    "	ld.shared.s32 	%r100, [%rd14+604];\n"
    "	add.s32 	%r101, %r100, %r6;\n"
    "	ld.shared.f32 	%f2795, [%rd15+592];\n"
    "	sub.f32 	%f2796, %f19, %f2795;\n"
    "	mov.f32 	%f2797, %f2796;\n"
    "	mul.f32 	%f2798, %f14, %f2797;\n"
    "	cvt.rni.f32.f32 	%f2799, %f2798;\n"
    "	mul.f32 	%f2800, %f13, %f2799;\n"
    "	sub.f32 	%f2801, %f2796, %f2800;\n"
    "	mov.f32 	%f2802, %f2801;\n"
    "	mov.f32 	%f2803, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2804, %f2801, %f2801, %f2803;\n"
    "	ld.shared.f32 	%f2805, [%rd15+596];\n"
    "	sub.f32 	%f2806, %f18, %f2805;\n"
    "	mov.f32 	%f2807, %f2806;\n"
    "	mov.f32 	%f2808, %f2807;\n"
    "	mul.f32 	%f2809, %f14, %f2807;\n"
    "	cvt.rni.f32.f32 	%f2810, %f2809;\n"
    "	mul.f32 	%f2811, %f13, %f2810;\n"
    "	sub.f32 	%f2812, %f2806, %f2811;\n"
    "	mov.f32 	%f2813, %f2812;\n"
    "	mad.f32 	%f2814, %f2812, %f2812, %f2804;\n"
    "	ld.shared.f32 	%f2815, [%rd15+600];\n"
    "	sub.f32 	%f2816, %f11, %f2815;\n"
    "	mov.f32 	%f2817, %f2816;\n"
    "	mul.f32 	%f2818, %f2816, %f14;\n"
    "	cvt.rni.f32.f32 	%f2819, %f2818;\n"
    "	mul.f32 	%f2820, %f13, %f2819;\n"
    "	sub.f32 	%f2821, %f2816, %f2820;\n"
    "	mov.f32 	%f2822, %f2821;\n"
    "	mad.f32 	%f2823, %f2821, %f2821, %f2814;\n"
    "	mov.f32 	%f2824, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p39, %f2823, %f2824;\n"
    "	sqrt.approx.f32 	%f2825, %f2823;\n"
    "	rcp.approx.f32 	%f2826, %f2825;\n"
    "	cvt.s64.s32 	%rd127, %r101;\n"
    "	mul.wide.s32 	%rd128, %r101, 24;\n"
    "	add.u64 	%rd129, %rd9, %rd128;\n"
    "	mul.f32 	%f2827, %f2826, %f2826;\n"
    "	ld.const.f32 	%f2828, [%rd129+12];\n"
    "	ld.const.f32 	%f2829, [%rd129+8];\n"
    "	ld.const.f32 	%f2830, [%rd129+4];\n"
    "	ld.const.f32 	%f2831, [%rd129+0];\n"
    "	ld.const.f32 	%f2832, [%rd129+16];\n"
    "	ld.const.f32 	%f2833, [%rd129+20];\n"
    "	mul.f32 	%f2834, %f2827, %f2827;\n"
    "	mul.f32 	%f2835, %f2826, %f2827;\n"
    "	mov.f32 	%f2836, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2837, %f2828, %f2836;\n"
    "	sub.f32 	%f2838, %f2830, %f2825;\n"
    "	mov.f32 	%f2839, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2840, %f2831, %f2839;\n"
    "	mov.f32 	%f2841, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2842, %f2832, %f2841;\n"
    "	mul.f32 	%f2843, %f2834, %f2834;\n"
    "	mul.f32 	%f2844, %f2829, %f2838;\n"
    "	mul.f32 	%f2845, %f2837, %f2843;\n"
    "	mul.f32 	%f2846, %f2842, %f2843;\n"
    "	mov.f32 	%f2847, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2848, %f2844, %f2847;\n"
    "	ex2.approx.f32 	%f2849, %f2848;\n"
    "	mul.f32 	%f2850, %f2840, %f2849;\n"
    "	mul.f32 	%f2851, %f2829, %f2850;\n"
    "	mul.f32 	%f2852, %f2826, %f2851;\n"
    "	sub.f32 	%f2853, %f2852, %f2845;\n"
    "	mul.f32 	%f2854, %f2827, %f2846;\n"
    "	sub.f32 	%f2855, %f2853, %f2854;\n"
    "	mad.f32 	%f2856, %f2833, %f2835, %f2855;\n"
    "	mov.f32 	%f2857, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2858, %f2857, %f2856, %p39;\n"
    "	mov.f32 	%f2859, %f2787;\n"
    "	mov.f32 	%f2860, %f2802;\n"
    "	mad.f32 	%f2861, %f2860, %f2858, %f2859;\n"
    "	mov.f32 	%f2862, %f2861;\n"
    "	mov.f32 	%f2863, %f2791;\n"
    "	mov.f32 	%f2864, %f2813;\n"
    "	mad.f32 	%f2865, %f2864, %f2858, %f2863;\n"
    "	mov.f32 	%f2866, %f2865;\n"
    "	mov.f32 	%f2867, %f2794;\n"
    "	mad.f32 	%f2868, %f2821, %f2858, %f2867;\n"
    "	mov.f32 	%f2869, %f2868;\n"
    "	ld.shared.s32 	%r102, [%rd14+620];\n"
    "	add.s32 	%r103, %r102, %r6;\n"
    "	ld.shared.f32 	%f2870, [%rd15+608];\n"
    "	sub.f32 	%f2871, %f19, %f2870;\n"
    "	mov.f32 	%f2872, %f2871;\n"
    "	mul.f32 	%f2873, %f14, %f2872;\n"
    "	cvt.rni.f32.f32 	%f2874, %f2873;\n"
    "	mul.f32 	%f2875, %f13, %f2874;\n"
    "	sub.f32 	%f2876, %f2871, %f2875;\n"
    "	mov.f32 	%f2877, %f2876;\n"
    "	mov.f32 	%f2878, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2879, %f2876, %f2876, %f2878;\n"
    "	ld.shared.f32 	%f2880, [%rd15+612];\n"
    "	sub.f32 	%f2881, %f18, %f2880;\n"
    "	mov.f32 	%f2882, %f2881;\n"
    "	mov.f32 	%f2883, %f2882;\n"
    "	mul.f32 	%f2884, %f14, %f2882;\n"
    "	cvt.rni.f32.f32 	%f2885, %f2884;\n"
    "	mul.f32 	%f2886, %f13, %f2885;\n"
    "	sub.f32 	%f2887, %f2881, %f2886;\n"
    "	mov.f32 	%f2888, %f2887;\n"
    "	mad.f32 	%f2889, %f2887, %f2887, %f2879;\n"
    "	ld.shared.f32 	%f2890, [%rd15+616];\n"
    "	sub.f32 	%f2891, %f11, %f2890;\n"
    "	mov.f32 	%f2892, %f2891;\n"
    "	mul.f32 	%f2893, %f2891, %f14;\n"
    "	cvt.rni.f32.f32 	%f2894, %f2893;\n"
    "	mul.f32 	%f2895, %f13, %f2894;\n"
    "	sub.f32 	%f2896, %f2891, %f2895;\n"
    "	mov.f32 	%f2897, %f2896;\n"
    "	mad.f32 	%f2898, %f2896, %f2896, %f2889;\n"
    "	mov.f32 	%f2899, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p40, %f2898, %f2899;\n"
    "	sqrt.approx.f32 	%f2900, %f2898;\n"
    "	rcp.approx.f32 	%f2901, %f2900;\n"
    "	cvt.s64.s32 	%rd130, %r103;\n"
    "	mul.wide.s32 	%rd131, %r103, 24;\n"
    "	add.u64 	%rd132, %rd9, %rd131;\n"
    "	mul.f32 	%f2902, %f2901, %f2901;\n"
    "	ld.const.f32 	%f2903, [%rd132+12];\n"
    "	ld.const.f32 	%f2904, [%rd132+8];\n"
    "	ld.const.f32 	%f2905, [%rd132+4];\n"
    "	ld.const.f32 	%f2906, [%rd132+0];\n"
    "	ld.const.f32 	%f2907, [%rd132+16];\n"
    "	ld.const.f32 	%f2908, [%rd132+20];\n"
    "	mul.f32 	%f2909, %f2902, %f2902;\n"
    "	mul.f32 	%f2910, %f2901, %f2902;\n"
    "	mov.f32 	%f2911, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2912, %f2903, %f2911;\n"
    "	sub.f32 	%f2913, %f2905, %f2900;\n"
    "	mov.f32 	%f2914, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2915, %f2906, %f2914;\n"
    "	mov.f32 	%f2916, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2917, %f2907, %f2916;\n"
    "	mul.f32 	%f2918, %f2909, %f2909;\n"
    "	mul.f32 	%f2919, %f2904, %f2913;\n"
    "	mul.f32 	%f2920, %f2912, %f2918;\n"
    "	mul.f32 	%f2921, %f2917, %f2918;\n"
    "	mov.f32 	%f2922, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2923, %f2919, %f2922;\n"
    "	ex2.approx.f32 	%f2924, %f2923;\n"
    "	mul.f32 	%f2925, %f2915, %f2924;\n"
    "	mul.f32 	%f2926, %f2904, %f2925;\n"
    "	mul.f32 	%f2927, %f2901, %f2926;\n"
    "	sub.f32 	%f2928, %f2927, %f2920;\n"
    "	mul.f32 	%f2929, %f2902, %f2921;\n"
    "	sub.f32 	%f2930, %f2928, %f2929;\n"
    "	mad.f32 	%f2931, %f2908, %f2910, %f2930;\n"
    "	mov.f32 	%f2932, 0f00000000;  	// 0\n"
    "	selp.f32 	%f2933, %f2932, %f2931, %p40;\n"
    "	mov.f32 	%f2934, %f2862;\n"
    "	mov.f32 	%f2935, %f2877;\n"
    "	mad.f32 	%f2936, %f2935, %f2933, %f2934;\n"
    "	mov.f32 	%f2937, %f2936;\n"
    "	mov.f32 	%f2938, %f2866;\n"
    "	mov.f32 	%f2939, %f2888;\n"
    "	mad.f32 	%f2940, %f2939, %f2933, %f2938;\n"
    "	mov.f32 	%f2941, %f2940;\n"
    "	mov.f32 	%f2942, %f2869;\n"
    "	mad.f32 	%f2943, %f2896, %f2933, %f2942;\n"
    "	mov.f32 	%f2944, %f2943;\n"
    "	ld.shared.s32 	%r104, [%rd14+636];\n"
    "	add.s32 	%r105, %r104, %r6;\n"
    "	ld.shared.f32 	%f2945, [%rd15+624];\n"
    "	sub.f32 	%f2946, %f19, %f2945;\n"
    "	mov.f32 	%f2947, %f2946;\n"
    "	mul.f32 	%f2948, %f14, %f2947;\n"
    "	cvt.rni.f32.f32 	%f2949, %f2948;\n"
    "	mul.f32 	%f2950, %f13, %f2949;\n"
    "	sub.f32 	%f2951, %f2946, %f2950;\n"
    "	mov.f32 	%f2952, %f2951;\n"
    "	mov.f32 	%f2953, 0f00000000;  	// 0\n"
    "	mad.f32 	%f2954, %f2951, %f2951, %f2953;\n"
    "	ld.shared.f32 	%f2955, [%rd15+628];\n"
    "	sub.f32 	%f2956, %f18, %f2955;\n"
    "	mov.f32 	%f2957, %f2956;\n"
    "	mov.f32 	%f2958, %f2957;\n"
    "	mul.f32 	%f2959, %f14, %f2957;\n"
    "	cvt.rni.f32.f32 	%f2960, %f2959;\n"
    "	mul.f32 	%f2961, %f13, %f2960;\n"
    "	sub.f32 	%f2962, %f2956, %f2961;\n"
    "	mov.f32 	%f2963, %f2962;\n"
    "	mad.f32 	%f2964, %f2962, %f2962, %f2954;\n"
    "	ld.shared.f32 	%f2965, [%rd15+632];\n"
    "	sub.f32 	%f2966, %f11, %f2965;\n"
    "	mov.f32 	%f2967, %f2966;\n"
    "	mul.f32 	%f2968, %f2966, %f14;\n"
    "	cvt.rni.f32.f32 	%f2969, %f2968;\n"
    "	mul.f32 	%f2970, %f13, %f2969;\n"
    "	sub.f32 	%f2971, %f2966, %f2970;\n"
    "	mov.f32 	%f2972, %f2971;\n"
    "	mad.f32 	%f2973, %f2971, %f2971, %f2964;\n"
    "	mov.f32 	%f2974, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p41, %f2973, %f2974;\n"
    "	sqrt.approx.f32 	%f2975, %f2973;\n"
    "	rcp.approx.f32 	%f2976, %f2975;\n"
    "	cvt.s64.s32 	%rd133, %r105;\n"
    "	mul.wide.s32 	%rd134, %r105, 24;\n"
    "	add.u64 	%rd135, %rd9, %rd134;\n"
    "	mul.f32 	%f2977, %f2976, %f2976;\n"
    "	ld.const.f32 	%f2978, [%rd135+12];\n"
    "	ld.const.f32 	%f2979, [%rd135+8];\n"
    "	ld.const.f32 	%f2980, [%rd135+4];\n"
    "	ld.const.f32 	%f2981, [%rd135+0];\n"
    "	ld.const.f32 	%f2982, [%rd135+16];\n"
    "	ld.const.f32 	%f2983, [%rd135+20];\n"
    "	mul.f32 	%f2984, %f2977, %f2977;\n"
    "	mul.f32 	%f2985, %f2976, %f2977;\n"
    "	mov.f32 	%f2986, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f2987, %f2978, %f2986;\n"
    "	sub.f32 	%f2988, %f2980, %f2975;\n"
    "	mov.f32 	%f2989, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f2990, %f2981, %f2989;\n"
    "	mov.f32 	%f2991, 0f41000000;  	// 8\n"
    "	mul.f32 	%f2992, %f2982, %f2991;\n"
    "	mul.f32 	%f2993, %f2984, %f2984;\n"
    "	mul.f32 	%f2994, %f2979, %f2988;\n"
    "	mul.f32 	%f2995, %f2987, %f2993;\n"
    "	mul.f32 	%f2996, %f2992, %f2993;\n"
    "	mov.f32 	%f2997, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f2998, %f2994, %f2997;\n"
    "	ex2.approx.f32 	%f2999, %f2998;\n"
    "	mul.f32 	%f3000, %f2990, %f2999;\n"
    "	mul.f32 	%f3001, %f2979, %f3000;\n"
    "	mul.f32 	%f3002, %f2976, %f3001;\n"
    "	sub.f32 	%f3003, %f3002, %f2995;\n"
    "	mul.f32 	%f3004, %f2977, %f2996;\n"
    "	sub.f32 	%f3005, %f3003, %f3004;\n"
    "	mad.f32 	%f3006, %f2983, %f2985, %f3005;\n"
    "	mov.f32 	%f3007, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3008, %f3007, %f3006, %p41;\n"
    "	mov.f32 	%f3009, %f2937;\n"
    "	mov.f32 	%f3010, %f2952;\n"
    "	mad.f32 	%f3011, %f3010, %f3008, %f3009;\n"
    "	mov.f32 	%f3012, %f3011;\n"
    "	mov.f32 	%f3013, %f2941;\n"
    "	mov.f32 	%f3014, %f2963;\n"
    "	mad.f32 	%f3015, %f3014, %f3008, %f3013;\n"
    "	mov.f32 	%f3016, %f3015;\n"
    "	mov.f32 	%f3017, %f2944;\n"
    "	mad.f32 	%f3018, %f2971, %f3008, %f3017;\n"
    "	mov.f32 	%f3019, %f3018;\n"
    "	ld.shared.s32 	%r106, [%rd14+652];\n"
    "	add.s32 	%r107, %r106, %r6;\n"
    "	ld.shared.f32 	%f3020, [%rd15+640];\n"
    "	sub.f32 	%f3021, %f19, %f3020;\n"
    "	mov.f32 	%f3022, %f3021;\n"
    "	mul.f32 	%f3023, %f14, %f3022;\n"
    "	cvt.rni.f32.f32 	%f3024, %f3023;\n"
    "	mul.f32 	%f3025, %f13, %f3024;\n"
    "	sub.f32 	%f3026, %f3021, %f3025;\n"
    "	mov.f32 	%f3027, %f3026;\n"
    "	mov.f32 	%f3028, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3029, %f3026, %f3026, %f3028;\n"
    "	ld.shared.f32 	%f3030, [%rd15+644];\n"
    "	sub.f32 	%f3031, %f18, %f3030;\n"
    "	mov.f32 	%f3032, %f3031;\n"
    "	mov.f32 	%f3033, %f3032;\n"
    "	mul.f32 	%f3034, %f14, %f3032;\n"
    "	cvt.rni.f32.f32 	%f3035, %f3034;\n"
    "	mul.f32 	%f3036, %f13, %f3035;\n"
    "	sub.f32 	%f3037, %f3031, %f3036;\n"
    "	mov.f32 	%f3038, %f3037;\n"
    "	mad.f32 	%f3039, %f3037, %f3037, %f3029;\n"
    "	ld.shared.f32 	%f3040, [%rd15+648];\n"
    "	sub.f32 	%f3041, %f11, %f3040;\n"
    "	mov.f32 	%f3042, %f3041;\n"
    "	mul.f32 	%f3043, %f3041, %f14;\n"
    "	cvt.rni.f32.f32 	%f3044, %f3043;\n"
    "	mul.f32 	%f3045, %f13, %f3044;\n"
    "	sub.f32 	%f3046, %f3041, %f3045;\n"
    "	mov.f32 	%f3047, %f3046;\n"
    "	mad.f32 	%f3048, %f3046, %f3046, %f3039;\n"
    "	mov.f32 	%f3049, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p42, %f3048, %f3049;\n"
    "	sqrt.approx.f32 	%f3050, %f3048;\n"
    "	rcp.approx.f32 	%f3051, %f3050;\n"
    "	cvt.s64.s32 	%rd136, %r107;\n"
    "	mul.wide.s32 	%rd137, %r107, 24;\n"
    "	add.u64 	%rd138, %rd9, %rd137;\n"
    "	mul.f32 	%f3052, %f3051, %f3051;\n"
    "	ld.const.f32 	%f3053, [%rd138+12];\n"
    "	ld.const.f32 	%f3054, [%rd138+8];\n"
    "	ld.const.f32 	%f3055, [%rd138+4];\n"
    "	ld.const.f32 	%f3056, [%rd138+0];\n"
    "	ld.const.f32 	%f3057, [%rd138+16];\n"
    "	ld.const.f32 	%f3058, [%rd138+20];\n"
    "	mul.f32 	%f3059, %f3052, %f3052;\n"
    "	mul.f32 	%f3060, %f3051, %f3052;\n"
    "	mov.f32 	%f3061, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3062, %f3053, %f3061;\n"
    "	sub.f32 	%f3063, %f3055, %f3050;\n"
    "	mov.f32 	%f3064, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3065, %f3056, %f3064;\n"
    "	mov.f32 	%f3066, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3067, %f3057, %f3066;\n"
    "	mul.f32 	%f3068, %f3059, %f3059;\n"
    "	mul.f32 	%f3069, %f3054, %f3063;\n"
    "	mul.f32 	%f3070, %f3062, %f3068;\n"
    "	mul.f32 	%f3071, %f3067, %f3068;\n"
    "	mov.f32 	%f3072, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3073, %f3069, %f3072;\n"
    "	ex2.approx.f32 	%f3074, %f3073;\n"
    "	mul.f32 	%f3075, %f3065, %f3074;\n"
    "	mul.f32 	%f3076, %f3054, %f3075;\n"
    "	mul.f32 	%f3077, %f3051, %f3076;\n"
    "	sub.f32 	%f3078, %f3077, %f3070;\n"
    "	mul.f32 	%f3079, %f3052, %f3071;\n"
    "	sub.f32 	%f3080, %f3078, %f3079;\n"
    "	mad.f32 	%f3081, %f3058, %f3060, %f3080;\n"
    "	mov.f32 	%f3082, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3083, %f3082, %f3081, %p42;\n"
    "	mov.f32 	%f3084, %f3012;\n"
    "	mov.f32 	%f3085, %f3027;\n"
    "	mad.f32 	%f3086, %f3085, %f3083, %f3084;\n"
    "	mov.f32 	%f3087, %f3086;\n"
    "	mov.f32 	%f3088, %f3016;\n"
    "	mov.f32 	%f3089, %f3038;\n"
    "	mad.f32 	%f3090, %f3089, %f3083, %f3088;\n"
    "	mov.f32 	%f3091, %f3090;\n"
    "	mov.f32 	%f3092, %f3019;\n"
    "	mad.f32 	%f3093, %f3046, %f3083, %f3092;\n"
    "	mov.f32 	%f3094, %f3093;\n"
    "	ld.shared.s32 	%r108, [%rd14+668];\n"
    "	add.s32 	%r109, %r108, %r6;\n"
    "	ld.shared.f32 	%f3095, [%rd15+656];\n"
    "	sub.f32 	%f3096, %f19, %f3095;\n"
    "	mov.f32 	%f3097, %f3096;\n"
    "	mul.f32 	%f3098, %f14, %f3097;\n"
    "	cvt.rni.f32.f32 	%f3099, %f3098;\n"
    "	mul.f32 	%f3100, %f13, %f3099;\n"
    "	sub.f32 	%f3101, %f3096, %f3100;\n"
    "	mov.f32 	%f3102, %f3101;\n"
    "	mov.f32 	%f3103, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3104, %f3101, %f3101, %f3103;\n"
    "	ld.shared.f32 	%f3105, [%rd15+660];\n"
    "	sub.f32 	%f3106, %f18, %f3105;\n"
    "	mov.f32 	%f3107, %f3106;\n"
    "	mov.f32 	%f3108, %f3107;\n"
    "	mul.f32 	%f3109, %f14, %f3107;\n"
    "	cvt.rni.f32.f32 	%f3110, %f3109;\n"
    "	mul.f32 	%f3111, %f13, %f3110;\n"
    "	sub.f32 	%f3112, %f3106, %f3111;\n"
    "	mov.f32 	%f3113, %f3112;\n"
    "	mad.f32 	%f3114, %f3112, %f3112, %f3104;\n"
    "	ld.shared.f32 	%f3115, [%rd15+664];\n"
    "	sub.f32 	%f3116, %f11, %f3115;\n"
    "	mov.f32 	%f3117, %f3116;\n"
    "	mul.f32 	%f3118, %f3116, %f14;\n"
    "	cvt.rni.f32.f32 	%f3119, %f3118;\n"
    "	mul.f32 	%f3120, %f13, %f3119;\n"
    "	sub.f32 	%f3121, %f3116, %f3120;\n"
    "	mov.f32 	%f3122, %f3121;\n"
    "	mad.f32 	%f3123, %f3121, %f3121, %f3114;\n"
    "	mov.f32 	%f3124, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p43, %f3123, %f3124;\n"
    "	sqrt.approx.f32 	%f3125, %f3123;\n"
    "	rcp.approx.f32 	%f3126, %f3125;\n"
    "	cvt.s64.s32 	%rd139, %r109;\n"
    "	mul.wide.s32 	%rd140, %r109, 24;\n"
    "	add.u64 	%rd141, %rd9, %rd140;\n"
    "	mul.f32 	%f3127, %f3126, %f3126;\n"
    "	ld.const.f32 	%f3128, [%rd141+12];\n"
    "	ld.const.f32 	%f3129, [%rd141+8];\n"
    "	ld.const.f32 	%f3130, [%rd141+4];\n"
    "	ld.const.f32 	%f3131, [%rd141+0];\n"
    "	ld.const.f32 	%f3132, [%rd141+16];\n"
    "	ld.const.f32 	%f3133, [%rd141+20];\n"
    "	mul.f32 	%f3134, %f3127, %f3127;\n"
    "	mul.f32 	%f3135, %f3126, %f3127;\n"
    "	mov.f32 	%f3136, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3137, %f3128, %f3136;\n"
    "	sub.f32 	%f3138, %f3130, %f3125;\n"
    "	mov.f32 	%f3139, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3140, %f3131, %f3139;\n"
    "	mov.f32 	%f3141, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3142, %f3132, %f3141;\n"
    "	mul.f32 	%f3143, %f3134, %f3134;\n"
    "	mul.f32 	%f3144, %f3129, %f3138;\n"
    "	mul.f32 	%f3145, %f3137, %f3143;\n"
    "	mul.f32 	%f3146, %f3142, %f3143;\n"
    "	mov.f32 	%f3147, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3148, %f3144, %f3147;\n"
    "	ex2.approx.f32 	%f3149, %f3148;\n"
    "	mul.f32 	%f3150, %f3140, %f3149;\n"
    "	mul.f32 	%f3151, %f3129, %f3150;\n"
    "	mul.f32 	%f3152, %f3126, %f3151;\n"
    "	sub.f32 	%f3153, %f3152, %f3145;\n"
    "	mul.f32 	%f3154, %f3127, %f3146;\n"
    "	sub.f32 	%f3155, %f3153, %f3154;\n"
    "	mad.f32 	%f3156, %f3133, %f3135, %f3155;\n"
    "	mov.f32 	%f3157, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3158, %f3157, %f3156, %p43;\n"
    "	mov.f32 	%f3159, %f3087;\n"
    "	mov.f32 	%f3160, %f3102;\n"
    "	mad.f32 	%f3161, %f3160, %f3158, %f3159;\n"
    "	mov.f32 	%f3162, %f3161;\n"
    "	mov.f32 	%f3163, %f3091;\n"
    "	mov.f32 	%f3164, %f3113;\n"
    "	mad.f32 	%f3165, %f3164, %f3158, %f3163;\n"
    "	mov.f32 	%f3166, %f3165;\n"
    "	mov.f32 	%f3167, %f3094;\n"
    "	mad.f32 	%f3168, %f3121, %f3158, %f3167;\n"
    "	mov.f32 	%f3169, %f3168;\n"
    "	ld.shared.s32 	%r110, [%rd14+684];\n"
    "	add.s32 	%r111, %r110, %r6;\n"
    "	ld.shared.f32 	%f3170, [%rd15+672];\n"
    "	sub.f32 	%f3171, %f19, %f3170;\n"
    "	mov.f32 	%f3172, %f3171;\n"
    "	mul.f32 	%f3173, %f14, %f3172;\n"
    "	cvt.rni.f32.f32 	%f3174, %f3173;\n"
    "	mul.f32 	%f3175, %f13, %f3174;\n"
    "	sub.f32 	%f3176, %f3171, %f3175;\n"
    "	mov.f32 	%f3177, %f3176;\n"
    "	mov.f32 	%f3178, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3179, %f3176, %f3176, %f3178;\n"
    "	ld.shared.f32 	%f3180, [%rd15+676];\n"
    "	sub.f32 	%f3181, %f18, %f3180;\n"
    "	mov.f32 	%f3182, %f3181;\n"
    "	mov.f32 	%f3183, %f3182;\n"
    "	mul.f32 	%f3184, %f14, %f3182;\n"
    "	cvt.rni.f32.f32 	%f3185, %f3184;\n"
    "	mul.f32 	%f3186, %f13, %f3185;\n"
    "	sub.f32 	%f3187, %f3181, %f3186;\n"
    "	mov.f32 	%f3188, %f3187;\n"
    "	mad.f32 	%f3189, %f3187, %f3187, %f3179;\n"
    "	ld.shared.f32 	%f3190, [%rd15+680];\n"
    "	sub.f32 	%f3191, %f11, %f3190;\n"
    "	mov.f32 	%f3192, %f3191;\n"
    "	mul.f32 	%f3193, %f3191, %f14;\n"
    "	cvt.rni.f32.f32 	%f3194, %f3193;\n"
    "	mul.f32 	%f3195, %f13, %f3194;\n"
    "	sub.f32 	%f3196, %f3191, %f3195;\n"
    "	mov.f32 	%f3197, %f3196;\n"
    "	mad.f32 	%f3198, %f3196, %f3196, %f3189;\n"
    "	mov.f32 	%f3199, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p44, %f3198, %f3199;\n"
    "	sqrt.approx.f32 	%f3200, %f3198;\n"
    "	rcp.approx.f32 	%f3201, %f3200;\n"
    "	cvt.s64.s32 	%rd142, %r111;\n"
    "	mul.wide.s32 	%rd143, %r111, 24;\n"
    "	add.u64 	%rd144, %rd9, %rd143;\n"
    "	mul.f32 	%f3202, %f3201, %f3201;\n"
    "	ld.const.f32 	%f3203, [%rd144+12];\n"
    "	ld.const.f32 	%f3204, [%rd144+8];\n"
    "	ld.const.f32 	%f3205, [%rd144+4];\n"
    "	ld.const.f32 	%f3206, [%rd144+0];\n"
    "	ld.const.f32 	%f3207, [%rd144+16];\n"
    "	ld.const.f32 	%f3208, [%rd144+20];\n"
    "	mul.f32 	%f3209, %f3202, %f3202;\n"
    "	mul.f32 	%f3210, %f3201, %f3202;\n"
    "	mov.f32 	%f3211, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3212, %f3203, %f3211;\n"
    "	sub.f32 	%f3213, %f3205, %f3200;\n"
    "	mov.f32 	%f3214, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3215, %f3206, %f3214;\n"
    "	mov.f32 	%f3216, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3217, %f3207, %f3216;\n"
    "	mul.f32 	%f3218, %f3209, %f3209;\n"
    "	mul.f32 	%f3219, %f3204, %f3213;\n"
    "	mul.f32 	%f3220, %f3212, %f3218;\n"
    "	mul.f32 	%f3221, %f3217, %f3218;\n"
    "	mov.f32 	%f3222, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3223, %f3219, %f3222;\n"
    "	ex2.approx.f32 	%f3224, %f3223;\n"
    "	mul.f32 	%f3225, %f3215, %f3224;\n"
    "	mul.f32 	%f3226, %f3204, %f3225;\n"
    "	mul.f32 	%f3227, %f3201, %f3226;\n"
    "	sub.f32 	%f3228, %f3227, %f3220;\n"
    "	mul.f32 	%f3229, %f3202, %f3221;\n"
    "	sub.f32 	%f3230, %f3228, %f3229;\n"
    "	mad.f32 	%f3231, %f3208, %f3210, %f3230;\n"
    "	mov.f32 	%f3232, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3233, %f3232, %f3231, %p44;\n"
    "	mov.f32 	%f3234, %f3162;\n"
    "	mov.f32 	%f3235, %f3177;\n"
    "	mad.f32 	%f3236, %f3235, %f3233, %f3234;\n"
    "	mov.f32 	%f3237, %f3236;\n"
    "	mov.f32 	%f3238, %f3166;\n"
    "	mov.f32 	%f3239, %f3188;\n"
    "	mad.f32 	%f3240, %f3239, %f3233, %f3238;\n"
    "	mov.f32 	%f3241, %f3240;\n"
    "	mov.f32 	%f3242, %f3169;\n"
    "	mad.f32 	%f3243, %f3196, %f3233, %f3242;\n"
    "	mov.f32 	%f3244, %f3243;\n"
    "	ld.shared.s32 	%r112, [%rd14+700];\n"
    "	add.s32 	%r113, %r112, %r6;\n"
    "	ld.shared.f32 	%f3245, [%rd15+688];\n"
    "	sub.f32 	%f3246, %f19, %f3245;\n"
    "	mov.f32 	%f3247, %f3246;\n"
    "	mul.f32 	%f3248, %f14, %f3247;\n"
    "	cvt.rni.f32.f32 	%f3249, %f3248;\n"
    "	mul.f32 	%f3250, %f13, %f3249;\n"
    "	sub.f32 	%f3251, %f3246, %f3250;\n"
    "	mov.f32 	%f3252, %f3251;\n"
    "	mov.f32 	%f3253, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3254, %f3251, %f3251, %f3253;\n"
    "	ld.shared.f32 	%f3255, [%rd15+692];\n"
    "	sub.f32 	%f3256, %f18, %f3255;\n"
    "	mov.f32 	%f3257, %f3256;\n"
    "	mov.f32 	%f3258, %f3257;\n"
    "	mul.f32 	%f3259, %f14, %f3257;\n"
    "	cvt.rni.f32.f32 	%f3260, %f3259;\n"
    "	mul.f32 	%f3261, %f13, %f3260;\n"
    "	sub.f32 	%f3262, %f3256, %f3261;\n"
    "	mov.f32 	%f3263, %f3262;\n"
    "	mad.f32 	%f3264, %f3262, %f3262, %f3254;\n"
    "	ld.shared.f32 	%f3265, [%rd15+696];\n"
    "	sub.f32 	%f3266, %f11, %f3265;\n"
    "	mov.f32 	%f3267, %f3266;\n"
    "	mul.f32 	%f3268, %f3266, %f14;\n"
    "	cvt.rni.f32.f32 	%f3269, %f3268;\n"
    "	mul.f32 	%f3270, %f13, %f3269;\n"
    "	sub.f32 	%f3271, %f3266, %f3270;\n"
    "	mov.f32 	%f3272, %f3271;\n"
    "	mad.f32 	%f3273, %f3271, %f3271, %f3264;\n"
    "	mov.f32 	%f3274, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p45, %f3273, %f3274;\n"
    "	sqrt.approx.f32 	%f3275, %f3273;\n"
    "	rcp.approx.f32 	%f3276, %f3275;\n"
    "	cvt.s64.s32 	%rd145, %r113;\n"
    "	mul.wide.s32 	%rd146, %r113, 24;\n"
    "	add.u64 	%rd147, %rd9, %rd146;\n"
    "	mul.f32 	%f3277, %f3276, %f3276;\n"
    "	ld.const.f32 	%f3278, [%rd147+12];\n"
    "	ld.const.f32 	%f3279, [%rd147+8];\n"
    "	ld.const.f32 	%f3280, [%rd147+4];\n"
    "	ld.const.f32 	%f3281, [%rd147+0];\n"
    "	ld.const.f32 	%f3282, [%rd147+16];\n"
    "	ld.const.f32 	%f3283, [%rd147+20];\n"
    "	mul.f32 	%f3284, %f3277, %f3277;\n"
    "	mul.f32 	%f3285, %f3276, %f3277;\n"
    "	mov.f32 	%f3286, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3287, %f3278, %f3286;\n"
    "	sub.f32 	%f3288, %f3280, %f3275;\n"
    "	mov.f32 	%f3289, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3290, %f3281, %f3289;\n"
    "	mov.f32 	%f3291, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3292, %f3282, %f3291;\n"
    "	mul.f32 	%f3293, %f3284, %f3284;\n"
    "	mul.f32 	%f3294, %f3279, %f3288;\n"
    "	mul.f32 	%f3295, %f3287, %f3293;\n"
    "	mul.f32 	%f3296, %f3292, %f3293;\n"
    "	mov.f32 	%f3297, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3298, %f3294, %f3297;\n"
    "	ex2.approx.f32 	%f3299, %f3298;\n"
    "	mul.f32 	%f3300, %f3290, %f3299;\n"
    "	mul.f32 	%f3301, %f3279, %f3300;\n"
    "	mul.f32 	%f3302, %f3276, %f3301;\n"
    "	sub.f32 	%f3303, %f3302, %f3295;\n"
    "	mul.f32 	%f3304, %f3277, %f3296;\n"
    "	sub.f32 	%f3305, %f3303, %f3304;\n"
    "	mad.f32 	%f3306, %f3283, %f3285, %f3305;\n"
    "	mov.f32 	%f3307, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3308, %f3307, %f3306, %p45;\n"
    "	mov.f32 	%f3309, %f3237;\n"
    "	mov.f32 	%f3310, %f3252;\n"
    "	mad.f32 	%f3311, %f3310, %f3308, %f3309;\n"
    "	mov.f32 	%f3312, %f3311;\n"
    "	mov.f32 	%f3313, %f3241;\n"
    "	mov.f32 	%f3314, %f3263;\n"
    "	mad.f32 	%f3315, %f3314, %f3308, %f3313;\n"
    "	mov.f32 	%f3316, %f3315;\n"
    "	mov.f32 	%f3317, %f3244;\n"
    "	mad.f32 	%f3318, %f3271, %f3308, %f3317;\n"
    "	mov.f32 	%f3319, %f3318;\n"
    "	ld.shared.s32 	%r114, [%rd14+716];\n"
    "	add.s32 	%r115, %r114, %r6;\n"
    "	ld.shared.f32 	%f3320, [%rd15+704];\n"
    "	sub.f32 	%f3321, %f19, %f3320;\n"
    "	mov.f32 	%f3322, %f3321;\n"
    "	mul.f32 	%f3323, %f14, %f3322;\n"
    "	cvt.rni.f32.f32 	%f3324, %f3323;\n"
    "	mul.f32 	%f3325, %f13, %f3324;\n"
    "	sub.f32 	%f3326, %f3321, %f3325;\n"
    "	mov.f32 	%f3327, %f3326;\n"
    "	mov.f32 	%f3328, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3329, %f3326, %f3326, %f3328;\n"
    "	ld.shared.f32 	%f3330, [%rd15+708];\n"
    "	sub.f32 	%f3331, %f18, %f3330;\n"
    "	mov.f32 	%f3332, %f3331;\n"
    "	mov.f32 	%f3333, %f3332;\n"
    "	mul.f32 	%f3334, %f14, %f3332;\n"
    "	cvt.rni.f32.f32 	%f3335, %f3334;\n"
    "	mul.f32 	%f3336, %f13, %f3335;\n"
    "	sub.f32 	%f3337, %f3331, %f3336;\n"
    "	mov.f32 	%f3338, %f3337;\n"
    "	mad.f32 	%f3339, %f3337, %f3337, %f3329;\n"
    "	ld.shared.f32 	%f3340, [%rd15+712];\n"
    "	sub.f32 	%f3341, %f11, %f3340;\n"
    "	mov.f32 	%f3342, %f3341;\n"
    "	mul.f32 	%f3343, %f3341, %f14;\n"
    "	cvt.rni.f32.f32 	%f3344, %f3343;\n"
    "	mul.f32 	%f3345, %f13, %f3344;\n"
    "	sub.f32 	%f3346, %f3341, %f3345;\n"
    "	mov.f32 	%f3347, %f3346;\n"
    "	mad.f32 	%f3348, %f3346, %f3346, %f3339;\n"
    "	mov.f32 	%f3349, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p46, %f3348, %f3349;\n"
    "	sqrt.approx.f32 	%f3350, %f3348;\n"
    "	rcp.approx.f32 	%f3351, %f3350;\n"
    "	cvt.s64.s32 	%rd148, %r115;\n"
    "	mul.wide.s32 	%rd149, %r115, 24;\n"
    "	add.u64 	%rd150, %rd9, %rd149;\n"
    "	mul.f32 	%f3352, %f3351, %f3351;\n"
    "	ld.const.f32 	%f3353, [%rd150+12];\n"
    "	ld.const.f32 	%f3354, [%rd150+8];\n"
    "	ld.const.f32 	%f3355, [%rd150+4];\n"
    "	ld.const.f32 	%f3356, [%rd150+0];\n"
    "	ld.const.f32 	%f3357, [%rd150+16];\n"
    "	ld.const.f32 	%f3358, [%rd150+20];\n"
    "	mul.f32 	%f3359, %f3352, %f3352;\n"
    "	mul.f32 	%f3360, %f3351, %f3352;\n"
    "	mov.f32 	%f3361, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3362, %f3353, %f3361;\n"
    "	sub.f32 	%f3363, %f3355, %f3350;\n"
    "	mov.f32 	%f3364, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3365, %f3356, %f3364;\n"
    "	mov.f32 	%f3366, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3367, %f3357, %f3366;\n"
    "	mul.f32 	%f3368, %f3359, %f3359;\n"
    "	mul.f32 	%f3369, %f3354, %f3363;\n"
    "	mul.f32 	%f3370, %f3362, %f3368;\n"
    "	mul.f32 	%f3371, %f3367, %f3368;\n"
    "	mov.f32 	%f3372, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3373, %f3369, %f3372;\n"
    "	ex2.approx.f32 	%f3374, %f3373;\n"
    "	mul.f32 	%f3375, %f3365, %f3374;\n"
    "	mul.f32 	%f3376, %f3354, %f3375;\n"
    "	mul.f32 	%f3377, %f3351, %f3376;\n"
    "	sub.f32 	%f3378, %f3377, %f3370;\n"
    "	mul.f32 	%f3379, %f3352, %f3371;\n"
    "	sub.f32 	%f3380, %f3378, %f3379;\n"
    "	mad.f32 	%f3381, %f3358, %f3360, %f3380;\n"
    "	mov.f32 	%f3382, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3383, %f3382, %f3381, %p46;\n"
    "	mov.f32 	%f3384, %f3312;\n"
    "	mov.f32 	%f3385, %f3327;\n"
    "	mad.f32 	%f3386, %f3385, %f3383, %f3384;\n"
    "	mov.f32 	%f3387, %f3386;\n"
    "	mov.f32 	%f3388, %f3316;\n"
    "	mov.f32 	%f3389, %f3338;\n"
    "	mad.f32 	%f3390, %f3389, %f3383, %f3388;\n"
    "	mov.f32 	%f3391, %f3390;\n"
    "	mov.f32 	%f3392, %f3319;\n"
    "	mad.f32 	%f3393, %f3346, %f3383, %f3392;\n"
    "	mov.f32 	%f3394, %f3393;\n"
    "	ld.shared.s32 	%r116, [%rd14+732];\n"
    "	add.s32 	%r117, %r116, %r6;\n"
    "	ld.shared.f32 	%f3395, [%rd15+720];\n"
    "	sub.f32 	%f3396, %f19, %f3395;\n"
    "	mov.f32 	%f3397, %f3396;\n"
    "	mul.f32 	%f3398, %f14, %f3397;\n"
    "	cvt.rni.f32.f32 	%f3399, %f3398;\n"
    "	mul.f32 	%f3400, %f13, %f3399;\n"
    "	sub.f32 	%f3401, %f3396, %f3400;\n"
    "	mov.f32 	%f3402, %f3401;\n"
    "	mov.f32 	%f3403, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3404, %f3401, %f3401, %f3403;\n"
    "	ld.shared.f32 	%f3405, [%rd15+724];\n"
    "	sub.f32 	%f3406, %f18, %f3405;\n"
    "	mov.f32 	%f3407, %f3406;\n"
    "	mov.f32 	%f3408, %f3407;\n"
    "	mul.f32 	%f3409, %f14, %f3407;\n"
    "	cvt.rni.f32.f32 	%f3410, %f3409;\n"
    "	mul.f32 	%f3411, %f13, %f3410;\n"
    "	sub.f32 	%f3412, %f3406, %f3411;\n"
    "	mov.f32 	%f3413, %f3412;\n"
    "	mad.f32 	%f3414, %f3412, %f3412, %f3404;\n"
    "	ld.shared.f32 	%f3415, [%rd15+728];\n"
    "	sub.f32 	%f3416, %f11, %f3415;\n"
    "	mov.f32 	%f3417, %f3416;\n"
    "	mul.f32 	%f3418, %f3416, %f14;\n"
    "	cvt.rni.f32.f32 	%f3419, %f3418;\n"
    "	mul.f32 	%f3420, %f13, %f3419;\n"
    "	sub.f32 	%f3421, %f3416, %f3420;\n"
    "	mov.f32 	%f3422, %f3421;\n"
    "	mad.f32 	%f3423, %f3421, %f3421, %f3414;\n"
    "	mov.f32 	%f3424, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p47, %f3423, %f3424;\n"
    "	sqrt.approx.f32 	%f3425, %f3423;\n"
    "	rcp.approx.f32 	%f3426, %f3425;\n"
    "	cvt.s64.s32 	%rd151, %r117;\n"
    "	mul.wide.s32 	%rd152, %r117, 24;\n"
    "	add.u64 	%rd153, %rd9, %rd152;\n"
    "	mul.f32 	%f3427, %f3426, %f3426;\n"
    "	ld.const.f32 	%f3428, [%rd153+12];\n"
    "	ld.const.f32 	%f3429, [%rd153+8];\n"
    "	ld.const.f32 	%f3430, [%rd153+4];\n"
    "	ld.const.f32 	%f3431, [%rd153+0];\n"
    "	ld.const.f32 	%f3432, [%rd153+16];\n"
    "	ld.const.f32 	%f3433, [%rd153+20];\n"
    "	mul.f32 	%f3434, %f3427, %f3427;\n"
    "	mul.f32 	%f3435, %f3426, %f3427;\n"
    "	mov.f32 	%f3436, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3437, %f3428, %f3436;\n"
    "	sub.f32 	%f3438, %f3430, %f3425;\n"
    "	mov.f32 	%f3439, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3440, %f3431, %f3439;\n"
    "	mov.f32 	%f3441, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3442, %f3432, %f3441;\n"
    "	mul.f32 	%f3443, %f3434, %f3434;\n"
    "	mul.f32 	%f3444, %f3429, %f3438;\n"
    "	mul.f32 	%f3445, %f3437, %f3443;\n"
    "	mul.f32 	%f3446, %f3442, %f3443;\n"
    "	mov.f32 	%f3447, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3448, %f3444, %f3447;\n"
    "	ex2.approx.f32 	%f3449, %f3448;\n"
    "	mul.f32 	%f3450, %f3440, %f3449;\n"
    "	mul.f32 	%f3451, %f3429, %f3450;\n"
    "	mul.f32 	%f3452, %f3426, %f3451;\n"
    "	sub.f32 	%f3453, %f3452, %f3445;\n"
    "	mul.f32 	%f3454, %f3427, %f3446;\n"
    "	sub.f32 	%f3455, %f3453, %f3454;\n"
    "	mad.f32 	%f3456, %f3433, %f3435, %f3455;\n"
    "	mov.f32 	%f3457, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3458, %f3457, %f3456, %p47;\n"
    "	mov.f32 	%f3459, %f3387;\n"
    "	mov.f32 	%f3460, %f3402;\n"
    "	mad.f32 	%f3461, %f3460, %f3458, %f3459;\n"
    "	mov.f32 	%f3462, %f3461;\n"
    "	mov.f32 	%f3463, %f3391;\n"
    "	mov.f32 	%f3464, %f3413;\n"
    "	mad.f32 	%f3465, %f3464, %f3458, %f3463;\n"
    "	mov.f32 	%f3466, %f3465;\n"
    "	mov.f32 	%f3467, %f3394;\n"
    "	mad.f32 	%f3468, %f3421, %f3458, %f3467;\n"
    "	mov.f32 	%f3469, %f3468;\n"
    "	ld.shared.s32 	%r118, [%rd14+748];\n"
    "	add.s32 	%r119, %r118, %r6;\n"
    "	ld.shared.f32 	%f3470, [%rd15+736];\n"
    "	sub.f32 	%f3471, %f19, %f3470;\n"
    "	mov.f32 	%f3472, %f3471;\n"
    "	mul.f32 	%f3473, %f14, %f3472;\n"
    "	cvt.rni.f32.f32 	%f3474, %f3473;\n"
    "	mul.f32 	%f3475, %f13, %f3474;\n"
    "	sub.f32 	%f3476, %f3471, %f3475;\n"
    "	mov.f32 	%f3477, %f3476;\n"
    "	mov.f32 	%f3478, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3479, %f3476, %f3476, %f3478;\n"
    "	ld.shared.f32 	%f3480, [%rd15+740];\n"
    "	sub.f32 	%f3481, %f18, %f3480;\n"
    "	mov.f32 	%f3482, %f3481;\n"
    "	mov.f32 	%f3483, %f3482;\n"
    "	mul.f32 	%f3484, %f14, %f3482;\n"
    "	cvt.rni.f32.f32 	%f3485, %f3484;\n"
    "	mul.f32 	%f3486, %f13, %f3485;\n"
    "	sub.f32 	%f3487, %f3481, %f3486;\n"
    "	mov.f32 	%f3488, %f3487;\n"
    "	mad.f32 	%f3489, %f3487, %f3487, %f3479;\n"
    "	ld.shared.f32 	%f3490, [%rd15+744];\n"
    "	sub.f32 	%f3491, %f11, %f3490;\n"
    "	mov.f32 	%f3492, %f3491;\n"
    "	mul.f32 	%f3493, %f3491, %f14;\n"
    "	cvt.rni.f32.f32 	%f3494, %f3493;\n"
    "	mul.f32 	%f3495, %f13, %f3494;\n"
    "	sub.f32 	%f3496, %f3491, %f3495;\n"
    "	mov.f32 	%f3497, %f3496;\n"
    "	mad.f32 	%f3498, %f3496, %f3496, %f3489;\n"
    "	mov.f32 	%f3499, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p48, %f3498, %f3499;\n"
    "	sqrt.approx.f32 	%f3500, %f3498;\n"
    "	rcp.approx.f32 	%f3501, %f3500;\n"
    "	cvt.s64.s32 	%rd154, %r119;\n"
    "	mul.wide.s32 	%rd155, %r119, 24;\n"
    "	add.u64 	%rd156, %rd9, %rd155;\n"
    "	mul.f32 	%f3502, %f3501, %f3501;\n"
    "	ld.const.f32 	%f3503, [%rd156+12];\n"
    "	ld.const.f32 	%f3504, [%rd156+8];\n"
    "	ld.const.f32 	%f3505, [%rd156+4];\n"
    "	ld.const.f32 	%f3506, [%rd156+0];\n"
    "	ld.const.f32 	%f3507, [%rd156+16];\n"
    "	ld.const.f32 	%f3508, [%rd156+20];\n"
    "	mul.f32 	%f3509, %f3502, %f3502;\n"
    "	mul.f32 	%f3510, %f3501, %f3502;\n"
    "	mov.f32 	%f3511, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3512, %f3503, %f3511;\n"
    "	sub.f32 	%f3513, %f3505, %f3500;\n"
    "	mov.f32 	%f3514, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3515, %f3506, %f3514;\n"
    "	mov.f32 	%f3516, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3517, %f3507, %f3516;\n"
    "	mul.f32 	%f3518, %f3509, %f3509;\n"
    "	mul.f32 	%f3519, %f3504, %f3513;\n"
    "	mul.f32 	%f3520, %f3512, %f3518;\n"
    "	mul.f32 	%f3521, %f3517, %f3518;\n"
    "	mov.f32 	%f3522, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3523, %f3519, %f3522;\n"
    "	ex2.approx.f32 	%f3524, %f3523;\n"
    "	mul.f32 	%f3525, %f3515, %f3524;\n"
    "	mul.f32 	%f3526, %f3504, %f3525;\n"
    "	mul.f32 	%f3527, %f3501, %f3526;\n"
    "	sub.f32 	%f3528, %f3527, %f3520;\n"
    "	mul.f32 	%f3529, %f3502, %f3521;\n"
    "	sub.f32 	%f3530, %f3528, %f3529;\n"
    "	mad.f32 	%f3531, %f3508, %f3510, %f3530;\n"
    "	mov.f32 	%f3532, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3533, %f3532, %f3531, %p48;\n"
    "	mov.f32 	%f3534, %f3462;\n"
    "	mov.f32 	%f3535, %f3477;\n"
    "	mad.f32 	%f3536, %f3535, %f3533, %f3534;\n"
    "	mov.f32 	%f3537, %f3536;\n"
    "	mov.f32 	%f3538, %f3466;\n"
    "	mov.f32 	%f3539, %f3488;\n"
    "	mad.f32 	%f3540, %f3539, %f3533, %f3538;\n"
    "	mov.f32 	%f3541, %f3540;\n"
    "	mov.f32 	%f3542, %f3469;\n"
    "	mad.f32 	%f3543, %f3496, %f3533, %f3542;\n"
    "	mov.f32 	%f3544, %f3543;\n"
    "	ld.shared.s32 	%r120, [%rd14+764];\n"
    "	add.s32 	%r121, %r120, %r6;\n"
    "	ld.shared.f32 	%f3545, [%rd15+752];\n"
    "	sub.f32 	%f3546, %f19, %f3545;\n"
    "	mov.f32 	%f3547, %f3546;\n"
    "	mul.f32 	%f3548, %f14, %f3547;\n"
    "	cvt.rni.f32.f32 	%f3549, %f3548;\n"
    "	mul.f32 	%f3550, %f13, %f3549;\n"
    "	sub.f32 	%f3551, %f3546, %f3550;\n"
    "	mov.f32 	%f3552, %f3551;\n"
    "	mov.f32 	%f3553, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3554, %f3551, %f3551, %f3553;\n"
    "	ld.shared.f32 	%f3555, [%rd15+756];\n"
    "	sub.f32 	%f3556, %f18, %f3555;\n"
    "	mov.f32 	%f3557, %f3556;\n"
    "	mov.f32 	%f3558, %f3557;\n"
    "	mul.f32 	%f3559, %f14, %f3557;\n"
    "	cvt.rni.f32.f32 	%f3560, %f3559;\n"
    "	mul.f32 	%f3561, %f13, %f3560;\n"
    "	sub.f32 	%f3562, %f3556, %f3561;\n"
    "	mov.f32 	%f3563, %f3562;\n"
    "	mad.f32 	%f3564, %f3562, %f3562, %f3554;\n"
    "	ld.shared.f32 	%f3565, [%rd15+760];\n"
    "	sub.f32 	%f3566, %f11, %f3565;\n"
    "	mov.f32 	%f3567, %f3566;\n"
    "	mul.f32 	%f3568, %f3566, %f14;\n"
    "	cvt.rni.f32.f32 	%f3569, %f3568;\n"
    "	mul.f32 	%f3570, %f13, %f3569;\n"
    "	sub.f32 	%f3571, %f3566, %f3570;\n"
    "	mov.f32 	%f3572, %f3571;\n"
    "	mad.f32 	%f3573, %f3571, %f3571, %f3564;\n"
    "	mov.f32 	%f3574, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p49, %f3573, %f3574;\n"
    "	sqrt.approx.f32 	%f3575, %f3573;\n"
    "	rcp.approx.f32 	%f3576, %f3575;\n"
    "	cvt.s64.s32 	%rd157, %r121;\n"
    "	mul.wide.s32 	%rd158, %r121, 24;\n"
    "	add.u64 	%rd159, %rd9, %rd158;\n"
    "	mul.f32 	%f3577, %f3576, %f3576;\n"
    "	ld.const.f32 	%f3578, [%rd159+12];\n"
    "	ld.const.f32 	%f3579, [%rd159+8];\n"
    "	ld.const.f32 	%f3580, [%rd159+4];\n"
    "	ld.const.f32 	%f3581, [%rd159+0];\n"
    "	ld.const.f32 	%f3582, [%rd159+16];\n"
    "	ld.const.f32 	%f3583, [%rd159+20];\n"
    "	mul.f32 	%f3584, %f3577, %f3577;\n"
    "	mul.f32 	%f3585, %f3576, %f3577;\n"
    "	mov.f32 	%f3586, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3587, %f3578, %f3586;\n"
    "	sub.f32 	%f3588, %f3580, %f3575;\n"
    "	mov.f32 	%f3589, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3590, %f3581, %f3589;\n"
    "	mov.f32 	%f3591, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3592, %f3582, %f3591;\n"
    "	mul.f32 	%f3593, %f3584, %f3584;\n"
    "	mul.f32 	%f3594, %f3579, %f3588;\n"
    "	mul.f32 	%f3595, %f3587, %f3593;\n"
    "	mul.f32 	%f3596, %f3592, %f3593;\n"
    "	mov.f32 	%f3597, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3598, %f3594, %f3597;\n"
    "	ex2.approx.f32 	%f3599, %f3598;\n"
    "	mul.f32 	%f3600, %f3590, %f3599;\n"
    "	mul.f32 	%f3601, %f3579, %f3600;\n"
    "	mul.f32 	%f3602, %f3576, %f3601;\n"
    "	sub.f32 	%f3603, %f3602, %f3595;\n"
    "	mul.f32 	%f3604, %f3577, %f3596;\n"
    "	sub.f32 	%f3605, %f3603, %f3604;\n"
    "	mad.f32 	%f3606, %f3583, %f3585, %f3605;\n"
    "	mov.f32 	%f3607, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3608, %f3607, %f3606, %p49;\n"
    "	mov.f32 	%f3609, %f3537;\n"
    "	mov.f32 	%f3610, %f3552;\n"
    "	mad.f32 	%f3611, %f3610, %f3608, %f3609;\n"
    "	mov.f32 	%f3612, %f3611;\n"
    "	mov.f32 	%f3613, %f3541;\n"
    "	mov.f32 	%f3614, %f3563;\n"
    "	mad.f32 	%f3615, %f3614, %f3608, %f3613;\n"
    "	mov.f32 	%f3616, %f3615;\n"
    "	mov.f32 	%f3617, %f3544;\n"
    "	mad.f32 	%f3618, %f3571, %f3608, %f3617;\n"
    "	mov.f32 	%f3619, %f3618;\n"
    "	ld.shared.s32 	%r122, [%rd14+780];\n"
    "	add.s32 	%r123, %r122, %r6;\n"
    "	ld.shared.f32 	%f3620, [%rd15+768];\n"
    "	sub.f32 	%f3621, %f19, %f3620;\n"
    "	mov.f32 	%f3622, %f3621;\n"
    "	mul.f32 	%f3623, %f14, %f3622;\n"
    "	cvt.rni.f32.f32 	%f3624, %f3623;\n"
    "	mul.f32 	%f3625, %f13, %f3624;\n"
    "	sub.f32 	%f3626, %f3621, %f3625;\n"
    "	mov.f32 	%f3627, %f3626;\n"
    "	mov.f32 	%f3628, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3629, %f3626, %f3626, %f3628;\n"
    "	ld.shared.f32 	%f3630, [%rd15+772];\n"
    "	sub.f32 	%f3631, %f18, %f3630;\n"
    "	mov.f32 	%f3632, %f3631;\n"
    "	mov.f32 	%f3633, %f3632;\n"
    "	mul.f32 	%f3634, %f14, %f3632;\n"
    "	cvt.rni.f32.f32 	%f3635, %f3634;\n"
    "	mul.f32 	%f3636, %f13, %f3635;\n"
    "	sub.f32 	%f3637, %f3631, %f3636;\n"
    "	mov.f32 	%f3638, %f3637;\n"
    "	mad.f32 	%f3639, %f3637, %f3637, %f3629;\n"
    "	ld.shared.f32 	%f3640, [%rd15+776];\n"
    "	sub.f32 	%f3641, %f11, %f3640;\n"
    "	mov.f32 	%f3642, %f3641;\n"
    "	mul.f32 	%f3643, %f3641, %f14;\n"
    "	cvt.rni.f32.f32 	%f3644, %f3643;\n"
    "	mul.f32 	%f3645, %f13, %f3644;\n"
    "	sub.f32 	%f3646, %f3641, %f3645;\n"
    "	mov.f32 	%f3647, %f3646;\n"
    "	mad.f32 	%f3648, %f3646, %f3646, %f3639;\n"
    "	mov.f32 	%f3649, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p50, %f3648, %f3649;\n"
    "	sqrt.approx.f32 	%f3650, %f3648;\n"
    "	rcp.approx.f32 	%f3651, %f3650;\n"
    "	cvt.s64.s32 	%rd160, %r123;\n"
    "	mul.wide.s32 	%rd161, %r123, 24;\n"
    "	add.u64 	%rd162, %rd9, %rd161;\n"
    "	mul.f32 	%f3652, %f3651, %f3651;\n"
    "	ld.const.f32 	%f3653, [%rd162+12];\n"
    "	ld.const.f32 	%f3654, [%rd162+8];\n"
    "	ld.const.f32 	%f3655, [%rd162+4];\n"
    "	ld.const.f32 	%f3656, [%rd162+0];\n"
    "	ld.const.f32 	%f3657, [%rd162+16];\n"
    "	ld.const.f32 	%f3658, [%rd162+20];\n"
    "	mul.f32 	%f3659, %f3652, %f3652;\n"
    "	mul.f32 	%f3660, %f3651, %f3652;\n"
    "	mov.f32 	%f3661, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3662, %f3653, %f3661;\n"
    "	sub.f32 	%f3663, %f3655, %f3650;\n"
    "	mov.f32 	%f3664, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3665, %f3656, %f3664;\n"
    "	mov.f32 	%f3666, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3667, %f3657, %f3666;\n"
    "	mul.f32 	%f3668, %f3659, %f3659;\n"
    "	mul.f32 	%f3669, %f3654, %f3663;\n"
    "	mul.f32 	%f3670, %f3662, %f3668;\n"
    "	mul.f32 	%f3671, %f3667, %f3668;\n"
    "	mov.f32 	%f3672, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3673, %f3669, %f3672;\n"
    "	ex2.approx.f32 	%f3674, %f3673;\n"
    "	mul.f32 	%f3675, %f3665, %f3674;\n"
    "	mul.f32 	%f3676, %f3654, %f3675;\n"
    "	mul.f32 	%f3677, %f3651, %f3676;\n"
    "	sub.f32 	%f3678, %f3677, %f3670;\n"
    "	mul.f32 	%f3679, %f3652, %f3671;\n"
    "	sub.f32 	%f3680, %f3678, %f3679;\n"
    "	mad.f32 	%f3681, %f3658, %f3660, %f3680;\n"
    "	mov.f32 	%f3682, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3683, %f3682, %f3681, %p50;\n"
    "	mov.f32 	%f3684, %f3612;\n"
    "	mov.f32 	%f3685, %f3627;\n"
    "	mad.f32 	%f3686, %f3685, %f3683, %f3684;\n"
    "	mov.f32 	%f3687, %f3686;\n"
    "	mov.f32 	%f3688, %f3616;\n"
    "	mov.f32 	%f3689, %f3638;\n"
    "	mad.f32 	%f3690, %f3689, %f3683, %f3688;\n"
    "	mov.f32 	%f3691, %f3690;\n"
    "	mov.f32 	%f3692, %f3619;\n"
    "	mad.f32 	%f3693, %f3646, %f3683, %f3692;\n"
    "	mov.f32 	%f3694, %f3693;\n"
    "	ld.shared.s32 	%r124, [%rd14+796];\n"
    "	add.s32 	%r125, %r124, %r6;\n"
    "	ld.shared.f32 	%f3695, [%rd15+784];\n"
    "	sub.f32 	%f3696, %f19, %f3695;\n"
    "	mov.f32 	%f3697, %f3696;\n"
    "	mul.f32 	%f3698, %f14, %f3697;\n"
    "	cvt.rni.f32.f32 	%f3699, %f3698;\n"
    "	mul.f32 	%f3700, %f13, %f3699;\n"
    "	sub.f32 	%f3701, %f3696, %f3700;\n"
    "	mov.f32 	%f3702, %f3701;\n"
    "	mov.f32 	%f3703, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3704, %f3701, %f3701, %f3703;\n"
    "	ld.shared.f32 	%f3705, [%rd15+788];\n"
    "	sub.f32 	%f3706, %f18, %f3705;\n"
    "	mov.f32 	%f3707, %f3706;\n"
    "	mov.f32 	%f3708, %f3707;\n"
    "	mul.f32 	%f3709, %f14, %f3707;\n"
    "	cvt.rni.f32.f32 	%f3710, %f3709;\n"
    "	mul.f32 	%f3711, %f13, %f3710;\n"
    "	sub.f32 	%f3712, %f3706, %f3711;\n"
    "	mov.f32 	%f3713, %f3712;\n"
    "	mad.f32 	%f3714, %f3712, %f3712, %f3704;\n"
    "	ld.shared.f32 	%f3715, [%rd15+792];\n"
    "	sub.f32 	%f3716, %f11, %f3715;\n"
    "	mov.f32 	%f3717, %f3716;\n"
    "	mul.f32 	%f3718, %f3716, %f14;\n"
    "	cvt.rni.f32.f32 	%f3719, %f3718;\n"
    "	mul.f32 	%f3720, %f13, %f3719;\n"
    "	sub.f32 	%f3721, %f3716, %f3720;\n"
    "	mov.f32 	%f3722, %f3721;\n"
    "	mad.f32 	%f3723, %f3721, %f3721, %f3714;\n"
    "	mov.f32 	%f3724, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p51, %f3723, %f3724;\n"
    "	sqrt.approx.f32 	%f3725, %f3723;\n"
    "	rcp.approx.f32 	%f3726, %f3725;\n"
    "	cvt.s64.s32 	%rd163, %r125;\n"
    "	mul.wide.s32 	%rd164, %r125, 24;\n"
    "	add.u64 	%rd165, %rd9, %rd164;\n"
    "	mul.f32 	%f3727, %f3726, %f3726;\n"
    "	ld.const.f32 	%f3728, [%rd165+12];\n"
    "	ld.const.f32 	%f3729, [%rd165+8];\n"
    "	ld.const.f32 	%f3730, [%rd165+4];\n"
    "	ld.const.f32 	%f3731, [%rd165+0];\n"
    "	ld.const.f32 	%f3732, [%rd165+16];\n"
    "	ld.const.f32 	%f3733, [%rd165+20];\n"
    "	mul.f32 	%f3734, %f3727, %f3727;\n"
    "	mul.f32 	%f3735, %f3726, %f3727;\n"
    "	mov.f32 	%f3736, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3737, %f3728, %f3736;\n"
    "	sub.f32 	%f3738, %f3730, %f3725;\n"
    "	mov.f32 	%f3739, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3740, %f3731, %f3739;\n"
    "	mov.f32 	%f3741, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3742, %f3732, %f3741;\n"
    "	mul.f32 	%f3743, %f3734, %f3734;\n"
    "	mul.f32 	%f3744, %f3729, %f3738;\n"
    "	mul.f32 	%f3745, %f3737, %f3743;\n"
    "	mul.f32 	%f3746, %f3742, %f3743;\n"
    "	mov.f32 	%f3747, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3748, %f3744, %f3747;\n"
    "	ex2.approx.f32 	%f3749, %f3748;\n"
    "	mul.f32 	%f3750, %f3740, %f3749;\n"
    "	mul.f32 	%f3751, %f3729, %f3750;\n"
    "	mul.f32 	%f3752, %f3726, %f3751;\n"
    "	sub.f32 	%f3753, %f3752, %f3745;\n"
    "	mul.f32 	%f3754, %f3727, %f3746;\n"
    "	sub.f32 	%f3755, %f3753, %f3754;\n"
    "	mad.f32 	%f3756, %f3733, %f3735, %f3755;\n"
    "	mov.f32 	%f3757, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3758, %f3757, %f3756, %p51;\n"
    "	mov.f32 	%f3759, %f3687;\n"
    "	mov.f32 	%f3760, %f3702;\n"
    "	mad.f32 	%f3761, %f3760, %f3758, %f3759;\n"
    "	mov.f32 	%f3762, %f3761;\n"
    "	mov.f32 	%f3763, %f3691;\n"
    "	mov.f32 	%f3764, %f3713;\n"
    "	mad.f32 	%f3765, %f3764, %f3758, %f3763;\n"
    "	mov.f32 	%f3766, %f3765;\n"
    "	mov.f32 	%f3767, %f3694;\n"
    "	mad.f32 	%f3768, %f3721, %f3758, %f3767;\n"
    "	mov.f32 	%f3769, %f3768;\n"
    "	ld.shared.s32 	%r126, [%rd14+812];\n"
    "	add.s32 	%r127, %r126, %r6;\n"
    "	ld.shared.f32 	%f3770, [%rd15+800];\n"
    "	sub.f32 	%f3771, %f19, %f3770;\n"
    "	mov.f32 	%f3772, %f3771;\n"
    "	mul.f32 	%f3773, %f14, %f3772;\n"
    "	cvt.rni.f32.f32 	%f3774, %f3773;\n"
    "	mul.f32 	%f3775, %f13, %f3774;\n"
    "	sub.f32 	%f3776, %f3771, %f3775;\n"
    "	mov.f32 	%f3777, %f3776;\n"
    "	mov.f32 	%f3778, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3779, %f3776, %f3776, %f3778;\n"
    "	ld.shared.f32 	%f3780, [%rd15+804];\n"
    "	sub.f32 	%f3781, %f18, %f3780;\n"
    "	mov.f32 	%f3782, %f3781;\n"
    "	mov.f32 	%f3783, %f3782;\n"
    "	mul.f32 	%f3784, %f14, %f3782;\n"
    "	cvt.rni.f32.f32 	%f3785, %f3784;\n"
    "	mul.f32 	%f3786, %f13, %f3785;\n"
    "	sub.f32 	%f3787, %f3781, %f3786;\n"
    "	mov.f32 	%f3788, %f3787;\n"
    "	mad.f32 	%f3789, %f3787, %f3787, %f3779;\n"
    "	ld.shared.f32 	%f3790, [%rd15+808];\n"
    "	sub.f32 	%f3791, %f11, %f3790;\n"
    "	mov.f32 	%f3792, %f3791;\n"
    "	mul.f32 	%f3793, %f3791, %f14;\n"
    "	cvt.rni.f32.f32 	%f3794, %f3793;\n"
    "	mul.f32 	%f3795, %f13, %f3794;\n"
    "	sub.f32 	%f3796, %f3791, %f3795;\n"
    "	mov.f32 	%f3797, %f3796;\n"
    "	mad.f32 	%f3798, %f3796, %f3796, %f3789;\n"
    "	mov.f32 	%f3799, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p52, %f3798, %f3799;\n"
    "	sqrt.approx.f32 	%f3800, %f3798;\n"
    "	rcp.approx.f32 	%f3801, %f3800;\n"
    "	cvt.s64.s32 	%rd166, %r127;\n"
    "	mul.wide.s32 	%rd167, %r127, 24;\n"
    "	add.u64 	%rd168, %rd9, %rd167;\n"
    "	mul.f32 	%f3802, %f3801, %f3801;\n"
    "	ld.const.f32 	%f3803, [%rd168+12];\n"
    "	ld.const.f32 	%f3804, [%rd168+8];\n"
    "	ld.const.f32 	%f3805, [%rd168+4];\n"
    "	ld.const.f32 	%f3806, [%rd168+0];\n"
    "	ld.const.f32 	%f3807, [%rd168+16];\n"
    "	ld.const.f32 	%f3808, [%rd168+20];\n"
    "	mul.f32 	%f3809, %f3802, %f3802;\n"
    "	mul.f32 	%f3810, %f3801, %f3802;\n"
    "	mov.f32 	%f3811, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3812, %f3803, %f3811;\n"
    "	sub.f32 	%f3813, %f3805, %f3800;\n"
    "	mov.f32 	%f3814, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3815, %f3806, %f3814;\n"
    "	mov.f32 	%f3816, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3817, %f3807, %f3816;\n"
    "	mul.f32 	%f3818, %f3809, %f3809;\n"
    "	mul.f32 	%f3819, %f3804, %f3813;\n"
    "	mul.f32 	%f3820, %f3812, %f3818;\n"
    "	mul.f32 	%f3821, %f3817, %f3818;\n"
    "	mov.f32 	%f3822, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3823, %f3819, %f3822;\n"
    "	ex2.approx.f32 	%f3824, %f3823;\n"
    "	mul.f32 	%f3825, %f3815, %f3824;\n"
    "	mul.f32 	%f3826, %f3804, %f3825;\n"
    "	mul.f32 	%f3827, %f3801, %f3826;\n"
    "	sub.f32 	%f3828, %f3827, %f3820;\n"
    "	mul.f32 	%f3829, %f3802, %f3821;\n"
    "	sub.f32 	%f3830, %f3828, %f3829;\n"
    "	mad.f32 	%f3831, %f3808, %f3810, %f3830;\n"
    "	mov.f32 	%f3832, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3833, %f3832, %f3831, %p52;\n"
    "	mov.f32 	%f3834, %f3762;\n"
    "	mov.f32 	%f3835, %f3777;\n"
    "	mad.f32 	%f3836, %f3835, %f3833, %f3834;\n"
    "	mov.f32 	%f3837, %f3836;\n"
    "	mov.f32 	%f3838, %f3766;\n"
    "	mov.f32 	%f3839, %f3788;\n"
    "	mad.f32 	%f3840, %f3839, %f3833, %f3838;\n"
    "	mov.f32 	%f3841, %f3840;\n"
    "	mov.f32 	%f3842, %f3769;\n"
    "	mad.f32 	%f3843, %f3796, %f3833, %f3842;\n"
    "	mov.f32 	%f3844, %f3843;\n"
    "	ld.shared.s32 	%r128, [%rd14+828];\n"
    "	add.s32 	%r129, %r128, %r6;\n"
    "	ld.shared.f32 	%f3845, [%rd15+816];\n"
    "	sub.f32 	%f3846, %f19, %f3845;\n"
    "	mov.f32 	%f3847, %f3846;\n"
    "	mul.f32 	%f3848, %f14, %f3847;\n"
    "	cvt.rni.f32.f32 	%f3849, %f3848;\n"
    "	mul.f32 	%f3850, %f13, %f3849;\n"
    "	sub.f32 	%f3851, %f3846, %f3850;\n"
    "	mov.f32 	%f3852, %f3851;\n"
    "	mov.f32 	%f3853, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3854, %f3851, %f3851, %f3853;\n"
    "	ld.shared.f32 	%f3855, [%rd15+820];\n"
    "	sub.f32 	%f3856, %f18, %f3855;\n"
    "	mov.f32 	%f3857, %f3856;\n"
    "	mov.f32 	%f3858, %f3857;\n"
    "	mul.f32 	%f3859, %f14, %f3857;\n"
    "	cvt.rni.f32.f32 	%f3860, %f3859;\n"
    "	mul.f32 	%f3861, %f13, %f3860;\n"
    "	sub.f32 	%f3862, %f3856, %f3861;\n"
    "	mov.f32 	%f3863, %f3862;\n"
    "	mad.f32 	%f3864, %f3862, %f3862, %f3854;\n"
    "	ld.shared.f32 	%f3865, [%rd15+824];\n"
    "	sub.f32 	%f3866, %f11, %f3865;\n"
    "	mov.f32 	%f3867, %f3866;\n"
    "	mul.f32 	%f3868, %f3866, %f14;\n"
    "	cvt.rni.f32.f32 	%f3869, %f3868;\n"
    "	mul.f32 	%f3870, %f13, %f3869;\n"
    "	sub.f32 	%f3871, %f3866, %f3870;\n"
    "	mov.f32 	%f3872, %f3871;\n"
    "	mad.f32 	%f3873, %f3871, %f3871, %f3864;\n"
    "	mov.f32 	%f3874, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p53, %f3873, %f3874;\n"
    "	sqrt.approx.f32 	%f3875, %f3873;\n"
    "	rcp.approx.f32 	%f3876, %f3875;\n"
    "	cvt.s64.s32 	%rd169, %r129;\n"
    "	mul.wide.s32 	%rd170, %r129, 24;\n"
    "	add.u64 	%rd171, %rd9, %rd170;\n"
    "	mul.f32 	%f3877, %f3876, %f3876;\n"
    "	ld.const.f32 	%f3878, [%rd171+12];\n"
    "	ld.const.f32 	%f3879, [%rd171+8];\n"
    "	ld.const.f32 	%f3880, [%rd171+4];\n"
    "	ld.const.f32 	%f3881, [%rd171+0];\n"
    "	ld.const.f32 	%f3882, [%rd171+16];\n"
    "	ld.const.f32 	%f3883, [%rd171+20];\n"
    "	mul.f32 	%f3884, %f3877, %f3877;\n"
    "	mul.f32 	%f3885, %f3876, %f3877;\n"
    "	mov.f32 	%f3886, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3887, %f3878, %f3886;\n"
    "	sub.f32 	%f3888, %f3880, %f3875;\n"
    "	mov.f32 	%f3889, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3890, %f3881, %f3889;\n"
    "	mov.f32 	%f3891, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3892, %f3882, %f3891;\n"
    "	mul.f32 	%f3893, %f3884, %f3884;\n"
    "	mul.f32 	%f3894, %f3879, %f3888;\n"
    "	mul.f32 	%f3895, %f3887, %f3893;\n"
    "	mul.f32 	%f3896, %f3892, %f3893;\n"
    "	mov.f32 	%f3897, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3898, %f3894, %f3897;\n"
    "	ex2.approx.f32 	%f3899, %f3898;\n"
    "	mul.f32 	%f3900, %f3890, %f3899;\n"
    "	mul.f32 	%f3901, %f3879, %f3900;\n"
    "	mul.f32 	%f3902, %f3876, %f3901;\n"
    "	sub.f32 	%f3903, %f3902, %f3895;\n"
    "	mul.f32 	%f3904, %f3877, %f3896;\n"
    "	sub.f32 	%f3905, %f3903, %f3904;\n"
    "	mad.f32 	%f3906, %f3883, %f3885, %f3905;\n"
    "	mov.f32 	%f3907, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3908, %f3907, %f3906, %p53;\n"
    "	mov.f32 	%f3909, %f3837;\n"
    "	mov.f32 	%f3910, %f3852;\n"
    "	mad.f32 	%f3911, %f3910, %f3908, %f3909;\n"
    "	mov.f32 	%f3912, %f3911;\n"
    "	mov.f32 	%f3913, %f3841;\n"
    "	mov.f32 	%f3914, %f3863;\n"
    "	mad.f32 	%f3915, %f3914, %f3908, %f3913;\n"
    "	mov.f32 	%f3916, %f3915;\n"
    "	mov.f32 	%f3917, %f3844;\n"
    "	mad.f32 	%f3918, %f3871, %f3908, %f3917;\n"
    "	mov.f32 	%f3919, %f3918;\n"
    "	ld.shared.s32 	%r130, [%rd14+844];\n"
    "	add.s32 	%r131, %r130, %r6;\n"
    "	ld.shared.f32 	%f3920, [%rd15+832];\n"
    "	sub.f32 	%f3921, %f19, %f3920;\n"
    "	mov.f32 	%f3922, %f3921;\n"
    "	mul.f32 	%f3923, %f14, %f3922;\n"
    "	cvt.rni.f32.f32 	%f3924, %f3923;\n"
    "	mul.f32 	%f3925, %f13, %f3924;\n"
    "	sub.f32 	%f3926, %f3921, %f3925;\n"
    "	mov.f32 	%f3927, %f3926;\n"
    "	mov.f32 	%f3928, 0f00000000;  	// 0\n"
    "	mad.f32 	%f3929, %f3926, %f3926, %f3928;\n"
    "	ld.shared.f32 	%f3930, [%rd15+836];\n"
    "	sub.f32 	%f3931, %f18, %f3930;\n"
    "	mov.f32 	%f3932, %f3931;\n"
    "	mov.f32 	%f3933, %f3932;\n"
    "	mul.f32 	%f3934, %f14, %f3932;\n"
    "	cvt.rni.f32.f32 	%f3935, %f3934;\n"
    "	mul.f32 	%f3936, %f13, %f3935;\n"
    "	sub.f32 	%f3937, %f3931, %f3936;\n"
    "	mov.f32 	%f3938, %f3937;\n"
    "	mad.f32 	%f3939, %f3937, %f3937, %f3929;\n"
    "	ld.shared.f32 	%f3940, [%rd15+840];\n"
    "	sub.f32 	%f3941, %f11, %f3940;\n"
    "	mov.f32 	%f3942, %f3941;\n"
    "	mul.f32 	%f3943, %f3941, %f14;\n"
    "	cvt.rni.f32.f32 	%f3944, %f3943;\n"
    "	mul.f32 	%f3945, %f13, %f3944;\n"
    "	sub.f32 	%f3946, %f3941, %f3945;\n"
    "	mov.f32 	%f3947, %f3946;\n"
    "	mad.f32 	%f3948, %f3946, %f3946, %f3939;\n"
    "	mov.f32 	%f3949, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p54, %f3948, %f3949;\n"
    "	sqrt.approx.f32 	%f3950, %f3948;\n"
    "	rcp.approx.f32 	%f3951, %f3950;\n"
    "	cvt.s64.s32 	%rd172, %r131;\n"
    "	mul.wide.s32 	%rd173, %r131, 24;\n"
    "	add.u64 	%rd174, %rd9, %rd173;\n"
    "	mul.f32 	%f3952, %f3951, %f3951;\n"
    "	ld.const.f32 	%f3953, [%rd174+12];\n"
    "	ld.const.f32 	%f3954, [%rd174+8];\n"
    "	ld.const.f32 	%f3955, [%rd174+4];\n"
    "	ld.const.f32 	%f3956, [%rd174+0];\n"
    "	ld.const.f32 	%f3957, [%rd174+16];\n"
    "	ld.const.f32 	%f3958, [%rd174+20];\n"
    "	mul.f32 	%f3959, %f3952, %f3952;\n"
    "	mul.f32 	%f3960, %f3951, %f3952;\n"
    "	mov.f32 	%f3961, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f3962, %f3953, %f3961;\n"
    "	sub.f32 	%f3963, %f3955, %f3950;\n"
    "	mov.f32 	%f3964, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f3965, %f3956, %f3964;\n"
    "	mov.f32 	%f3966, 0f41000000;  	// 8\n"
    "	mul.f32 	%f3967, %f3957, %f3966;\n"
    "	mul.f32 	%f3968, %f3959, %f3959;\n"
    "	mul.f32 	%f3969, %f3954, %f3963;\n"
    "	mul.f32 	%f3970, %f3962, %f3968;\n"
    "	mul.f32 	%f3971, %f3967, %f3968;\n"
    "	mov.f32 	%f3972, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f3973, %f3969, %f3972;\n"
    "	ex2.approx.f32 	%f3974, %f3973;\n"
    "	mul.f32 	%f3975, %f3965, %f3974;\n"
    "	mul.f32 	%f3976, %f3954, %f3975;\n"
    "	mul.f32 	%f3977, %f3951, %f3976;\n"
    "	sub.f32 	%f3978, %f3977, %f3970;\n"
    "	mul.f32 	%f3979, %f3952, %f3971;\n"
    "	sub.f32 	%f3980, %f3978, %f3979;\n"
    "	mad.f32 	%f3981, %f3958, %f3960, %f3980;\n"
    "	mov.f32 	%f3982, 0f00000000;  	// 0\n"
    "	selp.f32 	%f3983, %f3982, %f3981, %p54;\n"
    "	mov.f32 	%f3984, %f3912;\n"
    "	mov.f32 	%f3985, %f3927;\n"
    "	mad.f32 	%f3986, %f3985, %f3983, %f3984;\n"
    "	mov.f32 	%f3987, %f3986;\n"
    "	mov.f32 	%f3988, %f3916;\n"
    "	mov.f32 	%f3989, %f3938;\n"
    "	mad.f32 	%f3990, %f3989, %f3983, %f3988;\n"
    "	mov.f32 	%f3991, %f3990;\n"
    "	mov.f32 	%f3992, %f3919;\n"
    "	mad.f32 	%f3993, %f3946, %f3983, %f3992;\n"
    "	mov.f32 	%f3994, %f3993;\n"
    "	ld.shared.s32 	%r132, [%rd14+860];\n"
    "	add.s32 	%r133, %r132, %r6;\n"
    "	ld.shared.f32 	%f3995, [%rd15+848];\n"
    "	sub.f32 	%f3996, %f19, %f3995;\n"
    "	mov.f32 	%f3997, %f3996;\n"
    "	mul.f32 	%f3998, %f14, %f3997;\n"
    "	cvt.rni.f32.f32 	%f3999, %f3998;\n"
    "	mul.f32 	%f4000, %f13, %f3999;\n"
    "	sub.f32 	%f4001, %f3996, %f4000;\n"
    "	mov.f32 	%f4002, %f4001;\n"
    "	mov.f32 	%f4003, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4004, %f4001, %f4001, %f4003;\n"
    "	ld.shared.f32 	%f4005, [%rd15+852];\n"
    "	sub.f32 	%f4006, %f18, %f4005;\n"
    "	mov.f32 	%f4007, %f4006;\n"
    "	mov.f32 	%f4008, %f4007;\n"
    "	mul.f32 	%f4009, %f14, %f4007;\n"
    "	cvt.rni.f32.f32 	%f4010, %f4009;\n"
    "	mul.f32 	%f4011, %f13, %f4010;\n"
    "	sub.f32 	%f4012, %f4006, %f4011;\n"
    "	mov.f32 	%f4013, %f4012;\n"
    "	mad.f32 	%f4014, %f4012, %f4012, %f4004;\n"
    "	ld.shared.f32 	%f4015, [%rd15+856];\n"
    "	sub.f32 	%f4016, %f11, %f4015;\n"
    "	mov.f32 	%f4017, %f4016;\n"
    "	mul.f32 	%f4018, %f4016, %f14;\n"
    "	cvt.rni.f32.f32 	%f4019, %f4018;\n"
    "	mul.f32 	%f4020, %f13, %f4019;\n"
    "	sub.f32 	%f4021, %f4016, %f4020;\n"
    "	mov.f32 	%f4022, %f4021;\n"
    "	mad.f32 	%f4023, %f4021, %f4021, %f4014;\n"
    "	mov.f32 	%f4024, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p55, %f4023, %f4024;\n"
    "	sqrt.approx.f32 	%f4025, %f4023;\n"
    "	rcp.approx.f32 	%f4026, %f4025;\n"
    "	cvt.s64.s32 	%rd175, %r133;\n"
    "	mul.wide.s32 	%rd176, %r133, 24;\n"
    "	add.u64 	%rd177, %rd9, %rd176;\n"
    "	mul.f32 	%f4027, %f4026, %f4026;\n"
    "	ld.const.f32 	%f4028, [%rd177+12];\n"
    "	ld.const.f32 	%f4029, [%rd177+8];\n"
    "	ld.const.f32 	%f4030, [%rd177+4];\n"
    "	ld.const.f32 	%f4031, [%rd177+0];\n"
    "	ld.const.f32 	%f4032, [%rd177+16];\n"
    "	ld.const.f32 	%f4033, [%rd177+20];\n"
    "	mul.f32 	%f4034, %f4027, %f4027;\n"
    "	mul.f32 	%f4035, %f4026, %f4027;\n"
    "	mov.f32 	%f4036, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4037, %f4028, %f4036;\n"
    "	sub.f32 	%f4038, %f4030, %f4025;\n"
    "	mov.f32 	%f4039, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4040, %f4031, %f4039;\n"
    "	mov.f32 	%f4041, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4042, %f4032, %f4041;\n"
    "	mul.f32 	%f4043, %f4034, %f4034;\n"
    "	mul.f32 	%f4044, %f4029, %f4038;\n"
    "	mul.f32 	%f4045, %f4037, %f4043;\n"
    "	mul.f32 	%f4046, %f4042, %f4043;\n"
    "	mov.f32 	%f4047, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4048, %f4044, %f4047;\n"
    "	ex2.approx.f32 	%f4049, %f4048;\n"
    "	mul.f32 	%f4050, %f4040, %f4049;\n"
    "	mul.f32 	%f4051, %f4029, %f4050;\n"
    "	mul.f32 	%f4052, %f4026, %f4051;\n"
    "	sub.f32 	%f4053, %f4052, %f4045;\n"
    "	mul.f32 	%f4054, %f4027, %f4046;\n"
    "	sub.f32 	%f4055, %f4053, %f4054;\n"
    "	mad.f32 	%f4056, %f4033, %f4035, %f4055;\n"
    "	mov.f32 	%f4057, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4058, %f4057, %f4056, %p55;\n"
    "	mov.f32 	%f4059, %f3987;\n"
    "	mov.f32 	%f4060, %f4002;\n"
    "	mad.f32 	%f4061, %f4060, %f4058, %f4059;\n"
    "	mov.f32 	%f4062, %f4061;\n"
    "	mov.f32 	%f4063, %f3991;\n"
    "	mov.f32 	%f4064, %f4013;\n"
    "	mad.f32 	%f4065, %f4064, %f4058, %f4063;\n"
    "	mov.f32 	%f4066, %f4065;\n"
    "	mov.f32 	%f4067, %f3994;\n"
    "	mad.f32 	%f4068, %f4021, %f4058, %f4067;\n"
    "	mov.f32 	%f4069, %f4068;\n"
    "	ld.shared.s32 	%r134, [%rd14+876];\n"
    "	add.s32 	%r135, %r134, %r6;\n"
    "	ld.shared.f32 	%f4070, [%rd15+864];\n"
    "	sub.f32 	%f4071, %f19, %f4070;\n"
    "	mov.f32 	%f4072, %f4071;\n"
    "	mul.f32 	%f4073, %f14, %f4072;\n"
    "	cvt.rni.f32.f32 	%f4074, %f4073;\n"
    "	mul.f32 	%f4075, %f13, %f4074;\n"
    "	sub.f32 	%f4076, %f4071, %f4075;\n"
    "	mov.f32 	%f4077, %f4076;\n"
    "	mov.f32 	%f4078, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4079, %f4076, %f4076, %f4078;\n"
    "	ld.shared.f32 	%f4080, [%rd15+868];\n"
    "	sub.f32 	%f4081, %f18, %f4080;\n"
    "	mov.f32 	%f4082, %f4081;\n"
    "	mov.f32 	%f4083, %f4082;\n"
    "	mul.f32 	%f4084, %f14, %f4082;\n"
    "	cvt.rni.f32.f32 	%f4085, %f4084;\n"
    "	mul.f32 	%f4086, %f13, %f4085;\n"
    "	sub.f32 	%f4087, %f4081, %f4086;\n"
    "	mov.f32 	%f4088, %f4087;\n"
    "	mad.f32 	%f4089, %f4087, %f4087, %f4079;\n"
    "	ld.shared.f32 	%f4090, [%rd15+872];\n"
    "	sub.f32 	%f4091, %f11, %f4090;\n"
    "	mov.f32 	%f4092, %f4091;\n"
    "	mul.f32 	%f4093, %f4091, %f14;\n"
    "	cvt.rni.f32.f32 	%f4094, %f4093;\n"
    "	mul.f32 	%f4095, %f13, %f4094;\n"
    "	sub.f32 	%f4096, %f4091, %f4095;\n"
    "	mov.f32 	%f4097, %f4096;\n"
    "	mad.f32 	%f4098, %f4096, %f4096, %f4089;\n"
    "	mov.f32 	%f4099, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p56, %f4098, %f4099;\n"
    "	sqrt.approx.f32 	%f4100, %f4098;\n"
    "	rcp.approx.f32 	%f4101, %f4100;\n"
    "	cvt.s64.s32 	%rd178, %r135;\n"
    "	mul.wide.s32 	%rd179, %r135, 24;\n"
    "	add.u64 	%rd180, %rd9, %rd179;\n"
    "	mul.f32 	%f4102, %f4101, %f4101;\n"
    "	ld.const.f32 	%f4103, [%rd180+12];\n"
    "	ld.const.f32 	%f4104, [%rd180+8];\n"
    "	ld.const.f32 	%f4105, [%rd180+4];\n"
    "	ld.const.f32 	%f4106, [%rd180+0];\n"
    "	ld.const.f32 	%f4107, [%rd180+16];\n"
    "	ld.const.f32 	%f4108, [%rd180+20];\n"
    "	mul.f32 	%f4109, %f4102, %f4102;\n"
    "	mul.f32 	%f4110, %f4101, %f4102;\n"
    "	mov.f32 	%f4111, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4112, %f4103, %f4111;\n"
    "	sub.f32 	%f4113, %f4105, %f4100;\n"
    "	mov.f32 	%f4114, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4115, %f4106, %f4114;\n"
    "	mov.f32 	%f4116, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4117, %f4107, %f4116;\n"
    "	mul.f32 	%f4118, %f4109, %f4109;\n"
    "	mul.f32 	%f4119, %f4104, %f4113;\n"
    "	mul.f32 	%f4120, %f4112, %f4118;\n"
    "	mul.f32 	%f4121, %f4117, %f4118;\n"
    "	mov.f32 	%f4122, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4123, %f4119, %f4122;\n"
    "	ex2.approx.f32 	%f4124, %f4123;\n"
    "	mul.f32 	%f4125, %f4115, %f4124;\n"
    "	mul.f32 	%f4126, %f4104, %f4125;\n"
    "	mul.f32 	%f4127, %f4101, %f4126;\n"
    "	sub.f32 	%f4128, %f4127, %f4120;\n"
    "	mul.f32 	%f4129, %f4102, %f4121;\n"
    "	sub.f32 	%f4130, %f4128, %f4129;\n"
    "	mad.f32 	%f4131, %f4108, %f4110, %f4130;\n"
    "	mov.f32 	%f4132, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4133, %f4132, %f4131, %p56;\n"
    "	mov.f32 	%f4134, %f4062;\n"
    "	mov.f32 	%f4135, %f4077;\n"
    "	mad.f32 	%f4136, %f4135, %f4133, %f4134;\n"
    "	mov.f32 	%f4137, %f4136;\n"
    "	mov.f32 	%f4138, %f4066;\n"
    "	mov.f32 	%f4139, %f4088;\n"
    "	mad.f32 	%f4140, %f4139, %f4133, %f4138;\n"
    "	mov.f32 	%f4141, %f4140;\n"
    "	mov.f32 	%f4142, %f4069;\n"
    "	mad.f32 	%f4143, %f4096, %f4133, %f4142;\n"
    "	mov.f32 	%f4144, %f4143;\n"
    "	ld.shared.s32 	%r136, [%rd14+892];\n"
    "	add.s32 	%r137, %r136, %r6;\n"
    "	ld.shared.f32 	%f4145, [%rd15+880];\n"
    "	sub.f32 	%f4146, %f19, %f4145;\n"
    "	mov.f32 	%f4147, %f4146;\n"
    "	mul.f32 	%f4148, %f14, %f4147;\n"
    "	cvt.rni.f32.f32 	%f4149, %f4148;\n"
    "	mul.f32 	%f4150, %f13, %f4149;\n"
    "	sub.f32 	%f4151, %f4146, %f4150;\n"
    "	mov.f32 	%f4152, %f4151;\n"
    "	mov.f32 	%f4153, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4154, %f4151, %f4151, %f4153;\n"
    "	ld.shared.f32 	%f4155, [%rd15+884];\n"
    "	sub.f32 	%f4156, %f18, %f4155;\n"
    "	mov.f32 	%f4157, %f4156;\n"
    "	mov.f32 	%f4158, %f4157;\n"
    "	mul.f32 	%f4159, %f14, %f4157;\n"
    "	cvt.rni.f32.f32 	%f4160, %f4159;\n"
    "	mul.f32 	%f4161, %f13, %f4160;\n"
    "	sub.f32 	%f4162, %f4156, %f4161;\n"
    "	mov.f32 	%f4163, %f4162;\n"
    "	mad.f32 	%f4164, %f4162, %f4162, %f4154;\n"
    "	ld.shared.f32 	%f4165, [%rd15+888];\n"
    "	sub.f32 	%f4166, %f11, %f4165;\n"
    "	mov.f32 	%f4167, %f4166;\n"
    "	mul.f32 	%f4168, %f4166, %f14;\n"
    "	cvt.rni.f32.f32 	%f4169, %f4168;\n"
    "	mul.f32 	%f4170, %f13, %f4169;\n"
    "	sub.f32 	%f4171, %f4166, %f4170;\n"
    "	mov.f32 	%f4172, %f4171;\n"
    "	mad.f32 	%f4173, %f4171, %f4171, %f4164;\n"
    "	mov.f32 	%f4174, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p57, %f4173, %f4174;\n"
    "	sqrt.approx.f32 	%f4175, %f4173;\n"
    "	rcp.approx.f32 	%f4176, %f4175;\n"
    "	cvt.s64.s32 	%rd181, %r137;\n"
    "	mul.wide.s32 	%rd182, %r137, 24;\n"
    "	add.u64 	%rd183, %rd9, %rd182;\n"
    "	mul.f32 	%f4177, %f4176, %f4176;\n"
    "	ld.const.f32 	%f4178, [%rd183+12];\n"
    "	ld.const.f32 	%f4179, [%rd183+8];\n"
    "	ld.const.f32 	%f4180, [%rd183+4];\n"
    "	ld.const.f32 	%f4181, [%rd183+0];\n"
    "	ld.const.f32 	%f4182, [%rd183+16];\n"
    "	ld.const.f32 	%f4183, [%rd183+20];\n"
    "	mul.f32 	%f4184, %f4177, %f4177;\n"
    "	mul.f32 	%f4185, %f4176, %f4177;\n"
    "	mov.f32 	%f4186, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4187, %f4178, %f4186;\n"
    "	sub.f32 	%f4188, %f4180, %f4175;\n"
    "	mov.f32 	%f4189, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4190, %f4181, %f4189;\n"
    "	mov.f32 	%f4191, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4192, %f4182, %f4191;\n"
    "	mul.f32 	%f4193, %f4184, %f4184;\n"
    "	mul.f32 	%f4194, %f4179, %f4188;\n"
    "	mul.f32 	%f4195, %f4187, %f4193;\n"
    "	mul.f32 	%f4196, %f4192, %f4193;\n"
    "	mov.f32 	%f4197, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4198, %f4194, %f4197;\n"
    "	ex2.approx.f32 	%f4199, %f4198;\n"
    "	mul.f32 	%f4200, %f4190, %f4199;\n"
    "	mul.f32 	%f4201, %f4179, %f4200;\n"
    "	mul.f32 	%f4202, %f4176, %f4201;\n"
    "	sub.f32 	%f4203, %f4202, %f4195;\n"
    "	mul.f32 	%f4204, %f4177, %f4196;\n"
    "	sub.f32 	%f4205, %f4203, %f4204;\n"
    "	mad.f32 	%f4206, %f4183, %f4185, %f4205;\n"
    "	mov.f32 	%f4207, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4208, %f4207, %f4206, %p57;\n"
    "	mov.f32 	%f4209, %f4137;\n"
    "	mov.f32 	%f4210, %f4152;\n"
    "	mad.f32 	%f4211, %f4210, %f4208, %f4209;\n"
    "	mov.f32 	%f4212, %f4211;\n"
    "	mov.f32 	%f4213, %f4141;\n"
    "	mov.f32 	%f4214, %f4163;\n"
    "	mad.f32 	%f4215, %f4214, %f4208, %f4213;\n"
    "	mov.f32 	%f4216, %f4215;\n"
    "	mov.f32 	%f4217, %f4144;\n"
    "	mad.f32 	%f4218, %f4171, %f4208, %f4217;\n"
    "	mov.f32 	%f4219, %f4218;\n"
    "	ld.shared.s32 	%r138, [%rd14+908];\n"
    "	add.s32 	%r139, %r138, %r6;\n"
    "	ld.shared.f32 	%f4220, [%rd15+896];\n"
    "	sub.f32 	%f4221, %f19, %f4220;\n"
    "	mov.f32 	%f4222, %f4221;\n"
    "	mul.f32 	%f4223, %f14, %f4222;\n"
    "	cvt.rni.f32.f32 	%f4224, %f4223;\n"
    "	mul.f32 	%f4225, %f13, %f4224;\n"
    "	sub.f32 	%f4226, %f4221, %f4225;\n"
    "	mov.f32 	%f4227, %f4226;\n"
    "	mov.f32 	%f4228, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4229, %f4226, %f4226, %f4228;\n"
    "	ld.shared.f32 	%f4230, [%rd15+900];\n"
    "	sub.f32 	%f4231, %f18, %f4230;\n"
    "	mov.f32 	%f4232, %f4231;\n"
    "	mov.f32 	%f4233, %f4232;\n"
    "	mul.f32 	%f4234, %f14, %f4232;\n"
    "	cvt.rni.f32.f32 	%f4235, %f4234;\n"
    "	mul.f32 	%f4236, %f13, %f4235;\n"
    "	sub.f32 	%f4237, %f4231, %f4236;\n"
    "	mov.f32 	%f4238, %f4237;\n"
    "	mad.f32 	%f4239, %f4237, %f4237, %f4229;\n"
    "	ld.shared.f32 	%f4240, [%rd15+904];\n"
    "	sub.f32 	%f4241, %f11, %f4240;\n"
    "	mov.f32 	%f4242, %f4241;\n"
    "	mul.f32 	%f4243, %f4241, %f14;\n"
    "	cvt.rni.f32.f32 	%f4244, %f4243;\n"
    "	mul.f32 	%f4245, %f13, %f4244;\n"
    "	sub.f32 	%f4246, %f4241, %f4245;\n"
    "	mov.f32 	%f4247, %f4246;\n"
    "	mad.f32 	%f4248, %f4246, %f4246, %f4239;\n"
    "	mov.f32 	%f4249, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p58, %f4248, %f4249;\n"
    "	sqrt.approx.f32 	%f4250, %f4248;\n"
    "	rcp.approx.f32 	%f4251, %f4250;\n"
    "	cvt.s64.s32 	%rd184, %r139;\n"
    "	mul.wide.s32 	%rd185, %r139, 24;\n"
    "	add.u64 	%rd186, %rd9, %rd185;\n"
    "	mul.f32 	%f4252, %f4251, %f4251;\n"
    "	ld.const.f32 	%f4253, [%rd186+12];\n"
    "	ld.const.f32 	%f4254, [%rd186+8];\n"
    "	ld.const.f32 	%f4255, [%rd186+4];\n"
    "	ld.const.f32 	%f4256, [%rd186+0];\n"
    "	ld.const.f32 	%f4257, [%rd186+16];\n"
    "	ld.const.f32 	%f4258, [%rd186+20];\n"
    "	mul.f32 	%f4259, %f4252, %f4252;\n"
    "	mul.f32 	%f4260, %f4251, %f4252;\n"
    "	mov.f32 	%f4261, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4262, %f4253, %f4261;\n"
    "	sub.f32 	%f4263, %f4255, %f4250;\n"
    "	mov.f32 	%f4264, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4265, %f4256, %f4264;\n"
    "	mov.f32 	%f4266, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4267, %f4257, %f4266;\n"
    "	mul.f32 	%f4268, %f4259, %f4259;\n"
    "	mul.f32 	%f4269, %f4254, %f4263;\n"
    "	mul.f32 	%f4270, %f4262, %f4268;\n"
    "	mul.f32 	%f4271, %f4267, %f4268;\n"
    "	mov.f32 	%f4272, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4273, %f4269, %f4272;\n"
    "	ex2.approx.f32 	%f4274, %f4273;\n"
    "	mul.f32 	%f4275, %f4265, %f4274;\n"
    "	mul.f32 	%f4276, %f4254, %f4275;\n"
    "	mul.f32 	%f4277, %f4251, %f4276;\n"
    "	sub.f32 	%f4278, %f4277, %f4270;\n"
    "	mul.f32 	%f4279, %f4252, %f4271;\n"
    "	sub.f32 	%f4280, %f4278, %f4279;\n"
    "	mad.f32 	%f4281, %f4258, %f4260, %f4280;\n"
    "	mov.f32 	%f4282, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4283, %f4282, %f4281, %p58;\n"
    "	mov.f32 	%f4284, %f4212;\n"
    "	mov.f32 	%f4285, %f4227;\n"
    "	mad.f32 	%f4286, %f4285, %f4283, %f4284;\n"
    "	mov.f32 	%f4287, %f4286;\n"
    "	mov.f32 	%f4288, %f4216;\n"
    "	mov.f32 	%f4289, %f4238;\n"
    "	mad.f32 	%f4290, %f4289, %f4283, %f4288;\n"
    "	mov.f32 	%f4291, %f4290;\n"
    "	mov.f32 	%f4292, %f4219;\n"
    "	mad.f32 	%f4293, %f4246, %f4283, %f4292;\n"
    "	mov.f32 	%f4294, %f4293;\n"
    "	ld.shared.s32 	%r140, [%rd14+924];\n"
    "	add.s32 	%r141, %r140, %r6;\n"
    "	ld.shared.f32 	%f4295, [%rd15+912];\n"
    "	sub.f32 	%f4296, %f19, %f4295;\n"
    "	mov.f32 	%f4297, %f4296;\n"
    "	mul.f32 	%f4298, %f14, %f4297;\n"
    "	cvt.rni.f32.f32 	%f4299, %f4298;\n"
    "	mul.f32 	%f4300, %f13, %f4299;\n"
    "	sub.f32 	%f4301, %f4296, %f4300;\n"
    "	mov.f32 	%f4302, %f4301;\n"
    "	mov.f32 	%f4303, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4304, %f4301, %f4301, %f4303;\n"
    "	ld.shared.f32 	%f4305, [%rd15+916];\n"
    "	sub.f32 	%f4306, %f18, %f4305;\n"
    "	mov.f32 	%f4307, %f4306;\n"
    "	mov.f32 	%f4308, %f4307;\n"
    "	mul.f32 	%f4309, %f14, %f4307;\n"
    "	cvt.rni.f32.f32 	%f4310, %f4309;\n"
    "	mul.f32 	%f4311, %f13, %f4310;\n"
    "	sub.f32 	%f4312, %f4306, %f4311;\n"
    "	mov.f32 	%f4313, %f4312;\n"
    "	mad.f32 	%f4314, %f4312, %f4312, %f4304;\n"
    "	ld.shared.f32 	%f4315, [%rd15+920];\n"
    "	sub.f32 	%f4316, %f11, %f4315;\n"
    "	mov.f32 	%f4317, %f4316;\n"
    "	mul.f32 	%f4318, %f4316, %f14;\n"
    "	cvt.rni.f32.f32 	%f4319, %f4318;\n"
    "	mul.f32 	%f4320, %f13, %f4319;\n"
    "	sub.f32 	%f4321, %f4316, %f4320;\n"
    "	mov.f32 	%f4322, %f4321;\n"
    "	mad.f32 	%f4323, %f4321, %f4321, %f4314;\n"
    "	mov.f32 	%f4324, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p59, %f4323, %f4324;\n"
    "	sqrt.approx.f32 	%f4325, %f4323;\n"
    "	rcp.approx.f32 	%f4326, %f4325;\n"
    "	cvt.s64.s32 	%rd187, %r141;\n"
    "	mul.wide.s32 	%rd188, %r141, 24;\n"
    "	add.u64 	%rd189, %rd9, %rd188;\n"
    "	mul.f32 	%f4327, %f4326, %f4326;\n"
    "	ld.const.f32 	%f4328, [%rd189+12];\n"
    "	ld.const.f32 	%f4329, [%rd189+8];\n"
    "	ld.const.f32 	%f4330, [%rd189+4];\n"
    "	ld.const.f32 	%f4331, [%rd189+0];\n"
    "	ld.const.f32 	%f4332, [%rd189+16];\n"
    "	ld.const.f32 	%f4333, [%rd189+20];\n"
    "	mul.f32 	%f4334, %f4327, %f4327;\n"
    "	mul.f32 	%f4335, %f4326, %f4327;\n"
    "	mov.f32 	%f4336, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4337, %f4328, %f4336;\n"
    "	sub.f32 	%f4338, %f4330, %f4325;\n"
    "	mov.f32 	%f4339, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4340, %f4331, %f4339;\n"
    "	mov.f32 	%f4341, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4342, %f4332, %f4341;\n"
    "	mul.f32 	%f4343, %f4334, %f4334;\n"
    "	mul.f32 	%f4344, %f4329, %f4338;\n"
    "	mul.f32 	%f4345, %f4337, %f4343;\n"
    "	mul.f32 	%f4346, %f4342, %f4343;\n"
    "	mov.f32 	%f4347, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4348, %f4344, %f4347;\n"
    "	ex2.approx.f32 	%f4349, %f4348;\n"
    "	mul.f32 	%f4350, %f4340, %f4349;\n"
    "	mul.f32 	%f4351, %f4329, %f4350;\n"
    "	mul.f32 	%f4352, %f4326, %f4351;\n"
    "	sub.f32 	%f4353, %f4352, %f4345;\n"
    "	mul.f32 	%f4354, %f4327, %f4346;\n"
    "	sub.f32 	%f4355, %f4353, %f4354;\n"
    "	mad.f32 	%f4356, %f4333, %f4335, %f4355;\n"
    "	mov.f32 	%f4357, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4358, %f4357, %f4356, %p59;\n"
    "	mov.f32 	%f4359, %f4287;\n"
    "	mov.f32 	%f4360, %f4302;\n"
    "	mad.f32 	%f4361, %f4360, %f4358, %f4359;\n"
    "	mov.f32 	%f4362, %f4361;\n"
    "	mov.f32 	%f4363, %f4291;\n"
    "	mov.f32 	%f4364, %f4313;\n"
    "	mad.f32 	%f4365, %f4364, %f4358, %f4363;\n"
    "	mov.f32 	%f4366, %f4365;\n"
    "	mov.f32 	%f4367, %f4294;\n"
    "	mad.f32 	%f4368, %f4321, %f4358, %f4367;\n"
    "	mov.f32 	%f4369, %f4368;\n"
    "	ld.shared.s32 	%r142, [%rd14+940];\n"
    "	add.s32 	%r143, %r142, %r6;\n"
    "	ld.shared.f32 	%f4370, [%rd15+928];\n"
    "	sub.f32 	%f4371, %f19, %f4370;\n"
    "	mov.f32 	%f4372, %f4371;\n"
    "	mul.f32 	%f4373, %f14, %f4372;\n"
    "	cvt.rni.f32.f32 	%f4374, %f4373;\n"
    "	mul.f32 	%f4375, %f13, %f4374;\n"
    "	sub.f32 	%f4376, %f4371, %f4375;\n"
    "	mov.f32 	%f4377, %f4376;\n"
    "	mov.f32 	%f4378, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4379, %f4376, %f4376, %f4378;\n"
    "	ld.shared.f32 	%f4380, [%rd15+932];\n"
    "	sub.f32 	%f4381, %f18, %f4380;\n"
    "	mov.f32 	%f4382, %f4381;\n"
    "	mov.f32 	%f4383, %f4382;\n"
    "	mul.f32 	%f4384, %f14, %f4382;\n"
    "	cvt.rni.f32.f32 	%f4385, %f4384;\n"
    "	mul.f32 	%f4386, %f13, %f4385;\n"
    "	sub.f32 	%f4387, %f4381, %f4386;\n"
    "	mov.f32 	%f4388, %f4387;\n"
    "	mad.f32 	%f4389, %f4387, %f4387, %f4379;\n"
    "	ld.shared.f32 	%f4390, [%rd15+936];\n"
    "	sub.f32 	%f4391, %f11, %f4390;\n"
    "	mov.f32 	%f4392, %f4391;\n"
    "	mul.f32 	%f4393, %f4391, %f14;\n"
    "	cvt.rni.f32.f32 	%f4394, %f4393;\n"
    "	mul.f32 	%f4395, %f13, %f4394;\n"
    "	sub.f32 	%f4396, %f4391, %f4395;\n"
    "	mov.f32 	%f4397, %f4396;\n"
    "	mad.f32 	%f4398, %f4396, %f4396, %f4389;\n"
    "	mov.f32 	%f4399, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p60, %f4398, %f4399;\n"
    "	sqrt.approx.f32 	%f4400, %f4398;\n"
    "	rcp.approx.f32 	%f4401, %f4400;\n"
    "	cvt.s64.s32 	%rd190, %r143;\n"
    "	mul.wide.s32 	%rd191, %r143, 24;\n"
    "	add.u64 	%rd192, %rd9, %rd191;\n"
    "	mul.f32 	%f4402, %f4401, %f4401;\n"
    "	ld.const.f32 	%f4403, [%rd192+12];\n"
    "	ld.const.f32 	%f4404, [%rd192+8];\n"
    "	ld.const.f32 	%f4405, [%rd192+4];\n"
    "	ld.const.f32 	%f4406, [%rd192+0];\n"
    "	ld.const.f32 	%f4407, [%rd192+16];\n"
    "	ld.const.f32 	%f4408, [%rd192+20];\n"
    "	mul.f32 	%f4409, %f4402, %f4402;\n"
    "	mul.f32 	%f4410, %f4401, %f4402;\n"
    "	mov.f32 	%f4411, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4412, %f4403, %f4411;\n"
    "	sub.f32 	%f4413, %f4405, %f4400;\n"
    "	mov.f32 	%f4414, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4415, %f4406, %f4414;\n"
    "	mov.f32 	%f4416, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4417, %f4407, %f4416;\n"
    "	mul.f32 	%f4418, %f4409, %f4409;\n"
    "	mul.f32 	%f4419, %f4404, %f4413;\n"
    "	mul.f32 	%f4420, %f4412, %f4418;\n"
    "	mul.f32 	%f4421, %f4417, %f4418;\n"
    "	mov.f32 	%f4422, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4423, %f4419, %f4422;\n"
    "	ex2.approx.f32 	%f4424, %f4423;\n"
    "	mul.f32 	%f4425, %f4415, %f4424;\n"
    "	mul.f32 	%f4426, %f4404, %f4425;\n"
    "	mul.f32 	%f4427, %f4401, %f4426;\n"
    "	sub.f32 	%f4428, %f4427, %f4420;\n"
    "	mul.f32 	%f4429, %f4402, %f4421;\n"
    "	sub.f32 	%f4430, %f4428, %f4429;\n"
    "	mad.f32 	%f4431, %f4408, %f4410, %f4430;\n"
    "	mov.f32 	%f4432, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4433, %f4432, %f4431, %p60;\n"
    "	mov.f32 	%f4434, %f4362;\n"
    "	mov.f32 	%f4435, %f4377;\n"
    "	mad.f32 	%f4436, %f4435, %f4433, %f4434;\n"
    "	mov.f32 	%f4437, %f4436;\n"
    "	mov.f32 	%f4438, %f4366;\n"
    "	mov.f32 	%f4439, %f4388;\n"
    "	mad.f32 	%f4440, %f4439, %f4433, %f4438;\n"
    "	mov.f32 	%f4441, %f4440;\n"
    "	mov.f32 	%f4442, %f4369;\n"
    "	mad.f32 	%f4443, %f4396, %f4433, %f4442;\n"
    "	mov.f32 	%f4444, %f4443;\n"
    "	ld.shared.s32 	%r144, [%rd14+956];\n"
    "	add.s32 	%r145, %r144, %r6;\n"
    "	ld.shared.f32 	%f4445, [%rd15+944];\n"
    "	sub.f32 	%f4446, %f19, %f4445;\n"
    "	mov.f32 	%f4447, %f4446;\n"
    "	mul.f32 	%f4448, %f14, %f4447;\n"
    "	cvt.rni.f32.f32 	%f4449, %f4448;\n"
    "	mul.f32 	%f4450, %f13, %f4449;\n"
    "	sub.f32 	%f4451, %f4446, %f4450;\n"
    "	mov.f32 	%f4452, %f4451;\n"
    "	mov.f32 	%f4453, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4454, %f4451, %f4451, %f4453;\n"
    "	ld.shared.f32 	%f4455, [%rd15+948];\n"
    "	sub.f32 	%f4456, %f18, %f4455;\n"
    "	mov.f32 	%f4457, %f4456;\n"
    "	mov.f32 	%f4458, %f4457;\n"
    "	mul.f32 	%f4459, %f14, %f4457;\n"
    "	cvt.rni.f32.f32 	%f4460, %f4459;\n"
    "	mul.f32 	%f4461, %f13, %f4460;\n"
    "	sub.f32 	%f4462, %f4456, %f4461;\n"
    "	mov.f32 	%f4463, %f4462;\n"
    "	mad.f32 	%f4464, %f4462, %f4462, %f4454;\n"
    "	ld.shared.f32 	%f4465, [%rd15+952];\n"
    "	sub.f32 	%f4466, %f11, %f4465;\n"
    "	mov.f32 	%f4467, %f4466;\n"
    "	mul.f32 	%f4468, %f4466, %f14;\n"
    "	cvt.rni.f32.f32 	%f4469, %f4468;\n"
    "	mul.f32 	%f4470, %f13, %f4469;\n"
    "	sub.f32 	%f4471, %f4466, %f4470;\n"
    "	mov.f32 	%f4472, %f4471;\n"
    "	mad.f32 	%f4473, %f4471, %f4471, %f4464;\n"
    "	mov.f32 	%f4474, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p61, %f4473, %f4474;\n"
    "	sqrt.approx.f32 	%f4475, %f4473;\n"
    "	rcp.approx.f32 	%f4476, %f4475;\n"
    "	cvt.s64.s32 	%rd193, %r145;\n"
    "	mul.wide.s32 	%rd194, %r145, 24;\n"
    "	add.u64 	%rd195, %rd9, %rd194;\n"
    "	mul.f32 	%f4477, %f4476, %f4476;\n"
    "	ld.const.f32 	%f4478, [%rd195+12];\n"
    "	ld.const.f32 	%f4479, [%rd195+8];\n"
    "	ld.const.f32 	%f4480, [%rd195+4];\n"
    "	ld.const.f32 	%f4481, [%rd195+0];\n"
    "	ld.const.f32 	%f4482, [%rd195+16];\n"
    "	ld.const.f32 	%f4483, [%rd195+20];\n"
    "	mul.f32 	%f4484, %f4477, %f4477;\n"
    "	mul.f32 	%f4485, %f4476, %f4477;\n"
    "	mov.f32 	%f4486, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4487, %f4478, %f4486;\n"
    "	sub.f32 	%f4488, %f4480, %f4475;\n"
    "	mov.f32 	%f4489, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4490, %f4481, %f4489;\n"
    "	mov.f32 	%f4491, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4492, %f4482, %f4491;\n"
    "	mul.f32 	%f4493, %f4484, %f4484;\n"
    "	mul.f32 	%f4494, %f4479, %f4488;\n"
    "	mul.f32 	%f4495, %f4487, %f4493;\n"
    "	mul.f32 	%f4496, %f4492, %f4493;\n"
    "	mov.f32 	%f4497, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4498, %f4494, %f4497;\n"
    "	ex2.approx.f32 	%f4499, %f4498;\n"
    "	mul.f32 	%f4500, %f4490, %f4499;\n"
    "	mul.f32 	%f4501, %f4479, %f4500;\n"
    "	mul.f32 	%f4502, %f4476, %f4501;\n"
    "	sub.f32 	%f4503, %f4502, %f4495;\n"
    "	mul.f32 	%f4504, %f4477, %f4496;\n"
    "	sub.f32 	%f4505, %f4503, %f4504;\n"
    "	mad.f32 	%f4506, %f4483, %f4485, %f4505;\n"
    "	mov.f32 	%f4507, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4508, %f4507, %f4506, %p61;\n"
    "	mov.f32 	%f4509, %f4437;\n"
    "	mov.f32 	%f4510, %f4452;\n"
    "	mad.f32 	%f4511, %f4510, %f4508, %f4509;\n"
    "	mov.f32 	%f4512, %f4511;\n"
    "	mov.f32 	%f4513, %f4441;\n"
    "	mov.f32 	%f4514, %f4463;\n"
    "	mad.f32 	%f4515, %f4514, %f4508, %f4513;\n"
    "	mov.f32 	%f4516, %f4515;\n"
    "	mov.f32 	%f4517, %f4444;\n"
    "	mad.f32 	%f4518, %f4471, %f4508, %f4517;\n"
    "	mov.f32 	%f4519, %f4518;\n"
    "	ld.shared.s32 	%r146, [%rd14+972];\n"
    "	add.s32 	%r147, %r146, %r6;\n"
    "	ld.shared.f32 	%f4520, [%rd15+960];\n"
    "	sub.f32 	%f4521, %f19, %f4520;\n"
    "	mov.f32 	%f4522, %f4521;\n"
    "	mul.f32 	%f4523, %f14, %f4522;\n"
    "	cvt.rni.f32.f32 	%f4524, %f4523;\n"
    "	mul.f32 	%f4525, %f13, %f4524;\n"
    "	sub.f32 	%f4526, %f4521, %f4525;\n"
    "	mov.f32 	%f4527, %f4526;\n"
    "	mov.f32 	%f4528, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4529, %f4526, %f4526, %f4528;\n"
    "	ld.shared.f32 	%f4530, [%rd15+964];\n"
    "	sub.f32 	%f4531, %f18, %f4530;\n"
    "	mov.f32 	%f4532, %f4531;\n"
    "	mov.f32 	%f4533, %f4532;\n"
    "	mul.f32 	%f4534, %f14, %f4532;\n"
    "	cvt.rni.f32.f32 	%f4535, %f4534;\n"
    "	mul.f32 	%f4536, %f13, %f4535;\n"
    "	sub.f32 	%f4537, %f4531, %f4536;\n"
    "	mov.f32 	%f4538, %f4537;\n"
    "	mad.f32 	%f4539, %f4537, %f4537, %f4529;\n"
    "	ld.shared.f32 	%f4540, [%rd15+968];\n"
    "	sub.f32 	%f4541, %f11, %f4540;\n"
    "	mov.f32 	%f4542, %f4541;\n"
    "	mul.f32 	%f4543, %f4541, %f14;\n"
    "	cvt.rni.f32.f32 	%f4544, %f4543;\n"
    "	mul.f32 	%f4545, %f13, %f4544;\n"
    "	sub.f32 	%f4546, %f4541, %f4545;\n"
    "	mov.f32 	%f4547, %f4546;\n"
    "	mad.f32 	%f4548, %f4546, %f4546, %f4539;\n"
    "	mov.f32 	%f4549, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p62, %f4548, %f4549;\n"
    "	sqrt.approx.f32 	%f4550, %f4548;\n"
    "	rcp.approx.f32 	%f4551, %f4550;\n"
    "	cvt.s64.s32 	%rd196, %r147;\n"
    "	mul.wide.s32 	%rd197, %r147, 24;\n"
    "	add.u64 	%rd198, %rd9, %rd197;\n"
    "	mul.f32 	%f4552, %f4551, %f4551;\n"
    "	ld.const.f32 	%f4553, [%rd198+12];\n"
    "	ld.const.f32 	%f4554, [%rd198+8];\n"
    "	ld.const.f32 	%f4555, [%rd198+4];\n"
    "	ld.const.f32 	%f4556, [%rd198+0];\n"
    "	ld.const.f32 	%f4557, [%rd198+16];\n"
    "	ld.const.f32 	%f4558, [%rd198+20];\n"
    "	mul.f32 	%f4559, %f4552, %f4552;\n"
    "	mul.f32 	%f4560, %f4551, %f4552;\n"
    "	mov.f32 	%f4561, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4562, %f4553, %f4561;\n"
    "	sub.f32 	%f4563, %f4555, %f4550;\n"
    "	mov.f32 	%f4564, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4565, %f4556, %f4564;\n"
    "	mov.f32 	%f4566, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4567, %f4557, %f4566;\n"
    "	mul.f32 	%f4568, %f4559, %f4559;\n"
    "	mul.f32 	%f4569, %f4554, %f4563;\n"
    "	mul.f32 	%f4570, %f4562, %f4568;\n"
    "	mul.f32 	%f4571, %f4567, %f4568;\n"
    "	mov.f32 	%f4572, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4573, %f4569, %f4572;\n"
    "	ex2.approx.f32 	%f4574, %f4573;\n"
    "	mul.f32 	%f4575, %f4565, %f4574;\n"
    "	mul.f32 	%f4576, %f4554, %f4575;\n"
    "	mul.f32 	%f4577, %f4551, %f4576;\n"
    "	sub.f32 	%f4578, %f4577, %f4570;\n"
    "	mul.f32 	%f4579, %f4552, %f4571;\n"
    "	sub.f32 	%f4580, %f4578, %f4579;\n"
    "	mad.f32 	%f4581, %f4558, %f4560, %f4580;\n"
    "	mov.f32 	%f4582, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4583, %f4582, %f4581, %p62;\n"
    "	mov.f32 	%f4584, %f4512;\n"
    "	mov.f32 	%f4585, %f4527;\n"
    "	mad.f32 	%f4586, %f4585, %f4583, %f4584;\n"
    "	mov.f32 	%f4587, %f4586;\n"
    "	mov.f32 	%f4588, %f4516;\n"
    "	mov.f32 	%f4589, %f4538;\n"
    "	mad.f32 	%f4590, %f4589, %f4583, %f4588;\n"
    "	mov.f32 	%f4591, %f4590;\n"
    "	mov.f32 	%f4592, %f4519;\n"
    "	mad.f32 	%f4593, %f4546, %f4583, %f4592;\n"
    "	mov.f32 	%f4594, %f4593;\n"
    "	ld.shared.s32 	%r148, [%rd14+988];\n"
    "	add.s32 	%r149, %r148, %r6;\n"
    "	ld.shared.f32 	%f4595, [%rd15+976];\n"
    "	sub.f32 	%f4596, %f19, %f4595;\n"
    "	mov.f32 	%f4597, %f4596;\n"
    "	mul.f32 	%f4598, %f14, %f4597;\n"
    "	cvt.rni.f32.f32 	%f4599, %f4598;\n"
    "	mul.f32 	%f4600, %f13, %f4599;\n"
    "	sub.f32 	%f4601, %f4596, %f4600;\n"
    "	mov.f32 	%f4602, %f4601;\n"
    "	mov.f32 	%f4603, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4604, %f4601, %f4601, %f4603;\n"
    "	ld.shared.f32 	%f4605, [%rd15+980];\n"
    "	sub.f32 	%f4606, %f18, %f4605;\n"
    "	mov.f32 	%f4607, %f4606;\n"
    "	mov.f32 	%f4608, %f4607;\n"
    "	mul.f32 	%f4609, %f14, %f4607;\n"
    "	cvt.rni.f32.f32 	%f4610, %f4609;\n"
    "	mul.f32 	%f4611, %f13, %f4610;\n"
    "	sub.f32 	%f4612, %f4606, %f4611;\n"
    "	mov.f32 	%f4613, %f4612;\n"
    "	mad.f32 	%f4614, %f4612, %f4612, %f4604;\n"
    "	ld.shared.f32 	%f4615, [%rd15+984];\n"
    "	sub.f32 	%f4616, %f11, %f4615;\n"
    "	mov.f32 	%f4617, %f4616;\n"
    "	mul.f32 	%f4618, %f4616, %f14;\n"
    "	cvt.rni.f32.f32 	%f4619, %f4618;\n"
    "	mul.f32 	%f4620, %f13, %f4619;\n"
    "	sub.f32 	%f4621, %f4616, %f4620;\n"
    "	mov.f32 	%f4622, %f4621;\n"
    "	mad.f32 	%f4623, %f4621, %f4621, %f4614;\n"
    "	mov.f32 	%f4624, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p63, %f4623, %f4624;\n"
    "	sqrt.approx.f32 	%f4625, %f4623;\n"
    "	rcp.approx.f32 	%f4626, %f4625;\n"
    "	cvt.s64.s32 	%rd199, %r149;\n"
    "	mul.wide.s32 	%rd200, %r149, 24;\n"
    "	add.u64 	%rd201, %rd9, %rd200;\n"
    "	mul.f32 	%f4627, %f4626, %f4626;\n"
    "	ld.const.f32 	%f4628, [%rd201+12];\n"
    "	ld.const.f32 	%f4629, [%rd201+8];\n"
    "	ld.const.f32 	%f4630, [%rd201+4];\n"
    "	ld.const.f32 	%f4631, [%rd201+0];\n"
    "	ld.const.f32 	%f4632, [%rd201+16];\n"
    "	ld.const.f32 	%f4633, [%rd201+20];\n"
    "	mul.f32 	%f4634, %f4627, %f4627;\n"
    "	mul.f32 	%f4635, %f4626, %f4627;\n"
    "	mov.f32 	%f4636, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4637, %f4628, %f4636;\n"
    "	sub.f32 	%f4638, %f4630, %f4625;\n"
    "	mov.f32 	%f4639, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4640, %f4631, %f4639;\n"
    "	mov.f32 	%f4641, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4642, %f4632, %f4641;\n"
    "	mul.f32 	%f4643, %f4634, %f4634;\n"
    "	mul.f32 	%f4644, %f4629, %f4638;\n"
    "	mul.f32 	%f4645, %f4637, %f4643;\n"
    "	mul.f32 	%f4646, %f4642, %f4643;\n"
    "	mov.f32 	%f4647, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4648, %f4644, %f4647;\n"
    "	ex2.approx.f32 	%f4649, %f4648;\n"
    "	mul.f32 	%f4650, %f4640, %f4649;\n"
    "	mul.f32 	%f4651, %f4629, %f4650;\n"
    "	mul.f32 	%f4652, %f4626, %f4651;\n"
    "	sub.f32 	%f4653, %f4652, %f4645;\n"
    "	mul.f32 	%f4654, %f4627, %f4646;\n"
    "	sub.f32 	%f4655, %f4653, %f4654;\n"
    "	mad.f32 	%f4656, %f4633, %f4635, %f4655;\n"
    "	mov.f32 	%f4657, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4658, %f4657, %f4656, %p63;\n"
    "	mov.f32 	%f4659, %f4587;\n"
    "	mov.f32 	%f4660, %f4602;\n"
    "	mad.f32 	%f4661, %f4660, %f4658, %f4659;\n"
    "	mov.f32 	%f4662, %f4661;\n"
    "	mov.f32 	%f4663, %f4591;\n"
    "	mov.f32 	%f4664, %f4613;\n"
    "	mad.f32 	%f4665, %f4664, %f4658, %f4663;\n"
    "	mov.f32 	%f4666, %f4665;\n"
    "	mov.f32 	%f4667, %f4594;\n"
    "	mad.f32 	%f4668, %f4621, %f4658, %f4667;\n"
    "	mov.f32 	%f4669, %f4668;\n"
    "	ld.shared.s32 	%r150, [%rd14+1004];\n"
    "	add.s32 	%r151, %r150, %r6;\n"
    "	ld.shared.f32 	%f4670, [%rd15+992];\n"
    "	sub.f32 	%f4671, %f19, %f4670;\n"
    "	mov.f32 	%f4672, %f4671;\n"
    "	mul.f32 	%f4673, %f14, %f4672;\n"
    "	cvt.rni.f32.f32 	%f4674, %f4673;\n"
    "	mul.f32 	%f4675, %f13, %f4674;\n"
    "	sub.f32 	%f4676, %f4671, %f4675;\n"
    "	mov.f32 	%f4677, %f4676;\n"
    "	mov.f32 	%f4678, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4679, %f4676, %f4676, %f4678;\n"
    "	ld.shared.f32 	%f4680, [%rd15+996];\n"
    "	sub.f32 	%f4681, %f18, %f4680;\n"
    "	mov.f32 	%f4682, %f4681;\n"
    "	mov.f32 	%f4683, %f4682;\n"
    "	mul.f32 	%f4684, %f14, %f4682;\n"
    "	cvt.rni.f32.f32 	%f4685, %f4684;\n"
    "	mul.f32 	%f4686, %f13, %f4685;\n"
    "	sub.f32 	%f4687, %f4681, %f4686;\n"
    "	mov.f32 	%f4688, %f4687;\n"
    "	mad.f32 	%f4689, %f4687, %f4687, %f4679;\n"
    "	ld.shared.f32 	%f4690, [%rd15+1000];\n"
    "	sub.f32 	%f4691, %f11, %f4690;\n"
    "	mov.f32 	%f4692, %f4691;\n"
    "	mul.f32 	%f4693, %f4691, %f14;\n"
    "	cvt.rni.f32.f32 	%f4694, %f4693;\n"
    "	mul.f32 	%f4695, %f13, %f4694;\n"
    "	sub.f32 	%f4696, %f4691, %f4695;\n"
    "	mov.f32 	%f4697, %f4696;\n"
    "	mad.f32 	%f4698, %f4696, %f4696, %f4689;\n"
    "	mov.f32 	%f4699, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p64, %f4698, %f4699;\n"
    "	sqrt.approx.f32 	%f4700, %f4698;\n"
    "	rcp.approx.f32 	%f4701, %f4700;\n"
    "	cvt.s64.s32 	%rd202, %r151;\n"
    "	mul.wide.s32 	%rd203, %r151, 24;\n"
    "	add.u64 	%rd204, %rd9, %rd203;\n"
    "	mul.f32 	%f4702, %f4701, %f4701;\n"
    "	ld.const.f32 	%f4703, [%rd204+12];\n"
    "	ld.const.f32 	%f4704, [%rd204+8];\n"
    "	ld.const.f32 	%f4705, [%rd204+4];\n"
    "	ld.const.f32 	%f4706, [%rd204+0];\n"
    "	ld.const.f32 	%f4707, [%rd204+16];\n"
    "	ld.const.f32 	%f4708, [%rd204+20];\n"
    "	mul.f32 	%f4709, %f4702, %f4702;\n"
    "	mul.f32 	%f4710, %f4701, %f4702;\n"
    "	mov.f32 	%f4711, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4712, %f4703, %f4711;\n"
    "	sub.f32 	%f4713, %f4705, %f4700;\n"
    "	mov.f32 	%f4714, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4715, %f4706, %f4714;\n"
    "	mov.f32 	%f4716, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4717, %f4707, %f4716;\n"
    "	mul.f32 	%f4718, %f4709, %f4709;\n"
    "	mul.f32 	%f4719, %f4704, %f4713;\n"
    "	mul.f32 	%f4720, %f4712, %f4718;\n"
    "	mul.f32 	%f4721, %f4717, %f4718;\n"
    "	mov.f32 	%f4722, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4723, %f4719, %f4722;\n"
    "	ex2.approx.f32 	%f4724, %f4723;\n"
    "	mul.f32 	%f4725, %f4715, %f4724;\n"
    "	mul.f32 	%f4726, %f4704, %f4725;\n"
    "	mul.f32 	%f4727, %f4701, %f4726;\n"
    "	sub.f32 	%f4728, %f4727, %f4720;\n"
    "	mul.f32 	%f4729, %f4702, %f4721;\n"
    "	sub.f32 	%f4730, %f4728, %f4729;\n"
    "	mad.f32 	%f4731, %f4708, %f4710, %f4730;\n"
    "	mov.f32 	%f4732, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4733, %f4732, %f4731, %p64;\n"
    "	mov.f32 	%f4734, %f4662;\n"
    "	mov.f32 	%f4735, %f4677;\n"
    "	mad.f32 	%f4736, %f4735, %f4733, %f4734;\n"
    "	mov.f32 	%f4737, %f4736;\n"
    "	mov.f32 	%f4738, %f4666;\n"
    "	mov.f32 	%f4739, %f4688;\n"
    "	mad.f32 	%f4740, %f4739, %f4733, %f4738;\n"
    "	mov.f32 	%f4741, %f4740;\n"
    "	mov.f32 	%f4742, %f4669;\n"
    "	mad.f32 	%f4743, %f4696, %f4733, %f4742;\n"
    "	mov.f32 	%f4744, %f4743;\n"
    "	ld.shared.s32 	%r152, [%rd14+1020];\n"
    "	add.s32 	%r153, %r152, %r6;\n"
    "	ld.shared.f32 	%f4745, [%rd15+1008];\n"
    "	sub.f32 	%f4746, %f19, %f4745;\n"
    "	mov.f32 	%f4747, %f4746;\n"
    "	mul.f32 	%f4748, %f14, %f4747;\n"
    "	cvt.rni.f32.f32 	%f4749, %f4748;\n"
    "	mul.f32 	%f4750, %f13, %f4749;\n"
    "	sub.f32 	%f4751, %f4746, %f4750;\n"
    "	mov.f32 	%f4752, %f4751;\n"
    "	mov.f32 	%f4753, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4754, %f4751, %f4751, %f4753;\n"
    "	ld.shared.f32 	%f4755, [%rd15+1012];\n"
    "	sub.f32 	%f4756, %f18, %f4755;\n"
    "	mov.f32 	%f4757, %f4756;\n"
    "	mov.f32 	%f4758, %f4757;\n"
    "	mul.f32 	%f4759, %f14, %f4757;\n"
    "	cvt.rni.f32.f32 	%f4760, %f4759;\n"
    "	mul.f32 	%f4761, %f13, %f4760;\n"
    "	sub.f32 	%f4762, %f4756, %f4761;\n"
    "	mov.f32 	%f4763, %f4762;\n"
    "	mad.f32 	%f4764, %f4762, %f4762, %f4754;\n"
    "	ld.shared.f32 	%f4765, [%rd15+1016];\n"
    "	sub.f32 	%f4766, %f11, %f4765;\n"
    "	mov.f32 	%f4767, %f4766;\n"
    "	mul.f32 	%f4768, %f4766, %f14;\n"
    "	cvt.rni.f32.f32 	%f4769, %f4768;\n"
    "	mul.f32 	%f4770, %f13, %f4769;\n"
    "	sub.f32 	%f4771, %f4766, %f4770;\n"
    "	mov.f32 	%f4772, %f4771;\n"
    "	mad.f32 	%f4773, %f4771, %f4771, %f4764;\n"
    "	mov.f32 	%f4774, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p65, %f4773, %f4774;\n"
    "	sqrt.approx.f32 	%f4775, %f4773;\n"
    "	rcp.approx.f32 	%f4776, %f4775;\n"
    "	cvt.s64.s32 	%rd205, %r153;\n"
    "	mul.wide.s32 	%rd206, %r153, 24;\n"
    "	add.u64 	%rd207, %rd9, %rd206;\n"
    "	mul.f32 	%f4777, %f4776, %f4776;\n"
    "	ld.const.f32 	%f4778, [%rd207+12];\n"
    "	ld.const.f32 	%f4779, [%rd207+8];\n"
    "	ld.const.f32 	%f4780, [%rd207+4];\n"
    "	ld.const.f32 	%f4781, [%rd207+0];\n"
    "	ld.const.f32 	%f4782, [%rd207+16];\n"
    "	ld.const.f32 	%f4783, [%rd207+20];\n"
    "	mul.f32 	%f4784, %f4777, %f4777;\n"
    "	mul.f32 	%f4785, %f4776, %f4777;\n"
    "	mov.f32 	%f4786, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4787, %f4778, %f4786;\n"
    "	sub.f32 	%f4788, %f4780, %f4775;\n"
    "	mov.f32 	%f4789, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4790, %f4781, %f4789;\n"
    "	mov.f32 	%f4791, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4792, %f4782, %f4791;\n"
    "	mul.f32 	%f4793, %f4784, %f4784;\n"
    "	mul.f32 	%f4794, %f4779, %f4788;\n"
    "	mul.f32 	%f4795, %f4787, %f4793;\n"
    "	mul.f32 	%f4796, %f4792, %f4793;\n"
    "	mov.f32 	%f4797, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4798, %f4794, %f4797;\n"
    "	ex2.approx.f32 	%f4799, %f4798;\n"
    "	mul.f32 	%f4800, %f4790, %f4799;\n"
    "	mul.f32 	%f4801, %f4779, %f4800;\n"
    "	mul.f32 	%f4802, %f4776, %f4801;\n"
    "	sub.f32 	%f4803, %f4802, %f4795;\n"
    "	mul.f32 	%f4804, %f4777, %f4796;\n"
    "	sub.f32 	%f4805, %f4803, %f4804;\n"
    "	mad.f32 	%f4806, %f4783, %f4785, %f4805;\n"
    "	mov.f32 	%f4807, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4808, %f4807, %f4806, %p65;\n"
    "	mov.f32 	%f4809, %f4737;\n"
    "	mov.f32 	%f4810, %f4752;\n"
    "	mad.f32 	%f4811, %f4810, %f4808, %f4809;\n"
    "	mov.f32 	%f2, %f4811;\n"
    "	mov.f32 	%f4812, %f4741;\n"
    "	mov.f32 	%f4813, %f4763;\n"
    "	mad.f32 	%f4814, %f4813, %f4808, %f4812;\n"
    "	mov.f32 	%f4, %f4814;\n"
    "	mov.f32 	%f4815, %f4744;\n"
    "	mad.f32 	%f4816, %f4771, %f4808, %f4815;\n"
    "	mov.f32 	%f6, %f4816;\n"
    "	add.s32 	%r25, %r25, 64;\n"
    "	add.u64 	%rd13, %rd13, 1024;\n"
    "	mov.u32 	%r154, 256;\n"
    "	setp.ne.s32 	%p66, %r25, %r154;\n"
    "	@%p66 bra 	$Lt_10_13314;\n"
    "	add.s32 	%r21, %r21, 256;\n"
    "	setp.gt.s32 	%p67, %r13, %r21;\n"
    "	@%p67 bra 	$Lt_10_12546;\n"
    "$Lt_10_12034:\n"
    "	mov.u64 	%rd9, c_matrix;\n"
    "	.loc	3	1515	0\n"
    "	mov.s32 	%r21, %r13;\n"
    "	setp.ge.s32 	%p68, %r13, %r7;\n"
    "	@%p68 bra 	$Lt_10_14082;\n"
    "	sub.s32 	%r155, %r7, %r13;\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_if_xmax];\n"
    "	rcp.approx.f32 	%f14, %f13;\n"
    "	cvt.s64.s32 	%rd208, %r13;\n"
    "	mul.wide.s32 	%rd209, %r13, 16;\n"
    "	add.u64 	%rd210, %rd1, %rd209;\n"
    "	mov.f32 	%f18, %f10;\n"
    "	mov.f32 	%f19, %f8;\n"
    "	mov.s32 	%r156, %r155;\n"
    "$Lt_10_14594:\n"
    " //<loop> Loop body line 1515, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1516	0\n"
    "	ld.global.s32 	%r157, [%rd210+12];\n"
    "	add.s32 	%r158, %r157, %r6;\n"
    "	ld.global.f32 	%f4817, [%rd210+0];\n"
    "	sub.f32 	%f4818, %f19, %f4817;\n"
    "	mov.f32 	%f4819, %f4818;\n"
    "	mul.f32 	%f4820, %f14, %f4819;\n"
    "	cvt.rni.f32.f32 	%f4821, %f4820;\n"
    "	.loc	3	1515	0\n"
    "	ld.param.f32 	%f13, [__cudaparm_nacl_kernel_if_xmax];\n"
    "	.loc	3	1516	0\n"
    "	mul.f32 	%f4822, %f13, %f4821;\n"
    "	sub.f32 	%f4823, %f4818, %f4822;\n"
    "	mov.f32 	%f4824, %f4823;\n"
    "	mov.f32 	%f4825, 0f00000000;  	// 0\n"
    "	mad.f32 	%f4826, %f4823, %f4823, %f4825;\n"
    "	ld.global.f32 	%f4827, [%rd210+4];\n"
    "	sub.f32 	%f4828, %f18, %f4827;\n"
    "	mov.f32 	%f4829, %f4828;\n"
    "	mov.f32 	%f4830, %f4829;\n"
    "	mul.f32 	%f4831, %f14, %f4829;\n"
    "	cvt.rni.f32.f32 	%f4832, %f4831;\n"
    "	mul.f32 	%f4833, %f13, %f4832;\n"
    "	sub.f32 	%f4834, %f4828, %f4833;\n"
    "	mov.f32 	%f4835, %f4834;\n"
    "	mad.f32 	%f4836, %f4834, %f4834, %f4826;\n"
    "	ld.global.f32 	%f4837, [%rd210+8];\n"
    "	sub.f32 	%f4838, %f11, %f4837;\n"
    "	mov.f32 	%f4839, %f4838;\n"
    "	mul.f32 	%f4840, %f4838, %f14;\n"
    "	cvt.rni.f32.f32 	%f4841, %f4840;\n"
    "	mul.f32 	%f4842, %f13, %f4841;\n"
    "	sub.f32 	%f4843, %f4838, %f4842;\n"
    "	mov.f32 	%f4844, %f4843;\n"
    "	mad.f32 	%f4845, %f4843, %f4843, %f4836;\n"
    "	mov.f32 	%f4846, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p69, %f4845, %f4846;\n"
    "	sqrt.approx.f32 	%f4847, %f4845;\n"
    "	rcp.approx.f32 	%f4848, %f4847;\n"
    "	cvt.s64.s32 	%rd211, %r158;\n"
    "	mul.wide.s32 	%rd212, %r158, 24;\n"
    "	add.u64 	%rd213, %rd9, %rd212;\n"
    "	mul.f32 	%f4849, %f4848, %f4848;\n"
    "	ld.const.f32 	%f4850, [%rd213+12];\n"
    "	ld.const.f32 	%f4851, [%rd213+8];\n"
    "	ld.const.f32 	%f4852, [%rd213+4];\n"
    "	ld.const.f32 	%f4853, [%rd213+0];\n"
    "	ld.const.f32 	%f4854, [%rd213+16];\n"
    "	ld.const.f32 	%f4855, [%rd213+20];\n"
    "	mul.f32 	%f4856, %f4849, %f4849;\n"
    "	mul.f32 	%f4857, %f4848, %f4849;\n"
    "	mov.f32 	%f4858, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f4859, %f4850, %f4858;\n"
    "	sub.f32 	%f4860, %f4852, %f4847;\n"
    "	mov.f32 	%f4861, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f4862, %f4853, %f4861;\n"
    "	mov.f32 	%f4863, 0f41000000;  	// 8\n"
    "	mul.f32 	%f4864, %f4854, %f4863;\n"
    "	mul.f32 	%f4865, %f4856, %f4856;\n"
    "	mul.f32 	%f4866, %f4851, %f4860;\n"
    "	mul.f32 	%f4867, %f4859, %f4865;\n"
    "	mul.f32 	%f4868, %f4864, %f4865;\n"
    "	mov.f32 	%f4869, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f4870, %f4866, %f4869;\n"
    "	ex2.approx.f32 	%f4871, %f4870;\n"
    "	mul.f32 	%f4872, %f4862, %f4871;\n"
    "	mul.f32 	%f4873, %f4851, %f4872;\n"
    "	mul.f32 	%f4874, %f4848, %f4873;\n"
    "	sub.f32 	%f4875, %f4874, %f4867;\n"
    "	mul.f32 	%f4876, %f4849, %f4868;\n"
    "	sub.f32 	%f4877, %f4875, %f4876;\n"
    "	mad.f32 	%f4878, %f4855, %f4857, %f4877;\n"
    "	mov.f32 	%f4879, 0f00000000;  	// 0\n"
    "	selp.f32 	%f4880, %f4879, %f4878, %p69;\n"
    "	mov.f32 	%f4881, %f2;\n"
    "	mov.f32 	%f4882, %f4824;\n"
    "	mad.f32 	%f4883, %f4882, %f4880, %f4881;\n"
    "	mov.f32 	%f2, %f4883;\n"
    "	mov.f32 	%f4884, %f4;\n"
    "	mov.f32 	%f4885, %f4835;\n"
    "	mad.f32 	%f4886, %f4885, %f4880, %f4884;\n"
    "	mov.f32 	%f4, %f4886;\n"
    "	mov.f32 	%f4887, %f6;\n"
    "	mad.f32 	%f4888, %f4843, %f4880, %f4887;\n"
    "	mov.f32 	%f6, %f4888;\n"
    "	add.s32 	%r21, %r21, 1;\n"
    "	add.u64 	%rd210, %rd210, 16;\n"
    "	setp.ne.s32 	%p70, %r7, %r21;\n"
    "	@%p70 bra 	$Lt_10_14594;\n"
    "$Lt_10_14082:\n"
    "	.loc	3	1518	0\n"
    "	ld.param.u64 	%rd214, [__cudaparm_nacl_kernel_if_fvec];\n"
    "	mul.lo.s32 	%r159, %r3, 3;\n"
    "	cvt.s64.s32 	%rd215, %r159;\n"
    "	mul.wide.s32 	%rd216, %r159, 4;\n"
    "	add.u64 	%rd217, %rd214, %rd216;\n"
    "	mov.f32 	%f4889, %f2;\n"
    "	st.global.f32 	[%rd217+0], %f4889;\n"
    "	mov.f32 	%f4890, %f4;\n"
    "	st.global.f32 	[%rd217+4], %f4890;\n"
    "	mov.f32 	%f4891, %f6;\n"
    "	st.global.f32 	[%rd217+8], %f4891;\n"
    "	.loc	3	1519	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_if:\n"
    "	} // nacl_kernel_if\n"
    "\n"
    "	.entry nacl_kernel_if2 (\n"
    "		.param .u64 __cudaparm_nacl_kernel_if2_x,\n"
    "		.param .s32 __cudaparm_nacl_kernel_if2_n,\n"
    "		.param .s32 __cudaparm_nacl_kernel_if2_nat,\n"
    "		.param .f32 __cudaparm_nacl_kernel_if2_xmax,\n"
    "		.param .u64 __cudaparm_nacl_kernel_if2_fvec)\n"
    "	{\n"
    "	.reg .u16 %rh<3>;\n"
    "	.reg .u32 %r<115>;\n"
    "	.reg .u64 %rd<84>;\n"
    "	.reg .f32 %f<1294>;\n"
    "	.reg .pred %p<33>;\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_17108_33_non_const_s_fi50568[3072];\n"
    "	.shared .align 4 .b8 __cuda___cuda_local_var_17107_35_non_const_s_xj53640[4096];\n"
    "	.loc	3	1638	0\n"
    "$LDWbegin_nacl_kernel_if2:\n"
    "	.loc	3	1650	0\n"
    "	cvt.s32.u16 	%r1, %tid.x;\n"
    "	cvt.s64.s32 	%rd1, %r1;\n"
    "	mov.u64 	%rd2, __cuda___cuda_local_var_17108_33_non_const_s_fi50568;\n"
    "	mul.wide.s32 	%rd3, %r1, 12;\n"
    "	add.u64 	%rd4, %rd2, %rd3;\n"
    "	mov.f32 	%f1, 0f00000000;     	// 0\n"
    "	st.shared.f32 	[%rd4+0], %f1;\n"
    "	mov.f32 	%f2, 0f00000000;     	// 0\n"
    "	st.shared.f32 	[%rd4+4], %f2;\n"
    "	mov.f32 	%f3, 0f00000000;     	// 0\n"
    "	st.shared.f32 	[%rd4+8], %f3;\n"
    "	.loc	3	1651	0\n"
    "	and.b32 	%r2, %r1, 15;\n"
    "	mov.u16 	%rh1, %ctaid.x;\n"
    "	mul.wide.u16 	%r3, %rh1, 16;\n"
    "	add.u32 	%r4, %r2, %r3;\n"
    "	ld.param.u64 	%rd5, [__cudaparm_nacl_kernel_if2_x];\n"
    "	cvt.s64.s32 	%rd6, %r4;\n"
    "	mul.wide.s32 	%rd7, %r4, 16;\n"
    "	add.u64 	%rd8, %rd5, %rd7;\n"
    "	ld.global.f32 	%f4, [%rd8+0];\n"
    "	mov.f32 	%f5, %f4;\n"
    "	ld.global.f32 	%f6, [%rd8+4];\n"
    "	mov.f32 	%f7, %f6;\n"
    "	ld.global.f32 	%f8, [%rd8+8];\n"
    "	mov.f32 	%f9, %f8;\n"
    "	.loc	3	1652	0\n"
    "	ld.global.s32 	%r5, [%rd8+12];\n"
    "	ld.param.s32 	%r6, [__cudaparm_nacl_kernel_if2_nat];\n"
    "	mul.lo.s32 	%r7, %r5, %r6;\n"
    "	ld.param.s32 	%r8, [__cudaparm_nacl_kernel_if2_n];\n"
    "	shr.s32 	%r9, %r8, 31;\n"
    "	mov.s32 	%r10, 255;\n"
    "	and.b32 	%r11, %r9, %r10;\n"
    "	add.s32 	%r12, %r11, %r8;\n"
    "	shr.s32 	%r13, %r12, 8;\n"
    "	shr.s32 	%r14, %r1, 31;\n"
    "	mov.s32 	%r15, 15;\n"
    "	and.b32 	%r16, %r14, %r15;\n"
    "	add.s32 	%r17, %r16, %r1;\n"
    "	shr.s32 	%r18, %r17, 4;\n"
    "	mul.lo.s32 	%r19, %r13, 256;\n"
    "	mov.u32 	%r20, 0;\n"
    "	setp.le.s32 	%p1, %r19, %r20;\n"
    "	@%p1 bra 	$Lt_11_19970;\n"
    "	mov.u64 	%rd9, __cuda___cuda_local_var_17107_35_non_const_s_xj53640;\n"
    "	ld.param.f32 	%f10, [__cudaparm_nacl_kernel_if2_xmax];\n"
    "	rcp.approx.f32 	%f11, %f10;\n"
    "	add.s32 	%r21, %r19, 255;\n"
    "	shr.s32 	%r22, %r21, 31;\n"
    "	mov.s32 	%r23, 255;\n"
    "	and.b32 	%r24, %r22, %r23;\n"
    "	add.s32 	%r25, %r24, %r21;\n"
    "	shr.s32 	%r26, %r25, 8;\n"
    "	mov.s32 	%r27, 271;\n"
    "	sub.s32 	%r28, %r27, %r18;\n"
    "	mul.lo.u64 	%rd10, %rd1, 16;\n"
    "	add.u64 	%rd11, %rd9, %rd10;\n"
    "	shr.s32 	%r29, %r28, 31;\n"
    "	mov.s32 	%r30, 15;\n"
    "	and.b32 	%r31, %r29, %r30;\n"
    "	add.s32 	%r32, %r31, %r28;\n"
    "	shr.s32 	%r33, %r32, 4;\n"
    "	shr.s32 	%r34, %r33, 31;\n"
    "	mov.s32 	%r35, 15;\n"
    "	and.b32 	%r36, %r34, %r35;\n"
    "	add.s32 	%r37, %r36, %r33;\n"
    "	shr.s32 	%r38, %r37, 4;\n"
    "	mul.lo.s32 	%r39, %r38, 256;\n"
    "	add.s32 	%r40, %r18, %r39;\n"
    "	setp.lt.s32 	%p2, %r18, %r40;\n"
    "	mov.s32 	%r41, 0;\n"
    "	mov.u64 	%rd12, c_matrix;\n"
    "	mov.s32 	%r42, %r26;\n"
    "$Lt_11_20482:\n"
    " //<loop> Loop body line 1652, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1657	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	1658	0\n"
    "	add.s32 	%r43, %r41, %r1;\n"
    "	cvt.s64.s32 	%rd13, %r43;\n"
    "	mul.wide.s32 	%rd14, %r43, 16;\n"
    "	add.u64 	%rd15, %rd5, %rd14;\n"
    "	ld.global.f32 	%f12, [%rd15+0];\n"
    "	st.shared.f32 	[%rd11+0], %f12;\n"
    "	ld.global.f32 	%f13, [%rd15+4];\n"
    "	st.shared.f32 	[%rd11+4], %f13;\n"
    "	ld.global.f32 	%f14, [%rd15+8];\n"
    "	st.shared.f32 	[%rd11+8], %f14;\n"
    "	ld.global.s32 	%r44, [%rd15+12];\n"
    "	st.shared.s32 	[%rd11+12], %r44;\n"
    "	.loc	3	1659	0\n"
    "	bar.sync 	0;\n"
    "	.loc	3	24	0\n"
    "	mov.s32 	%r45, %r18;\n"
    "	@!%p2 bra 	$Lt_11_20738;\n"
    "	add.s32 	%r46, %r39, 255;\n"
    "	shr.s32 	%r47, %r46, 31;\n"
    "	mov.s32 	%r48, 255;\n"
    "	and.b32 	%r49, %r47, %r48;\n"
    "	add.s32 	%r50, %r49, %r46;\n"
    "	shr.s32 	%r51, %r50, 8;\n"
    "	cvt.s64.s32 	%rd16, %r18;\n"
    "	mul.wide.s32 	%rd17, %r18, 16;\n"
    "	add.u64 	%rd18, %rd17, %rd9;\n"
    "	add.u64 	%rd19, %rd17, %rd9;\n"
    "	ld.shared.f32 	%f15, [%rd4+0];\n"
    "	ld.shared.f32 	%f16, [%rd4+4];\n"
    "	ld.shared.f32 	%f17, [%rd4+8];\n"
    "	mov.f32 	%f18, %f9;\n"
    "	mov.f32 	%f19, %f7;\n"
    "	mov.f32 	%f20, %f5;\n"
    "	mov.s32 	%r52, %r51;\n"
    "$Lt_11_21250:\n"
    " //<loop> Loop body line 24, nesting depth: 2, estimated iterations: unknown\n"
    "	.loc	3	1662	0\n"
    "	ld.shared.s32 	%r53, [%rd18+12];\n"
    "	add.s32 	%r54, %r53, %r7;\n"
    "	ld.shared.f32 	%f21, [%rd19+0];\n"
    "	sub.f32 	%f22, %f20, %f21;\n"
    "	mov.f32 	%f23, %f22;\n"
    "	mul.f32 	%f24, %f11, %f23;\n"
    "	cvt.rni.f32.f32 	%f25, %f24;\n"
    "	mul.f32 	%f26, %f10, %f25;\n"
    "	sub.f32 	%f27, %f22, %f26;\n"
    "	mov.f32 	%f28, %f27;\n"
    "	mov.f32 	%f29, 0f00000000;    	// 0\n"
    "	mad.f32 	%f30, %f27, %f27, %f29;\n"
    "	ld.shared.f32 	%f31, [%rd19+4];\n"
    "	sub.f32 	%f32, %f19, %f31;\n"
    "	mov.f32 	%f33, %f32;\n"
    "	mov.f32 	%f34, %f33;\n"
    "	mul.f32 	%f35, %f11, %f33;\n"
    "	cvt.rni.f32.f32 	%f36, %f35;\n"
    "	mul.f32 	%f37, %f10, %f36;\n"
    "	sub.f32 	%f38, %f32, %f37;\n"
    "	mov.f32 	%f39, %f38;\n"
    "	mad.f32 	%f40, %f38, %f38, %f30;\n"
    "	ld.shared.f32 	%f41, [%rd19+8];\n"
    "	sub.f32 	%f42, %f18, %f41;\n"
    "	mov.f32 	%f43, %f42;\n"
    "	mul.f32 	%f44, %f42, %f11;\n"
    "	cvt.rni.f32.f32 	%f45, %f44;\n"
    "	mul.f32 	%f46, %f10, %f45;\n"
    "	sub.f32 	%f47, %f42, %f46;\n"
    "	mov.f32 	%f48, %f47;\n"
    "	mad.f32 	%f49, %f47, %f47, %f40;\n"
    "	mov.f32 	%f50, 0f00000000;    	// 0\n"
    "	setp.eq.f32 	%p3, %f49, %f50;\n"
    "	sqrt.approx.f32 	%f51, %f49;\n"
    "	rcp.approx.f32 	%f52, %f51;\n"
    "	cvt.s64.s32 	%rd20, %r54;\n"
    "	mul.wide.s32 	%rd21, %r54, 24;\n"
    "	add.u64 	%rd22, %rd12, %rd21;\n"
    "	mul.f32 	%f53, %f52, %f52;\n"
    "	ld.const.f32 	%f54, [%rd22+12];\n"
    "	ld.const.f32 	%f55, [%rd22+8];\n"
    "	ld.const.f32 	%f56, [%rd22+4];\n"
    "	ld.const.f32 	%f57, [%rd22+0];\n"
    "	ld.const.f32 	%f58, [%rd22+16];\n"
    "	ld.const.f32 	%f59, [%rd22+20];\n"
    "	mul.f32 	%f60, %f53, %f53;\n"
    "	mul.f32 	%f61, %f52, %f53;\n"
    "	mov.f32 	%f62, 0f40c00000;    	// 6\n"
    "	mul.f32 	%f63, %f54, %f62;\n"
    "	sub.f32 	%f64, %f56, %f51;\n"
    "	mov.f32 	%f65, 0f3c70319e;    	// 0.0146603\n"
    "	mul.f32 	%f66, %f57, %f65;\n"
    "	mov.f32 	%f67, 0f41000000;    	// 8\n"
    "	mul.f32 	%f68, %f58, %f67;\n"
    "	mul.f32 	%f69, %f60, %f60;\n"
    "	mul.f32 	%f70, %f55, %f64;\n"
    "	mul.f32 	%f71, %f63, %f69;\n"
    "	mul.f32 	%f72, %f68, %f69;\n"
    "	mov.f32 	%f73, 0f3fb8aa3b;    	// 1.4427\n"
    "	mul.f32 	%f74, %f70, %f73;\n"
    "	ex2.approx.f32 	%f75, %f74;\n"
    "	mul.f32 	%f76, %f66, %f75;\n"
    "	mul.f32 	%f77, %f55, %f76;\n"
    "	mul.f32 	%f78, %f52, %f77;\n"
    "	sub.f32 	%f79, %f78, %f71;\n"
    "	mul.f32 	%f80, %f53, %f72;\n"
    "	sub.f32 	%f81, %f79, %f80;\n"
    "	mad.f32 	%f82, %f59, %f61, %f81;\n"
    "	mov.f32 	%f83, 0f00000000;    	// 0\n"
    "	selp.f32 	%f84, %f83, %f82, %p3;\n"
    "	mov.f32 	%f85, %f28;\n"
    "	mad.f32 	%f86, %f85, %f84, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f86;\n"
    "	mov.f32 	%f87, %f39;\n"
    "	mad.f32 	%f88, %f87, %f84, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f88;\n"
    "	mad.f32 	%f89, %f47, %f84, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f89;\n"
    "	ld.shared.s32 	%r55, [%rd18+268];\n"
    "	add.s32 	%r56, %r55, %r7;\n"
    "	ld.shared.f32 	%f90, [%rd19+256];\n"
    "	sub.f32 	%f91, %f20, %f90;\n"
    "	mov.f32 	%f92, %f91;\n"
    "	mul.f32 	%f93, %f11, %f92;\n"
    "	cvt.rni.f32.f32 	%f94, %f93;\n"
    "	mul.f32 	%f95, %f10, %f94;\n"
    "	sub.f32 	%f96, %f91, %f95;\n"
    "	mov.f32 	%f97, %f96;\n"
    "	mov.f32 	%f98, 0f00000000;    	// 0\n"
    "	mad.f32 	%f99, %f96, %f96, %f98;\n"
    "	ld.shared.f32 	%f100, [%rd19+260];\n"
    "	sub.f32 	%f101, %f19, %f100;\n"
    "	mov.f32 	%f102, %f101;\n"
    "	mov.f32 	%f103, %f102;\n"
    "	mul.f32 	%f104, %f11, %f102;\n"
    "	cvt.rni.f32.f32 	%f105, %f104;\n"
    "	mul.f32 	%f106, %f10, %f105;\n"
    "	sub.f32 	%f107, %f101, %f106;\n"
    "	mov.f32 	%f108, %f107;\n"
    "	mad.f32 	%f109, %f107, %f107, %f99;\n"
    "	ld.shared.f32 	%f110, [%rd19+264];\n"
    "	sub.f32 	%f111, %f18, %f110;\n"
    "	mov.f32 	%f112, %f111;\n"
    "	mul.f32 	%f113, %f111, %f11;\n"
    "	cvt.rni.f32.f32 	%f114, %f113;\n"
    "	mul.f32 	%f115, %f10, %f114;\n"
    "	sub.f32 	%f116, %f111, %f115;\n"
    "	mov.f32 	%f117, %f116;\n"
    "	mad.f32 	%f118, %f116, %f116, %f109;\n"
    "	mov.f32 	%f119, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p4, %f118, %f119;\n"
    "	sqrt.approx.f32 	%f120, %f118;\n"
    "	rcp.approx.f32 	%f121, %f120;\n"
    "	cvt.s64.s32 	%rd23, %r56;\n"
    "	mul.wide.s32 	%rd24, %r56, 24;\n"
    "	add.u64 	%rd25, %rd12, %rd24;\n"
    "	mul.f32 	%f122, %f121, %f121;\n"
    "	ld.const.f32 	%f123, [%rd25+12];\n"
    "	ld.const.f32 	%f124, [%rd25+8];\n"
    "	ld.const.f32 	%f125, [%rd25+4];\n"
    "	ld.const.f32 	%f126, [%rd25+0];\n"
    "	ld.const.f32 	%f127, [%rd25+16];\n"
    "	ld.const.f32 	%f128, [%rd25+20];\n"
    "	mul.f32 	%f129, %f122, %f122;\n"
    "	mul.f32 	%f130, %f121, %f122;\n"
    "	mov.f32 	%f131, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f132, %f123, %f131;\n"
    "	sub.f32 	%f133, %f125, %f120;\n"
    "	mov.f32 	%f134, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f135, %f126, %f134;\n"
    "	mov.f32 	%f136, 0f41000000;   	// 8\n"
    "	mul.f32 	%f137, %f127, %f136;\n"
    "	mul.f32 	%f138, %f129, %f129;\n"
    "	mul.f32 	%f139, %f124, %f133;\n"
    "	mul.f32 	%f140, %f132, %f138;\n"
    "	mul.f32 	%f141, %f137, %f138;\n"
    "	mov.f32 	%f142, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f143, %f139, %f142;\n"
    "	ex2.approx.f32 	%f144, %f143;\n"
    "	mul.f32 	%f145, %f135, %f144;\n"
    "	mul.f32 	%f146, %f124, %f145;\n"
    "	mul.f32 	%f147, %f121, %f146;\n"
    "	sub.f32 	%f148, %f147, %f140;\n"
    "	mul.f32 	%f149, %f122, %f141;\n"
    "	sub.f32 	%f150, %f148, %f149;\n"
    "	mad.f32 	%f151, %f128, %f130, %f150;\n"
    "	mov.f32 	%f152, 0f00000000;   	// 0\n"
    "	selp.f32 	%f153, %f152, %f151, %p4;\n"
    "	mov.f32 	%f154, %f97;\n"
    "	mad.f32 	%f155, %f154, %f153, %f86;\n"
    "	st.shared.f32 	[%rd4+0], %f155;\n"
    "	mov.f32 	%f156, %f108;\n"
    "	mad.f32 	%f157, %f156, %f153, %f88;\n"
    "	st.shared.f32 	[%rd4+4], %f157;\n"
    "	mad.f32 	%f158, %f116, %f153, %f89;\n"
    "	st.shared.f32 	[%rd4+8], %f158;\n"
    "	ld.shared.s32 	%r57, [%rd18+524];\n"
    "	add.s32 	%r58, %r57, %r7;\n"
    "	ld.shared.f32 	%f159, [%rd19+512];\n"
    "	sub.f32 	%f160, %f20, %f159;\n"
    "	mov.f32 	%f161, %f160;\n"
    "	mul.f32 	%f162, %f11, %f161;\n"
    "	cvt.rni.f32.f32 	%f163, %f162;\n"
    "	mul.f32 	%f164, %f10, %f163;\n"
    "	sub.f32 	%f165, %f160, %f164;\n"
    "	mov.f32 	%f166, %f165;\n"
    "	mov.f32 	%f167, 0f00000000;   	// 0\n"
    "	mad.f32 	%f168, %f165, %f165, %f167;\n"
    "	ld.shared.f32 	%f169, [%rd19+516];\n"
    "	sub.f32 	%f170, %f19, %f169;\n"
    "	mov.f32 	%f171, %f170;\n"
    "	mov.f32 	%f172, %f171;\n"
    "	mul.f32 	%f173, %f11, %f171;\n"
    "	cvt.rni.f32.f32 	%f174, %f173;\n"
    "	mul.f32 	%f175, %f10, %f174;\n"
    "	sub.f32 	%f176, %f170, %f175;\n"
    "	mov.f32 	%f177, %f176;\n"
    "	mad.f32 	%f178, %f176, %f176, %f168;\n"
    "	ld.shared.f32 	%f179, [%rd19+520];\n"
    "	sub.f32 	%f180, %f18, %f179;\n"
    "	mov.f32 	%f181, %f180;\n"
    "	mul.f32 	%f182, %f180, %f11;\n"
    "	cvt.rni.f32.f32 	%f183, %f182;\n"
    "	mul.f32 	%f184, %f10, %f183;\n"
    "	sub.f32 	%f185, %f180, %f184;\n"
    "	mov.f32 	%f186, %f185;\n"
    "	mad.f32 	%f187, %f185, %f185, %f178;\n"
    "	mov.f32 	%f188, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p5, %f187, %f188;\n"
    "	sqrt.approx.f32 	%f189, %f187;\n"
    "	rcp.approx.f32 	%f190, %f189;\n"
    "	cvt.s64.s32 	%rd26, %r58;\n"
    "	mul.wide.s32 	%rd27, %r58, 24;\n"
    "	add.u64 	%rd28, %rd12, %rd27;\n"
    "	mul.f32 	%f191, %f190, %f190;\n"
    "	ld.const.f32 	%f192, [%rd28+12];\n"
    "	ld.const.f32 	%f193, [%rd28+8];\n"
    "	ld.const.f32 	%f194, [%rd28+4];\n"
    "	ld.const.f32 	%f195, [%rd28+0];\n"
    "	ld.const.f32 	%f196, [%rd28+16];\n"
    "	ld.const.f32 	%f197, [%rd28+20];\n"
    "	mul.f32 	%f198, %f191, %f191;\n"
    "	mul.f32 	%f199, %f190, %f191;\n"
    "	mov.f32 	%f200, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f201, %f192, %f200;\n"
    "	sub.f32 	%f202, %f194, %f189;\n"
    "	mov.f32 	%f203, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f204, %f195, %f203;\n"
    "	mov.f32 	%f205, 0f41000000;   	// 8\n"
    "	mul.f32 	%f206, %f196, %f205;\n"
    "	mul.f32 	%f207, %f198, %f198;\n"
    "	mul.f32 	%f208, %f193, %f202;\n"
    "	mul.f32 	%f209, %f201, %f207;\n"
    "	mul.f32 	%f210, %f206, %f207;\n"
    "	mov.f32 	%f211, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f212, %f208, %f211;\n"
    "	ex2.approx.f32 	%f213, %f212;\n"
    "	mul.f32 	%f214, %f204, %f213;\n"
    "	mul.f32 	%f215, %f193, %f214;\n"
    "	mul.f32 	%f216, %f190, %f215;\n"
    "	sub.f32 	%f217, %f216, %f209;\n"
    "	mul.f32 	%f218, %f191, %f210;\n"
    "	sub.f32 	%f219, %f217, %f218;\n"
    "	mad.f32 	%f220, %f197, %f199, %f219;\n"
    "	mov.f32 	%f221, 0f00000000;   	// 0\n"
    "	selp.f32 	%f222, %f221, %f220, %p5;\n"
    "	mov.f32 	%f223, %f166;\n"
    "	mad.f32 	%f224, %f223, %f222, %f155;\n"
    "	st.shared.f32 	[%rd4+0], %f224;\n"
    "	mov.f32 	%f225, %f177;\n"
    "	mad.f32 	%f226, %f225, %f222, %f157;\n"
    "	st.shared.f32 	[%rd4+4], %f226;\n"
    "	mad.f32 	%f227, %f185, %f222, %f158;\n"
    "	st.shared.f32 	[%rd4+8], %f227;\n"
    "	ld.shared.s32 	%r59, [%rd18+780];\n"
    "	add.s32 	%r60, %r59, %r7;\n"
    "	ld.shared.f32 	%f228, [%rd19+768];\n"
    "	sub.f32 	%f229, %f20, %f228;\n"
    "	mov.f32 	%f230, %f229;\n"
    "	mul.f32 	%f231, %f11, %f230;\n"
    "	cvt.rni.f32.f32 	%f232, %f231;\n"
    "	mul.f32 	%f233, %f10, %f232;\n"
    "	sub.f32 	%f234, %f229, %f233;\n"
    "	mov.f32 	%f235, %f234;\n"
    "	mov.f32 	%f236, 0f00000000;   	// 0\n"
    "	mad.f32 	%f237, %f234, %f234, %f236;\n"
    "	ld.shared.f32 	%f238, [%rd19+772];\n"
    "	sub.f32 	%f239, %f19, %f238;\n"
    "	mov.f32 	%f240, %f239;\n"
    "	mov.f32 	%f241, %f240;\n"
    "	mul.f32 	%f242, %f11, %f240;\n"
    "	cvt.rni.f32.f32 	%f243, %f242;\n"
    "	mul.f32 	%f244, %f10, %f243;\n"
    "	sub.f32 	%f245, %f239, %f244;\n"
    "	mov.f32 	%f246, %f245;\n"
    "	mad.f32 	%f247, %f245, %f245, %f237;\n"
    "	ld.shared.f32 	%f248, [%rd19+776];\n"
    "	sub.f32 	%f249, %f18, %f248;\n"
    "	mov.f32 	%f250, %f249;\n"
    "	mul.f32 	%f251, %f249, %f11;\n"
    "	cvt.rni.f32.f32 	%f252, %f251;\n"
    "	mul.f32 	%f253, %f10, %f252;\n"
    "	sub.f32 	%f254, %f249, %f253;\n"
    "	mov.f32 	%f255, %f254;\n"
    "	mad.f32 	%f256, %f254, %f254, %f247;\n"
    "	mov.f32 	%f257, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p6, %f256, %f257;\n"
    "	sqrt.approx.f32 	%f258, %f256;\n"
    "	rcp.approx.f32 	%f259, %f258;\n"
    "	cvt.s64.s32 	%rd29, %r60;\n"
    "	mul.wide.s32 	%rd30, %r60, 24;\n"
    "	add.u64 	%rd31, %rd12, %rd30;\n"
    "	mul.f32 	%f260, %f259, %f259;\n"
    "	ld.const.f32 	%f261, [%rd31+12];\n"
    "	ld.const.f32 	%f262, [%rd31+8];\n"
    "	ld.const.f32 	%f263, [%rd31+4];\n"
    "	ld.const.f32 	%f264, [%rd31+0];\n"
    "	ld.const.f32 	%f265, [%rd31+16];\n"
    "	ld.const.f32 	%f266, [%rd31+20];\n"
    "	mul.f32 	%f267, %f260, %f260;\n"
    "	mul.f32 	%f268, %f259, %f260;\n"
    "	mov.f32 	%f269, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f270, %f261, %f269;\n"
    "	sub.f32 	%f271, %f263, %f258;\n"
    "	mov.f32 	%f272, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f273, %f264, %f272;\n"
    "	mov.f32 	%f274, 0f41000000;   	// 8\n"
    "	mul.f32 	%f275, %f265, %f274;\n"
    "	mul.f32 	%f276, %f267, %f267;\n"
    "	mul.f32 	%f277, %f262, %f271;\n"
    "	mul.f32 	%f278, %f270, %f276;\n"
    "	mul.f32 	%f279, %f275, %f276;\n"
    "	mov.f32 	%f280, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f281, %f277, %f280;\n"
    "	ex2.approx.f32 	%f282, %f281;\n"
    "	mul.f32 	%f283, %f273, %f282;\n"
    "	mul.f32 	%f284, %f262, %f283;\n"
    "	mul.f32 	%f285, %f259, %f284;\n"
    "	sub.f32 	%f286, %f285, %f278;\n"
    "	mul.f32 	%f287, %f260, %f279;\n"
    "	sub.f32 	%f288, %f286, %f287;\n"
    "	mad.f32 	%f289, %f266, %f268, %f288;\n"
    "	mov.f32 	%f290, 0f00000000;   	// 0\n"
    "	selp.f32 	%f291, %f290, %f289, %p6;\n"
    "	mov.f32 	%f292, %f235;\n"
    "	mad.f32 	%f293, %f292, %f291, %f224;\n"
    "	st.shared.f32 	[%rd4+0], %f293;\n"
    "	mov.f32 	%f294, %f246;\n"
    "	mad.f32 	%f295, %f294, %f291, %f226;\n"
    "	st.shared.f32 	[%rd4+4], %f295;\n"
    "	mad.f32 	%f296, %f254, %f291, %f227;\n"
    "	st.shared.f32 	[%rd4+8], %f296;\n"
    "	ld.shared.s32 	%r61, [%rd18+1036];\n"
    "	add.s32 	%r62, %r61, %r7;\n"
    "	ld.shared.f32 	%f297, [%rd19+1024];\n"
    "	sub.f32 	%f298, %f20, %f297;\n"
    "	mov.f32 	%f299, %f298;\n"
    "	mul.f32 	%f300, %f11, %f299;\n"
    "	cvt.rni.f32.f32 	%f301, %f300;\n"
    "	mul.f32 	%f302, %f10, %f301;\n"
    "	sub.f32 	%f303, %f298, %f302;\n"
    "	mov.f32 	%f304, %f303;\n"
    "	mov.f32 	%f305, 0f00000000;   	// 0\n"
    "	mad.f32 	%f306, %f303, %f303, %f305;\n"
    "	ld.shared.f32 	%f307, [%rd19+1028];\n"
    "	sub.f32 	%f308, %f19, %f307;\n"
    "	mov.f32 	%f309, %f308;\n"
    "	mov.f32 	%f310, %f309;\n"
    "	mul.f32 	%f311, %f11, %f309;\n"
    "	cvt.rni.f32.f32 	%f312, %f311;\n"
    "	mul.f32 	%f313, %f10, %f312;\n"
    "	sub.f32 	%f314, %f308, %f313;\n"
    "	mov.f32 	%f315, %f314;\n"
    "	mad.f32 	%f316, %f314, %f314, %f306;\n"
    "	ld.shared.f32 	%f317, [%rd19+1032];\n"
    "	sub.f32 	%f318, %f18, %f317;\n"
    "	mov.f32 	%f319, %f318;\n"
    "	mul.f32 	%f320, %f318, %f11;\n"
    "	cvt.rni.f32.f32 	%f321, %f320;\n"
    "	mul.f32 	%f322, %f10, %f321;\n"
    "	sub.f32 	%f323, %f318, %f322;\n"
    "	mov.f32 	%f324, %f323;\n"
    "	mad.f32 	%f325, %f323, %f323, %f316;\n"
    "	mov.f32 	%f326, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p7, %f325, %f326;\n"
    "	sqrt.approx.f32 	%f327, %f325;\n"
    "	rcp.approx.f32 	%f328, %f327;\n"
    "	cvt.s64.s32 	%rd32, %r62;\n"
    "	mul.wide.s32 	%rd33, %r62, 24;\n"
    "	add.u64 	%rd34, %rd12, %rd33;\n"
    "	mul.f32 	%f329, %f328, %f328;\n"
    "	ld.const.f32 	%f330, [%rd34+12];\n"
    "	ld.const.f32 	%f331, [%rd34+8];\n"
    "	ld.const.f32 	%f332, [%rd34+4];\n"
    "	ld.const.f32 	%f333, [%rd34+0];\n"
    "	ld.const.f32 	%f334, [%rd34+16];\n"
    "	ld.const.f32 	%f335, [%rd34+20];\n"
    "	mul.f32 	%f336, %f329, %f329;\n"
    "	mul.f32 	%f337, %f328, %f329;\n"
    "	mov.f32 	%f338, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f339, %f330, %f338;\n"
    "	sub.f32 	%f340, %f332, %f327;\n"
    "	mov.f32 	%f341, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f342, %f333, %f341;\n"
    "	mov.f32 	%f343, 0f41000000;   	// 8\n"
    "	mul.f32 	%f344, %f334, %f343;\n"
    "	mul.f32 	%f345, %f336, %f336;\n"
    "	mul.f32 	%f346, %f331, %f340;\n"
    "	mul.f32 	%f347, %f339, %f345;\n"
    "	mul.f32 	%f348, %f344, %f345;\n"
    "	mov.f32 	%f349, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f350, %f346, %f349;\n"
    "	ex2.approx.f32 	%f351, %f350;\n"
    "	mul.f32 	%f352, %f342, %f351;\n"
    "	mul.f32 	%f353, %f331, %f352;\n"
    "	mul.f32 	%f354, %f328, %f353;\n"
    "	sub.f32 	%f355, %f354, %f347;\n"
    "	mul.f32 	%f356, %f329, %f348;\n"
    "	sub.f32 	%f357, %f355, %f356;\n"
    "	mad.f32 	%f358, %f335, %f337, %f357;\n"
    "	mov.f32 	%f359, 0f00000000;   	// 0\n"
    "	selp.f32 	%f360, %f359, %f358, %p7;\n"
    "	mov.f32 	%f361, %f304;\n"
    "	mad.f32 	%f362, %f361, %f360, %f293;\n"
    "	st.shared.f32 	[%rd4+0], %f362;\n"
    "	mov.f32 	%f363, %f315;\n"
    "	mad.f32 	%f364, %f363, %f360, %f295;\n"
    "	st.shared.f32 	[%rd4+4], %f364;\n"
    "	mad.f32 	%f365, %f323, %f360, %f296;\n"
    "	st.shared.f32 	[%rd4+8], %f365;\n"
    "	ld.shared.s32 	%r63, [%rd18+1292];\n"
    "	add.s32 	%r64, %r63, %r7;\n"
    "	ld.shared.f32 	%f366, [%rd19+1280];\n"
    "	sub.f32 	%f367, %f20, %f366;\n"
    "	mov.f32 	%f368, %f367;\n"
    "	mul.f32 	%f369, %f11, %f368;\n"
    "	cvt.rni.f32.f32 	%f370, %f369;\n"
    "	mul.f32 	%f371, %f10, %f370;\n"
    "	sub.f32 	%f372, %f367, %f371;\n"
    "	mov.f32 	%f373, %f372;\n"
    "	mov.f32 	%f374, 0f00000000;   	// 0\n"
    "	mad.f32 	%f375, %f372, %f372, %f374;\n"
    "	ld.shared.f32 	%f376, [%rd19+1284];\n"
    "	sub.f32 	%f377, %f19, %f376;\n"
    "	mov.f32 	%f378, %f377;\n"
    "	mov.f32 	%f379, %f378;\n"
    "	mul.f32 	%f380, %f11, %f378;\n"
    "	cvt.rni.f32.f32 	%f381, %f380;\n"
    "	mul.f32 	%f382, %f10, %f381;\n"
    "	sub.f32 	%f383, %f377, %f382;\n"
    "	mov.f32 	%f384, %f383;\n"
    "	mad.f32 	%f385, %f383, %f383, %f375;\n"
    "	ld.shared.f32 	%f386, [%rd19+1288];\n"
    "	sub.f32 	%f387, %f18, %f386;\n"
    "	mov.f32 	%f388, %f387;\n"
    "	mul.f32 	%f389, %f387, %f11;\n"
    "	cvt.rni.f32.f32 	%f390, %f389;\n"
    "	mul.f32 	%f391, %f10, %f390;\n"
    "	sub.f32 	%f392, %f387, %f391;\n"
    "	mov.f32 	%f393, %f392;\n"
    "	mad.f32 	%f394, %f392, %f392, %f385;\n"
    "	mov.f32 	%f395, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p8, %f394, %f395;\n"
    "	sqrt.approx.f32 	%f396, %f394;\n"
    "	rcp.approx.f32 	%f397, %f396;\n"
    "	cvt.s64.s32 	%rd35, %r64;\n"
    "	mul.wide.s32 	%rd36, %r64, 24;\n"
    "	add.u64 	%rd37, %rd12, %rd36;\n"
    "	mul.f32 	%f398, %f397, %f397;\n"
    "	ld.const.f32 	%f399, [%rd37+12];\n"
    "	ld.const.f32 	%f400, [%rd37+8];\n"
    "	ld.const.f32 	%f401, [%rd37+4];\n"
    "	ld.const.f32 	%f402, [%rd37+0];\n"
    "	ld.const.f32 	%f403, [%rd37+16];\n"
    "	ld.const.f32 	%f404, [%rd37+20];\n"
    "	mul.f32 	%f405, %f398, %f398;\n"
    "	mul.f32 	%f406, %f397, %f398;\n"
    "	mov.f32 	%f407, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f408, %f399, %f407;\n"
    "	sub.f32 	%f409, %f401, %f396;\n"
    "	mov.f32 	%f410, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f411, %f402, %f410;\n"
    "	mov.f32 	%f412, 0f41000000;   	// 8\n"
    "	mul.f32 	%f413, %f403, %f412;\n"
    "	mul.f32 	%f414, %f405, %f405;\n"
    "	mul.f32 	%f415, %f400, %f409;\n"
    "	mul.f32 	%f416, %f408, %f414;\n"
    "	mul.f32 	%f417, %f413, %f414;\n"
    "	mov.f32 	%f418, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f419, %f415, %f418;\n"
    "	ex2.approx.f32 	%f420, %f419;\n"
    "	mul.f32 	%f421, %f411, %f420;\n"
    "	mul.f32 	%f422, %f400, %f421;\n"
    "	mul.f32 	%f423, %f397, %f422;\n"
    "	sub.f32 	%f424, %f423, %f416;\n"
    "	mul.f32 	%f425, %f398, %f417;\n"
    "	sub.f32 	%f426, %f424, %f425;\n"
    "	mad.f32 	%f427, %f404, %f406, %f426;\n"
    "	mov.f32 	%f428, 0f00000000;   	// 0\n"
    "	selp.f32 	%f429, %f428, %f427, %p8;\n"
    "	mov.f32 	%f430, %f373;\n"
    "	mad.f32 	%f431, %f430, %f429, %f362;\n"
    "	st.shared.f32 	[%rd4+0], %f431;\n"
    "	mov.f32 	%f432, %f384;\n"
    "	mad.f32 	%f433, %f432, %f429, %f364;\n"
    "	st.shared.f32 	[%rd4+4], %f433;\n"
    "	mad.f32 	%f434, %f392, %f429, %f365;\n"
    "	st.shared.f32 	[%rd4+8], %f434;\n"
    "	ld.shared.s32 	%r65, [%rd18+1548];\n"
    "	add.s32 	%r66, %r65, %r7;\n"
    "	ld.shared.f32 	%f435, [%rd19+1536];\n"
    "	sub.f32 	%f436, %f20, %f435;\n"
    "	mov.f32 	%f437, %f436;\n"
    "	mul.f32 	%f438, %f11, %f437;\n"
    "	cvt.rni.f32.f32 	%f439, %f438;\n"
    "	mul.f32 	%f440, %f10, %f439;\n"
    "	sub.f32 	%f441, %f436, %f440;\n"
    "	mov.f32 	%f442, %f441;\n"
    "	mov.f32 	%f443, 0f00000000;   	// 0\n"
    "	mad.f32 	%f444, %f441, %f441, %f443;\n"
    "	ld.shared.f32 	%f445, [%rd19+1540];\n"
    "	sub.f32 	%f446, %f19, %f445;\n"
    "	mov.f32 	%f447, %f446;\n"
    "	mov.f32 	%f448, %f447;\n"
    "	mul.f32 	%f449, %f11, %f447;\n"
    "	cvt.rni.f32.f32 	%f450, %f449;\n"
    "	mul.f32 	%f451, %f10, %f450;\n"
    "	sub.f32 	%f452, %f446, %f451;\n"
    "	mov.f32 	%f453, %f452;\n"
    "	mad.f32 	%f454, %f452, %f452, %f444;\n"
    "	ld.shared.f32 	%f455, [%rd19+1544];\n"
    "	sub.f32 	%f456, %f18, %f455;\n"
    "	mov.f32 	%f457, %f456;\n"
    "	mul.f32 	%f458, %f456, %f11;\n"
    "	cvt.rni.f32.f32 	%f459, %f458;\n"
    "	mul.f32 	%f460, %f10, %f459;\n"
    "	sub.f32 	%f461, %f456, %f460;\n"
    "	mov.f32 	%f462, %f461;\n"
    "	mad.f32 	%f463, %f461, %f461, %f454;\n"
    "	mov.f32 	%f464, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p9, %f463, %f464;\n"
    "	sqrt.approx.f32 	%f465, %f463;\n"
    "	rcp.approx.f32 	%f466, %f465;\n"
    "	cvt.s64.s32 	%rd38, %r66;\n"
    "	mul.wide.s32 	%rd39, %r66, 24;\n"
    "	add.u64 	%rd40, %rd12, %rd39;\n"
    "	mul.f32 	%f467, %f466, %f466;\n"
    "	ld.const.f32 	%f468, [%rd40+12];\n"
    "	ld.const.f32 	%f469, [%rd40+8];\n"
    "	ld.const.f32 	%f470, [%rd40+4];\n"
    "	ld.const.f32 	%f471, [%rd40+0];\n"
    "	ld.const.f32 	%f472, [%rd40+16];\n"
    "	ld.const.f32 	%f473, [%rd40+20];\n"
    "	mul.f32 	%f474, %f467, %f467;\n"
    "	mul.f32 	%f475, %f466, %f467;\n"
    "	mov.f32 	%f476, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f477, %f468, %f476;\n"
    "	sub.f32 	%f478, %f470, %f465;\n"
    "	mov.f32 	%f479, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f480, %f471, %f479;\n"
    "	mov.f32 	%f481, 0f41000000;   	// 8\n"
    "	mul.f32 	%f482, %f472, %f481;\n"
    "	mul.f32 	%f483, %f474, %f474;\n"
    "	mul.f32 	%f484, %f469, %f478;\n"
    "	mul.f32 	%f485, %f477, %f483;\n"
    "	mul.f32 	%f486, %f482, %f483;\n"
    "	mov.f32 	%f487, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f488, %f484, %f487;\n"
    "	ex2.approx.f32 	%f489, %f488;\n"
    "	mul.f32 	%f490, %f480, %f489;\n"
    "	mul.f32 	%f491, %f469, %f490;\n"
    "	mul.f32 	%f492, %f466, %f491;\n"
    "	sub.f32 	%f493, %f492, %f485;\n"
    "	mul.f32 	%f494, %f467, %f486;\n"
    "	sub.f32 	%f495, %f493, %f494;\n"
    "	mad.f32 	%f496, %f473, %f475, %f495;\n"
    "	mov.f32 	%f497, 0f00000000;   	// 0\n"
    "	selp.f32 	%f498, %f497, %f496, %p9;\n"
    "	mov.f32 	%f499, %f442;\n"
    "	mad.f32 	%f500, %f499, %f498, %f431;\n"
    "	st.shared.f32 	[%rd4+0], %f500;\n"
    "	mov.f32 	%f501, %f453;\n"
    "	mad.f32 	%f502, %f501, %f498, %f433;\n"
    "	st.shared.f32 	[%rd4+4], %f502;\n"
    "	mad.f32 	%f503, %f461, %f498, %f434;\n"
    "	st.shared.f32 	[%rd4+8], %f503;\n"
    "	ld.shared.s32 	%r67, [%rd18+1804];\n"
    "	add.s32 	%r68, %r67, %r7;\n"
    "	ld.shared.f32 	%f504, [%rd19+1792];\n"
    "	sub.f32 	%f505, %f20, %f504;\n"
    "	mov.f32 	%f506, %f505;\n"
    "	mul.f32 	%f507, %f11, %f506;\n"
    "	cvt.rni.f32.f32 	%f508, %f507;\n"
    "	mul.f32 	%f509, %f10, %f508;\n"
    "	sub.f32 	%f510, %f505, %f509;\n"
    "	mov.f32 	%f511, %f510;\n"
    "	mov.f32 	%f512, 0f00000000;   	// 0\n"
    "	mad.f32 	%f513, %f510, %f510, %f512;\n"
    "	ld.shared.f32 	%f514, [%rd19+1796];\n"
    "	sub.f32 	%f515, %f19, %f514;\n"
    "	mov.f32 	%f516, %f515;\n"
    "	mov.f32 	%f517, %f516;\n"
    "	mul.f32 	%f518, %f11, %f516;\n"
    "	cvt.rni.f32.f32 	%f519, %f518;\n"
    "	mul.f32 	%f520, %f10, %f519;\n"
    "	sub.f32 	%f521, %f515, %f520;\n"
    "	mov.f32 	%f522, %f521;\n"
    "	mad.f32 	%f523, %f521, %f521, %f513;\n"
    "	ld.shared.f32 	%f524, [%rd19+1800];\n"
    "	sub.f32 	%f525, %f18, %f524;\n"
    "	mov.f32 	%f526, %f525;\n"
    "	mul.f32 	%f527, %f525, %f11;\n"
    "	cvt.rni.f32.f32 	%f528, %f527;\n"
    "	mul.f32 	%f529, %f10, %f528;\n"
    "	sub.f32 	%f530, %f525, %f529;\n"
    "	mov.f32 	%f531, %f530;\n"
    "	mad.f32 	%f532, %f530, %f530, %f523;\n"
    "	mov.f32 	%f533, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p10, %f532, %f533;\n"
    "	sqrt.approx.f32 	%f534, %f532;\n"
    "	rcp.approx.f32 	%f535, %f534;\n"
    "	cvt.s64.s32 	%rd41, %r68;\n"
    "	mul.wide.s32 	%rd42, %r68, 24;\n"
    "	add.u64 	%rd43, %rd12, %rd42;\n"
    "	mul.f32 	%f536, %f535, %f535;\n"
    "	ld.const.f32 	%f537, [%rd43+12];\n"
    "	ld.const.f32 	%f538, [%rd43+8];\n"
    "	ld.const.f32 	%f539, [%rd43+4];\n"
    "	ld.const.f32 	%f540, [%rd43+0];\n"
    "	ld.const.f32 	%f541, [%rd43+16];\n"
    "	ld.const.f32 	%f542, [%rd43+20];\n"
    "	mul.f32 	%f543, %f536, %f536;\n"
    "	mul.f32 	%f544, %f535, %f536;\n"
    "	mov.f32 	%f545, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f546, %f537, %f545;\n"
    "	sub.f32 	%f547, %f539, %f534;\n"
    "	mov.f32 	%f548, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f549, %f540, %f548;\n"
    "	mov.f32 	%f550, 0f41000000;   	// 8\n"
    "	mul.f32 	%f551, %f541, %f550;\n"
    "	mul.f32 	%f552, %f543, %f543;\n"
    "	mul.f32 	%f553, %f538, %f547;\n"
    "	mul.f32 	%f554, %f546, %f552;\n"
    "	mul.f32 	%f555, %f551, %f552;\n"
    "	mov.f32 	%f556, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f557, %f553, %f556;\n"
    "	ex2.approx.f32 	%f558, %f557;\n"
    "	mul.f32 	%f559, %f549, %f558;\n"
    "	mul.f32 	%f560, %f538, %f559;\n"
    "	mul.f32 	%f561, %f535, %f560;\n"
    "	sub.f32 	%f562, %f561, %f554;\n"
    "	mul.f32 	%f563, %f536, %f555;\n"
    "	sub.f32 	%f564, %f562, %f563;\n"
    "	mad.f32 	%f565, %f542, %f544, %f564;\n"
    "	mov.f32 	%f566, 0f00000000;   	// 0\n"
    "	selp.f32 	%f567, %f566, %f565, %p10;\n"
    "	mov.f32 	%f568, %f511;\n"
    "	mad.f32 	%f569, %f568, %f567, %f500;\n"
    "	st.shared.f32 	[%rd4+0], %f569;\n"
    "	mov.f32 	%f570, %f522;\n"
    "	mad.f32 	%f571, %f570, %f567, %f502;\n"
    "	st.shared.f32 	[%rd4+4], %f571;\n"
    "	mad.f32 	%f572, %f530, %f567, %f503;\n"
    "	st.shared.f32 	[%rd4+8], %f572;\n"
    "	ld.shared.s32 	%r69, [%rd18+2060];\n"
    "	add.s32 	%r70, %r69, %r7;\n"
    "	ld.shared.f32 	%f573, [%rd19+2048];\n"
    "	sub.f32 	%f574, %f20, %f573;\n"
    "	mov.f32 	%f575, %f574;\n"
    "	mul.f32 	%f576, %f11, %f575;\n"
    "	cvt.rni.f32.f32 	%f577, %f576;\n"
    "	mul.f32 	%f578, %f10, %f577;\n"
    "	sub.f32 	%f579, %f574, %f578;\n"
    "	mov.f32 	%f580, %f579;\n"
    "	mov.f32 	%f581, 0f00000000;   	// 0\n"
    "	mad.f32 	%f582, %f579, %f579, %f581;\n"
    "	ld.shared.f32 	%f583, [%rd19+2052];\n"
    "	sub.f32 	%f584, %f19, %f583;\n"
    "	mov.f32 	%f585, %f584;\n"
    "	mov.f32 	%f586, %f585;\n"
    "	mul.f32 	%f587, %f11, %f585;\n"
    "	cvt.rni.f32.f32 	%f588, %f587;\n"
    "	mul.f32 	%f589, %f10, %f588;\n"
    "	sub.f32 	%f590, %f584, %f589;\n"
    "	mov.f32 	%f591, %f590;\n"
    "	mad.f32 	%f592, %f590, %f590, %f582;\n"
    "	ld.shared.f32 	%f593, [%rd19+2056];\n"
    "	sub.f32 	%f594, %f18, %f593;\n"
    "	mov.f32 	%f595, %f594;\n"
    "	mul.f32 	%f596, %f594, %f11;\n"
    "	cvt.rni.f32.f32 	%f597, %f596;\n"
    "	mul.f32 	%f598, %f10, %f597;\n"
    "	sub.f32 	%f599, %f594, %f598;\n"
    "	mov.f32 	%f600, %f599;\n"
    "	mad.f32 	%f601, %f599, %f599, %f592;\n"
    "	mov.f32 	%f602, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p11, %f601, %f602;\n"
    "	sqrt.approx.f32 	%f603, %f601;\n"
    "	rcp.approx.f32 	%f604, %f603;\n"
    "	cvt.s64.s32 	%rd44, %r70;\n"
    "	mul.wide.s32 	%rd45, %r70, 24;\n"
    "	add.u64 	%rd46, %rd12, %rd45;\n"
    "	mul.f32 	%f605, %f604, %f604;\n"
    "	ld.const.f32 	%f606, [%rd46+12];\n"
    "	ld.const.f32 	%f607, [%rd46+8];\n"
    "	ld.const.f32 	%f608, [%rd46+4];\n"
    "	ld.const.f32 	%f609, [%rd46+0];\n"
    "	ld.const.f32 	%f610, [%rd46+16];\n"
    "	ld.const.f32 	%f611, [%rd46+20];\n"
    "	mul.f32 	%f612, %f605, %f605;\n"
    "	mul.f32 	%f613, %f604, %f605;\n"
    "	mov.f32 	%f614, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f615, %f606, %f614;\n"
    "	sub.f32 	%f616, %f608, %f603;\n"
    "	mov.f32 	%f617, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f618, %f609, %f617;\n"
    "	mov.f32 	%f619, 0f41000000;   	// 8\n"
    "	mul.f32 	%f620, %f610, %f619;\n"
    "	mul.f32 	%f621, %f612, %f612;\n"
    "	mul.f32 	%f622, %f607, %f616;\n"
    "	mul.f32 	%f623, %f615, %f621;\n"
    "	mul.f32 	%f624, %f620, %f621;\n"
    "	mov.f32 	%f625, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f626, %f622, %f625;\n"
    "	ex2.approx.f32 	%f627, %f626;\n"
    "	mul.f32 	%f628, %f618, %f627;\n"
    "	mul.f32 	%f629, %f607, %f628;\n"
    "	mul.f32 	%f630, %f604, %f629;\n"
    "	sub.f32 	%f631, %f630, %f623;\n"
    "	mul.f32 	%f632, %f605, %f624;\n"
    "	sub.f32 	%f633, %f631, %f632;\n"
    "	mad.f32 	%f634, %f611, %f613, %f633;\n"
    "	mov.f32 	%f635, 0f00000000;   	// 0\n"
    "	selp.f32 	%f636, %f635, %f634, %p11;\n"
    "	mov.f32 	%f637, %f580;\n"
    "	mad.f32 	%f638, %f637, %f636, %f569;\n"
    "	st.shared.f32 	[%rd4+0], %f638;\n"
    "	mov.f32 	%f639, %f591;\n"
    "	mad.f32 	%f640, %f639, %f636, %f571;\n"
    "	st.shared.f32 	[%rd4+4], %f640;\n"
    "	mad.f32 	%f641, %f599, %f636, %f572;\n"
    "	st.shared.f32 	[%rd4+8], %f641;\n"
    "	ld.shared.s32 	%r71, [%rd18+2316];\n"
    "	add.s32 	%r72, %r71, %r7;\n"
    "	ld.shared.f32 	%f642, [%rd19+2304];\n"
    "	sub.f32 	%f643, %f20, %f642;\n"
    "	mov.f32 	%f644, %f643;\n"
    "	mul.f32 	%f645, %f11, %f644;\n"
    "	cvt.rni.f32.f32 	%f646, %f645;\n"
    "	mul.f32 	%f647, %f10, %f646;\n"
    "	sub.f32 	%f648, %f643, %f647;\n"
    "	mov.f32 	%f649, %f648;\n"
    "	mov.f32 	%f650, 0f00000000;   	// 0\n"
    "	mad.f32 	%f651, %f648, %f648, %f650;\n"
    "	ld.shared.f32 	%f652, [%rd19+2308];\n"
    "	sub.f32 	%f653, %f19, %f652;\n"
    "	mov.f32 	%f654, %f653;\n"
    "	mov.f32 	%f655, %f654;\n"
    "	mul.f32 	%f656, %f11, %f654;\n"
    "	cvt.rni.f32.f32 	%f657, %f656;\n"
    "	mul.f32 	%f658, %f10, %f657;\n"
    "	sub.f32 	%f659, %f653, %f658;\n"
    "	mov.f32 	%f660, %f659;\n"
    "	mad.f32 	%f661, %f659, %f659, %f651;\n"
    "	ld.shared.f32 	%f662, [%rd19+2312];\n"
    "	sub.f32 	%f663, %f18, %f662;\n"
    "	mov.f32 	%f664, %f663;\n"
    "	mul.f32 	%f665, %f663, %f11;\n"
    "	cvt.rni.f32.f32 	%f666, %f665;\n"
    "	mul.f32 	%f667, %f10, %f666;\n"
    "	sub.f32 	%f668, %f663, %f667;\n"
    "	mov.f32 	%f669, %f668;\n"
    "	mad.f32 	%f670, %f668, %f668, %f661;\n"
    "	mov.f32 	%f671, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p12, %f670, %f671;\n"
    "	sqrt.approx.f32 	%f672, %f670;\n"
    "	rcp.approx.f32 	%f673, %f672;\n"
    "	cvt.s64.s32 	%rd47, %r72;\n"
    "	mul.wide.s32 	%rd48, %r72, 24;\n"
    "	add.u64 	%rd49, %rd12, %rd48;\n"
    "	mul.f32 	%f674, %f673, %f673;\n"
    "	ld.const.f32 	%f675, [%rd49+12];\n"
    "	ld.const.f32 	%f676, [%rd49+8];\n"
    "	ld.const.f32 	%f677, [%rd49+4];\n"
    "	ld.const.f32 	%f678, [%rd49+0];\n"
    "	ld.const.f32 	%f679, [%rd49+16];\n"
    "	ld.const.f32 	%f680, [%rd49+20];\n"
    "	mul.f32 	%f681, %f674, %f674;\n"
    "	mul.f32 	%f682, %f673, %f674;\n"
    "	mov.f32 	%f683, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f684, %f675, %f683;\n"
    "	sub.f32 	%f685, %f677, %f672;\n"
    "	mov.f32 	%f686, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f687, %f678, %f686;\n"
    "	mov.f32 	%f688, 0f41000000;   	// 8\n"
    "	mul.f32 	%f689, %f679, %f688;\n"
    "	mul.f32 	%f690, %f681, %f681;\n"
    "	mul.f32 	%f691, %f676, %f685;\n"
    "	mul.f32 	%f692, %f684, %f690;\n"
    "	mul.f32 	%f693, %f689, %f690;\n"
    "	mov.f32 	%f694, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f695, %f691, %f694;\n"
    "	ex2.approx.f32 	%f696, %f695;\n"
    "	mul.f32 	%f697, %f687, %f696;\n"
    "	mul.f32 	%f698, %f676, %f697;\n"
    "	mul.f32 	%f699, %f673, %f698;\n"
    "	sub.f32 	%f700, %f699, %f692;\n"
    "	mul.f32 	%f701, %f674, %f693;\n"
    "	sub.f32 	%f702, %f700, %f701;\n"
    "	mad.f32 	%f703, %f680, %f682, %f702;\n"
    "	mov.f32 	%f704, 0f00000000;   	// 0\n"
    "	selp.f32 	%f705, %f704, %f703, %p12;\n"
    "	mov.f32 	%f706, %f649;\n"
    "	mad.f32 	%f707, %f706, %f705, %f638;\n"
    "	st.shared.f32 	[%rd4+0], %f707;\n"
    "	mov.f32 	%f708, %f660;\n"
    "	mad.f32 	%f709, %f708, %f705, %f640;\n"
    "	st.shared.f32 	[%rd4+4], %f709;\n"
    "	mad.f32 	%f710, %f668, %f705, %f641;\n"
    "	st.shared.f32 	[%rd4+8], %f710;\n"
    "	ld.shared.s32 	%r73, [%rd18+2572];\n"
    "	add.s32 	%r74, %r73, %r7;\n"
    "	ld.shared.f32 	%f711, [%rd19+2560];\n"
    "	sub.f32 	%f712, %f20, %f711;\n"
    "	mov.f32 	%f713, %f712;\n"
    "	mul.f32 	%f714, %f11, %f713;\n"
    "	cvt.rni.f32.f32 	%f715, %f714;\n"
    "	mul.f32 	%f716, %f10, %f715;\n"
    "	sub.f32 	%f717, %f712, %f716;\n"
    "	mov.f32 	%f718, %f717;\n"
    "	mov.f32 	%f719, 0f00000000;   	// 0\n"
    "	mad.f32 	%f720, %f717, %f717, %f719;\n"
    "	ld.shared.f32 	%f721, [%rd19+2564];\n"
    "	sub.f32 	%f722, %f19, %f721;\n"
    "	mov.f32 	%f723, %f722;\n"
    "	mov.f32 	%f724, %f723;\n"
    "	mul.f32 	%f725, %f11, %f723;\n"
    "	cvt.rni.f32.f32 	%f726, %f725;\n"
    "	mul.f32 	%f727, %f10, %f726;\n"
    "	sub.f32 	%f728, %f722, %f727;\n"
    "	mov.f32 	%f729, %f728;\n"
    "	mad.f32 	%f730, %f728, %f728, %f720;\n"
    "	ld.shared.f32 	%f731, [%rd19+2568];\n"
    "	sub.f32 	%f732, %f18, %f731;\n"
    "	mov.f32 	%f733, %f732;\n"
    "	mul.f32 	%f734, %f732, %f11;\n"
    "	cvt.rni.f32.f32 	%f735, %f734;\n"
    "	mul.f32 	%f736, %f10, %f735;\n"
    "	sub.f32 	%f737, %f732, %f736;\n"
    "	mov.f32 	%f738, %f737;\n"
    "	mad.f32 	%f739, %f737, %f737, %f730;\n"
    "	mov.f32 	%f740, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p13, %f739, %f740;\n"
    "	sqrt.approx.f32 	%f741, %f739;\n"
    "	rcp.approx.f32 	%f742, %f741;\n"
    "	cvt.s64.s32 	%rd50, %r74;\n"
    "	mul.wide.s32 	%rd51, %r74, 24;\n"
    "	add.u64 	%rd52, %rd12, %rd51;\n"
    "	mul.f32 	%f743, %f742, %f742;\n"
    "	ld.const.f32 	%f744, [%rd52+12];\n"
    "	ld.const.f32 	%f745, [%rd52+8];\n"
    "	ld.const.f32 	%f746, [%rd52+4];\n"
    "	ld.const.f32 	%f747, [%rd52+0];\n"
    "	ld.const.f32 	%f748, [%rd52+16];\n"
    "	ld.const.f32 	%f749, [%rd52+20];\n"
    "	mul.f32 	%f750, %f743, %f743;\n"
    "	mul.f32 	%f751, %f742, %f743;\n"
    "	mov.f32 	%f752, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f753, %f744, %f752;\n"
    "	sub.f32 	%f754, %f746, %f741;\n"
    "	mov.f32 	%f755, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f756, %f747, %f755;\n"
    "	mov.f32 	%f757, 0f41000000;   	// 8\n"
    "	mul.f32 	%f758, %f748, %f757;\n"
    "	mul.f32 	%f759, %f750, %f750;\n"
    "	mul.f32 	%f760, %f745, %f754;\n"
    "	mul.f32 	%f761, %f753, %f759;\n"
    "	mul.f32 	%f762, %f758, %f759;\n"
    "	mov.f32 	%f763, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f764, %f760, %f763;\n"
    "	ex2.approx.f32 	%f765, %f764;\n"
    "	mul.f32 	%f766, %f756, %f765;\n"
    "	mul.f32 	%f767, %f745, %f766;\n"
    "	mul.f32 	%f768, %f742, %f767;\n"
    "	sub.f32 	%f769, %f768, %f761;\n"
    "	mul.f32 	%f770, %f743, %f762;\n"
    "	sub.f32 	%f771, %f769, %f770;\n"
    "	mad.f32 	%f772, %f749, %f751, %f771;\n"
    "	mov.f32 	%f773, 0f00000000;   	// 0\n"
    "	selp.f32 	%f774, %f773, %f772, %p13;\n"
    "	mov.f32 	%f775, %f718;\n"
    "	mad.f32 	%f776, %f775, %f774, %f707;\n"
    "	st.shared.f32 	[%rd4+0], %f776;\n"
    "	mov.f32 	%f777, %f729;\n"
    "	mad.f32 	%f778, %f777, %f774, %f709;\n"
    "	st.shared.f32 	[%rd4+4], %f778;\n"
    "	mad.f32 	%f779, %f737, %f774, %f710;\n"
    "	st.shared.f32 	[%rd4+8], %f779;\n"
    "	ld.shared.s32 	%r75, [%rd18+2828];\n"
    "	add.s32 	%r76, %r75, %r7;\n"
    "	ld.shared.f32 	%f780, [%rd19+2816];\n"
    "	sub.f32 	%f781, %f20, %f780;\n"
    "	mov.f32 	%f782, %f781;\n"
    "	mul.f32 	%f783, %f11, %f782;\n"
    "	cvt.rni.f32.f32 	%f784, %f783;\n"
    "	mul.f32 	%f785, %f10, %f784;\n"
    "	sub.f32 	%f786, %f781, %f785;\n"
    "	mov.f32 	%f787, %f786;\n"
    "	mov.f32 	%f788, 0f00000000;   	// 0\n"
    "	mad.f32 	%f789, %f786, %f786, %f788;\n"
    "	ld.shared.f32 	%f790, [%rd19+2820];\n"
    "	sub.f32 	%f791, %f19, %f790;\n"
    "	mov.f32 	%f792, %f791;\n"
    "	mov.f32 	%f793, %f792;\n"
    "	mul.f32 	%f794, %f11, %f792;\n"
    "	cvt.rni.f32.f32 	%f795, %f794;\n"
    "	mul.f32 	%f796, %f10, %f795;\n"
    "	sub.f32 	%f797, %f791, %f796;\n"
    "	mov.f32 	%f798, %f797;\n"
    "	mad.f32 	%f799, %f797, %f797, %f789;\n"
    "	ld.shared.f32 	%f800, [%rd19+2824];\n"
    "	sub.f32 	%f801, %f18, %f800;\n"
    "	mov.f32 	%f802, %f801;\n"
    "	mul.f32 	%f803, %f801, %f11;\n"
    "	cvt.rni.f32.f32 	%f804, %f803;\n"
    "	mul.f32 	%f805, %f10, %f804;\n"
    "	sub.f32 	%f806, %f801, %f805;\n"
    "	mov.f32 	%f807, %f806;\n"
    "	mad.f32 	%f808, %f806, %f806, %f799;\n"
    "	mov.f32 	%f809, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p14, %f808, %f809;\n"
    "	sqrt.approx.f32 	%f810, %f808;\n"
    "	rcp.approx.f32 	%f811, %f810;\n"
    "	cvt.s64.s32 	%rd53, %r76;\n"
    "	mul.wide.s32 	%rd54, %r76, 24;\n"
    "	add.u64 	%rd55, %rd12, %rd54;\n"
    "	mul.f32 	%f812, %f811, %f811;\n"
    "	ld.const.f32 	%f813, [%rd55+12];\n"
    "	ld.const.f32 	%f814, [%rd55+8];\n"
    "	ld.const.f32 	%f815, [%rd55+4];\n"
    "	ld.const.f32 	%f816, [%rd55+0];\n"
    "	ld.const.f32 	%f817, [%rd55+16];\n"
    "	ld.const.f32 	%f818, [%rd55+20];\n"
    "	mul.f32 	%f819, %f812, %f812;\n"
    "	mul.f32 	%f820, %f811, %f812;\n"
    "	mov.f32 	%f821, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f822, %f813, %f821;\n"
    "	sub.f32 	%f823, %f815, %f810;\n"
    "	mov.f32 	%f824, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f825, %f816, %f824;\n"
    "	mov.f32 	%f826, 0f41000000;   	// 8\n"
    "	mul.f32 	%f827, %f817, %f826;\n"
    "	mul.f32 	%f828, %f819, %f819;\n"
    "	mul.f32 	%f829, %f814, %f823;\n"
    "	mul.f32 	%f830, %f822, %f828;\n"
    "	mul.f32 	%f831, %f827, %f828;\n"
    "	mov.f32 	%f832, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f833, %f829, %f832;\n"
    "	ex2.approx.f32 	%f834, %f833;\n"
    "	mul.f32 	%f835, %f825, %f834;\n"
    "	mul.f32 	%f836, %f814, %f835;\n"
    "	mul.f32 	%f837, %f811, %f836;\n"
    "	sub.f32 	%f838, %f837, %f830;\n"
    "	mul.f32 	%f839, %f812, %f831;\n"
    "	sub.f32 	%f840, %f838, %f839;\n"
    "	mad.f32 	%f841, %f818, %f820, %f840;\n"
    "	mov.f32 	%f842, 0f00000000;   	// 0\n"
    "	selp.f32 	%f843, %f842, %f841, %p14;\n"
    "	mov.f32 	%f844, %f787;\n"
    "	mad.f32 	%f845, %f844, %f843, %f776;\n"
    "	st.shared.f32 	[%rd4+0], %f845;\n"
    "	mov.f32 	%f846, %f798;\n"
    "	mad.f32 	%f847, %f846, %f843, %f778;\n"
    "	st.shared.f32 	[%rd4+4], %f847;\n"
    "	mad.f32 	%f848, %f806, %f843, %f779;\n"
    "	st.shared.f32 	[%rd4+8], %f848;\n"
    "	ld.shared.s32 	%r77, [%rd18+3084];\n"
    "	add.s32 	%r78, %r77, %r7;\n"
    "	ld.shared.f32 	%f849, [%rd19+3072];\n"
    "	sub.f32 	%f850, %f20, %f849;\n"
    "	mov.f32 	%f851, %f850;\n"
    "	mul.f32 	%f852, %f11, %f851;\n"
    "	cvt.rni.f32.f32 	%f853, %f852;\n"
    "	mul.f32 	%f854, %f10, %f853;\n"
    "	sub.f32 	%f855, %f850, %f854;\n"
    "	mov.f32 	%f856, %f855;\n"
    "	mov.f32 	%f857, 0f00000000;   	// 0\n"
    "	mad.f32 	%f858, %f855, %f855, %f857;\n"
    "	ld.shared.f32 	%f859, [%rd19+3076];\n"
    "	sub.f32 	%f860, %f19, %f859;\n"
    "	mov.f32 	%f861, %f860;\n"
    "	mov.f32 	%f862, %f861;\n"
    "	mul.f32 	%f863, %f11, %f861;\n"
    "	cvt.rni.f32.f32 	%f864, %f863;\n"
    "	mul.f32 	%f865, %f10, %f864;\n"
    "	sub.f32 	%f866, %f860, %f865;\n"
    "	mov.f32 	%f867, %f866;\n"
    "	mad.f32 	%f868, %f866, %f866, %f858;\n"
    "	ld.shared.f32 	%f869, [%rd19+3080];\n"
    "	sub.f32 	%f870, %f18, %f869;\n"
    "	mov.f32 	%f871, %f870;\n"
    "	mul.f32 	%f872, %f870, %f11;\n"
    "	cvt.rni.f32.f32 	%f873, %f872;\n"
    "	mul.f32 	%f874, %f10, %f873;\n"
    "	sub.f32 	%f875, %f870, %f874;\n"
    "	mov.f32 	%f876, %f875;\n"
    "	mad.f32 	%f877, %f875, %f875, %f868;\n"
    "	mov.f32 	%f878, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p15, %f877, %f878;\n"
    "	sqrt.approx.f32 	%f879, %f877;\n"
    "	rcp.approx.f32 	%f880, %f879;\n"
    "	cvt.s64.s32 	%rd56, %r78;\n"
    "	mul.wide.s32 	%rd57, %r78, 24;\n"
    "	add.u64 	%rd58, %rd12, %rd57;\n"
    "	mul.f32 	%f881, %f880, %f880;\n"
    "	ld.const.f32 	%f882, [%rd58+12];\n"
    "	ld.const.f32 	%f883, [%rd58+8];\n"
    "	ld.const.f32 	%f884, [%rd58+4];\n"
    "	ld.const.f32 	%f885, [%rd58+0];\n"
    "	ld.const.f32 	%f886, [%rd58+16];\n"
    "	ld.const.f32 	%f887, [%rd58+20];\n"
    "	mul.f32 	%f888, %f881, %f881;\n"
    "	mul.f32 	%f889, %f880, %f881;\n"
    "	mov.f32 	%f890, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f891, %f882, %f890;\n"
    "	sub.f32 	%f892, %f884, %f879;\n"
    "	mov.f32 	%f893, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f894, %f885, %f893;\n"
    "	mov.f32 	%f895, 0f41000000;   	// 8\n"
    "	mul.f32 	%f896, %f886, %f895;\n"
    "	mul.f32 	%f897, %f888, %f888;\n"
    "	mul.f32 	%f898, %f883, %f892;\n"
    "	mul.f32 	%f899, %f891, %f897;\n"
    "	mul.f32 	%f900, %f896, %f897;\n"
    "	mov.f32 	%f901, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f902, %f898, %f901;\n"
    "	ex2.approx.f32 	%f903, %f902;\n"
    "	mul.f32 	%f904, %f894, %f903;\n"
    "	mul.f32 	%f905, %f883, %f904;\n"
    "	mul.f32 	%f906, %f880, %f905;\n"
    "	sub.f32 	%f907, %f906, %f899;\n"
    "	mul.f32 	%f908, %f881, %f900;\n"
    "	sub.f32 	%f909, %f907, %f908;\n"
    "	mad.f32 	%f910, %f887, %f889, %f909;\n"
    "	mov.f32 	%f911, 0f00000000;   	// 0\n"
    "	selp.f32 	%f912, %f911, %f910, %p15;\n"
    "	mov.f32 	%f913, %f856;\n"
    "	mad.f32 	%f914, %f913, %f912, %f845;\n"
    "	st.shared.f32 	[%rd4+0], %f914;\n"
    "	mov.f32 	%f915, %f867;\n"
    "	mad.f32 	%f916, %f915, %f912, %f847;\n"
    "	st.shared.f32 	[%rd4+4], %f916;\n"
    "	mad.f32 	%f917, %f875, %f912, %f848;\n"
    "	st.shared.f32 	[%rd4+8], %f917;\n"
    "	ld.shared.s32 	%r79, [%rd18+3340];\n"
    "	add.s32 	%r80, %r79, %r7;\n"
    "	ld.shared.f32 	%f918, [%rd19+3328];\n"
    "	sub.f32 	%f919, %f20, %f918;\n"
    "	mov.f32 	%f920, %f919;\n"
    "	mul.f32 	%f921, %f11, %f920;\n"
    "	cvt.rni.f32.f32 	%f922, %f921;\n"
    "	mul.f32 	%f923, %f10, %f922;\n"
    "	sub.f32 	%f924, %f919, %f923;\n"
    "	mov.f32 	%f925, %f924;\n"
    "	mov.f32 	%f926, 0f00000000;   	// 0\n"
    "	mad.f32 	%f927, %f924, %f924, %f926;\n"
    "	ld.shared.f32 	%f928, [%rd19+3332];\n"
    "	sub.f32 	%f929, %f19, %f928;\n"
    "	mov.f32 	%f930, %f929;\n"
    "	mov.f32 	%f931, %f930;\n"
    "	mul.f32 	%f932, %f11, %f930;\n"
    "	cvt.rni.f32.f32 	%f933, %f932;\n"
    "	mul.f32 	%f934, %f10, %f933;\n"
    "	sub.f32 	%f935, %f929, %f934;\n"
    "	mov.f32 	%f936, %f935;\n"
    "	mad.f32 	%f937, %f935, %f935, %f927;\n"
    "	ld.shared.f32 	%f938, [%rd19+3336];\n"
    "	sub.f32 	%f939, %f18, %f938;\n"
    "	mov.f32 	%f940, %f939;\n"
    "	mul.f32 	%f941, %f939, %f11;\n"
    "	cvt.rni.f32.f32 	%f942, %f941;\n"
    "	mul.f32 	%f943, %f10, %f942;\n"
    "	sub.f32 	%f944, %f939, %f943;\n"
    "	mov.f32 	%f945, %f944;\n"
    "	mad.f32 	%f946, %f944, %f944, %f937;\n"
    "	mov.f32 	%f947, 0f00000000;   	// 0\n"
    "	setp.eq.f32 	%p16, %f946, %f947;\n"
    "	sqrt.approx.f32 	%f948, %f946;\n"
    "	rcp.approx.f32 	%f949, %f948;\n"
    "	cvt.s64.s32 	%rd59, %r80;\n"
    "	mul.wide.s32 	%rd60, %r80, 24;\n"
    "	add.u64 	%rd61, %rd12, %rd60;\n"
    "	mul.f32 	%f950, %f949, %f949;\n"
    "	ld.const.f32 	%f951, [%rd61+12];\n"
    "	ld.const.f32 	%f952, [%rd61+8];\n"
    "	ld.const.f32 	%f953, [%rd61+4];\n"
    "	ld.const.f32 	%f954, [%rd61+0];\n"
    "	ld.const.f32 	%f955, [%rd61+16];\n"
    "	ld.const.f32 	%f956, [%rd61+20];\n"
    "	mul.f32 	%f957, %f950, %f950;\n"
    "	mul.f32 	%f958, %f949, %f950;\n"
    "	mov.f32 	%f959, 0f40c00000;   	// 6\n"
    "	mul.f32 	%f960, %f951, %f959;\n"
    "	sub.f32 	%f961, %f953, %f948;\n"
    "	mov.f32 	%f962, 0f3c70319e;   	// 0.0146603\n"
    "	mul.f32 	%f963, %f954, %f962;\n"
    "	mov.f32 	%f964, 0f41000000;   	// 8\n"
    "	mul.f32 	%f965, %f955, %f964;\n"
    "	mul.f32 	%f966, %f957, %f957;\n"
    "	mul.f32 	%f967, %f952, %f961;\n"
    "	mul.f32 	%f968, %f960, %f966;\n"
    "	mul.f32 	%f969, %f965, %f966;\n"
    "	mov.f32 	%f970, 0f3fb8aa3b;   	// 1.4427\n"
    "	mul.f32 	%f971, %f967, %f970;\n"
    "	ex2.approx.f32 	%f972, %f971;\n"
    "	mul.f32 	%f973, %f963, %f972;\n"
    "	mul.f32 	%f974, %f952, %f973;\n"
    "	mul.f32 	%f975, %f949, %f974;\n"
    "	sub.f32 	%f976, %f975, %f968;\n"
    "	mul.f32 	%f977, %f950, %f969;\n"
    "	sub.f32 	%f978, %f976, %f977;\n"
    "	mad.f32 	%f979, %f956, %f958, %f978;\n"
    "	mov.f32 	%f980, 0f00000000;   	// 0\n"
    "	selp.f32 	%f981, %f980, %f979, %p16;\n"
    "	mov.f32 	%f982, %f925;\n"
    "	mad.f32 	%f983, %f982, %f981, %f914;\n"
    "	st.shared.f32 	[%rd4+0], %f983;\n"
    "	mov.f32 	%f984, %f936;\n"
    "	mad.f32 	%f985, %f984, %f981, %f916;\n"
    "	st.shared.f32 	[%rd4+4], %f985;\n"
    "	mad.f32 	%f986, %f944, %f981, %f917;\n"
    "	st.shared.f32 	[%rd4+8], %f986;\n"
    "	ld.shared.s32 	%r81, [%rd18+3596];\n"
    "	add.s32 	%r82, %r81, %r7;\n"
    "	ld.shared.f32 	%f987, [%rd19+3584];\n"
    "	sub.f32 	%f988, %f20, %f987;\n"
    "	mov.f32 	%f989, %f988;\n"
    "	mul.f32 	%f990, %f11, %f989;\n"
    "	cvt.rni.f32.f32 	%f991, %f990;\n"
    "	mul.f32 	%f992, %f10, %f991;\n"
    "	sub.f32 	%f993, %f988, %f992;\n"
    "	mov.f32 	%f994, %f993;\n"
    "	mov.f32 	%f995, 0f00000000;   	// 0\n"
    "	mad.f32 	%f996, %f993, %f993, %f995;\n"
    "	ld.shared.f32 	%f997, [%rd19+3588];\n"
    "	sub.f32 	%f998, %f19, %f997;\n"
    "	mov.f32 	%f999, %f998;\n"
    "	mov.f32 	%f1000, %f999;\n"
    "	mul.f32 	%f1001, %f11, %f999;\n"
    "	cvt.rni.f32.f32 	%f1002, %f1001;\n"
    "	mul.f32 	%f1003, %f10, %f1002;\n"
    "	sub.f32 	%f1004, %f998, %f1003;\n"
    "	mov.f32 	%f1005, %f1004;\n"
    "	mad.f32 	%f1006, %f1004, %f1004, %f996;\n"
    "	ld.shared.f32 	%f1007, [%rd19+3592];\n"
    "	sub.f32 	%f1008, %f18, %f1007;\n"
    "	mov.f32 	%f1009, %f1008;\n"
    "	mul.f32 	%f1010, %f1008, %f11;\n"
    "	cvt.rni.f32.f32 	%f1011, %f1010;\n"
    "	mul.f32 	%f1012, %f10, %f1011;\n"
    "	sub.f32 	%f1013, %f1008, %f1012;\n"
    "	mov.f32 	%f1014, %f1013;\n"
    "	mad.f32 	%f1015, %f1013, %f1013, %f1006;\n"
    "	mov.f32 	%f1016, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p17, %f1015, %f1016;\n"
    "	sqrt.approx.f32 	%f1017, %f1015;\n"
    "	rcp.approx.f32 	%f1018, %f1017;\n"
    "	cvt.s64.s32 	%rd62, %r82;\n"
    "	mul.wide.s32 	%rd63, %r82, 24;\n"
    "	add.u64 	%rd64, %rd12, %rd63;\n"
    "	mul.f32 	%f1019, %f1018, %f1018;\n"
    "	ld.const.f32 	%f1020, [%rd64+12];\n"
    "	ld.const.f32 	%f1021, [%rd64+8];\n"
    "	ld.const.f32 	%f1022, [%rd64+4];\n"
    "	ld.const.f32 	%f1023, [%rd64+0];\n"
    "	ld.const.f32 	%f1024, [%rd64+16];\n"
    "	ld.const.f32 	%f1025, [%rd64+20];\n"
    "	mul.f32 	%f1026, %f1019, %f1019;\n"
    "	mul.f32 	%f1027, %f1018, %f1019;\n"
    "	mov.f32 	%f1028, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1029, %f1020, %f1028;\n"
    "	sub.f32 	%f1030, %f1022, %f1017;\n"
    "	mov.f32 	%f1031, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1032, %f1023, %f1031;\n"
    "	mov.f32 	%f1033, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1034, %f1024, %f1033;\n"
    "	mul.f32 	%f1035, %f1026, %f1026;\n"
    "	mul.f32 	%f1036, %f1021, %f1030;\n"
    "	mul.f32 	%f1037, %f1029, %f1035;\n"
    "	mul.f32 	%f1038, %f1034, %f1035;\n"
    "	mov.f32 	%f1039, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1040, %f1036, %f1039;\n"
    "	ex2.approx.f32 	%f1041, %f1040;\n"
    "	mul.f32 	%f1042, %f1032, %f1041;\n"
    "	mul.f32 	%f1043, %f1021, %f1042;\n"
    "	mul.f32 	%f1044, %f1018, %f1043;\n"
    "	sub.f32 	%f1045, %f1044, %f1037;\n"
    "	mul.f32 	%f1046, %f1019, %f1038;\n"
    "	sub.f32 	%f1047, %f1045, %f1046;\n"
    "	mad.f32 	%f1048, %f1025, %f1027, %f1047;\n"
    "	mov.f32 	%f1049, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1050, %f1049, %f1048, %p17;\n"
    "	mov.f32 	%f1051, %f994;\n"
    "	mad.f32 	%f1052, %f1051, %f1050, %f983;\n"
    "	st.shared.f32 	[%rd4+0], %f1052;\n"
    "	mov.f32 	%f1053, %f1005;\n"
    "	mad.f32 	%f1054, %f1053, %f1050, %f985;\n"
    "	st.shared.f32 	[%rd4+4], %f1054;\n"
    "	mad.f32 	%f1055, %f1013, %f1050, %f986;\n"
    "	st.shared.f32 	[%rd4+8], %f1055;\n"
    "	ld.shared.s32 	%r83, [%rd18+3852];\n"
    "	add.s32 	%r84, %r83, %r7;\n"
    "	ld.shared.f32 	%f1056, [%rd19+3840];\n"
    "	sub.f32 	%f1057, %f20, %f1056;\n"
    "	mov.f32 	%f1058, %f1057;\n"
    "	mul.f32 	%f1059, %f11, %f1058;\n"
    "	cvt.rni.f32.f32 	%f1060, %f1059;\n"
    "	mul.f32 	%f1061, %f10, %f1060;\n"
    "	sub.f32 	%f1062, %f1057, %f1061;\n"
    "	mov.f32 	%f1063, %f1062;\n"
    "	mov.f32 	%f1064, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1065, %f1062, %f1062, %f1064;\n"
    "	ld.shared.f32 	%f1066, [%rd19+3844];\n"
    "	sub.f32 	%f1067, %f19, %f1066;\n"
    "	mov.f32 	%f1068, %f1067;\n"
    "	mov.f32 	%f1069, %f1068;\n"
    "	mul.f32 	%f1070, %f11, %f1068;\n"
    "	cvt.rni.f32.f32 	%f1071, %f1070;\n"
    "	mul.f32 	%f1072, %f10, %f1071;\n"
    "	sub.f32 	%f1073, %f1067, %f1072;\n"
    "	mov.f32 	%f1074, %f1073;\n"
    "	mad.f32 	%f1075, %f1073, %f1073, %f1065;\n"
    "	ld.shared.f32 	%f1076, [%rd19+3848];\n"
    "	sub.f32 	%f1077, %f18, %f1076;\n"
    "	mov.f32 	%f1078, %f1077;\n"
    "	mul.f32 	%f1079, %f1077, %f11;\n"
    "	cvt.rni.f32.f32 	%f1080, %f1079;\n"
    "	mul.f32 	%f1081, %f10, %f1080;\n"
    "	sub.f32 	%f1082, %f1077, %f1081;\n"
    "	mov.f32 	%f1083, %f1082;\n"
    "	mad.f32 	%f1084, %f1082, %f1082, %f1075;\n"
    "	mov.f32 	%f1085, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p18, %f1084, %f1085;\n"
    "	sqrt.approx.f32 	%f1086, %f1084;\n"
    "	rcp.approx.f32 	%f1087, %f1086;\n"
    "	cvt.s64.s32 	%rd65, %r84;\n"
    "	mul.wide.s32 	%rd66, %r84, 24;\n"
    "	add.u64 	%rd67, %rd12, %rd66;\n"
    "	mul.f32 	%f1088, %f1087, %f1087;\n"
    "	ld.const.f32 	%f1089, [%rd67+12];\n"
    "	ld.const.f32 	%f1090, [%rd67+8];\n"
    "	ld.const.f32 	%f1091, [%rd67+4];\n"
    "	ld.const.f32 	%f1092, [%rd67+0];\n"
    "	ld.const.f32 	%f1093, [%rd67+16];\n"
    "	ld.const.f32 	%f1094, [%rd67+20];\n"
    "	mul.f32 	%f1095, %f1088, %f1088;\n"
    "	mul.f32 	%f1096, %f1087, %f1088;\n"
    "	mov.f32 	%f1097, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1098, %f1089, %f1097;\n"
    "	sub.f32 	%f1099, %f1091, %f1086;\n"
    "	mov.f32 	%f1100, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1101, %f1092, %f1100;\n"
    "	mov.f32 	%f1102, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1103, %f1093, %f1102;\n"
    "	mul.f32 	%f1104, %f1095, %f1095;\n"
    "	mul.f32 	%f1105, %f1090, %f1099;\n"
    "	mul.f32 	%f1106, %f1098, %f1104;\n"
    "	mul.f32 	%f1107, %f1103, %f1104;\n"
    "	mov.f32 	%f1108, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1109, %f1105, %f1108;\n"
    "	ex2.approx.f32 	%f1110, %f1109;\n"
    "	mul.f32 	%f1111, %f1101, %f1110;\n"
    "	mul.f32 	%f1112, %f1090, %f1111;\n"
    "	mul.f32 	%f1113, %f1087, %f1112;\n"
    "	sub.f32 	%f1114, %f1113, %f1106;\n"
    "	mul.f32 	%f1115, %f1088, %f1107;\n"
    "	sub.f32 	%f1116, %f1114, %f1115;\n"
    "	mad.f32 	%f1117, %f1094, %f1096, %f1116;\n"
    "	mov.f32 	%f1118, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1119, %f1118, %f1117, %p18;\n"
    "	mov.f32 	%f1120, %f1063;\n"
    "	mad.f32 	%f15, %f1120, %f1119, %f1052;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f1121, %f1074;\n"
    "	mad.f32 	%f16, %f1121, %f1119, %f1054;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mad.f32 	%f17, %f1082, %f1119, %f1055;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	add.s32 	%r45, %r45, 256;\n"
    "	add.u64 	%rd19, %rd19, 4096;\n"
    "	add.u64 	%rd18, %rd18, 4096;\n"
    "	setp.gt.s32 	%p19, %r40, %r45;\n"
    "	@%p19 bra 	$Lt_11_21250;\n"
    "$Lt_11_20738:\n"
    "	mov.u32 	%r85, 255;\n"
    "	setp.gt.s32 	%p20, %r45, %r85;\n"
    "	@%p20 bra 	$Lt_11_21762;\n"
    "	mov.s32 	%r86, 271;\n"
    "	sub.s32 	%r87, %r86, %r45;\n"
    "	shr.s32 	%r88, %r87, 31;\n"
    "	mov.s32 	%r89, 15;\n"
    "	and.b32 	%r90, %r88, %r89;\n"
    "	add.s32 	%r91, %r90, %r87;\n"
    "	shr.s32 	%r92, %r91, 4;\n"
    "	cvt.s64.s32 	%rd68, %r45;\n"
    "	mul.wide.s32 	%rd69, %r45, 16;\n"
    "	add.u64 	%rd18, %rd69, %rd9;\n"
    "	add.u64 	%rd19, %rd69, %rd9;\n"
    "	ld.shared.f32 	%f15, [%rd4+0];\n"
    "	ld.shared.f32 	%f16, [%rd4+4];\n"
    "	ld.shared.f32 	%f17, [%rd4+8];\n"
    "	mov.f32 	%f18, %f9;\n"
    "	mov.f32 	%f19, %f7;\n"
    "	mov.f32 	%f20, %f5;\n"
    "	mov.s32 	%r93, %r92;\n"
    "$Lt_11_22274:\n"
    " //<loop> Loop body line 1662, nesting depth: 2, estimated iterations: 15\n"
    "	ld.shared.s32 	%r94, [%rd18+12];\n"
    "	add.s32 	%r95, %r94, %r7;\n"
    "	ld.shared.f32 	%f1122, [%rd19+0];\n"
    "	sub.f32 	%f1123, %f20, %f1122;\n"
    "	mov.f32 	%f1124, %f1123;\n"
    "	mul.f32 	%f1125, %f11, %f1124;\n"
    "	cvt.rni.f32.f32 	%f1126, %f1125;\n"
    "	mul.f32 	%f1127, %f10, %f1126;\n"
    "	sub.f32 	%f1128, %f1123, %f1127;\n"
    "	mov.f32 	%f1129, %f1128;\n"
    "	mov.f32 	%f1130, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1131, %f1128, %f1128, %f1130;\n"
    "	ld.shared.f32 	%f1132, [%rd19+4];\n"
    "	sub.f32 	%f1133, %f19, %f1132;\n"
    "	mov.f32 	%f1134, %f1133;\n"
    "	mov.f32 	%f1135, %f1134;\n"
    "	mul.f32 	%f1136, %f11, %f1134;\n"
    "	cvt.rni.f32.f32 	%f1137, %f1136;\n"
    "	mul.f32 	%f1138, %f10, %f1137;\n"
    "	sub.f32 	%f1139, %f1133, %f1138;\n"
    "	mov.f32 	%f1140, %f1139;\n"
    "	mad.f32 	%f1141, %f1139, %f1139, %f1131;\n"
    "	ld.shared.f32 	%f1142, [%rd19+8];\n"
    "	sub.f32 	%f1143, %f18, %f1142;\n"
    "	mov.f32 	%f1144, %f1143;\n"
    "	mul.f32 	%f1145, %f1143, %f11;\n"
    "	cvt.rni.f32.f32 	%f1146, %f1145;\n"
    "	mul.f32 	%f1147, %f10, %f1146;\n"
    "	sub.f32 	%f1148, %f1143, %f1147;\n"
    "	mov.f32 	%f1149, %f1148;\n"
    "	mad.f32 	%f1150, %f1148, %f1148, %f1141;\n"
    "	mov.f32 	%f1151, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p21, %f1150, %f1151;\n"
    "	sqrt.approx.f32 	%f1152, %f1150;\n"
    "	rcp.approx.f32 	%f1153, %f1152;\n"
    "	cvt.s64.s32 	%rd70, %r95;\n"
    "	mul.wide.s32 	%rd71, %r95, 24;\n"
    "	add.u64 	%rd72, %rd12, %rd71;\n"
    "	mul.f32 	%f1154, %f1153, %f1153;\n"
    "	ld.const.f32 	%f1155, [%rd72+12];\n"
    "	ld.const.f32 	%f1156, [%rd72+8];\n"
    "	ld.const.f32 	%f1157, [%rd72+4];\n"
    "	ld.const.f32 	%f1158, [%rd72+0];\n"
    "	ld.const.f32 	%f1159, [%rd72+16];\n"
    "	ld.const.f32 	%f1160, [%rd72+20];\n"
    "	mul.f32 	%f1161, %f1154, %f1154;\n"
    "	mul.f32 	%f1162, %f1153, %f1154;\n"
    "	mov.f32 	%f1163, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1164, %f1155, %f1163;\n"
    "	sub.f32 	%f1165, %f1157, %f1152;\n"
    "	mov.f32 	%f1166, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1167, %f1158, %f1166;\n"
    "	mov.f32 	%f1168, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1169, %f1159, %f1168;\n"
    "	mul.f32 	%f1170, %f1161, %f1161;\n"
    "	mul.f32 	%f1171, %f1156, %f1165;\n"
    "	mul.f32 	%f1172, %f1164, %f1170;\n"
    "	mul.f32 	%f1173, %f1169, %f1170;\n"
    "	mov.f32 	%f1174, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1175, %f1171, %f1174;\n"
    "	ex2.approx.f32 	%f1176, %f1175;\n"
    "	mul.f32 	%f1177, %f1167, %f1176;\n"
    "	mul.f32 	%f1178, %f1156, %f1177;\n"
    "	mul.f32 	%f1179, %f1153, %f1178;\n"
    "	sub.f32 	%f1180, %f1179, %f1172;\n"
    "	mul.f32 	%f1181, %f1154, %f1173;\n"
    "	sub.f32 	%f1182, %f1180, %f1181;\n"
    "	mad.f32 	%f1183, %f1160, %f1162, %f1182;\n"
    "	mov.f32 	%f1184, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1185, %f1184, %f1183, %p21;\n"
    "	mov.f32 	%f1186, %f1129;\n"
    "	mad.f32 	%f15, %f1186, %f1185, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f1187, %f1140;\n"
    "	mad.f32 	%f16, %f1187, %f1185, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mad.f32 	%f17, %f1148, %f1185, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	add.s32 	%r45, %r45, 16;\n"
    "	add.u64 	%rd19, %rd19, 256;\n"
    "	add.u64 	%rd18, %rd18, 256;\n"
    "	mov.u32 	%r96, 255;\n"
    "	setp.le.s32 	%p22, %r45, %r96;\n"
    "	@%p22 bra 	$Lt_11_22274;\n"
    "$Lt_11_21762:\n"
    "	add.s32 	%r41, %r41, 256;\n"
    "	setp.gt.s32 	%p23, %r19, %r41;\n"
    "	@%p23 bra 	$Lt_11_20482;\n"
    "$Lt_11_19970:\n"
    "	mov.u64 	%rd12, c_matrix;\n"
    "	.loc	3	1664	0\n"
    "	add.s32 	%r97, %r18, %r19;\n"
    "	mov.s32 	%r41, %r97;\n"
    "	setp.ge.s32 	%p24, %r97, %r8;\n"
    "	@%p24 bra 	$Lt_11_23042;\n"
    "	sub.s32 	%r98, %r8, %r97;\n"
    "	add.s32 	%r99, %r98, 15;\n"
    "	shr.s32 	%r100, %r99, 31;\n"
    "	mov.s32 	%r101, 15;\n"
    "	and.b32 	%r102, %r100, %r101;\n"
    "	add.s32 	%r103, %r102, %r99;\n"
    "	shr.s32 	%r104, %r103, 4;\n"
    "	ld.param.f32 	%f10, [__cudaparm_nacl_kernel_if2_xmax];\n"
    "	rcp.approx.f32 	%f11, %f10;\n"
    "	cvt.s64.s32 	%rd73, %r97;\n"
    "	mul.wide.s32 	%rd74, %r97, 16;\n"
    "	add.u64 	%rd75, %rd5, %rd74;\n"
    "	ld.shared.f32 	%f15, [%rd4+0];\n"
    "	ld.shared.f32 	%f16, [%rd4+4];\n"
    "	ld.shared.f32 	%f17, [%rd4+8];\n"
    "	mov.f32 	%f18, %f9;\n"
    "	mov.f32 	%f19, %f7;\n"
    "	mov.f32 	%f20, %f5;\n"
    "	mov.s32 	%r105, %r104;\n"
    "$Lt_11_23554:\n"
    " //<loop> Loop body line 1664, nesting depth: 1, estimated iterations: unknown\n"
    "	.loc	3	1665	0\n"
    "	ld.global.s32 	%r106, [%rd75+12];\n"
    "	add.s32 	%r107, %r106, %r7;\n"
    "	ld.global.f32 	%f1188, [%rd75+0];\n"
    "	sub.f32 	%f1189, %f20, %f1188;\n"
    "	mov.f32 	%f1190, %f1189;\n"
    "	mul.f32 	%f1191, %f11, %f1190;\n"
    "	cvt.rni.f32.f32 	%f1192, %f1191;\n"
    "	.loc	3	1664	0\n"
    "	ld.param.f32 	%f10, [__cudaparm_nacl_kernel_if2_xmax];\n"
    "	.loc	3	1665	0\n"
    "	mul.f32 	%f1193, %f10, %f1192;\n"
    "	sub.f32 	%f1194, %f1189, %f1193;\n"
    "	mov.f32 	%f1195, %f1194;\n"
    "	mov.f32 	%f1196, 0f00000000;  	// 0\n"
    "	mad.f32 	%f1197, %f1194, %f1194, %f1196;\n"
    "	ld.global.f32 	%f1198, [%rd75+4];\n"
    "	sub.f32 	%f1199, %f19, %f1198;\n"
    "	mov.f32 	%f1200, %f1199;\n"
    "	mov.f32 	%f1201, %f1200;\n"
    "	mul.f32 	%f1202, %f11, %f1200;\n"
    "	cvt.rni.f32.f32 	%f1203, %f1202;\n"
    "	mul.f32 	%f1204, %f10, %f1203;\n"
    "	sub.f32 	%f1205, %f1199, %f1204;\n"
    "	mov.f32 	%f1206, %f1205;\n"
    "	mad.f32 	%f1207, %f1205, %f1205, %f1197;\n"
    "	ld.global.f32 	%f1208, [%rd75+8];\n"
    "	sub.f32 	%f1209, %f18, %f1208;\n"
    "	mov.f32 	%f1210, %f1209;\n"
    "	mul.f32 	%f1211, %f1209, %f11;\n"
    "	cvt.rni.f32.f32 	%f1212, %f1211;\n"
    "	mul.f32 	%f1213, %f10, %f1212;\n"
    "	sub.f32 	%f1214, %f1209, %f1213;\n"
    "	mov.f32 	%f1215, %f1214;\n"
    "	mad.f32 	%f1216, %f1214, %f1214, %f1207;\n"
    "	mov.f32 	%f1217, 0f00000000;  	// 0\n"
    "	setp.eq.f32 	%p25, %f1216, %f1217;\n"
    "	sqrt.approx.f32 	%f1218, %f1216;\n"
    "	rcp.approx.f32 	%f1219, %f1218;\n"
    "	cvt.s64.s32 	%rd76, %r107;\n"
    "	mul.wide.s32 	%rd77, %r107, 24;\n"
    "	add.u64 	%rd78, %rd12, %rd77;\n"
    "	mul.f32 	%f1220, %f1219, %f1219;\n"
    "	ld.const.f32 	%f1221, [%rd78+12];\n"
    "	ld.const.f32 	%f1222, [%rd78+8];\n"
    "	ld.const.f32 	%f1223, [%rd78+4];\n"
    "	ld.const.f32 	%f1224, [%rd78+0];\n"
    "	ld.const.f32 	%f1225, [%rd78+16];\n"
    "	ld.const.f32 	%f1226, [%rd78+20];\n"
    "	mul.f32 	%f1227, %f1220, %f1220;\n"
    "	mul.f32 	%f1228, %f1219, %f1220;\n"
    "	mov.f32 	%f1229, 0f40c00000;  	// 6\n"
    "	mul.f32 	%f1230, %f1221, %f1229;\n"
    "	sub.f32 	%f1231, %f1223, %f1218;\n"
    "	mov.f32 	%f1232, 0f3c70319e;  	// 0.0146603\n"
    "	mul.f32 	%f1233, %f1224, %f1232;\n"
    "	mov.f32 	%f1234, 0f41000000;  	// 8\n"
    "	mul.f32 	%f1235, %f1225, %f1234;\n"
    "	mul.f32 	%f1236, %f1227, %f1227;\n"
    "	mul.f32 	%f1237, %f1222, %f1231;\n"
    "	mul.f32 	%f1238, %f1230, %f1236;\n"
    "	mul.f32 	%f1239, %f1235, %f1236;\n"
    "	mov.f32 	%f1240, 0f3fb8aa3b;  	// 1.4427\n"
    "	mul.f32 	%f1241, %f1237, %f1240;\n"
    "	ex2.approx.f32 	%f1242, %f1241;\n"
    "	mul.f32 	%f1243, %f1233, %f1242;\n"
    "	mul.f32 	%f1244, %f1222, %f1243;\n"
    "	mul.f32 	%f1245, %f1219, %f1244;\n"
    "	sub.f32 	%f1246, %f1245, %f1238;\n"
    "	mul.f32 	%f1247, %f1220, %f1239;\n"
    "	sub.f32 	%f1248, %f1246, %f1247;\n"
    "	mad.f32 	%f1249, %f1226, %f1228, %f1248;\n"
    "	mov.f32 	%f1250, 0f00000000;  	// 0\n"
    "	selp.f32 	%f1251, %f1250, %f1249, %p25;\n"
    "	mov.f32 	%f1252, %f1195;\n"
    "	mad.f32 	%f15, %f1252, %f1251, %f15;\n"
    "	st.shared.f32 	[%rd4+0], %f15;\n"
    "	mov.f32 	%f1253, %f1206;\n"
    "	mad.f32 	%f16, %f1253, %f1251, %f16;\n"
    "	st.shared.f32 	[%rd4+4], %f16;\n"
    "	mad.f32 	%f17, %f1214, %f1251, %f17;\n"
    "	st.shared.f32 	[%rd4+8], %f17;\n"
    "	add.s32 	%r41, %r41, 16;\n"
    "	add.u64 	%rd75, %rd75, 256;\n"
    "	setp.gt.s32 	%p26, %r8, %r41;\n"
    "	@%p26 bra 	$Lt_11_23554;\n"
    "$Lt_11_23042:\n"
    "	.loc	3	1672	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r108, 127;\n"
    "	setp.gt.s32 	%p27, %r1, %r108;\n"
    "	@%p27 bra 	$Lt_11_24066;\n"
    "	.loc	3	1673	0\n"
    "	ld.shared.f32 	%f1254, [%rd4+0];\n"
    "	ld.shared.f32 	%f1255, [%rd4+1536];\n"
    "	add.f32 	%f1256, %f1254, %f1255;\n"
    "	st.shared.f32 	[%rd4+0], %f1256;\n"
    "	ld.shared.f32 	%f1257, [%rd4+4];\n"
    "	ld.shared.f32 	%f1258, [%rd4+1540];\n"
    "	add.f32 	%f1259, %f1257, %f1258;\n"
    "	st.shared.f32 	[%rd4+4], %f1259;\n"
    "	ld.shared.f32 	%f1260, [%rd4+8];\n"
    "	ld.shared.f32 	%f1261, [%rd4+1544];\n"
    "	add.f32 	%f1262, %f1260, %f1261;\n"
    "	st.shared.f32 	[%rd4+8], %f1262;\n"
    "$Lt_11_24066:\n"
    "	.loc	3	1676	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r109, 63;\n"
    "	setp.gt.s32 	%p28, %r1, %r109;\n"
    "	@%p28 bra 	$Lt_11_24578;\n"
    "	.loc	3	1677	0\n"
    "	ld.shared.f32 	%f1263, [%rd4+0];\n"
    "	ld.shared.f32 	%f1264, [%rd4+768];\n"
    "	add.f32 	%f1265, %f1263, %f1264;\n"
    "	st.shared.f32 	[%rd4+0], %f1265;\n"
    "	ld.shared.f32 	%f1266, [%rd4+4];\n"
    "	ld.shared.f32 	%f1267, [%rd4+772];\n"
    "	add.f32 	%f1268, %f1266, %f1267;\n"
    "	st.shared.f32 	[%rd4+4], %f1268;\n"
    "	ld.shared.f32 	%f1269, [%rd4+8];\n"
    "	ld.shared.f32 	%f1270, [%rd4+776];\n"
    "	add.f32 	%f1271, %f1269, %f1270;\n"
    "	st.shared.f32 	[%rd4+8], %f1271;\n"
    "$Lt_11_24578:\n"
    "	.loc	3	1680	0\n"
    "	bar.sync 	0;\n"
    "	mov.u32 	%r110, 31;\n"
    "	setp.gt.s32 	%p29, %r1, %r110;\n"
    "	@%p29 bra 	$Lt_11_25090;\n"
    "	.loc	3	1681	0\n"
    "	ld.shared.f32 	%f1272, [%rd4+0];\n"
    "	ld.shared.f32 	%f1273, [%rd4+384];\n"
    "	add.f32 	%f1274, %f1272, %f1273;\n"
    "	st.shared.f32 	[%rd4+0], %f1274;\n"
    "	ld.shared.f32 	%f1275, [%rd4+4];\n"
    "	ld.shared.f32 	%f1276, [%rd4+388];\n"
    "	add.f32 	%f1277, %f1275, %f1276;\n"
    "	st.shared.f32 	[%rd4+4], %f1277;\n"
    "	ld.shared.f32 	%f1278, [%rd4+8];\n"
    "	ld.shared.f32 	%f1279, [%rd4+392];\n"
    "	add.f32 	%f1280, %f1278, %f1279;\n"
    "	st.shared.f32 	[%rd4+8], %f1280;\n"
    "$Lt_11_25090:\n"
    "	mov.u32 	%r111, 15;\n"
    "	setp.gt.s32 	%p30, %r1, %r111;\n"
    "	@%p30 bra 	$Lt_11_25602;\n"
    "	.loc	3	1684	0\n"
    "	ld.shared.f32 	%f1281, [%rd4+0];\n"
    "	ld.shared.f32 	%f1282, [%rd4+192];\n"
    "	add.f32 	%f1283, %f1281, %f1282;\n"
    "	st.shared.f32 	[%rd4+0], %f1283;\n"
    "	ld.shared.f32 	%f1284, [%rd4+4];\n"
    "	ld.shared.f32 	%f1285, [%rd4+196];\n"
    "	add.f32 	%f1286, %f1284, %f1285;\n"
    "	st.shared.f32 	[%rd4+4], %f1286;\n"
    "	ld.shared.f32 	%f1287, [%rd4+8];\n"
    "	ld.shared.f32 	%f1288, [%rd4+200];\n"
    "	add.f32 	%f1289, %f1287, %f1288;\n"
    "	st.shared.f32 	[%rd4+8], %f1289;\n"
    "$Lt_11_25602:\n"
    "	mov.u32 	%r112, 0;\n"
    "	setp.ne.s32 	%p31, %r18, %r112;\n"
    "	@%p31 bra 	$Lt_11_26114;\n"
    "	.loc	3	1698	0\n"
    "	ld.param.u64 	%rd79, [__cudaparm_nacl_kernel_if2_fvec];\n"
    "	mul.lo.s32 	%r113, %r4, 3;\n"
    "	cvt.s64.s32 	%rd80, %r113;\n"
    "	mul.wide.s32 	%rd81, %r113, 4;\n"
    "	add.u64 	%rd82, %rd79, %rd81;\n"
    "	ld.shared.f32 	%f1290, [%rd4+0];\n"
    "	st.global.f32 	[%rd82+0], %f1290;\n"
    "	ld.shared.f32 	%f1291, [%rd4+4];\n"
    "	st.global.f32 	[%rd82+4], %f1291;\n"
    "	ld.shared.f32 	%f1292, [%rd4+8];\n"
    "	st.global.f32 	[%rd82+8], %f1292;\n"
    "$Lt_11_26114:\n"
    "	.loc	3	1699	0\n"
    "	exit;\n"
    "$LDWend_nacl_kernel_if2:\n"
    "	} // nacl_kernel_if2\n"
    "\n";
#pragma dscuda endofptx
#pragma begin dscuda.h
#ifndef _DSCUDA_H
#define _DSCUDA_H

#include <cuda_runtime_api.h>
#include <cutil.h>
#include <builtin_types.h>
#include <driver_types.h>
#include <cuda_texture_types.h>
#include <texture_types.h>
#pragma begin dscudarpc.h


#ifndef _DSCUDARPC_H_RPCGEN
#define _DSCUDARPC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef u_quad_t RCadr;

typedef u_quad_t RCstream;

typedef u_quad_t RCevent;

typedef u_quad_t RCipaddr;

typedef u_int RCsize;

typedef u_int RCerror;

typedef struct {
	u_int RCbuf_len;
	char *RCbuf_val;
} RCbuf;

typedef u_int RCchannelformat;

typedef u_long RCpid;

struct RCchanneldesc_t {
	RCchannelformat f;
	int w;
	int x;
	int y;
	int z;
};
typedef struct RCchanneldesc_t RCchanneldesc_t;

typedef RCchanneldesc_t RCchanneldesc;

struct RCtexture_t {
	int normalized;
	int filterMode;
	int addressMode[3];
	RCchannelformat f;
	int w;
	int x;
	int y;
	int z;
};
typedef struct RCtexture_t RCtexture_t;

typedef RCtexture_t RCtexture;

struct RCfuncattr_t {
	int binaryVersion;
	RCsize constSizeBytes;
	RCsize localSizeBytes;
	int maxThreadsPerBlock;
	int numRegs;
	int ptxVersion;
	RCsize sharedSizeBytes;
};
typedef struct RCfuncattr_t RCfuncattr_t;

typedef RCfuncattr_t RCfuncattr;

enum RCargType {
	dscudaArgTypeP = 0,
	dscudaArgTypeI = 1,
	dscudaArgTypeF = 2,
	dscudaArgTypeV = 3,
};
typedef enum RCargType RCargType;

struct RCargVal {
	RCargType type;
	union {
		RCadr address;
		u_int valuei;
		float valuef;
		char valuev[64];
	} RCargVal_u;
};
typedef struct RCargVal RCargVal;

struct RCarg {
	RCargVal val;
	u_int offset;
	u_int size;
};
typedef struct RCarg RCarg;

typedef struct {
	u_int RCargs_len;
	RCarg *RCargs_val;
} RCargs;

struct dscudaResult {
	RCerror err;
};
typedef struct dscudaResult dscudaResult;

struct dscudaThreadGetLimitResult {
	RCerror err;
	RCsize value;
};
typedef struct dscudaThreadGetLimitResult dscudaThreadGetLimitResult;

struct dscudaThreadGetCacheConfigResult {
	RCerror err;
	int cacheConfig;
};
typedef struct dscudaThreadGetCacheConfigResult dscudaThreadGetCacheConfigResult;

struct dscudaMallocResult {
	RCerror err;
	RCadr devAdr;
};
typedef struct dscudaMallocResult dscudaMallocResult;

struct dscudaHostAllocResult {
	RCerror err;
	RCadr pHost;
};
typedef struct dscudaHostAllocResult dscudaHostAllocResult;

struct dscudaMallocHostResult {
	RCerror err;
	RCadr ptr;
};
typedef struct dscudaMallocHostResult dscudaMallocHostResult;

struct dscudaMallocArrayResult {
	RCerror err;
	RCadr array;
};
typedef struct dscudaMallocArrayResult dscudaMallocArrayResult;

struct dscudaMallocPitchResult {
	RCerror err;
	RCadr devPtr;
	RCsize pitch;
};
typedef struct dscudaMallocPitchResult dscudaMallocPitchResult;

struct dscudaMemcpyD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyD2HResult dscudaMemcpyD2HResult;

struct dscudaMemcpyH2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyH2HResult dscudaMemcpyH2HResult;

struct dscudaMemcpyToArrayD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyToArrayD2HResult dscudaMemcpyToArrayD2HResult;

struct dscudaMemcpyToArrayH2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyToArrayH2HResult dscudaMemcpyToArrayH2HResult;

struct dscudaMemcpy2DToArrayD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpy2DToArrayD2HResult dscudaMemcpy2DToArrayD2HResult;

struct dscudaMemcpy2DToArrayH2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpy2DToArrayH2HResult dscudaMemcpy2DToArrayH2HResult;

struct dscudaMemcpy2DD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpy2DD2HResult dscudaMemcpy2DD2HResult;

struct dscudaMemcpy2DH2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpy2DH2HResult dscudaMemcpy2DH2HResult;

struct dscudaGetDeviceResult {
	RCerror err;
	int device;
};
typedef struct dscudaGetDeviceResult dscudaGetDeviceResult;

struct dscudaGetDeviceCountResult {
	RCerror err;
	int count;
};
typedef struct dscudaGetDeviceCountResult dscudaGetDeviceCountResult;

struct dscudaGetDevicePropertiesResult {
	RCerror err;
	RCbuf prop;
};
typedef struct dscudaGetDevicePropertiesResult dscudaGetDevicePropertiesResult;

struct dscudaDriverGetVersionResult {
	RCerror err;
	int ver;
};
typedef struct dscudaDriverGetVersionResult dscudaDriverGetVersionResult;

struct dscudaRuntimeGetVersionResult {
	RCerror err;
	int ver;
};
typedef struct dscudaRuntimeGetVersionResult dscudaRuntimeGetVersionResult;

struct dscudaGetErrorStringResult {
	char *errmsg;
};
typedef struct dscudaGetErrorStringResult dscudaGetErrorStringResult;

struct dscudaCreateChannelDescResult {
	int x;
	int y;
	int z;
	int w;
	RCchannelformat f;
};
typedef struct dscudaCreateChannelDescResult dscudaCreateChannelDescResult;

struct dscudaGetChannelDescResult {
	RCerror err;
	int x;
	int y;
	int z;
	int w;
	RCchannelformat f;
};
typedef struct dscudaGetChannelDescResult dscudaGetChannelDescResult;

struct dscudaChooseDeviceResult {
	RCerror err;
	int device;
};
typedef struct dscudaChooseDeviceResult dscudaChooseDeviceResult;

struct dscudaMemcpyAsyncD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyAsyncD2HResult dscudaMemcpyAsyncD2HResult;

struct dscudaMemcpyAsyncH2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyAsyncH2HResult dscudaMemcpyAsyncH2HResult;

struct dscudaMemcpyFromSymbolD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyFromSymbolD2HResult dscudaMemcpyFromSymbolD2HResult;

struct dscudaMemcpyFromSymbolAsyncD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyFromSymbolAsyncD2HResult dscudaMemcpyFromSymbolAsyncD2HResult;

struct dscudaStreamCreateResult {
	RCerror err;
	RCadr stream;
};
typedef struct dscudaStreamCreateResult dscudaStreamCreateResult;

struct dscudaEventCreateResult {
	RCerror err;
	RCadr event;
};
typedef struct dscudaEventCreateResult dscudaEventCreateResult;

struct dscudaEventElapsedTimeResult {
	RCerror err;
	float ms;
};
typedef struct dscudaEventElapsedTimeResult dscudaEventElapsedTimeResult;

struct dscudaHostGetDevicePointerResult {
	RCerror err;
	RCadr pDevice;
};
typedef struct dscudaHostGetDevicePointerResult dscudaHostGetDevicePointerResult;

struct dscudaHostGetFlagsResult {
	RCerror err;
	u_int flags;
};
typedef struct dscudaHostGetFlagsResult dscudaHostGetFlagsResult;

struct dscudaLoadModuleResult {
	u_int id;
};
typedef struct dscudaLoadModuleResult dscudaLoadModuleResult;

struct dscudaFuncGetAttributesResult {
	RCerror err;
	RCfuncattr attr;
};
typedef struct dscudaFuncGetAttributesResult dscudaFuncGetAttributesResult;

struct dscudaBindTextureResult {
	RCerror err;
	RCsize offset;
};
typedef struct dscudaBindTextureResult dscudaBindTextureResult;

struct dscudaBindTexture2DResult {
	RCerror err;
	RCsize offset;
};
typedef struct dscudaBindTexture2DResult dscudaBindTexture2DResult;

struct dscufftResult {
	RCerror err;
};
typedef struct dscufftResult dscufftResult;

struct dscufftPlanResult {
	RCerror err;
	u_int plan;
};
typedef struct dscufftPlanResult dscufftPlanResult;

struct dscublasResult {
	RCerror err;
	u_int stat;
};
typedef struct dscublasResult dscublasResult;

struct dscublasCreateResult {
	RCerror err;
	u_int stat;
	RCadr handle;
};
typedef struct dscublasCreateResult dscublasCreateResult;

struct dscublasGetVectorResult {
	RCerror err;
	u_int stat;
	RCbuf y;
};
typedef struct dscublasGetVectorResult dscublasGetVectorResult;

struct RCdim3 {
	u_int x;
	u_int y;
	u_int z;
};
typedef struct RCdim3 RCdim3;

struct dscudathreadsetlimitid_1_argument {
	int limit;
	RCsize value;
};
typedef struct dscudathreadsetlimitid_1_argument dscudathreadsetlimitid_1_argument;

struct dscudastreamwaiteventid_1_argument {
	RCstream stream;
	RCevent event;
	u_int flags;
};
typedef struct dscudastreamwaiteventid_1_argument dscudastreamwaiteventid_1_argument;

struct dscudaeventelapsedtimeid_1_argument {
	RCevent start;
	RCevent end;
};
typedef struct dscudaeventelapsedtimeid_1_argument dscudaeventelapsedtimeid_1_argument;

struct dscudaeventrecordid_1_argument {
	RCevent event;
	RCstream stream;
};
typedef struct dscudaeventrecordid_1_argument dscudaeventrecordid_1_argument;

struct dscudalaunchkernelid_1_argument {
	int moduleid;
	int kid;
	char *kname;
	RCdim3 gdim;
	RCdim3 bdim;
	RCsize smemsize;
	RCstream stream;
	RCargs args;
};
typedef struct dscudalaunchkernelid_1_argument dscudalaunchkernelid_1_argument;

struct dscudaloadmoduleid_1_argument {
	RCipaddr ipaddr;
	RCpid pid;
	char *mname;
	char *image;
};
typedef struct dscudaloadmoduleid_1_argument dscudaloadmoduleid_1_argument;

struct dscudafuncgetattributesid_1_argument {
	int moduleid;
	char *kname;
};
typedef struct dscudafuncgetattributesid_1_argument dscudafuncgetattributesid_1_argument;

struct dscudamemcpyh2hid_1_argument {
	RCadr dst;
	RCbuf src;
	RCsize count;
};
typedef struct dscudamemcpyh2hid_1_argument dscudamemcpyh2hid_1_argument;

struct dscudamemcpyh2did_1_argument {
	RCadr dst;
	RCbuf src;
	RCsize count;
};
typedef struct dscudamemcpyh2did_1_argument dscudamemcpyh2did_1_argument;

struct dscudamemcpyd2hid_1_argument {
	RCadr src;
	RCsize count;
};
typedef struct dscudamemcpyd2hid_1_argument dscudamemcpyd2hid_1_argument;

struct dscudamemcpyd2did_1_argument {
	RCadr dst;
	RCadr src;
	RCsize count;
};
typedef struct dscudamemcpyd2did_1_argument dscudamemcpyd2did_1_argument;

struct dscudamemcpyasynch2hid_1_argument {
	RCadr dst;
	RCbuf src;
	RCsize count;
	RCstream stream;
};
typedef struct dscudamemcpyasynch2hid_1_argument dscudamemcpyasynch2hid_1_argument;

struct dscudamemcpyasynch2did_1_argument {
	RCadr dst;
	RCbuf src;
	RCsize count;
	RCstream stream;
};
typedef struct dscudamemcpyasynch2did_1_argument dscudamemcpyasynch2did_1_argument;

struct dscudamemcpyasyncd2hid_1_argument {
	RCadr src;
	RCsize count;
	RCstream stream;
};
typedef struct dscudamemcpyasyncd2hid_1_argument dscudamemcpyasyncd2hid_1_argument;

struct dscudamemcpyasyncd2did_1_argument {
	RCadr dst;
	RCadr src;
	RCsize count;
	RCstream stream;
};
typedef struct dscudamemcpyasyncd2did_1_argument dscudamemcpyasyncd2did_1_argument;

struct dscudamemcpytosymbolh2did_1_argument {
	int moduleid;
	char *symbol;
	RCbuf src;
	RCsize count;
	RCsize offset;
};
typedef struct dscudamemcpytosymbolh2did_1_argument dscudamemcpytosymbolh2did_1_argument;

struct dscudamemcpytosymbold2did_1_argument {
	int moduleid;
	char *symbol;
	RCadr src;
	RCsize count;
	RCsize offset;
};
typedef struct dscudamemcpytosymbold2did_1_argument dscudamemcpytosymbold2did_1_argument;

struct dscudamemcpyfromsymbold2hid_1_argument {
	int moduleid;
	char *symbol;
	RCsize count;
	RCsize offset;
};
typedef struct dscudamemcpyfromsymbold2hid_1_argument dscudamemcpyfromsymbold2hid_1_argument;

struct dscudamemcpyfromsymbold2did_1_argument {
	int moduleid;
	RCadr dst;
	char *symbol;
	RCsize count;
	RCsize offset;
};
typedef struct dscudamemcpyfromsymbold2did_1_argument dscudamemcpyfromsymbold2did_1_argument;

struct dscudamemsetid_1_argument {
	RCadr dst;
	int value;
	RCsize count;
};
typedef struct dscudamemsetid_1_argument dscudamemsetid_1_argument;

struct dscudahostallocid_1_argument {
	RCsize size;
	u_int flags;
};
typedef struct dscudahostallocid_1_argument dscudahostallocid_1_argument;

struct dscudahostgetdevicepointerid_1_argument {
	RCadr pHost;
	u_int flags;
};
typedef struct dscudahostgetdevicepointerid_1_argument dscudahostgetdevicepointerid_1_argument;

struct dscudamallocarrayid_1_argument {
	RCchanneldesc desc;
	RCsize width;
	RCsize height;
	u_int flags;
};
typedef struct dscudamallocarrayid_1_argument dscudamallocarrayid_1_argument;

struct dscudamemcpytoarrayh2hid_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCbuf src;
	RCsize count;
};
typedef struct dscudamemcpytoarrayh2hid_1_argument dscudamemcpytoarrayh2hid_1_argument;

struct dscudamemcpytoarrayh2did_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCbuf src;
	RCsize count;
};
typedef struct dscudamemcpytoarrayh2did_1_argument dscudamemcpytoarrayh2did_1_argument;

struct dscudamemcpytoarrayd2hid_1_argument {
	RCsize wOffset;
	RCsize hOffset;
	RCadr src;
	RCsize count;
};
typedef struct dscudamemcpytoarrayd2hid_1_argument dscudamemcpytoarrayd2hid_1_argument;

struct dscudamemcpytoarrayd2did_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCadr src;
	RCsize count;
};
typedef struct dscudamemcpytoarrayd2did_1_argument dscudamemcpytoarrayd2did_1_argument;

struct dscudamallocpitchid_1_argument {
	RCsize width;
	RCsize height;
};
typedef struct dscudamallocpitchid_1_argument dscudamallocpitchid_1_argument;

struct dscudamemcpy2dtoarrayh2hid_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCbuf src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dtoarrayh2hid_1_argument dscudamemcpy2dtoarrayh2hid_1_argument;

struct dscudamemcpy2dtoarrayh2did_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCbuf srcbuf;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dtoarrayh2did_1_argument dscudamemcpy2dtoarrayh2did_1_argument;

struct dscudamemcpy2dtoarrayd2hid_1_argument {
	RCsize wOffset;
	RCsize hOffset;
	RCadr src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dtoarrayd2hid_1_argument dscudamemcpy2dtoarrayd2hid_1_argument;

struct dscudamemcpy2dtoarrayd2did_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCadr src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dtoarrayd2did_1_argument dscudamemcpy2dtoarrayd2did_1_argument;

struct dscudamemcpy2dh2hid_1_argument {
	RCadr dst;
	RCsize dpitch;
	RCbuf src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dh2hid_1_argument dscudamemcpy2dh2hid_1_argument;

struct dscudamemcpy2dh2did_1_argument {
	RCadr dst;
	RCsize dpitch;
	RCbuf src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dh2did_1_argument dscudamemcpy2dh2did_1_argument;

struct dscudamemcpy2dd2hid_1_argument {
	RCsize dpitch;
	RCadr src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dd2hid_1_argument dscudamemcpy2dd2hid_1_argument;

struct dscudamemcpy2dd2did_1_argument {
	RCadr dst;
	RCsize dpitch;
	RCadr src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dd2did_1_argument dscudamemcpy2dd2did_1_argument;

struct dscudamemset2did_1_argument {
	RCadr dst;
	RCsize pitch;
	int value;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemset2did_1_argument dscudamemset2did_1_argument;

struct dscudamemcpytosymbolasynch2did_1_argument {
	int moduleid;
	char *symbol;
	RCbuf src;
	RCsize count;
	RCsize offset;
	RCstream stream;
};
typedef struct dscudamemcpytosymbolasynch2did_1_argument dscudamemcpytosymbolasynch2did_1_argument;

struct dscudamemcpytosymbolasyncd2did_1_argument {
	int moduleid;
	char *symbol;
	RCadr src;
	RCsize count;
	RCsize offset;
	RCstream stream;
};
typedef struct dscudamemcpytosymbolasyncd2did_1_argument dscudamemcpytosymbolasyncd2did_1_argument;

struct dscudamemcpyfromsymbolasyncd2hid_1_argument {
	int moduleid;
	char *symbol;
	RCsize count;
	RCsize offset;
	RCstream stream;
};
typedef struct dscudamemcpyfromsymbolasyncd2hid_1_argument dscudamemcpyfromsymbolasyncd2hid_1_argument;

struct dscudamemcpyfromsymbolasyncd2did_1_argument {
	int moduleid;
	RCadr dst;
	char *symbol;
	RCsize count;
	RCsize offset;
	RCstream stream;
};
typedef struct dscudamemcpyfromsymbolasyncd2did_1_argument dscudamemcpyfromsymbolasyncd2did_1_argument;

struct dscudacreatechanneldescid_1_argument {
	int x;
	int y;
	int z;
	int w;
	RCchannelformat f;
};
typedef struct dscudacreatechanneldescid_1_argument dscudacreatechanneldescid_1_argument;

struct dscudabindtextureid_1_argument {
	int moduleid;
	char *texname;
	RCadr devPtr;
	RCsize size;
	RCtexture texbuf;
};
typedef struct dscudabindtextureid_1_argument dscudabindtextureid_1_argument;

struct dscudabindtexture2did_1_argument {
	int moduleid;
	char *texname;
	RCadr devPtr;
	RCsize width;
	RCsize height;
	RCsize pitch;
	RCtexture texbuf;
};
typedef struct dscudabindtexture2did_1_argument dscudabindtexture2did_1_argument;

struct dscudabindtexturetoarrayid_1_argument {
	int moduleid;
	char *texname;
	RCadr array;
	RCtexture texbuf;
};
typedef struct dscudabindtexturetoarrayid_1_argument dscudabindtexturetoarrayid_1_argument;

struct dscufftplan3did_1_argument {
	int nx;
	int ny;
	int nz;
	u_int type;
};
typedef struct dscufftplan3did_1_argument dscufftplan3did_1_argument;

struct dscufftexecc2cid_1_argument {
	u_int plan;
	RCadr idata;
	RCadr odata;
	int direction;
};
typedef struct dscufftexecc2cid_1_argument dscufftexecc2cid_1_argument;

#define DSCUDA_PROG 60000
#define DSCUDA_VER 1

#if defined(__STDC__) || defined(__cplusplus)
#define dscudaThreadExitId 100
extern  dscudaResult * dscudathreadexitid_1(CLIENT *);
extern  dscudaResult * dscudathreadexitid_1_svc(struct svc_req *);
#define dscudaThreadSynchronizeId 101
extern  dscudaResult * dscudathreadsynchronizeid_1(CLIENT *);
extern  dscudaResult * dscudathreadsynchronizeid_1_svc(struct svc_req *);
#define dscudaThreadSetLimitId 102
extern  dscudaResult * dscudathreadsetlimitid_1(int , RCsize , CLIENT *);
extern  dscudaResult * dscudathreadsetlimitid_1_svc(int , RCsize , struct svc_req *);
#define dscudaThreadGetLimitId 103
extern  dscudaThreadGetLimitResult * dscudathreadgetlimitid_1(int , CLIENT *);
extern  dscudaThreadGetLimitResult * dscudathreadgetlimitid_1_svc(int , struct svc_req *);
#define dscudaThreadSetCacheConfigId 104
extern  dscudaResult * dscudathreadsetcacheconfigid_1(int , CLIENT *);
extern  dscudaResult * dscudathreadsetcacheconfigid_1_svc(int , struct svc_req *);
#define dscudaThreadGetCacheConfigId 105
extern  dscudaThreadGetCacheConfigResult * dscudathreadgetcacheconfigid_1(CLIENT *);
extern  dscudaThreadGetCacheConfigResult * dscudathreadgetcacheconfigid_1_svc(struct svc_req *);
#define dscudaGetLastErrorId 200
extern  dscudaResult * dscudagetlasterrorid_1(CLIENT *);
extern  dscudaResult * dscudagetlasterrorid_1_svc(struct svc_req *);
#define dscudaPeekAtLastErrorId 201
extern  dscudaResult * dscudapeekatlasterrorid_1(CLIENT *);
extern  dscudaResult * dscudapeekatlasterrorid_1_svc(struct svc_req *);
#define dscudaGetErrorStringId 202
extern  dscudaGetErrorStringResult * dscudageterrorstringid_1(int , CLIENT *);
extern  dscudaGetErrorStringResult * dscudageterrorstringid_1_svc(int , struct svc_req *);
#define dscudaGetDeviceId 300
extern  dscudaGetDeviceResult * dscudagetdeviceid_1(CLIENT *);
extern  dscudaGetDeviceResult * dscudagetdeviceid_1_svc(struct svc_req *);
#define dscudaGetDeviceCountId 301
extern  dscudaGetDeviceCountResult * dscudagetdevicecountid_1(CLIENT *);
extern  dscudaGetDeviceCountResult * dscudagetdevicecountid_1_svc(struct svc_req *);
#define dscudaGetDevicePropertiesId 302
extern  dscudaGetDevicePropertiesResult * dscudagetdevicepropertiesid_1(int , CLIENT *);
extern  dscudaGetDevicePropertiesResult * dscudagetdevicepropertiesid_1_svc(int , struct svc_req *);
#define dscudaDriverGetVersionId 303
extern  dscudaDriverGetVersionResult * dscudadrivergetversionid_1(CLIENT *);
extern  dscudaDriverGetVersionResult * dscudadrivergetversionid_1_svc(struct svc_req *);
#define dscudaRuntimeGetVersionId 304
extern  dscudaRuntimeGetVersionResult * dscudaruntimegetversionid_1(CLIENT *);
extern  dscudaRuntimeGetVersionResult * dscudaruntimegetversionid_1_svc(struct svc_req *);
#define dscudaSetDeviceId 305
extern  dscudaResult * dscudasetdeviceid_1(int , CLIENT *);
extern  dscudaResult * dscudasetdeviceid_1_svc(int , struct svc_req *);
#define dscudaSetDeviceFlagsId 306
extern  dscudaResult * dscudasetdeviceflagsid_1(u_int , CLIENT *);
extern  dscudaResult * dscudasetdeviceflagsid_1_svc(u_int , struct svc_req *);
#define dscudaChooseDeviceId 307
extern  dscudaChooseDeviceResult * dscudachoosedeviceid_1(RCbuf , CLIENT *);
extern  dscudaChooseDeviceResult * dscudachoosedeviceid_1_svc(RCbuf , struct svc_req *);
#define dscudaDeviceSynchronize 308
extern  dscudaResult * dscudadevicesynchronize_1(CLIENT *);
extern  dscudaResult * dscudadevicesynchronize_1_svc(struct svc_req *);
#define dscudaDeviceReset 309
extern  dscudaResult * dscudadevicereset_1(CLIENT *);
extern  dscudaResult * dscudadevicereset_1_svc(struct svc_req *);
#define dscudaStreamCreateId 400
extern  dscudaStreamCreateResult * dscudastreamcreateid_1(CLIENT *);
extern  dscudaStreamCreateResult * dscudastreamcreateid_1_svc(struct svc_req *);
#define dscudaStreamDestroyId 401
extern  dscudaResult * dscudastreamdestroyid_1(RCstream , CLIENT *);
extern  dscudaResult * dscudastreamdestroyid_1_svc(RCstream , struct svc_req *);
#define dscudaStreamSynchronizeId 402
extern  dscudaResult * dscudastreamsynchronizeid_1(RCstream , CLIENT *);
extern  dscudaResult * dscudastreamsynchronizeid_1_svc(RCstream , struct svc_req *);
#define dscudaStreamQueryId 403
extern  dscudaResult * dscudastreamqueryid_1(RCstream , CLIENT *);
extern  dscudaResult * dscudastreamqueryid_1_svc(RCstream , struct svc_req *);
#define dscudaStreamWaitEventId 404
extern  dscudaResult * dscudastreamwaiteventid_1(RCstream , RCevent , u_int , CLIENT *);
extern  dscudaResult * dscudastreamwaiteventid_1_svc(RCstream , RCevent , u_int , struct svc_req *);
#define dscudaEventCreateId 500
extern  dscudaEventCreateResult * dscudaeventcreateid_1(CLIENT *);
extern  dscudaEventCreateResult * dscudaeventcreateid_1_svc(struct svc_req *);
#define dscudaEventCreateWithFlagsId 501
extern  dscudaEventCreateResult * dscudaeventcreatewithflagsid_1(u_int , CLIENT *);
extern  dscudaEventCreateResult * dscudaeventcreatewithflagsid_1_svc(u_int , struct svc_req *);
#define dscudaEventDestroyId 502
extern  dscudaResult * dscudaeventdestroyid_1(RCevent , CLIENT *);
extern  dscudaResult * dscudaeventdestroyid_1_svc(RCevent , struct svc_req *);
#define dscudaEventElapsedTimeId 503
extern  dscudaEventElapsedTimeResult * dscudaeventelapsedtimeid_1(RCevent , RCevent , CLIENT *);
extern  dscudaEventElapsedTimeResult * dscudaeventelapsedtimeid_1_svc(RCevent , RCevent , struct svc_req *);
#define dscudaEventRecordId 504
extern  dscudaResult * dscudaeventrecordid_1(RCevent , RCstream , CLIENT *);
extern  dscudaResult * dscudaeventrecordid_1_svc(RCevent , RCstream , struct svc_req *);
#define dscudaEventSynchronizeId 505
extern  dscudaResult * dscudaeventsynchronizeid_1(RCevent , CLIENT *);
extern  dscudaResult * dscudaeventsynchronizeid_1_svc(RCevent , struct svc_req *);
#define dscudaEventQueryId 506
extern  dscudaResult * dscudaeventqueryid_1(RCevent , CLIENT *);
extern  dscudaResult * dscudaeventqueryid_1_svc(RCevent , struct svc_req *);
#define dscudaLaunchKernelId 600
extern  void * dscudalaunchkernelid_1(int , int , char *, RCdim3 , RCdim3 , RCsize , RCstream , RCargs , CLIENT *);
extern  void * dscudalaunchkernelid_1_svc(int , int , char *, RCdim3 , RCdim3 , RCsize , RCstream , RCargs , struct svc_req *);
#define dscudaLoadModuleId 601
extern  dscudaLoadModuleResult * dscudaloadmoduleid_1(RCipaddr , RCpid , char *, char *, CLIENT *);
extern  dscudaLoadModuleResult * dscudaloadmoduleid_1_svc(RCipaddr , RCpid , char *, char *, struct svc_req *);
#define dscudaFuncGetAttributesId 602
extern  dscudaFuncGetAttributesResult * dscudafuncgetattributesid_1(int , char *, CLIENT *);
extern  dscudaFuncGetAttributesResult * dscudafuncgetattributesid_1_svc(int , char *, struct svc_req *);
#define dscudaMallocId 700
extern  dscudaMallocResult * dscudamallocid_1(RCsize , CLIENT *);
extern  dscudaMallocResult * dscudamallocid_1_svc(RCsize , struct svc_req *);
#define dscudaFreeId 701
extern  dscudaResult * dscudafreeid_1(RCadr , CLIENT *);
extern  dscudaResult * dscudafreeid_1_svc(RCadr , struct svc_req *);
#define dscudaMemcpyH2HId 702
extern  dscudaMemcpyH2HResult * dscudamemcpyh2hid_1(RCadr , RCbuf , RCsize , CLIENT *);
extern  dscudaMemcpyH2HResult * dscudamemcpyh2hid_1_svc(RCadr , RCbuf , RCsize , struct svc_req *);
#define dscudaMemcpyH2DId 703
extern  dscudaResult * dscudamemcpyh2did_1(RCadr , RCbuf , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpyh2did_1_svc(RCadr , RCbuf , RCsize , struct svc_req *);
#define dscudaMemcpyD2HId 704
extern  dscudaMemcpyD2HResult * dscudamemcpyd2hid_1(RCadr , RCsize , CLIENT *);
extern  dscudaMemcpyD2HResult * dscudamemcpyd2hid_1_svc(RCadr , RCsize , struct svc_req *);
#define dscudaMemcpyD2DId 705
extern  dscudaResult * dscudamemcpyd2did_1(RCadr , RCadr , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpyd2did_1_svc(RCadr , RCadr , RCsize , struct svc_req *);
#define dscudaMemcpyAsyncH2HId 706
extern  dscudaMemcpyAsyncH2HResult * dscudamemcpyasynch2hid_1(RCadr , RCbuf , RCsize , RCstream , CLIENT *);
extern  dscudaMemcpyAsyncH2HResult * dscudamemcpyasynch2hid_1_svc(RCadr , RCbuf , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyAsyncH2DId 707
extern  dscudaResult * dscudamemcpyasynch2did_1(RCadr , RCbuf , RCsize , RCstream , CLIENT *);
extern  dscudaResult * dscudamemcpyasynch2did_1_svc(RCadr , RCbuf , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyAsyncD2HId 708
extern  dscudaMemcpyAsyncD2HResult * dscudamemcpyasyncd2hid_1(RCadr , RCsize , RCstream , CLIENT *);
extern  dscudaMemcpyAsyncD2HResult * dscudamemcpyasyncd2hid_1_svc(RCadr , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyAsyncD2DId 709
extern  dscudaResult * dscudamemcpyasyncd2did_1(RCadr , RCadr , RCsize , RCstream , CLIENT *);
extern  dscudaResult * dscudamemcpyasyncd2did_1_svc(RCadr , RCadr , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyToSymbolH2DId 710
extern  dscudaResult * dscudamemcpytosymbolh2did_1(int , char *, RCbuf , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpytosymbolh2did_1_svc(int , char *, RCbuf , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpyToSymbolD2DId 711
extern  dscudaResult * dscudamemcpytosymbold2did_1(int , char *, RCadr , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpytosymbold2did_1_svc(int , char *, RCadr , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpyFromSymbolD2HId 712
extern  dscudaMemcpyFromSymbolD2HResult * dscudamemcpyfromsymbold2hid_1(int , char *, RCsize , RCsize , CLIENT *);
extern  dscudaMemcpyFromSymbolD2HResult * dscudamemcpyfromsymbold2hid_1_svc(int , char *, RCsize , RCsize , struct svc_req *);
#define dscudaMemcpyFromSymbolD2DId 713
extern  dscudaResult * dscudamemcpyfromsymbold2did_1(int , RCadr , char *, RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpyfromsymbold2did_1_svc(int , RCadr , char *, RCsize , RCsize , struct svc_req *);
#define dscudaMemsetId 714
extern  dscudaResult * dscudamemsetid_1(RCadr , int , RCsize , CLIENT *);
extern  dscudaResult * dscudamemsetid_1_svc(RCadr , int , RCsize , struct svc_req *);
#define dscudaHostAllocId 715
extern  dscudaHostAllocResult * dscudahostallocid_1(RCsize , u_int , CLIENT *);
extern  dscudaHostAllocResult * dscudahostallocid_1_svc(RCsize , u_int , struct svc_req *);
#define dscudaMallocHostId 716
extern  dscudaMallocHostResult * dscudamallochostid_1(RCsize , CLIENT *);
extern  dscudaMallocHostResult * dscudamallochostid_1_svc(RCsize , struct svc_req *);
#define dscudaFreeHostId 717
extern  dscudaResult * dscudafreehostid_1(RCadr , CLIENT *);
extern  dscudaResult * dscudafreehostid_1_svc(RCadr , struct svc_req *);
#define dscudaHostGetDevicePointerId 718
extern  dscudaHostGetDevicePointerResult * dscudahostgetdevicepointerid_1(RCadr , u_int , CLIENT *);
extern  dscudaHostGetDevicePointerResult * dscudahostgetdevicepointerid_1_svc(RCadr , u_int , struct svc_req *);
#define dscudaHostGetFlagsID 719
extern  dscudaHostGetFlagsResult * dscudahostgetflagsid_1(RCadr , CLIENT *);
extern  dscudaHostGetFlagsResult * dscudahostgetflagsid_1_svc(RCadr , struct svc_req *);
#define dscudaMallocArrayId 720
extern  dscudaMallocArrayResult * dscudamallocarrayid_1(RCchanneldesc , RCsize , RCsize , u_int , CLIENT *);
extern  dscudaMallocArrayResult * dscudamallocarrayid_1_svc(RCchanneldesc , RCsize , RCsize , u_int , struct svc_req *);
#define dscudaFreeArrayId 721
extern  dscudaResult * dscudafreearrayid_1(RCadr , CLIENT *);
extern  dscudaResult * dscudafreearrayid_1_svc(RCadr , struct svc_req *);
#define dscudaMemcpyToArrayH2HId 722
extern  dscudaMemcpyToArrayH2HResult * dscudamemcpytoarrayh2hid_1(RCadr , RCsize , RCsize , RCbuf , RCsize , CLIENT *);
extern  dscudaMemcpyToArrayH2HResult * dscudamemcpytoarrayh2hid_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , struct svc_req *);
#define dscudaMemcpyToArrayH2DId 723
extern  dscudaResult * dscudamemcpytoarrayh2did_1(RCadr , RCsize , RCsize , RCbuf , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpytoarrayh2did_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , struct svc_req *);
#define dscudaMemcpyToArrayD2HId 724
extern  dscudaMemcpyToArrayD2HResult * dscudamemcpytoarrayd2hid_1(RCsize , RCsize , RCadr , RCsize , CLIENT *);
extern  dscudaMemcpyToArrayD2HResult * dscudamemcpytoarrayd2hid_1_svc(RCsize , RCsize , RCadr , RCsize , struct svc_req *);
#define dscudaMemcpyToArrayD2DId 725
extern  dscudaResult * dscudamemcpytoarrayd2did_1(RCadr , RCsize , RCsize , RCadr , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpytoarrayd2did_1_svc(RCadr , RCsize , RCsize , RCadr , RCsize , struct svc_req *);
#define dscudaMallocPitchId 726
extern  dscudaMallocPitchResult * dscudamallocpitchid_1(RCsize , RCsize , CLIENT *);
extern  dscudaMallocPitchResult * dscudamallocpitchid_1_svc(RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DToArrayH2HId 727
extern  dscudaMemcpy2DToArrayH2HResult * dscudamemcpy2dtoarrayh2hid_1(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaMemcpy2DToArrayH2HResult * dscudamemcpy2dtoarrayh2hid_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DToArrayH2DId 728
extern  dscudaResult * dscudamemcpy2dtoarrayh2did_1(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpy2dtoarrayh2did_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DToArrayD2HId 729
extern  dscudaMemcpy2DToArrayD2HResult * dscudamemcpy2dtoarrayd2hid_1(RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaMemcpy2DToArrayD2HResult * dscudamemcpy2dtoarrayd2hid_1_svc(RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DToArrayD2DId 730
extern  dscudaResult * dscudamemcpy2dtoarrayd2did_1(RCadr , RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpy2dtoarrayd2did_1_svc(RCadr , RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DH2HId 731
extern  dscudaMemcpy2DH2HResult * dscudamemcpy2dh2hid_1(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaMemcpy2DH2HResult * dscudamemcpy2dh2hid_1_svc(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DH2DId 732
extern  dscudaResult * dscudamemcpy2dh2did_1(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpy2dh2did_1_svc(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DD2HId 733
extern  dscudaMemcpy2DD2HResult * dscudamemcpy2dd2hid_1(RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaMemcpy2DD2HResult * dscudamemcpy2dd2hid_1_svc(RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DD2DId 734
extern  dscudaResult * dscudamemcpy2dd2did_1(RCadr , RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpy2dd2did_1_svc(RCadr , RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemset2DId 735
extern  dscudaResult * dscudamemset2did_1(RCadr , RCsize , int , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemset2did_1_svc(RCadr , RCsize , int , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpyToSymbolAsyncH2DId 736
extern  dscudaResult * dscudamemcpytosymbolasynch2did_1(int , char *, RCbuf , RCsize , RCsize , RCstream , CLIENT *);
extern  dscudaResult * dscudamemcpytosymbolasynch2did_1_svc(int , char *, RCbuf , RCsize , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyToSymbolAsyncD2DId 737
extern  dscudaResult * dscudamemcpytosymbolasyncd2did_1(int , char *, RCadr , RCsize , RCsize , RCstream , CLIENT *);
extern  dscudaResult * dscudamemcpytosymbolasyncd2did_1_svc(int , char *, RCadr , RCsize , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyFromSymbolAsyncD2HId 738
extern  dscudaMemcpyFromSymbolAsyncD2HResult * dscudamemcpyfromsymbolasyncd2hid_1(int , char *, RCsize , RCsize , RCstream , CLIENT *);
extern  dscudaMemcpyFromSymbolAsyncD2HResult * dscudamemcpyfromsymbolasyncd2hid_1_svc(int , char *, RCsize , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyFromSymbolAsyncD2DId 739
extern  dscudaResult * dscudamemcpyfromsymbolasyncd2did_1(int , RCadr , char *, RCsize , RCsize , RCstream , CLIENT *);
extern  dscudaResult * dscudamemcpyfromsymbolasyncd2did_1_svc(int , RCadr , char *, RCsize , RCsize , RCstream , struct svc_req *);
#define dscudaCreateChannelDescId 1400
extern  dscudaCreateChannelDescResult * dscudacreatechanneldescid_1(int , int , int , int , RCchannelformat , CLIENT *);
extern  dscudaCreateChannelDescResult * dscudacreatechanneldescid_1_svc(int , int , int , int , RCchannelformat , struct svc_req *);
#define dscudaGetChannelDescId 1401
extern  dscudaGetChannelDescResult * dscudagetchanneldescid_1(RCadr , CLIENT *);
extern  dscudaGetChannelDescResult * dscudagetchanneldescid_1_svc(RCadr , struct svc_req *);
#define dscudaBindTextureId 1402
extern  dscudaBindTextureResult * dscudabindtextureid_1(int , char *, RCadr , RCsize , RCtexture , CLIENT *);
extern  dscudaBindTextureResult * dscudabindtextureid_1_svc(int , char *, RCadr , RCsize , RCtexture , struct svc_req *);
#define dscudaBindTexture2DId 1403
extern  dscudaBindTexture2DResult * dscudabindtexture2did_1(int , char *, RCadr , RCsize , RCsize , RCsize , RCtexture , CLIENT *);
extern  dscudaBindTexture2DResult * dscudabindtexture2did_1_svc(int , char *, RCadr , RCsize , RCsize , RCsize , RCtexture , struct svc_req *);
#define dscudaBindTextureToArrayId 1404
extern  dscudaResult * dscudabindtexturetoarrayid_1(int , char *, RCadr , RCtexture , CLIENT *);
extern  dscudaResult * dscudabindtexturetoarrayid_1_svc(int , char *, RCadr , RCtexture , struct svc_req *);
#define dscudaUnbindTextureId 1405
extern  dscudaResult * dscudaunbindtextureid_1(RCtexture , CLIENT *);
extern  dscudaResult * dscudaunbindtextureid_1_svc(RCtexture , struct svc_req *);
#define dscufftPlan3dId 2002
extern  dscufftPlanResult * dscufftplan3did_1(int , int , int , u_int , CLIENT *);
extern  dscufftPlanResult * dscufftplan3did_1_svc(int , int , int , u_int , struct svc_req *);
#define dscufftDestroyId 2004
extern  dscufftResult * dscufftdestroyid_1(u_int , CLIENT *);
extern  dscufftResult * dscufftdestroyid_1_svc(u_int , struct svc_req *);
#define dscufftExecC2CId 2005
extern  dscufftResult * dscufftexecc2cid_1(u_int , RCadr , RCadr , int , CLIENT *);
extern  dscufftResult * dscufftexecc2cid_1_svc(u_int , RCadr , RCadr , int , struct svc_req *);
extern int dscuda_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else 
#define dscudaThreadExitId 100
extern  dscudaResult * dscudathreadexitid_1();
extern  dscudaResult * dscudathreadexitid_1_svc();
#define dscudaThreadSynchronizeId 101
extern  dscudaResult * dscudathreadsynchronizeid_1();
extern  dscudaResult * dscudathreadsynchronizeid_1_svc();
#define dscudaThreadSetLimitId 102
extern  dscudaResult * dscudathreadsetlimitid_1();
extern  dscudaResult * dscudathreadsetlimitid_1_svc();
#define dscudaThreadGetLimitId 103
extern  dscudaThreadGetLimitResult * dscudathreadgetlimitid_1();
extern  dscudaThreadGetLimitResult * dscudathreadgetlimitid_1_svc();
#define dscudaThreadSetCacheConfigId 104
extern  dscudaResult * dscudathreadsetcacheconfigid_1();
extern  dscudaResult * dscudathreadsetcacheconfigid_1_svc();
#define dscudaThreadGetCacheConfigId 105
extern  dscudaThreadGetCacheConfigResult * dscudathreadgetcacheconfigid_1();
extern  dscudaThreadGetCacheConfigResult * dscudathreadgetcacheconfigid_1_svc();
#define dscudaGetLastErrorId 200
extern  dscudaResult * dscudagetlasterrorid_1();
extern  dscudaResult * dscudagetlasterrorid_1_svc();
#define dscudaPeekAtLastErrorId 201
extern  dscudaResult * dscudapeekatlasterrorid_1();
extern  dscudaResult * dscudapeekatlasterrorid_1_svc();
#define dscudaGetErrorStringId 202
extern  dscudaGetErrorStringResult * dscudageterrorstringid_1();
extern  dscudaGetErrorStringResult * dscudageterrorstringid_1_svc();
#define dscudaGetDeviceId 300
extern  dscudaGetDeviceResult * dscudagetdeviceid_1();
extern  dscudaGetDeviceResult * dscudagetdeviceid_1_svc();
#define dscudaGetDeviceCountId 301
extern  dscudaGetDeviceCountResult * dscudagetdevicecountid_1();
extern  dscudaGetDeviceCountResult * dscudagetdevicecountid_1_svc();
#define dscudaGetDevicePropertiesId 302
extern  dscudaGetDevicePropertiesResult * dscudagetdevicepropertiesid_1();
extern  dscudaGetDevicePropertiesResult * dscudagetdevicepropertiesid_1_svc();
#define dscudaDriverGetVersionId 303
extern  dscudaDriverGetVersionResult * dscudadrivergetversionid_1();
extern  dscudaDriverGetVersionResult * dscudadrivergetversionid_1_svc();
#define dscudaRuntimeGetVersionId 304
extern  dscudaRuntimeGetVersionResult * dscudaruntimegetversionid_1();
extern  dscudaRuntimeGetVersionResult * dscudaruntimegetversionid_1_svc();
#define dscudaSetDeviceId 305
extern  dscudaResult * dscudasetdeviceid_1();
extern  dscudaResult * dscudasetdeviceid_1_svc();
#define dscudaSetDeviceFlagsId 306
extern  dscudaResult * dscudasetdeviceflagsid_1();
extern  dscudaResult * dscudasetdeviceflagsid_1_svc();
#define dscudaChooseDeviceId 307
extern  dscudaChooseDeviceResult * dscudachoosedeviceid_1();
extern  dscudaChooseDeviceResult * dscudachoosedeviceid_1_svc();
#define dscudaDeviceSynchronize 308
extern  dscudaResult * dscudadevicesynchronize_1();
extern  dscudaResult * dscudadevicesynchronize_1_svc();
#define dscudaDeviceReset 309
extern  dscudaResult * dscudadevicereset_1();
extern  dscudaResult * dscudadevicereset_1_svc();
#define dscudaStreamCreateId 400
extern  dscudaStreamCreateResult * dscudastreamcreateid_1();
extern  dscudaStreamCreateResult * dscudastreamcreateid_1_svc();
#define dscudaStreamDestroyId 401
extern  dscudaResult * dscudastreamdestroyid_1();
extern  dscudaResult * dscudastreamdestroyid_1_svc();
#define dscudaStreamSynchronizeId 402
extern  dscudaResult * dscudastreamsynchronizeid_1();
extern  dscudaResult * dscudastreamsynchronizeid_1_svc();
#define dscudaStreamQueryId 403
extern  dscudaResult * dscudastreamqueryid_1();
extern  dscudaResult * dscudastreamqueryid_1_svc();
#define dscudaStreamWaitEventId 404
extern  dscudaResult * dscudastreamwaiteventid_1();
extern  dscudaResult * dscudastreamwaiteventid_1_svc();
#define dscudaEventCreateId 500
extern  dscudaEventCreateResult * dscudaeventcreateid_1();
extern  dscudaEventCreateResult * dscudaeventcreateid_1_svc();
#define dscudaEventCreateWithFlagsId 501
extern  dscudaEventCreateResult * dscudaeventcreatewithflagsid_1();
extern  dscudaEventCreateResult * dscudaeventcreatewithflagsid_1_svc();
#define dscudaEventDestroyId 502
extern  dscudaResult * dscudaeventdestroyid_1();
extern  dscudaResult * dscudaeventdestroyid_1_svc();
#define dscudaEventElapsedTimeId 503
extern  dscudaEventElapsedTimeResult * dscudaeventelapsedtimeid_1();
extern  dscudaEventElapsedTimeResult * dscudaeventelapsedtimeid_1_svc();
#define dscudaEventRecordId 504
extern  dscudaResult * dscudaeventrecordid_1();
extern  dscudaResult * dscudaeventrecordid_1_svc();
#define dscudaEventSynchronizeId 505
extern  dscudaResult * dscudaeventsynchronizeid_1();
extern  dscudaResult * dscudaeventsynchronizeid_1_svc();
#define dscudaEventQueryId 506
extern  dscudaResult * dscudaeventqueryid_1();
extern  dscudaResult * dscudaeventqueryid_1_svc();
#define dscudaLaunchKernelId 600
extern  void * dscudalaunchkernelid_1();
extern  void * dscudalaunchkernelid_1_svc();
#define dscudaLoadModuleId 601
extern  dscudaLoadModuleResult * dscudaloadmoduleid_1();
extern  dscudaLoadModuleResult * dscudaloadmoduleid_1_svc();
#define dscudaFuncGetAttributesId 602
extern  dscudaFuncGetAttributesResult * dscudafuncgetattributesid_1();
extern  dscudaFuncGetAttributesResult * dscudafuncgetattributesid_1_svc();
#define dscudaMallocId 700
extern  dscudaMallocResult * dscudamallocid_1();
extern  dscudaMallocResult * dscudamallocid_1_svc();
#define dscudaFreeId 701
extern  dscudaResult * dscudafreeid_1();
extern  dscudaResult * dscudafreeid_1_svc();
#define dscudaMemcpyH2HId 702
extern  dscudaMemcpyH2HResult * dscudamemcpyh2hid_1();
extern  dscudaMemcpyH2HResult * dscudamemcpyh2hid_1_svc();
#define dscudaMemcpyH2DId 703
extern  dscudaResult * dscudamemcpyh2did_1();
extern  dscudaResult * dscudamemcpyh2did_1_svc();
#define dscudaMemcpyD2HId 704
extern  dscudaMemcpyD2HResult * dscudamemcpyd2hid_1();
extern  dscudaMemcpyD2HResult * dscudamemcpyd2hid_1_svc();
#define dscudaMemcpyD2DId 705
extern  dscudaResult * dscudamemcpyd2did_1();
extern  dscudaResult * dscudamemcpyd2did_1_svc();
#define dscudaMemcpyAsyncH2HId 706
extern  dscudaMemcpyAsyncH2HResult * dscudamemcpyasynch2hid_1();
extern  dscudaMemcpyAsyncH2HResult * dscudamemcpyasynch2hid_1_svc();
#define dscudaMemcpyAsyncH2DId 707
extern  dscudaResult * dscudamemcpyasynch2did_1();
extern  dscudaResult * dscudamemcpyasynch2did_1_svc();
#define dscudaMemcpyAsyncD2HId 708
extern  dscudaMemcpyAsyncD2HResult * dscudamemcpyasyncd2hid_1();
extern  dscudaMemcpyAsyncD2HResult * dscudamemcpyasyncd2hid_1_svc();
#define dscudaMemcpyAsyncD2DId 709
extern  dscudaResult * dscudamemcpyasyncd2did_1();
extern  dscudaResult * dscudamemcpyasyncd2did_1_svc();
#define dscudaMemcpyToSymbolH2DId 710
extern  dscudaResult * dscudamemcpytosymbolh2did_1();
extern  dscudaResult * dscudamemcpytosymbolh2did_1_svc();
#define dscudaMemcpyToSymbolD2DId 711
extern  dscudaResult * dscudamemcpytosymbold2did_1();
extern  dscudaResult * dscudamemcpytosymbold2did_1_svc();
#define dscudaMemcpyFromSymbolD2HId 712
extern  dscudaMemcpyFromSymbolD2HResult * dscudamemcpyfromsymbold2hid_1();
extern  dscudaMemcpyFromSymbolD2HResult * dscudamemcpyfromsymbold2hid_1_svc();
#define dscudaMemcpyFromSymbolD2DId 713
extern  dscudaResult * dscudamemcpyfromsymbold2did_1();
extern  dscudaResult * dscudamemcpyfromsymbold2did_1_svc();
#define dscudaMemsetId 714
extern  dscudaResult * dscudamemsetid_1();
extern  dscudaResult * dscudamemsetid_1_svc();
#define dscudaHostAllocId 715
extern  dscudaHostAllocResult * dscudahostallocid_1();
extern  dscudaHostAllocResult * dscudahostallocid_1_svc();
#define dscudaMallocHostId 716
extern  dscudaMallocHostResult * dscudamallochostid_1();
extern  dscudaMallocHostResult * dscudamallochostid_1_svc();
#define dscudaFreeHostId 717
extern  dscudaResult * dscudafreehostid_1();
extern  dscudaResult * dscudafreehostid_1_svc();
#define dscudaHostGetDevicePointerId 718
extern  dscudaHostGetDevicePointerResult * dscudahostgetdevicepointerid_1();
extern  dscudaHostGetDevicePointerResult * dscudahostgetdevicepointerid_1_svc();
#define dscudaHostGetFlagsID 719
extern  dscudaHostGetFlagsResult * dscudahostgetflagsid_1();
extern  dscudaHostGetFlagsResult * dscudahostgetflagsid_1_svc();
#define dscudaMallocArrayId 720
extern  dscudaMallocArrayResult * dscudamallocarrayid_1();
extern  dscudaMallocArrayResult * dscudamallocarrayid_1_svc();
#define dscudaFreeArrayId 721
extern  dscudaResult * dscudafreearrayid_1();
extern  dscudaResult * dscudafreearrayid_1_svc();
#define dscudaMemcpyToArrayH2HId 722
extern  dscudaMemcpyToArrayH2HResult * dscudamemcpytoarrayh2hid_1();
extern  dscudaMemcpyToArrayH2HResult * dscudamemcpytoarrayh2hid_1_svc();
#define dscudaMemcpyToArrayH2DId 723
extern  dscudaResult * dscudamemcpytoarrayh2did_1();
extern  dscudaResult * dscudamemcpytoarrayh2did_1_svc();
#define dscudaMemcpyToArrayD2HId 724
extern  dscudaMemcpyToArrayD2HResult * dscudamemcpytoarrayd2hid_1();
extern  dscudaMemcpyToArrayD2HResult * dscudamemcpytoarrayd2hid_1_svc();
#define dscudaMemcpyToArrayD2DId 725
extern  dscudaResult * dscudamemcpytoarrayd2did_1();
extern  dscudaResult * dscudamemcpytoarrayd2did_1_svc();
#define dscudaMallocPitchId 726
extern  dscudaMallocPitchResult * dscudamallocpitchid_1();
extern  dscudaMallocPitchResult * dscudamallocpitchid_1_svc();
#define dscudaMemcpy2DToArrayH2HId 727
extern  dscudaMemcpy2DToArrayH2HResult * dscudamemcpy2dtoarrayh2hid_1();
extern  dscudaMemcpy2DToArrayH2HResult * dscudamemcpy2dtoarrayh2hid_1_svc();
#define dscudaMemcpy2DToArrayH2DId 728
extern  dscudaResult * dscudamemcpy2dtoarrayh2did_1();
extern  dscudaResult * dscudamemcpy2dtoarrayh2did_1_svc();
#define dscudaMemcpy2DToArrayD2HId 729
extern  dscudaMemcpy2DToArrayD2HResult * dscudamemcpy2dtoarrayd2hid_1();
extern  dscudaMemcpy2DToArrayD2HResult * dscudamemcpy2dtoarrayd2hid_1_svc();
#define dscudaMemcpy2DToArrayD2DId 730
extern  dscudaResult * dscudamemcpy2dtoarrayd2did_1();
extern  dscudaResult * dscudamemcpy2dtoarrayd2did_1_svc();
#define dscudaMemcpy2DH2HId 731
extern  dscudaMemcpy2DH2HResult * dscudamemcpy2dh2hid_1();
extern  dscudaMemcpy2DH2HResult * dscudamemcpy2dh2hid_1_svc();
#define dscudaMemcpy2DH2DId 732
extern  dscudaResult * dscudamemcpy2dh2did_1();
extern  dscudaResult * dscudamemcpy2dh2did_1_svc();
#define dscudaMemcpy2DD2HId 733
extern  dscudaMemcpy2DD2HResult * dscudamemcpy2dd2hid_1();
extern  dscudaMemcpy2DD2HResult * dscudamemcpy2dd2hid_1_svc();
#define dscudaMemcpy2DD2DId 734
extern  dscudaResult * dscudamemcpy2dd2did_1();
extern  dscudaResult * dscudamemcpy2dd2did_1_svc();
#define dscudaMemset2DId 735
extern  dscudaResult * dscudamemset2did_1();
extern  dscudaResult * dscudamemset2did_1_svc();
#define dscudaMemcpyToSymbolAsyncH2DId 736
extern  dscudaResult * dscudamemcpytosymbolasynch2did_1();
extern  dscudaResult * dscudamemcpytosymbolasynch2did_1_svc();
#define dscudaMemcpyToSymbolAsyncD2DId 737
extern  dscudaResult * dscudamemcpytosymbolasyncd2did_1();
extern  dscudaResult * dscudamemcpytosymbolasyncd2did_1_svc();
#define dscudaMemcpyFromSymbolAsyncD2HId 738
extern  dscudaMemcpyFromSymbolAsyncD2HResult * dscudamemcpyfromsymbolasyncd2hid_1();
extern  dscudaMemcpyFromSymbolAsyncD2HResult * dscudamemcpyfromsymbolasyncd2hid_1_svc();
#define dscudaMemcpyFromSymbolAsyncD2DId 739
extern  dscudaResult * dscudamemcpyfromsymbolasyncd2did_1();
extern  dscudaResult * dscudamemcpyfromsymbolasyncd2did_1_svc();
#define dscudaCreateChannelDescId 1400
extern  dscudaCreateChannelDescResult * dscudacreatechanneldescid_1();
extern  dscudaCreateChannelDescResult * dscudacreatechanneldescid_1_svc();
#define dscudaGetChannelDescId 1401
extern  dscudaGetChannelDescResult * dscudagetchanneldescid_1();
extern  dscudaGetChannelDescResult * dscudagetchanneldescid_1_svc();
#define dscudaBindTextureId 1402
extern  dscudaBindTextureResult * dscudabindtextureid_1();
extern  dscudaBindTextureResult * dscudabindtextureid_1_svc();
#define dscudaBindTexture2DId 1403
extern  dscudaBindTexture2DResult * dscudabindtexture2did_1();
extern  dscudaBindTexture2DResult * dscudabindtexture2did_1_svc();
#define dscudaBindTextureToArrayId 1404
extern  dscudaResult * dscudabindtexturetoarrayid_1();
extern  dscudaResult * dscudabindtexturetoarrayid_1_svc();
#define dscudaUnbindTextureId 1405
extern  dscudaResult * dscudaunbindtextureid_1();
extern  dscudaResult * dscudaunbindtextureid_1_svc();
#define dscufftPlan3dId 2002
extern  dscufftPlanResult * dscufftplan3did_1();
extern  dscufftPlanResult * dscufftplan3did_1_svc();
#define dscufftDestroyId 2004
extern  dscufftResult * dscufftdestroyid_1();
extern  dscufftResult * dscufftdestroyid_1_svc();
#define dscufftExecC2CId 2005
extern  dscufftResult * dscufftexecc2cid_1();
extern  dscufftResult * dscufftexecc2cid_1_svc();
extern int dscuda_prog_1_freeresult ();
#endif 



#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_RCadr (XDR *, RCadr*);
extern  bool_t xdr_RCstream (XDR *, RCstream*);
extern  bool_t xdr_RCevent (XDR *, RCevent*);
extern  bool_t xdr_RCipaddr (XDR *, RCipaddr*);
extern  bool_t xdr_RCsize (XDR *, RCsize*);
extern  bool_t xdr_RCerror (XDR *, RCerror*);
extern  bool_t xdr_RCbuf (XDR *, RCbuf*);
extern  bool_t xdr_RCchannelformat (XDR *, RCchannelformat*);
extern  bool_t xdr_RCpid (XDR *, RCpid*);
extern  bool_t xdr_RCchanneldesc_t (XDR *, RCchanneldesc_t*);
extern  bool_t xdr_RCchanneldesc (XDR *, RCchanneldesc*);
extern  bool_t xdr_RCtexture_t (XDR *, RCtexture_t*);
extern  bool_t xdr_RCtexture (XDR *, RCtexture*);
extern  bool_t xdr_RCfuncattr_t (XDR *, RCfuncattr_t*);
extern  bool_t xdr_RCfuncattr (XDR *, RCfuncattr*);
extern  bool_t xdr_RCargType (XDR *, RCargType*);
extern  bool_t xdr_RCargVal (XDR *, RCargVal*);
extern  bool_t xdr_RCarg (XDR *, RCarg*);
extern  bool_t xdr_RCargs (XDR *, RCargs*);
extern  bool_t xdr_dscudaResult (XDR *, dscudaResult*);
extern  bool_t xdr_dscudaThreadGetLimitResult (XDR *, dscudaThreadGetLimitResult*);
extern  bool_t xdr_dscudaThreadGetCacheConfigResult (XDR *, dscudaThreadGetCacheConfigResult*);
extern  bool_t xdr_dscudaMallocResult (XDR *, dscudaMallocResult*);
extern  bool_t xdr_dscudaHostAllocResult (XDR *, dscudaHostAllocResult*);
extern  bool_t xdr_dscudaMallocHostResult (XDR *, dscudaMallocHostResult*);
extern  bool_t xdr_dscudaMallocArrayResult (XDR *, dscudaMallocArrayResult*);
extern  bool_t xdr_dscudaMallocPitchResult (XDR *, dscudaMallocPitchResult*);
extern  bool_t xdr_dscudaMemcpyD2HResult (XDR *, dscudaMemcpyD2HResult*);
extern  bool_t xdr_dscudaMemcpyH2HResult (XDR *, dscudaMemcpyH2HResult*);
extern  bool_t xdr_dscudaMemcpyToArrayD2HResult (XDR *, dscudaMemcpyToArrayD2HResult*);
extern  bool_t xdr_dscudaMemcpyToArrayH2HResult (XDR *, dscudaMemcpyToArrayH2HResult*);
extern  bool_t xdr_dscudaMemcpy2DToArrayD2HResult (XDR *, dscudaMemcpy2DToArrayD2HResult*);
extern  bool_t xdr_dscudaMemcpy2DToArrayH2HResult (XDR *, dscudaMemcpy2DToArrayH2HResult*);
extern  bool_t xdr_dscudaMemcpy2DD2HResult (XDR *, dscudaMemcpy2DD2HResult*);
extern  bool_t xdr_dscudaMemcpy2DH2HResult (XDR *, dscudaMemcpy2DH2HResult*);
extern  bool_t xdr_dscudaGetDeviceResult (XDR *, dscudaGetDeviceResult*);
extern  bool_t xdr_dscudaGetDeviceCountResult (XDR *, dscudaGetDeviceCountResult*);
extern  bool_t xdr_dscudaGetDevicePropertiesResult (XDR *, dscudaGetDevicePropertiesResult*);
extern  bool_t xdr_dscudaDriverGetVersionResult (XDR *, dscudaDriverGetVersionResult*);
extern  bool_t xdr_dscudaRuntimeGetVersionResult (XDR *, dscudaRuntimeGetVersionResult*);
extern  bool_t xdr_dscudaGetErrorStringResult (XDR *, dscudaGetErrorStringResult*);
extern  bool_t xdr_dscudaCreateChannelDescResult (XDR *, dscudaCreateChannelDescResult*);
extern  bool_t xdr_dscudaGetChannelDescResult (XDR *, dscudaGetChannelDescResult*);
extern  bool_t xdr_dscudaChooseDeviceResult (XDR *, dscudaChooseDeviceResult*);
extern  bool_t xdr_dscudaMemcpyAsyncD2HResult (XDR *, dscudaMemcpyAsyncD2HResult*);
extern  bool_t xdr_dscudaMemcpyAsyncH2HResult (XDR *, dscudaMemcpyAsyncH2HResult*);
extern  bool_t xdr_dscudaMemcpyFromSymbolD2HResult (XDR *, dscudaMemcpyFromSymbolD2HResult*);
extern  bool_t xdr_dscudaMemcpyFromSymbolAsyncD2HResult (XDR *, dscudaMemcpyFromSymbolAsyncD2HResult*);
extern  bool_t xdr_dscudaStreamCreateResult (XDR *, dscudaStreamCreateResult*);
extern  bool_t xdr_dscudaEventCreateResult (XDR *, dscudaEventCreateResult*);
extern  bool_t xdr_dscudaEventElapsedTimeResult (XDR *, dscudaEventElapsedTimeResult*);
extern  bool_t xdr_dscudaHostGetDevicePointerResult (XDR *, dscudaHostGetDevicePointerResult*);
extern  bool_t xdr_dscudaHostGetFlagsResult (XDR *, dscudaHostGetFlagsResult*);
extern  bool_t xdr_dscudaLoadModuleResult (XDR *, dscudaLoadModuleResult*);
extern  bool_t xdr_dscudaFuncGetAttributesResult (XDR *, dscudaFuncGetAttributesResult*);
extern  bool_t xdr_dscudaBindTextureResult (XDR *, dscudaBindTextureResult*);
extern  bool_t xdr_dscudaBindTexture2DResult (XDR *, dscudaBindTexture2DResult*);
extern  bool_t xdr_dscufftResult (XDR *, dscufftResult*);
extern  bool_t xdr_dscufftPlanResult (XDR *, dscufftPlanResult*);
extern  bool_t xdr_dscublasResult (XDR *, dscublasResult*);
extern  bool_t xdr_dscublasCreateResult (XDR *, dscublasCreateResult*);
extern  bool_t xdr_dscublasGetVectorResult (XDR *, dscublasGetVectorResult*);
extern  bool_t xdr_RCdim3 (XDR *, RCdim3*);
extern  bool_t xdr_dscudathreadsetlimitid_1_argument (XDR *, dscudathreadsetlimitid_1_argument*);
extern  bool_t xdr_dscudastreamwaiteventid_1_argument (XDR *, dscudastreamwaiteventid_1_argument*);
extern  bool_t xdr_dscudaeventelapsedtimeid_1_argument (XDR *, dscudaeventelapsedtimeid_1_argument*);
extern  bool_t xdr_dscudaeventrecordid_1_argument (XDR *, dscudaeventrecordid_1_argument*);
extern  bool_t xdr_dscudalaunchkernelid_1_argument (XDR *, dscudalaunchkernelid_1_argument*);
extern  bool_t xdr_dscudaloadmoduleid_1_argument (XDR *, dscudaloadmoduleid_1_argument*);
extern  bool_t xdr_dscudafuncgetattributesid_1_argument (XDR *, dscudafuncgetattributesid_1_argument*);
extern  bool_t xdr_dscudamemcpyh2hid_1_argument (XDR *, dscudamemcpyh2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyh2did_1_argument (XDR *, dscudamemcpyh2did_1_argument*);
extern  bool_t xdr_dscudamemcpyd2hid_1_argument (XDR *, dscudamemcpyd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyd2did_1_argument (XDR *, dscudamemcpyd2did_1_argument*);
extern  bool_t xdr_dscudamemcpyasynch2hid_1_argument (XDR *, dscudamemcpyasynch2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyasynch2did_1_argument (XDR *, dscudamemcpyasynch2did_1_argument*);
extern  bool_t xdr_dscudamemcpyasyncd2hid_1_argument (XDR *, dscudamemcpyasyncd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyasyncd2did_1_argument (XDR *, dscudamemcpyasyncd2did_1_argument*);
extern  bool_t xdr_dscudamemcpytosymbolh2did_1_argument (XDR *, dscudamemcpytosymbolh2did_1_argument*);
extern  bool_t xdr_dscudamemcpytosymbold2did_1_argument (XDR *, dscudamemcpytosymbold2did_1_argument*);
extern  bool_t xdr_dscudamemcpyfromsymbold2hid_1_argument (XDR *, dscudamemcpyfromsymbold2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyfromsymbold2did_1_argument (XDR *, dscudamemcpyfromsymbold2did_1_argument*);
extern  bool_t xdr_dscudamemsetid_1_argument (XDR *, dscudamemsetid_1_argument*);
extern  bool_t xdr_dscudahostallocid_1_argument (XDR *, dscudahostallocid_1_argument*);
extern  bool_t xdr_dscudahostgetdevicepointerid_1_argument (XDR *, dscudahostgetdevicepointerid_1_argument*);
extern  bool_t xdr_dscudamallocarrayid_1_argument (XDR *, dscudamallocarrayid_1_argument*);
extern  bool_t xdr_dscudamemcpytoarrayh2hid_1_argument (XDR *, dscudamemcpytoarrayh2hid_1_argument*);
extern  bool_t xdr_dscudamemcpytoarrayh2did_1_argument (XDR *, dscudamemcpytoarrayh2did_1_argument*);
extern  bool_t xdr_dscudamemcpytoarrayd2hid_1_argument (XDR *, dscudamemcpytoarrayd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpytoarrayd2did_1_argument (XDR *, dscudamemcpytoarrayd2did_1_argument*);
extern  bool_t xdr_dscudamallocpitchid_1_argument (XDR *, dscudamallocpitchid_1_argument*);
extern  bool_t xdr_dscudamemcpy2dtoarrayh2hid_1_argument (XDR *, dscudamemcpy2dtoarrayh2hid_1_argument*);
extern  bool_t xdr_dscudamemcpy2dtoarrayh2did_1_argument (XDR *, dscudamemcpy2dtoarrayh2did_1_argument*);
extern  bool_t xdr_dscudamemcpy2dtoarrayd2hid_1_argument (XDR *, dscudamemcpy2dtoarrayd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpy2dtoarrayd2did_1_argument (XDR *, dscudamemcpy2dtoarrayd2did_1_argument*);
extern  bool_t xdr_dscudamemcpy2dh2hid_1_argument (XDR *, dscudamemcpy2dh2hid_1_argument*);
extern  bool_t xdr_dscudamemcpy2dh2did_1_argument (XDR *, dscudamemcpy2dh2did_1_argument*);
extern  bool_t xdr_dscudamemcpy2dd2hid_1_argument (XDR *, dscudamemcpy2dd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpy2dd2did_1_argument (XDR *, dscudamemcpy2dd2did_1_argument*);
extern  bool_t xdr_dscudamemset2did_1_argument (XDR *, dscudamemset2did_1_argument*);
extern  bool_t xdr_dscudamemcpytosymbolasynch2did_1_argument (XDR *, dscudamemcpytosymbolasynch2did_1_argument*);
extern  bool_t xdr_dscudamemcpytosymbolasyncd2did_1_argument (XDR *, dscudamemcpytosymbolasyncd2did_1_argument*);
extern  bool_t xdr_dscudamemcpyfromsymbolasyncd2hid_1_argument (XDR *, dscudamemcpyfromsymbolasyncd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyfromsymbolasyncd2did_1_argument (XDR *, dscudamemcpyfromsymbolasyncd2did_1_argument*);
extern  bool_t xdr_dscudacreatechanneldescid_1_argument (XDR *, dscudacreatechanneldescid_1_argument*);
extern  bool_t xdr_dscudabindtextureid_1_argument (XDR *, dscudabindtextureid_1_argument*);
extern  bool_t xdr_dscudabindtexture2did_1_argument (XDR *, dscudabindtexture2did_1_argument*);
extern  bool_t xdr_dscudabindtexturetoarrayid_1_argument (XDR *, dscudabindtexturetoarrayid_1_argument*);
extern  bool_t xdr_dscufftplan3did_1_argument (XDR *, dscufftplan3did_1_argument*);
extern  bool_t xdr_dscufftexecc2cid_1_argument (XDR *, dscufftexecc2cid_1_argument*);

#else 
extern bool_t xdr_RCadr ();
extern bool_t xdr_RCstream ();
extern bool_t xdr_RCevent ();
extern bool_t xdr_RCipaddr ();
extern bool_t xdr_RCsize ();
extern bool_t xdr_RCerror ();
extern bool_t xdr_RCbuf ();
extern bool_t xdr_RCchannelformat ();
extern bool_t xdr_RCpid ();
extern bool_t xdr_RCchanneldesc_t ();
extern bool_t xdr_RCchanneldesc ();
extern bool_t xdr_RCtexture_t ();
extern bool_t xdr_RCtexture ();
extern bool_t xdr_RCfuncattr_t ();
extern bool_t xdr_RCfuncattr ();
extern bool_t xdr_RCargType ();
extern bool_t xdr_RCargVal ();
extern bool_t xdr_RCarg ();
extern bool_t xdr_RCargs ();
extern bool_t xdr_dscudaResult ();
extern bool_t xdr_dscudaThreadGetLimitResult ();
extern bool_t xdr_dscudaThreadGetCacheConfigResult ();
extern bool_t xdr_dscudaMallocResult ();
extern bool_t xdr_dscudaHostAllocResult ();
extern bool_t xdr_dscudaMallocHostResult ();
extern bool_t xdr_dscudaMallocArrayResult ();
extern bool_t xdr_dscudaMallocPitchResult ();
extern bool_t xdr_dscudaMemcpyD2HResult ();
extern bool_t xdr_dscudaMemcpyH2HResult ();
extern bool_t xdr_dscudaMemcpyToArrayD2HResult ();
extern bool_t xdr_dscudaMemcpyToArrayH2HResult ();
extern bool_t xdr_dscudaMemcpy2DToArrayD2HResult ();
extern bool_t xdr_dscudaMemcpy2DToArrayH2HResult ();
extern bool_t xdr_dscudaMemcpy2DD2HResult ();
extern bool_t xdr_dscudaMemcpy2DH2HResult ();
extern bool_t xdr_dscudaGetDeviceResult ();
extern bool_t xdr_dscudaGetDeviceCountResult ();
extern bool_t xdr_dscudaGetDevicePropertiesResult ();
extern bool_t xdr_dscudaDriverGetVersionResult ();
extern bool_t xdr_dscudaRuntimeGetVersionResult ();
extern bool_t xdr_dscudaGetErrorStringResult ();
extern bool_t xdr_dscudaCreateChannelDescResult ();
extern bool_t xdr_dscudaGetChannelDescResult ();
extern bool_t xdr_dscudaChooseDeviceResult ();
extern bool_t xdr_dscudaMemcpyAsyncD2HResult ();
extern bool_t xdr_dscudaMemcpyAsyncH2HResult ();
extern bool_t xdr_dscudaMemcpyFromSymbolD2HResult ();
extern bool_t xdr_dscudaMemcpyFromSymbolAsyncD2HResult ();
extern bool_t xdr_dscudaStreamCreateResult ();
extern bool_t xdr_dscudaEventCreateResult ();
extern bool_t xdr_dscudaEventElapsedTimeResult ();
extern bool_t xdr_dscudaHostGetDevicePointerResult ();
extern bool_t xdr_dscudaHostGetFlagsResult ();
extern bool_t xdr_dscudaLoadModuleResult ();
extern bool_t xdr_dscudaFuncGetAttributesResult ();
extern bool_t xdr_dscudaBindTextureResult ();
extern bool_t xdr_dscudaBindTexture2DResult ();
extern bool_t xdr_dscufftResult ();
extern bool_t xdr_dscufftPlanResult ();
extern bool_t xdr_dscublasResult ();
extern bool_t xdr_dscublasCreateResult ();
extern bool_t xdr_dscublasGetVectorResult ();
extern bool_t xdr_RCdim3 ();
extern bool_t xdr_dscudathreadsetlimitid_1_argument ();
extern bool_t xdr_dscudastreamwaiteventid_1_argument ();
extern bool_t xdr_dscudaeventelapsedtimeid_1_argument ();
extern bool_t xdr_dscudaeventrecordid_1_argument ();
extern bool_t xdr_dscudalaunchkernelid_1_argument ();
extern bool_t xdr_dscudaloadmoduleid_1_argument ();
extern bool_t xdr_dscudafuncgetattributesid_1_argument ();
extern bool_t xdr_dscudamemcpyh2hid_1_argument ();
extern bool_t xdr_dscudamemcpyh2did_1_argument ();
extern bool_t xdr_dscudamemcpyd2hid_1_argument ();
extern bool_t xdr_dscudamemcpyd2did_1_argument ();
extern bool_t xdr_dscudamemcpyasynch2hid_1_argument ();
extern bool_t xdr_dscudamemcpyasynch2did_1_argument ();
extern bool_t xdr_dscudamemcpyasyncd2hid_1_argument ();
extern bool_t xdr_dscudamemcpyasyncd2did_1_argument ();
extern bool_t xdr_dscudamemcpytosymbolh2did_1_argument ();
extern bool_t xdr_dscudamemcpytosymbold2did_1_argument ();
extern bool_t xdr_dscudamemcpyfromsymbold2hid_1_argument ();
extern bool_t xdr_dscudamemcpyfromsymbold2did_1_argument ();
extern bool_t xdr_dscudamemsetid_1_argument ();
extern bool_t xdr_dscudahostallocid_1_argument ();
extern bool_t xdr_dscudahostgetdevicepointerid_1_argument ();
extern bool_t xdr_dscudamallocarrayid_1_argument ();
extern bool_t xdr_dscudamemcpytoarrayh2hid_1_argument ();
extern bool_t xdr_dscudamemcpytoarrayh2did_1_argument ();
extern bool_t xdr_dscudamemcpytoarrayd2hid_1_argument ();
extern bool_t xdr_dscudamemcpytoarrayd2did_1_argument ();
extern bool_t xdr_dscudamallocpitchid_1_argument ();
extern bool_t xdr_dscudamemcpy2dtoarrayh2hid_1_argument ();
extern bool_t xdr_dscudamemcpy2dtoarrayh2did_1_argument ();
extern bool_t xdr_dscudamemcpy2dtoarrayd2hid_1_argument ();
extern bool_t xdr_dscudamemcpy2dtoarrayd2did_1_argument ();
extern bool_t xdr_dscudamemcpy2dh2hid_1_argument ();
extern bool_t xdr_dscudamemcpy2dh2did_1_argument ();
extern bool_t xdr_dscudamemcpy2dd2hid_1_argument ();
extern bool_t xdr_dscudamemcpy2dd2did_1_argument ();
extern bool_t xdr_dscudamemset2did_1_argument ();
extern bool_t xdr_dscudamemcpytosymbolasynch2did_1_argument ();
extern bool_t xdr_dscudamemcpytosymbolasyncd2did_1_argument ();
extern bool_t xdr_dscudamemcpyfromsymbolasyncd2hid_1_argument ();
extern bool_t xdr_dscudamemcpyfromsymbolasyncd2did_1_argument ();
extern bool_t xdr_dscudacreatechanneldescid_1_argument ();
extern bool_t xdr_dscudabindtextureid_1_argument ();
extern bool_t xdr_dscudabindtexture2did_1_argument ();
extern bool_t xdr_dscudabindtexturetoarrayid_1_argument ();
extern bool_t xdr_dscufftplan3did_1_argument ();
extern bool_t xdr_dscufftexecc2cid_1_argument ();

#endif 

#ifdef __cplusplus
}
#endif

#endif 
#pragma end dscudarpc.h
#pragma begin dscudadefs.h
#ifndef _DSCUDADEFS_H
#define _DSCUDADEFS_H

#define RC_NSERVERMAX 32    
#define RC_NDEVICEMAX 32    
#define RC_NREDUNDANCYMAX 4 
#define RC_NVDEVMAX 64      
#define RC_NPTHREADMAX 64   

#define RC_BUFSIZE (1024*1024) 
#define RC_NKMODULEMAX 128  
#define RC_NKFUNCMAX   128  
#define RC_KARGMAX     64   
#define RC_KMODULENAMELEN 64   
#define RC_KNAMELEN       64   
#define RC_KMODULEIMAGELEN (1024*1024*2)   
#define RC_SNAMELEN       64   

#define RC_CACHE_MODULE (1) 
#define RC_CLIENT_CACHE_LIFETIME (30) 
#define RC_SERVER_CACHE_LIFETIME (RC_CLIENT_CACHE_LIFETIME+30) 

#define RC_SUPPORT_PAGELOCK (0)  
#define RC_SUPPORT_STREAM (0)
#define RC_SUPPORT_CONCURRENT_EXEC (0)

#define RC_DAEMON_IP_PORT  (65432)
#define RC_SERVER_IP_PORT  (RC_DAEMON_IP_PORT+1)

#endif 
#pragma end dscudadefs.h
#pragma begin dscudamacros.h
#ifndef DSCUDA_MACROS_H
#define DSCUDA_MACROS_H

#define WARN(lv, fmt, args...) if (lv <= dscudaWarnLevel()) fprintf(stderr, fmt, ## args);
#define WARNONCE(lv, fmt, args...) if (lv <= dscudaWarnLevel()) { \
        static int firstcall = 1;                                 \
        if (firstcall) {                                          \
            firstcall = 0;                                        \
            fprintf(stderr, fmt, ## args);                        \
        }                                                         \
    }

#define ALIGN_UP(off, align) (off) = ((off) + (align) - 1) & ~((align) - 1)
int dscudaWarnLevel(void);
void dscudaSetWarnLevel(int level);

#endif 
#pragma end dscudamacros.h
#pragma begin ibv_rdma.h
#ifndef RDMA_COMMON_H
#define RDMA_COMMON_H

#ifdef RPC_ONLY

typedef struct {
    int type;
    union {
        uint64_t pointerval;
        unsigned int intval;
        float floatval;
        char customval[RC_KARGMAX];
    } val;
    unsigned int offset;
    unsigned int size;
} IbvArg;

#else

#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <rdma/rdma_cma.h>
#include <cuda_runtime_api.h>
#pragma begin dscudadefs.h
#ifndef _DSCUDADEFS_H
#define _DSCUDADEFS_H

#define RC_NSERVERMAX 32    
#define RC_NDEVICEMAX 32    
#define RC_NREDUNDANCYMAX 4 
#define RC_NVDEVMAX 64      
#define RC_NPTHREADMAX 64   

#define RC_BUFSIZE (1024*1024) 
#define RC_NKMODULEMAX 128  
#define RC_NKFUNCMAX   128  
#define RC_KARGMAX     64   
#define RC_KMODULENAMELEN 64   
#define RC_KNAMELEN       64   
#define RC_KMODULEIMAGELEN (1024*1024*2)   
#define RC_SNAMELEN       64   

#define RC_CACHE_MODULE (1) 
#define RC_CLIENT_CACHE_LIFETIME (30) 
#define RC_SERVER_CACHE_LIFETIME (RC_CLIENT_CACHE_LIFETIME+30) 

#define RC_SUPPORT_PAGELOCK (0)  
#define RC_SUPPORT_STREAM (0)
#define RC_SUPPORT_CONCURRENT_EXEC (0)

#define RC_DAEMON_IP_PORT  (65432)
#define RC_SERVER_IP_PORT  (RC_DAEMON_IP_PORT+1)

#endif 
#pragma end dscudadefs.h
#pragma begin dscudarpc.h


#ifndef _DSCUDARPC_H_RPCGEN
#define _DSCUDARPC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef u_quad_t RCadr;

typedef u_quad_t RCstream;

typedef u_quad_t RCevent;

typedef u_quad_t RCipaddr;

typedef u_int RCsize;

typedef u_int RCerror;

typedef struct {
	u_int RCbuf_len;
	char *RCbuf_val;
} RCbuf;

typedef u_int RCchannelformat;

typedef u_long RCpid;

struct RCchanneldesc_t {
	RCchannelformat f;
	int w;
	int x;
	int y;
	int z;
};
typedef struct RCchanneldesc_t RCchanneldesc_t;

typedef RCchanneldesc_t RCchanneldesc;

struct RCtexture_t {
	int normalized;
	int filterMode;
	int addressMode[3];
	RCchannelformat f;
	int w;
	int x;
	int y;
	int z;
};
typedef struct RCtexture_t RCtexture_t;

typedef RCtexture_t RCtexture;

struct RCfuncattr_t {
	int binaryVersion;
	RCsize constSizeBytes;
	RCsize localSizeBytes;
	int maxThreadsPerBlock;
	int numRegs;
	int ptxVersion;
	RCsize sharedSizeBytes;
};
typedef struct RCfuncattr_t RCfuncattr_t;

typedef RCfuncattr_t RCfuncattr;

enum RCargType {
	dscudaArgTypeP = 0,
	dscudaArgTypeI = 1,
	dscudaArgTypeF = 2,
	dscudaArgTypeV = 3,
};
typedef enum RCargType RCargType;

struct RCargVal {
	RCargType type;
	union {
		RCadr address;
		u_int valuei;
		float valuef;
		char valuev[64];
	} RCargVal_u;
};
typedef struct RCargVal RCargVal;

struct RCarg {
	RCargVal val;
	u_int offset;
	u_int size;
};
typedef struct RCarg RCarg;

typedef struct {
	u_int RCargs_len;
	RCarg *RCargs_val;
} RCargs;

struct dscudaResult {
	RCerror err;
};
typedef struct dscudaResult dscudaResult;

struct dscudaThreadGetLimitResult {
	RCerror err;
	RCsize value;
};
typedef struct dscudaThreadGetLimitResult dscudaThreadGetLimitResult;

struct dscudaThreadGetCacheConfigResult {
	RCerror err;
	int cacheConfig;
};
typedef struct dscudaThreadGetCacheConfigResult dscudaThreadGetCacheConfigResult;

struct dscudaMallocResult {
	RCerror err;
	RCadr devAdr;
};
typedef struct dscudaMallocResult dscudaMallocResult;

struct dscudaHostAllocResult {
	RCerror err;
	RCadr pHost;
};
typedef struct dscudaHostAllocResult dscudaHostAllocResult;

struct dscudaMallocHostResult {
	RCerror err;
	RCadr ptr;
};
typedef struct dscudaMallocHostResult dscudaMallocHostResult;

struct dscudaMallocArrayResult {
	RCerror err;
	RCadr array;
};
typedef struct dscudaMallocArrayResult dscudaMallocArrayResult;

struct dscudaMallocPitchResult {
	RCerror err;
	RCadr devPtr;
	RCsize pitch;
};
typedef struct dscudaMallocPitchResult dscudaMallocPitchResult;

struct dscudaMemcpyD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyD2HResult dscudaMemcpyD2HResult;

struct dscudaMemcpyH2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyH2HResult dscudaMemcpyH2HResult;

struct dscudaMemcpyToArrayD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyToArrayD2HResult dscudaMemcpyToArrayD2HResult;

struct dscudaMemcpyToArrayH2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyToArrayH2HResult dscudaMemcpyToArrayH2HResult;

struct dscudaMemcpy2DToArrayD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpy2DToArrayD2HResult dscudaMemcpy2DToArrayD2HResult;

struct dscudaMemcpy2DToArrayH2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpy2DToArrayH2HResult dscudaMemcpy2DToArrayH2HResult;

struct dscudaMemcpy2DD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpy2DD2HResult dscudaMemcpy2DD2HResult;

struct dscudaMemcpy2DH2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpy2DH2HResult dscudaMemcpy2DH2HResult;

struct dscudaGetDeviceResult {
	RCerror err;
	int device;
};
typedef struct dscudaGetDeviceResult dscudaGetDeviceResult;

struct dscudaGetDeviceCountResult {
	RCerror err;
	int count;
};
typedef struct dscudaGetDeviceCountResult dscudaGetDeviceCountResult;

struct dscudaGetDevicePropertiesResult {
	RCerror err;
	RCbuf prop;
};
typedef struct dscudaGetDevicePropertiesResult dscudaGetDevicePropertiesResult;

struct dscudaDriverGetVersionResult {
	RCerror err;
	int ver;
};
typedef struct dscudaDriverGetVersionResult dscudaDriverGetVersionResult;

struct dscudaRuntimeGetVersionResult {
	RCerror err;
	int ver;
};
typedef struct dscudaRuntimeGetVersionResult dscudaRuntimeGetVersionResult;

struct dscudaGetErrorStringResult {
	char *errmsg;
};
typedef struct dscudaGetErrorStringResult dscudaGetErrorStringResult;

struct dscudaCreateChannelDescResult {
	int x;
	int y;
	int z;
	int w;
	RCchannelformat f;
};
typedef struct dscudaCreateChannelDescResult dscudaCreateChannelDescResult;

struct dscudaGetChannelDescResult {
	RCerror err;
	int x;
	int y;
	int z;
	int w;
	RCchannelformat f;
};
typedef struct dscudaGetChannelDescResult dscudaGetChannelDescResult;

struct dscudaChooseDeviceResult {
	RCerror err;
	int device;
};
typedef struct dscudaChooseDeviceResult dscudaChooseDeviceResult;

struct dscudaMemcpyAsyncD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyAsyncD2HResult dscudaMemcpyAsyncD2HResult;

struct dscudaMemcpyAsyncH2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyAsyncH2HResult dscudaMemcpyAsyncH2HResult;

struct dscudaMemcpyFromSymbolD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyFromSymbolD2HResult dscudaMemcpyFromSymbolD2HResult;

struct dscudaMemcpyFromSymbolAsyncD2HResult {
	RCerror err;
	RCbuf buf;
};
typedef struct dscudaMemcpyFromSymbolAsyncD2HResult dscudaMemcpyFromSymbolAsyncD2HResult;

struct dscudaStreamCreateResult {
	RCerror err;
	RCadr stream;
};
typedef struct dscudaStreamCreateResult dscudaStreamCreateResult;

struct dscudaEventCreateResult {
	RCerror err;
	RCadr event;
};
typedef struct dscudaEventCreateResult dscudaEventCreateResult;

struct dscudaEventElapsedTimeResult {
	RCerror err;
	float ms;
};
typedef struct dscudaEventElapsedTimeResult dscudaEventElapsedTimeResult;

struct dscudaHostGetDevicePointerResult {
	RCerror err;
	RCadr pDevice;
};
typedef struct dscudaHostGetDevicePointerResult dscudaHostGetDevicePointerResult;

struct dscudaHostGetFlagsResult {
	RCerror err;
	u_int flags;
};
typedef struct dscudaHostGetFlagsResult dscudaHostGetFlagsResult;

struct dscudaLoadModuleResult {
	u_int id;
};
typedef struct dscudaLoadModuleResult dscudaLoadModuleResult;

struct dscudaFuncGetAttributesResult {
	RCerror err;
	RCfuncattr attr;
};
typedef struct dscudaFuncGetAttributesResult dscudaFuncGetAttributesResult;

struct dscudaBindTextureResult {
	RCerror err;
	RCsize offset;
};
typedef struct dscudaBindTextureResult dscudaBindTextureResult;

struct dscudaBindTexture2DResult {
	RCerror err;
	RCsize offset;
};
typedef struct dscudaBindTexture2DResult dscudaBindTexture2DResult;

struct dscufftResult {
	RCerror err;
};
typedef struct dscufftResult dscufftResult;

struct dscufftPlanResult {
	RCerror err;
	u_int plan;
};
typedef struct dscufftPlanResult dscufftPlanResult;

struct dscublasResult {
	RCerror err;
	u_int stat;
};
typedef struct dscublasResult dscublasResult;

struct dscublasCreateResult {
	RCerror err;
	u_int stat;
	RCadr handle;
};
typedef struct dscublasCreateResult dscublasCreateResult;

struct dscublasGetVectorResult {
	RCerror err;
	u_int stat;
	RCbuf y;
};
typedef struct dscublasGetVectorResult dscublasGetVectorResult;

struct RCdim3 {
	u_int x;
	u_int y;
	u_int z;
};
typedef struct RCdim3 RCdim3;

struct dscudathreadsetlimitid_1_argument {
	int limit;
	RCsize value;
};
typedef struct dscudathreadsetlimitid_1_argument dscudathreadsetlimitid_1_argument;

struct dscudastreamwaiteventid_1_argument {
	RCstream stream;
	RCevent event;
	u_int flags;
};
typedef struct dscudastreamwaiteventid_1_argument dscudastreamwaiteventid_1_argument;

struct dscudaeventelapsedtimeid_1_argument {
	RCevent start;
	RCevent end;
};
typedef struct dscudaeventelapsedtimeid_1_argument dscudaeventelapsedtimeid_1_argument;

struct dscudaeventrecordid_1_argument {
	RCevent event;
	RCstream stream;
};
typedef struct dscudaeventrecordid_1_argument dscudaeventrecordid_1_argument;

struct dscudalaunchkernelid_1_argument {
	int moduleid;
	int kid;
	char *kname;
	RCdim3 gdim;
	RCdim3 bdim;
	RCsize smemsize;
	RCstream stream;
	RCargs args;
};
typedef struct dscudalaunchkernelid_1_argument dscudalaunchkernelid_1_argument;

struct dscudaloadmoduleid_1_argument {
	RCipaddr ipaddr;
	RCpid pid;
	char *mname;
	char *image;
};
typedef struct dscudaloadmoduleid_1_argument dscudaloadmoduleid_1_argument;

struct dscudafuncgetattributesid_1_argument {
	int moduleid;
	char *kname;
};
typedef struct dscudafuncgetattributesid_1_argument dscudafuncgetattributesid_1_argument;

struct dscudamemcpyh2hid_1_argument {
	RCadr dst;
	RCbuf src;
	RCsize count;
};
typedef struct dscudamemcpyh2hid_1_argument dscudamemcpyh2hid_1_argument;

struct dscudamemcpyh2did_1_argument {
	RCadr dst;
	RCbuf src;
	RCsize count;
};
typedef struct dscudamemcpyh2did_1_argument dscudamemcpyh2did_1_argument;

struct dscudamemcpyd2hid_1_argument {
	RCadr src;
	RCsize count;
};
typedef struct dscudamemcpyd2hid_1_argument dscudamemcpyd2hid_1_argument;

struct dscudamemcpyd2did_1_argument {
	RCadr dst;
	RCadr src;
	RCsize count;
};
typedef struct dscudamemcpyd2did_1_argument dscudamemcpyd2did_1_argument;

struct dscudamemcpyasynch2hid_1_argument {
	RCadr dst;
	RCbuf src;
	RCsize count;
	RCstream stream;
};
typedef struct dscudamemcpyasynch2hid_1_argument dscudamemcpyasynch2hid_1_argument;

struct dscudamemcpyasynch2did_1_argument {
	RCadr dst;
	RCbuf src;
	RCsize count;
	RCstream stream;
};
typedef struct dscudamemcpyasynch2did_1_argument dscudamemcpyasynch2did_1_argument;

struct dscudamemcpyasyncd2hid_1_argument {
	RCadr src;
	RCsize count;
	RCstream stream;
};
typedef struct dscudamemcpyasyncd2hid_1_argument dscudamemcpyasyncd2hid_1_argument;

struct dscudamemcpyasyncd2did_1_argument {
	RCadr dst;
	RCadr src;
	RCsize count;
	RCstream stream;
};
typedef struct dscudamemcpyasyncd2did_1_argument dscudamemcpyasyncd2did_1_argument;

struct dscudamemcpytosymbolh2did_1_argument {
	int moduleid;
	char *symbol;
	RCbuf src;
	RCsize count;
	RCsize offset;
};
typedef struct dscudamemcpytosymbolh2did_1_argument dscudamemcpytosymbolh2did_1_argument;

struct dscudamemcpytosymbold2did_1_argument {
	int moduleid;
	char *symbol;
	RCadr src;
	RCsize count;
	RCsize offset;
};
typedef struct dscudamemcpytosymbold2did_1_argument dscudamemcpytosymbold2did_1_argument;

struct dscudamemcpyfromsymbold2hid_1_argument {
	int moduleid;
	char *symbol;
	RCsize count;
	RCsize offset;
};
typedef struct dscudamemcpyfromsymbold2hid_1_argument dscudamemcpyfromsymbold2hid_1_argument;

struct dscudamemcpyfromsymbold2did_1_argument {
	int moduleid;
	RCadr dst;
	char *symbol;
	RCsize count;
	RCsize offset;
};
typedef struct dscudamemcpyfromsymbold2did_1_argument dscudamemcpyfromsymbold2did_1_argument;

struct dscudamemsetid_1_argument {
	RCadr dst;
	int value;
	RCsize count;
};
typedef struct dscudamemsetid_1_argument dscudamemsetid_1_argument;

struct dscudahostallocid_1_argument {
	RCsize size;
	u_int flags;
};
typedef struct dscudahostallocid_1_argument dscudahostallocid_1_argument;

struct dscudahostgetdevicepointerid_1_argument {
	RCadr pHost;
	u_int flags;
};
typedef struct dscudahostgetdevicepointerid_1_argument dscudahostgetdevicepointerid_1_argument;

struct dscudamallocarrayid_1_argument {
	RCchanneldesc desc;
	RCsize width;
	RCsize height;
	u_int flags;
};
typedef struct dscudamallocarrayid_1_argument dscudamallocarrayid_1_argument;

struct dscudamemcpytoarrayh2hid_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCbuf src;
	RCsize count;
};
typedef struct dscudamemcpytoarrayh2hid_1_argument dscudamemcpytoarrayh2hid_1_argument;

struct dscudamemcpytoarrayh2did_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCbuf src;
	RCsize count;
};
typedef struct dscudamemcpytoarrayh2did_1_argument dscudamemcpytoarrayh2did_1_argument;

struct dscudamemcpytoarrayd2hid_1_argument {
	RCsize wOffset;
	RCsize hOffset;
	RCadr src;
	RCsize count;
};
typedef struct dscudamemcpytoarrayd2hid_1_argument dscudamemcpytoarrayd2hid_1_argument;

struct dscudamemcpytoarrayd2did_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCadr src;
	RCsize count;
};
typedef struct dscudamemcpytoarrayd2did_1_argument dscudamemcpytoarrayd2did_1_argument;

struct dscudamallocpitchid_1_argument {
	RCsize width;
	RCsize height;
};
typedef struct dscudamallocpitchid_1_argument dscudamallocpitchid_1_argument;

struct dscudamemcpy2dtoarrayh2hid_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCbuf src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dtoarrayh2hid_1_argument dscudamemcpy2dtoarrayh2hid_1_argument;

struct dscudamemcpy2dtoarrayh2did_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCbuf srcbuf;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dtoarrayh2did_1_argument dscudamemcpy2dtoarrayh2did_1_argument;

struct dscudamemcpy2dtoarrayd2hid_1_argument {
	RCsize wOffset;
	RCsize hOffset;
	RCadr src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dtoarrayd2hid_1_argument dscudamemcpy2dtoarrayd2hid_1_argument;

struct dscudamemcpy2dtoarrayd2did_1_argument {
	RCadr dst;
	RCsize wOffset;
	RCsize hOffset;
	RCadr src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dtoarrayd2did_1_argument dscudamemcpy2dtoarrayd2did_1_argument;

struct dscudamemcpy2dh2hid_1_argument {
	RCadr dst;
	RCsize dpitch;
	RCbuf src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dh2hid_1_argument dscudamemcpy2dh2hid_1_argument;

struct dscudamemcpy2dh2did_1_argument {
	RCadr dst;
	RCsize dpitch;
	RCbuf src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dh2did_1_argument dscudamemcpy2dh2did_1_argument;

struct dscudamemcpy2dd2hid_1_argument {
	RCsize dpitch;
	RCadr src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dd2hid_1_argument dscudamemcpy2dd2hid_1_argument;

struct dscudamemcpy2dd2did_1_argument {
	RCadr dst;
	RCsize dpitch;
	RCadr src;
	RCsize spitch;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemcpy2dd2did_1_argument dscudamemcpy2dd2did_1_argument;

struct dscudamemset2did_1_argument {
	RCadr dst;
	RCsize pitch;
	int value;
	RCsize width;
	RCsize height;
};
typedef struct dscudamemset2did_1_argument dscudamemset2did_1_argument;

struct dscudamemcpytosymbolasynch2did_1_argument {
	int moduleid;
	char *symbol;
	RCbuf src;
	RCsize count;
	RCsize offset;
	RCstream stream;
};
typedef struct dscudamemcpytosymbolasynch2did_1_argument dscudamemcpytosymbolasynch2did_1_argument;

struct dscudamemcpytosymbolasyncd2did_1_argument {
	int moduleid;
	char *symbol;
	RCadr src;
	RCsize count;
	RCsize offset;
	RCstream stream;
};
typedef struct dscudamemcpytosymbolasyncd2did_1_argument dscudamemcpytosymbolasyncd2did_1_argument;

struct dscudamemcpyfromsymbolasyncd2hid_1_argument {
	int moduleid;
	char *symbol;
	RCsize count;
	RCsize offset;
	RCstream stream;
};
typedef struct dscudamemcpyfromsymbolasyncd2hid_1_argument dscudamemcpyfromsymbolasyncd2hid_1_argument;

struct dscudamemcpyfromsymbolasyncd2did_1_argument {
	int moduleid;
	RCadr dst;
	char *symbol;
	RCsize count;
	RCsize offset;
	RCstream stream;
};
typedef struct dscudamemcpyfromsymbolasyncd2did_1_argument dscudamemcpyfromsymbolasyncd2did_1_argument;

struct dscudacreatechanneldescid_1_argument {
	int x;
	int y;
	int z;
	int w;
	RCchannelformat f;
};
typedef struct dscudacreatechanneldescid_1_argument dscudacreatechanneldescid_1_argument;

struct dscudabindtextureid_1_argument {
	int moduleid;
	char *texname;
	RCadr devPtr;
	RCsize size;
	RCtexture texbuf;
};
typedef struct dscudabindtextureid_1_argument dscudabindtextureid_1_argument;

struct dscudabindtexture2did_1_argument {
	int moduleid;
	char *texname;
	RCadr devPtr;
	RCsize width;
	RCsize height;
	RCsize pitch;
	RCtexture texbuf;
};
typedef struct dscudabindtexture2did_1_argument dscudabindtexture2did_1_argument;

struct dscudabindtexturetoarrayid_1_argument {
	int moduleid;
	char *texname;
	RCadr array;
	RCtexture texbuf;
};
typedef struct dscudabindtexturetoarrayid_1_argument dscudabindtexturetoarrayid_1_argument;

struct dscufftplan3did_1_argument {
	int nx;
	int ny;
	int nz;
	u_int type;
};
typedef struct dscufftplan3did_1_argument dscufftplan3did_1_argument;

struct dscufftexecc2cid_1_argument {
	u_int plan;
	RCadr idata;
	RCadr odata;
	int direction;
};
typedef struct dscufftexecc2cid_1_argument dscufftexecc2cid_1_argument;

#define DSCUDA_PROG 60000
#define DSCUDA_VER 1

#if defined(__STDC__) || defined(__cplusplus)
#define dscudaThreadExitId 100
extern  dscudaResult * dscudathreadexitid_1(CLIENT *);
extern  dscudaResult * dscudathreadexitid_1_svc(struct svc_req *);
#define dscudaThreadSynchronizeId 101
extern  dscudaResult * dscudathreadsynchronizeid_1(CLIENT *);
extern  dscudaResult * dscudathreadsynchronizeid_1_svc(struct svc_req *);
#define dscudaThreadSetLimitId 102
extern  dscudaResult * dscudathreadsetlimitid_1(int , RCsize , CLIENT *);
extern  dscudaResult * dscudathreadsetlimitid_1_svc(int , RCsize , struct svc_req *);
#define dscudaThreadGetLimitId 103
extern  dscudaThreadGetLimitResult * dscudathreadgetlimitid_1(int , CLIENT *);
extern  dscudaThreadGetLimitResult * dscudathreadgetlimitid_1_svc(int , struct svc_req *);
#define dscudaThreadSetCacheConfigId 104
extern  dscudaResult * dscudathreadsetcacheconfigid_1(int , CLIENT *);
extern  dscudaResult * dscudathreadsetcacheconfigid_1_svc(int , struct svc_req *);
#define dscudaThreadGetCacheConfigId 105
extern  dscudaThreadGetCacheConfigResult * dscudathreadgetcacheconfigid_1(CLIENT *);
extern  dscudaThreadGetCacheConfigResult * dscudathreadgetcacheconfigid_1_svc(struct svc_req *);
#define dscudaGetLastErrorId 200
extern  dscudaResult * dscudagetlasterrorid_1(CLIENT *);
extern  dscudaResult * dscudagetlasterrorid_1_svc(struct svc_req *);
#define dscudaPeekAtLastErrorId 201
extern  dscudaResult * dscudapeekatlasterrorid_1(CLIENT *);
extern  dscudaResult * dscudapeekatlasterrorid_1_svc(struct svc_req *);
#define dscudaGetErrorStringId 202
extern  dscudaGetErrorStringResult * dscudageterrorstringid_1(int , CLIENT *);
extern  dscudaGetErrorStringResult * dscudageterrorstringid_1_svc(int , struct svc_req *);
#define dscudaGetDeviceId 300
extern  dscudaGetDeviceResult * dscudagetdeviceid_1(CLIENT *);
extern  dscudaGetDeviceResult * dscudagetdeviceid_1_svc(struct svc_req *);
#define dscudaGetDeviceCountId 301
extern  dscudaGetDeviceCountResult * dscudagetdevicecountid_1(CLIENT *);
extern  dscudaGetDeviceCountResult * dscudagetdevicecountid_1_svc(struct svc_req *);
#define dscudaGetDevicePropertiesId 302
extern  dscudaGetDevicePropertiesResult * dscudagetdevicepropertiesid_1(int , CLIENT *);
extern  dscudaGetDevicePropertiesResult * dscudagetdevicepropertiesid_1_svc(int , struct svc_req *);
#define dscudaDriverGetVersionId 303
extern  dscudaDriverGetVersionResult * dscudadrivergetversionid_1(CLIENT *);
extern  dscudaDriverGetVersionResult * dscudadrivergetversionid_1_svc(struct svc_req *);
#define dscudaRuntimeGetVersionId 304
extern  dscudaRuntimeGetVersionResult * dscudaruntimegetversionid_1(CLIENT *);
extern  dscudaRuntimeGetVersionResult * dscudaruntimegetversionid_1_svc(struct svc_req *);
#define dscudaSetDeviceId 305
extern  dscudaResult * dscudasetdeviceid_1(int , CLIENT *);
extern  dscudaResult * dscudasetdeviceid_1_svc(int , struct svc_req *);
#define dscudaSetDeviceFlagsId 306
extern  dscudaResult * dscudasetdeviceflagsid_1(u_int , CLIENT *);
extern  dscudaResult * dscudasetdeviceflagsid_1_svc(u_int , struct svc_req *);
#define dscudaChooseDeviceId 307
extern  dscudaChooseDeviceResult * dscudachoosedeviceid_1(RCbuf , CLIENT *);
extern  dscudaChooseDeviceResult * dscudachoosedeviceid_1_svc(RCbuf , struct svc_req *);
#define dscudaDeviceSynchronize 308
extern  dscudaResult * dscudadevicesynchronize_1(CLIENT *);
extern  dscudaResult * dscudadevicesynchronize_1_svc(struct svc_req *);
#define dscudaDeviceReset 309
extern  dscudaResult * dscudadevicereset_1(CLIENT *);
extern  dscudaResult * dscudadevicereset_1_svc(struct svc_req *);
#define dscudaStreamCreateId 400
extern  dscudaStreamCreateResult * dscudastreamcreateid_1(CLIENT *);
extern  dscudaStreamCreateResult * dscudastreamcreateid_1_svc(struct svc_req *);
#define dscudaStreamDestroyId 401
extern  dscudaResult * dscudastreamdestroyid_1(RCstream , CLIENT *);
extern  dscudaResult * dscudastreamdestroyid_1_svc(RCstream , struct svc_req *);
#define dscudaStreamSynchronizeId 402
extern  dscudaResult * dscudastreamsynchronizeid_1(RCstream , CLIENT *);
extern  dscudaResult * dscudastreamsynchronizeid_1_svc(RCstream , struct svc_req *);
#define dscudaStreamQueryId 403
extern  dscudaResult * dscudastreamqueryid_1(RCstream , CLIENT *);
extern  dscudaResult * dscudastreamqueryid_1_svc(RCstream , struct svc_req *);
#define dscudaStreamWaitEventId 404
extern  dscudaResult * dscudastreamwaiteventid_1(RCstream , RCevent , u_int , CLIENT *);
extern  dscudaResult * dscudastreamwaiteventid_1_svc(RCstream , RCevent , u_int , struct svc_req *);
#define dscudaEventCreateId 500
extern  dscudaEventCreateResult * dscudaeventcreateid_1(CLIENT *);
extern  dscudaEventCreateResult * dscudaeventcreateid_1_svc(struct svc_req *);
#define dscudaEventCreateWithFlagsId 501
extern  dscudaEventCreateResult * dscudaeventcreatewithflagsid_1(u_int , CLIENT *);
extern  dscudaEventCreateResult * dscudaeventcreatewithflagsid_1_svc(u_int , struct svc_req *);
#define dscudaEventDestroyId 502
extern  dscudaResult * dscudaeventdestroyid_1(RCevent , CLIENT *);
extern  dscudaResult * dscudaeventdestroyid_1_svc(RCevent , struct svc_req *);
#define dscudaEventElapsedTimeId 503
extern  dscudaEventElapsedTimeResult * dscudaeventelapsedtimeid_1(RCevent , RCevent , CLIENT *);
extern  dscudaEventElapsedTimeResult * dscudaeventelapsedtimeid_1_svc(RCevent , RCevent , struct svc_req *);
#define dscudaEventRecordId 504
extern  dscudaResult * dscudaeventrecordid_1(RCevent , RCstream , CLIENT *);
extern  dscudaResult * dscudaeventrecordid_1_svc(RCevent , RCstream , struct svc_req *);
#define dscudaEventSynchronizeId 505
extern  dscudaResult * dscudaeventsynchronizeid_1(RCevent , CLIENT *);
extern  dscudaResult * dscudaeventsynchronizeid_1_svc(RCevent , struct svc_req *);
#define dscudaEventQueryId 506
extern  dscudaResult * dscudaeventqueryid_1(RCevent , CLIENT *);
extern  dscudaResult * dscudaeventqueryid_1_svc(RCevent , struct svc_req *);
#define dscudaLaunchKernelId 600
extern  void * dscudalaunchkernelid_1(int , int , char *, RCdim3 , RCdim3 , RCsize , RCstream , RCargs , CLIENT *);
extern  void * dscudalaunchkernelid_1_svc(int , int , char *, RCdim3 , RCdim3 , RCsize , RCstream , RCargs , struct svc_req *);
#define dscudaLoadModuleId 601
extern  dscudaLoadModuleResult * dscudaloadmoduleid_1(RCipaddr , RCpid , char *, char *, CLIENT *);
extern  dscudaLoadModuleResult * dscudaloadmoduleid_1_svc(RCipaddr , RCpid , char *, char *, struct svc_req *);
#define dscudaFuncGetAttributesId 602
extern  dscudaFuncGetAttributesResult * dscudafuncgetattributesid_1(int , char *, CLIENT *);
extern  dscudaFuncGetAttributesResult * dscudafuncgetattributesid_1_svc(int , char *, struct svc_req *);
#define dscudaMallocId 700
extern  dscudaMallocResult * dscudamallocid_1(RCsize , CLIENT *);
extern  dscudaMallocResult * dscudamallocid_1_svc(RCsize , struct svc_req *);
#define dscudaFreeId 701
extern  dscudaResult * dscudafreeid_1(RCadr , CLIENT *);
extern  dscudaResult * dscudafreeid_1_svc(RCadr , struct svc_req *);
#define dscudaMemcpyH2HId 702
extern  dscudaMemcpyH2HResult * dscudamemcpyh2hid_1(RCadr , RCbuf , RCsize , CLIENT *);
extern  dscudaMemcpyH2HResult * dscudamemcpyh2hid_1_svc(RCadr , RCbuf , RCsize , struct svc_req *);
#define dscudaMemcpyH2DId 703
extern  dscudaResult * dscudamemcpyh2did_1(RCadr , RCbuf , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpyh2did_1_svc(RCadr , RCbuf , RCsize , struct svc_req *);
#define dscudaMemcpyD2HId 704
extern  dscudaMemcpyD2HResult * dscudamemcpyd2hid_1(RCadr , RCsize , CLIENT *);
extern  dscudaMemcpyD2HResult * dscudamemcpyd2hid_1_svc(RCadr , RCsize , struct svc_req *);
#define dscudaMemcpyD2DId 705
extern  dscudaResult * dscudamemcpyd2did_1(RCadr , RCadr , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpyd2did_1_svc(RCadr , RCadr , RCsize , struct svc_req *);
#define dscudaMemcpyAsyncH2HId 706
extern  dscudaMemcpyAsyncH2HResult * dscudamemcpyasynch2hid_1(RCadr , RCbuf , RCsize , RCstream , CLIENT *);
extern  dscudaMemcpyAsyncH2HResult * dscudamemcpyasynch2hid_1_svc(RCadr , RCbuf , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyAsyncH2DId 707
extern  dscudaResult * dscudamemcpyasynch2did_1(RCadr , RCbuf , RCsize , RCstream , CLIENT *);
extern  dscudaResult * dscudamemcpyasynch2did_1_svc(RCadr , RCbuf , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyAsyncD2HId 708
extern  dscudaMemcpyAsyncD2HResult * dscudamemcpyasyncd2hid_1(RCadr , RCsize , RCstream , CLIENT *);
extern  dscudaMemcpyAsyncD2HResult * dscudamemcpyasyncd2hid_1_svc(RCadr , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyAsyncD2DId 709
extern  dscudaResult * dscudamemcpyasyncd2did_1(RCadr , RCadr , RCsize , RCstream , CLIENT *);
extern  dscudaResult * dscudamemcpyasyncd2did_1_svc(RCadr , RCadr , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyToSymbolH2DId 710
extern  dscudaResult * dscudamemcpytosymbolh2did_1(int , char *, RCbuf , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpytosymbolh2did_1_svc(int , char *, RCbuf , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpyToSymbolD2DId 711
extern  dscudaResult * dscudamemcpytosymbold2did_1(int , char *, RCadr , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpytosymbold2did_1_svc(int , char *, RCadr , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpyFromSymbolD2HId 712
extern  dscudaMemcpyFromSymbolD2HResult * dscudamemcpyfromsymbold2hid_1(int , char *, RCsize , RCsize , CLIENT *);
extern  dscudaMemcpyFromSymbolD2HResult * dscudamemcpyfromsymbold2hid_1_svc(int , char *, RCsize , RCsize , struct svc_req *);
#define dscudaMemcpyFromSymbolD2DId 713
extern  dscudaResult * dscudamemcpyfromsymbold2did_1(int , RCadr , char *, RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpyfromsymbold2did_1_svc(int , RCadr , char *, RCsize , RCsize , struct svc_req *);
#define dscudaMemsetId 714
extern  dscudaResult * dscudamemsetid_1(RCadr , int , RCsize , CLIENT *);
extern  dscudaResult * dscudamemsetid_1_svc(RCadr , int , RCsize , struct svc_req *);
#define dscudaHostAllocId 715
extern  dscudaHostAllocResult * dscudahostallocid_1(RCsize , u_int , CLIENT *);
extern  dscudaHostAllocResult * dscudahostallocid_1_svc(RCsize , u_int , struct svc_req *);
#define dscudaMallocHostId 716
extern  dscudaMallocHostResult * dscudamallochostid_1(RCsize , CLIENT *);
extern  dscudaMallocHostResult * dscudamallochostid_1_svc(RCsize , struct svc_req *);
#define dscudaFreeHostId 717
extern  dscudaResult * dscudafreehostid_1(RCadr , CLIENT *);
extern  dscudaResult * dscudafreehostid_1_svc(RCadr , struct svc_req *);
#define dscudaHostGetDevicePointerId 718
extern  dscudaHostGetDevicePointerResult * dscudahostgetdevicepointerid_1(RCadr , u_int , CLIENT *);
extern  dscudaHostGetDevicePointerResult * dscudahostgetdevicepointerid_1_svc(RCadr , u_int , struct svc_req *);
#define dscudaHostGetFlagsID 719
extern  dscudaHostGetFlagsResult * dscudahostgetflagsid_1(RCadr , CLIENT *);
extern  dscudaHostGetFlagsResult * dscudahostgetflagsid_1_svc(RCadr , struct svc_req *);
#define dscudaMallocArrayId 720
extern  dscudaMallocArrayResult * dscudamallocarrayid_1(RCchanneldesc , RCsize , RCsize , u_int , CLIENT *);
extern  dscudaMallocArrayResult * dscudamallocarrayid_1_svc(RCchanneldesc , RCsize , RCsize , u_int , struct svc_req *);
#define dscudaFreeArrayId 721
extern  dscudaResult * dscudafreearrayid_1(RCadr , CLIENT *);
extern  dscudaResult * dscudafreearrayid_1_svc(RCadr , struct svc_req *);
#define dscudaMemcpyToArrayH2HId 722
extern  dscudaMemcpyToArrayH2HResult * dscudamemcpytoarrayh2hid_1(RCadr , RCsize , RCsize , RCbuf , RCsize , CLIENT *);
extern  dscudaMemcpyToArrayH2HResult * dscudamemcpytoarrayh2hid_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , struct svc_req *);
#define dscudaMemcpyToArrayH2DId 723
extern  dscudaResult * dscudamemcpytoarrayh2did_1(RCadr , RCsize , RCsize , RCbuf , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpytoarrayh2did_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , struct svc_req *);
#define dscudaMemcpyToArrayD2HId 724
extern  dscudaMemcpyToArrayD2HResult * dscudamemcpytoarrayd2hid_1(RCsize , RCsize , RCadr , RCsize , CLIENT *);
extern  dscudaMemcpyToArrayD2HResult * dscudamemcpytoarrayd2hid_1_svc(RCsize , RCsize , RCadr , RCsize , struct svc_req *);
#define dscudaMemcpyToArrayD2DId 725
extern  dscudaResult * dscudamemcpytoarrayd2did_1(RCadr , RCsize , RCsize , RCadr , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpytoarrayd2did_1_svc(RCadr , RCsize , RCsize , RCadr , RCsize , struct svc_req *);
#define dscudaMallocPitchId 726
extern  dscudaMallocPitchResult * dscudamallocpitchid_1(RCsize , RCsize , CLIENT *);
extern  dscudaMallocPitchResult * dscudamallocpitchid_1_svc(RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DToArrayH2HId 727
extern  dscudaMemcpy2DToArrayH2HResult * dscudamemcpy2dtoarrayh2hid_1(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaMemcpy2DToArrayH2HResult * dscudamemcpy2dtoarrayh2hid_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DToArrayH2DId 728
extern  dscudaResult * dscudamemcpy2dtoarrayh2did_1(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpy2dtoarrayh2did_1_svc(RCadr , RCsize , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DToArrayD2HId 729
extern  dscudaMemcpy2DToArrayD2HResult * dscudamemcpy2dtoarrayd2hid_1(RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaMemcpy2DToArrayD2HResult * dscudamemcpy2dtoarrayd2hid_1_svc(RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DToArrayD2DId 730
extern  dscudaResult * dscudamemcpy2dtoarrayd2did_1(RCadr , RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpy2dtoarrayd2did_1_svc(RCadr , RCsize , RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DH2HId 731
extern  dscudaMemcpy2DH2HResult * dscudamemcpy2dh2hid_1(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaMemcpy2DH2HResult * dscudamemcpy2dh2hid_1_svc(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DH2DId 732
extern  dscudaResult * dscudamemcpy2dh2did_1(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpy2dh2did_1_svc(RCadr , RCsize , RCbuf , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DD2HId 733
extern  dscudaMemcpy2DD2HResult * dscudamemcpy2dd2hid_1(RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaMemcpy2DD2HResult * dscudamemcpy2dd2hid_1_svc(RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpy2DD2DId 734
extern  dscudaResult * dscudamemcpy2dd2did_1(RCadr , RCsize , RCadr , RCsize , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemcpy2dd2did_1_svc(RCadr , RCsize , RCadr , RCsize , RCsize , RCsize , struct svc_req *);
#define dscudaMemset2DId 735
extern  dscudaResult * dscudamemset2did_1(RCadr , RCsize , int , RCsize , RCsize , CLIENT *);
extern  dscudaResult * dscudamemset2did_1_svc(RCadr , RCsize , int , RCsize , RCsize , struct svc_req *);
#define dscudaMemcpyToSymbolAsyncH2DId 736
extern  dscudaResult * dscudamemcpytosymbolasynch2did_1(int , char *, RCbuf , RCsize , RCsize , RCstream , CLIENT *);
extern  dscudaResult * dscudamemcpytosymbolasynch2did_1_svc(int , char *, RCbuf , RCsize , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyToSymbolAsyncD2DId 737
extern  dscudaResult * dscudamemcpytosymbolasyncd2did_1(int , char *, RCadr , RCsize , RCsize , RCstream , CLIENT *);
extern  dscudaResult * dscudamemcpytosymbolasyncd2did_1_svc(int , char *, RCadr , RCsize , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyFromSymbolAsyncD2HId 738
extern  dscudaMemcpyFromSymbolAsyncD2HResult * dscudamemcpyfromsymbolasyncd2hid_1(int , char *, RCsize , RCsize , RCstream , CLIENT *);
extern  dscudaMemcpyFromSymbolAsyncD2HResult * dscudamemcpyfromsymbolasyncd2hid_1_svc(int , char *, RCsize , RCsize , RCstream , struct svc_req *);
#define dscudaMemcpyFromSymbolAsyncD2DId 739
extern  dscudaResult * dscudamemcpyfromsymbolasyncd2did_1(int , RCadr , char *, RCsize , RCsize , RCstream , CLIENT *);
extern  dscudaResult * dscudamemcpyfromsymbolasyncd2did_1_svc(int , RCadr , char *, RCsize , RCsize , RCstream , struct svc_req *);
#define dscudaCreateChannelDescId 1400
extern  dscudaCreateChannelDescResult * dscudacreatechanneldescid_1(int , int , int , int , RCchannelformat , CLIENT *);
extern  dscudaCreateChannelDescResult * dscudacreatechanneldescid_1_svc(int , int , int , int , RCchannelformat , struct svc_req *);
#define dscudaGetChannelDescId 1401
extern  dscudaGetChannelDescResult * dscudagetchanneldescid_1(RCadr , CLIENT *);
extern  dscudaGetChannelDescResult * dscudagetchanneldescid_1_svc(RCadr , struct svc_req *);
#define dscudaBindTextureId 1402
extern  dscudaBindTextureResult * dscudabindtextureid_1(int , char *, RCadr , RCsize , RCtexture , CLIENT *);
extern  dscudaBindTextureResult * dscudabindtextureid_1_svc(int , char *, RCadr , RCsize , RCtexture , struct svc_req *);
#define dscudaBindTexture2DId 1403
extern  dscudaBindTexture2DResult * dscudabindtexture2did_1(int , char *, RCadr , RCsize , RCsize , RCsize , RCtexture , CLIENT *);
extern  dscudaBindTexture2DResult * dscudabindtexture2did_1_svc(int , char *, RCadr , RCsize , RCsize , RCsize , RCtexture , struct svc_req *);
#define dscudaBindTextureToArrayId 1404
extern  dscudaResult * dscudabindtexturetoarrayid_1(int , char *, RCadr , RCtexture , CLIENT *);
extern  dscudaResult * dscudabindtexturetoarrayid_1_svc(int , char *, RCadr , RCtexture , struct svc_req *);
#define dscudaUnbindTextureId 1405
extern  dscudaResult * dscudaunbindtextureid_1(RCtexture , CLIENT *);
extern  dscudaResult * dscudaunbindtextureid_1_svc(RCtexture , struct svc_req *);
#define dscufftPlan3dId 2002
extern  dscufftPlanResult * dscufftplan3did_1(int , int , int , u_int , CLIENT *);
extern  dscufftPlanResult * dscufftplan3did_1_svc(int , int , int , u_int , struct svc_req *);
#define dscufftDestroyId 2004
extern  dscufftResult * dscufftdestroyid_1(u_int , CLIENT *);
extern  dscufftResult * dscufftdestroyid_1_svc(u_int , struct svc_req *);
#define dscufftExecC2CId 2005
extern  dscufftResult * dscufftexecc2cid_1(u_int , RCadr , RCadr , int , CLIENT *);
extern  dscufftResult * dscufftexecc2cid_1_svc(u_int , RCadr , RCadr , int , struct svc_req *);
extern int dscuda_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else 
#define dscudaThreadExitId 100
extern  dscudaResult * dscudathreadexitid_1();
extern  dscudaResult * dscudathreadexitid_1_svc();
#define dscudaThreadSynchronizeId 101
extern  dscudaResult * dscudathreadsynchronizeid_1();
extern  dscudaResult * dscudathreadsynchronizeid_1_svc();
#define dscudaThreadSetLimitId 102
extern  dscudaResult * dscudathreadsetlimitid_1();
extern  dscudaResult * dscudathreadsetlimitid_1_svc();
#define dscudaThreadGetLimitId 103
extern  dscudaThreadGetLimitResult * dscudathreadgetlimitid_1();
extern  dscudaThreadGetLimitResult * dscudathreadgetlimitid_1_svc();
#define dscudaThreadSetCacheConfigId 104
extern  dscudaResult * dscudathreadsetcacheconfigid_1();
extern  dscudaResult * dscudathreadsetcacheconfigid_1_svc();
#define dscudaThreadGetCacheConfigId 105
extern  dscudaThreadGetCacheConfigResult * dscudathreadgetcacheconfigid_1();
extern  dscudaThreadGetCacheConfigResult * dscudathreadgetcacheconfigid_1_svc();
#define dscudaGetLastErrorId 200
extern  dscudaResult * dscudagetlasterrorid_1();
extern  dscudaResult * dscudagetlasterrorid_1_svc();
#define dscudaPeekAtLastErrorId 201
extern  dscudaResult * dscudapeekatlasterrorid_1();
extern  dscudaResult * dscudapeekatlasterrorid_1_svc();
#define dscudaGetErrorStringId 202
extern  dscudaGetErrorStringResult * dscudageterrorstringid_1();
extern  dscudaGetErrorStringResult * dscudageterrorstringid_1_svc();
#define dscudaGetDeviceId 300
extern  dscudaGetDeviceResult * dscudagetdeviceid_1();
extern  dscudaGetDeviceResult * dscudagetdeviceid_1_svc();
#define dscudaGetDeviceCountId 301
extern  dscudaGetDeviceCountResult * dscudagetdevicecountid_1();
extern  dscudaGetDeviceCountResult * dscudagetdevicecountid_1_svc();
#define dscudaGetDevicePropertiesId 302
extern  dscudaGetDevicePropertiesResult * dscudagetdevicepropertiesid_1();
extern  dscudaGetDevicePropertiesResult * dscudagetdevicepropertiesid_1_svc();
#define dscudaDriverGetVersionId 303
extern  dscudaDriverGetVersionResult * dscudadrivergetversionid_1();
extern  dscudaDriverGetVersionResult * dscudadrivergetversionid_1_svc();
#define dscudaRuntimeGetVersionId 304
extern  dscudaRuntimeGetVersionResult * dscudaruntimegetversionid_1();
extern  dscudaRuntimeGetVersionResult * dscudaruntimegetversionid_1_svc();
#define dscudaSetDeviceId 305
extern  dscudaResult * dscudasetdeviceid_1();
extern  dscudaResult * dscudasetdeviceid_1_svc();
#define dscudaSetDeviceFlagsId 306
extern  dscudaResult * dscudasetdeviceflagsid_1();
extern  dscudaResult * dscudasetdeviceflagsid_1_svc();
#define dscudaChooseDeviceId 307
extern  dscudaChooseDeviceResult * dscudachoosedeviceid_1();
extern  dscudaChooseDeviceResult * dscudachoosedeviceid_1_svc();
#define dscudaDeviceSynchronize 308
extern  dscudaResult * dscudadevicesynchronize_1();
extern  dscudaResult * dscudadevicesynchronize_1_svc();
#define dscudaDeviceReset 309
extern  dscudaResult * dscudadevicereset_1();
extern  dscudaResult * dscudadevicereset_1_svc();
#define dscudaStreamCreateId 400
extern  dscudaStreamCreateResult * dscudastreamcreateid_1();
extern  dscudaStreamCreateResult * dscudastreamcreateid_1_svc();
#define dscudaStreamDestroyId 401
extern  dscudaResult * dscudastreamdestroyid_1();
extern  dscudaResult * dscudastreamdestroyid_1_svc();
#define dscudaStreamSynchronizeId 402
extern  dscudaResult * dscudastreamsynchronizeid_1();
extern  dscudaResult * dscudastreamsynchronizeid_1_svc();
#define dscudaStreamQueryId 403
extern  dscudaResult * dscudastreamqueryid_1();
extern  dscudaResult * dscudastreamqueryid_1_svc();
#define dscudaStreamWaitEventId 404
extern  dscudaResult * dscudastreamwaiteventid_1();
extern  dscudaResult * dscudastreamwaiteventid_1_svc();
#define dscudaEventCreateId 500
extern  dscudaEventCreateResult * dscudaeventcreateid_1();
extern  dscudaEventCreateResult * dscudaeventcreateid_1_svc();
#define dscudaEventCreateWithFlagsId 501
extern  dscudaEventCreateResult * dscudaeventcreatewithflagsid_1();
extern  dscudaEventCreateResult * dscudaeventcreatewithflagsid_1_svc();
#define dscudaEventDestroyId 502
extern  dscudaResult * dscudaeventdestroyid_1();
extern  dscudaResult * dscudaeventdestroyid_1_svc();
#define dscudaEventElapsedTimeId 503
extern  dscudaEventElapsedTimeResult * dscudaeventelapsedtimeid_1();
extern  dscudaEventElapsedTimeResult * dscudaeventelapsedtimeid_1_svc();
#define dscudaEventRecordId 504
extern  dscudaResult * dscudaeventrecordid_1();
extern  dscudaResult * dscudaeventrecordid_1_svc();
#define dscudaEventSynchronizeId 505
extern  dscudaResult * dscudaeventsynchronizeid_1();
extern  dscudaResult * dscudaeventsynchronizeid_1_svc();
#define dscudaEventQueryId 506
extern  dscudaResult * dscudaeventqueryid_1();
extern  dscudaResult * dscudaeventqueryid_1_svc();
#define dscudaLaunchKernelId 600
extern  void * dscudalaunchkernelid_1();
extern  void * dscudalaunchkernelid_1_svc();
#define dscudaLoadModuleId 601
extern  dscudaLoadModuleResult * dscudaloadmoduleid_1();
extern  dscudaLoadModuleResult * dscudaloadmoduleid_1_svc();
#define dscudaFuncGetAttributesId 602
extern  dscudaFuncGetAttributesResult * dscudafuncgetattributesid_1();
extern  dscudaFuncGetAttributesResult * dscudafuncgetattributesid_1_svc();
#define dscudaMallocId 700
extern  dscudaMallocResult * dscudamallocid_1();
extern  dscudaMallocResult * dscudamallocid_1_svc();
#define dscudaFreeId 701
extern  dscudaResult * dscudafreeid_1();
extern  dscudaResult * dscudafreeid_1_svc();
#define dscudaMemcpyH2HId 702
extern  dscudaMemcpyH2HResult * dscudamemcpyh2hid_1();
extern  dscudaMemcpyH2HResult * dscudamemcpyh2hid_1_svc();
#define dscudaMemcpyH2DId 703
extern  dscudaResult * dscudamemcpyh2did_1();
extern  dscudaResult * dscudamemcpyh2did_1_svc();
#define dscudaMemcpyD2HId 704
extern  dscudaMemcpyD2HResult * dscudamemcpyd2hid_1();
extern  dscudaMemcpyD2HResult * dscudamemcpyd2hid_1_svc();
#define dscudaMemcpyD2DId 705
extern  dscudaResult * dscudamemcpyd2did_1();
extern  dscudaResult * dscudamemcpyd2did_1_svc();
#define dscudaMemcpyAsyncH2HId 706
extern  dscudaMemcpyAsyncH2HResult * dscudamemcpyasynch2hid_1();
extern  dscudaMemcpyAsyncH2HResult * dscudamemcpyasynch2hid_1_svc();
#define dscudaMemcpyAsyncH2DId 707
extern  dscudaResult * dscudamemcpyasynch2did_1();
extern  dscudaResult * dscudamemcpyasynch2did_1_svc();
#define dscudaMemcpyAsyncD2HId 708
extern  dscudaMemcpyAsyncD2HResult * dscudamemcpyasyncd2hid_1();
extern  dscudaMemcpyAsyncD2HResult * dscudamemcpyasyncd2hid_1_svc();
#define dscudaMemcpyAsyncD2DId 709
extern  dscudaResult * dscudamemcpyasyncd2did_1();
extern  dscudaResult * dscudamemcpyasyncd2did_1_svc();
#define dscudaMemcpyToSymbolH2DId 710
extern  dscudaResult * dscudamemcpytosymbolh2did_1();
extern  dscudaResult * dscudamemcpytosymbolh2did_1_svc();
#define dscudaMemcpyToSymbolD2DId 711
extern  dscudaResult * dscudamemcpytosymbold2did_1();
extern  dscudaResult * dscudamemcpytosymbold2did_1_svc();
#define dscudaMemcpyFromSymbolD2HId 712
extern  dscudaMemcpyFromSymbolD2HResult * dscudamemcpyfromsymbold2hid_1();
extern  dscudaMemcpyFromSymbolD2HResult * dscudamemcpyfromsymbold2hid_1_svc();
#define dscudaMemcpyFromSymbolD2DId 713
extern  dscudaResult * dscudamemcpyfromsymbold2did_1();
extern  dscudaResult * dscudamemcpyfromsymbold2did_1_svc();
#define dscudaMemsetId 714
extern  dscudaResult * dscudamemsetid_1();
extern  dscudaResult * dscudamemsetid_1_svc();
#define dscudaHostAllocId 715
extern  dscudaHostAllocResult * dscudahostallocid_1();
extern  dscudaHostAllocResult * dscudahostallocid_1_svc();
#define dscudaMallocHostId 716
extern  dscudaMallocHostResult * dscudamallochostid_1();
extern  dscudaMallocHostResult * dscudamallochostid_1_svc();
#define dscudaFreeHostId 717
extern  dscudaResult * dscudafreehostid_1();
extern  dscudaResult * dscudafreehostid_1_svc();
#define dscudaHostGetDevicePointerId 718
extern  dscudaHostGetDevicePointerResult * dscudahostgetdevicepointerid_1();
extern  dscudaHostGetDevicePointerResult * dscudahostgetdevicepointerid_1_svc();
#define dscudaHostGetFlagsID 719
extern  dscudaHostGetFlagsResult * dscudahostgetflagsid_1();
extern  dscudaHostGetFlagsResult * dscudahostgetflagsid_1_svc();
#define dscudaMallocArrayId 720
extern  dscudaMallocArrayResult * dscudamallocarrayid_1();
extern  dscudaMallocArrayResult * dscudamallocarrayid_1_svc();
#define dscudaFreeArrayId 721
extern  dscudaResult * dscudafreearrayid_1();
extern  dscudaResult * dscudafreearrayid_1_svc();
#define dscudaMemcpyToArrayH2HId 722
extern  dscudaMemcpyToArrayH2HResult * dscudamemcpytoarrayh2hid_1();
extern  dscudaMemcpyToArrayH2HResult * dscudamemcpytoarrayh2hid_1_svc();
#define dscudaMemcpyToArrayH2DId 723
extern  dscudaResult * dscudamemcpytoarrayh2did_1();
extern  dscudaResult * dscudamemcpytoarrayh2did_1_svc();
#define dscudaMemcpyToArrayD2HId 724
extern  dscudaMemcpyToArrayD2HResult * dscudamemcpytoarrayd2hid_1();
extern  dscudaMemcpyToArrayD2HResult * dscudamemcpytoarrayd2hid_1_svc();
#define dscudaMemcpyToArrayD2DId 725
extern  dscudaResult * dscudamemcpytoarrayd2did_1();
extern  dscudaResult * dscudamemcpytoarrayd2did_1_svc();
#define dscudaMallocPitchId 726
extern  dscudaMallocPitchResult * dscudamallocpitchid_1();
extern  dscudaMallocPitchResult * dscudamallocpitchid_1_svc();
#define dscudaMemcpy2DToArrayH2HId 727
extern  dscudaMemcpy2DToArrayH2HResult * dscudamemcpy2dtoarrayh2hid_1();
extern  dscudaMemcpy2DToArrayH2HResult * dscudamemcpy2dtoarrayh2hid_1_svc();
#define dscudaMemcpy2DToArrayH2DId 728
extern  dscudaResult * dscudamemcpy2dtoarrayh2did_1();
extern  dscudaResult * dscudamemcpy2dtoarrayh2did_1_svc();
#define dscudaMemcpy2DToArrayD2HId 729
extern  dscudaMemcpy2DToArrayD2HResult * dscudamemcpy2dtoarrayd2hid_1();
extern  dscudaMemcpy2DToArrayD2HResult * dscudamemcpy2dtoarrayd2hid_1_svc();
#define dscudaMemcpy2DToArrayD2DId 730
extern  dscudaResult * dscudamemcpy2dtoarrayd2did_1();
extern  dscudaResult * dscudamemcpy2dtoarrayd2did_1_svc();
#define dscudaMemcpy2DH2HId 731
extern  dscudaMemcpy2DH2HResult * dscudamemcpy2dh2hid_1();
extern  dscudaMemcpy2DH2HResult * dscudamemcpy2dh2hid_1_svc();
#define dscudaMemcpy2DH2DId 732
extern  dscudaResult * dscudamemcpy2dh2did_1();
extern  dscudaResult * dscudamemcpy2dh2did_1_svc();
#define dscudaMemcpy2DD2HId 733
extern  dscudaMemcpy2DD2HResult * dscudamemcpy2dd2hid_1();
extern  dscudaMemcpy2DD2HResult * dscudamemcpy2dd2hid_1_svc();
#define dscudaMemcpy2DD2DId 734
extern  dscudaResult * dscudamemcpy2dd2did_1();
extern  dscudaResult * dscudamemcpy2dd2did_1_svc();
#define dscudaMemset2DId 735
extern  dscudaResult * dscudamemset2did_1();
extern  dscudaResult * dscudamemset2did_1_svc();
#define dscudaMemcpyToSymbolAsyncH2DId 736
extern  dscudaResult * dscudamemcpytosymbolasynch2did_1();
extern  dscudaResult * dscudamemcpytosymbolasynch2did_1_svc();
#define dscudaMemcpyToSymbolAsyncD2DId 737
extern  dscudaResult * dscudamemcpytosymbolasyncd2did_1();
extern  dscudaResult * dscudamemcpytosymbolasyncd2did_1_svc();
#define dscudaMemcpyFromSymbolAsyncD2HId 738
extern  dscudaMemcpyFromSymbolAsyncD2HResult * dscudamemcpyfromsymbolasyncd2hid_1();
extern  dscudaMemcpyFromSymbolAsyncD2HResult * dscudamemcpyfromsymbolasyncd2hid_1_svc();
#define dscudaMemcpyFromSymbolAsyncD2DId 739
extern  dscudaResult * dscudamemcpyfromsymbolasyncd2did_1();
extern  dscudaResult * dscudamemcpyfromsymbolasyncd2did_1_svc();
#define dscudaCreateChannelDescId 1400
extern  dscudaCreateChannelDescResult * dscudacreatechanneldescid_1();
extern  dscudaCreateChannelDescResult * dscudacreatechanneldescid_1_svc();
#define dscudaGetChannelDescId 1401
extern  dscudaGetChannelDescResult * dscudagetchanneldescid_1();
extern  dscudaGetChannelDescResult * dscudagetchanneldescid_1_svc();
#define dscudaBindTextureId 1402
extern  dscudaBindTextureResult * dscudabindtextureid_1();
extern  dscudaBindTextureResult * dscudabindtextureid_1_svc();
#define dscudaBindTexture2DId 1403
extern  dscudaBindTexture2DResult * dscudabindtexture2did_1();
extern  dscudaBindTexture2DResult * dscudabindtexture2did_1_svc();
#define dscudaBindTextureToArrayId 1404
extern  dscudaResult * dscudabindtexturetoarrayid_1();
extern  dscudaResult * dscudabindtexturetoarrayid_1_svc();
#define dscudaUnbindTextureId 1405
extern  dscudaResult * dscudaunbindtextureid_1();
extern  dscudaResult * dscudaunbindtextureid_1_svc();
#define dscufftPlan3dId 2002
extern  dscufftPlanResult * dscufftplan3did_1();
extern  dscufftPlanResult * dscufftplan3did_1_svc();
#define dscufftDestroyId 2004
extern  dscufftResult * dscufftdestroyid_1();
extern  dscufftResult * dscufftdestroyid_1_svc();
#define dscufftExecC2CId 2005
extern  dscufftResult * dscufftexecc2cid_1();
extern  dscufftResult * dscufftexecc2cid_1_svc();
extern int dscuda_prog_1_freeresult ();
#endif 



#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_RCadr (XDR *, RCadr*);
extern  bool_t xdr_RCstream (XDR *, RCstream*);
extern  bool_t xdr_RCevent (XDR *, RCevent*);
extern  bool_t xdr_RCipaddr (XDR *, RCipaddr*);
extern  bool_t xdr_RCsize (XDR *, RCsize*);
extern  bool_t xdr_RCerror (XDR *, RCerror*);
extern  bool_t xdr_RCbuf (XDR *, RCbuf*);
extern  bool_t xdr_RCchannelformat (XDR *, RCchannelformat*);
extern  bool_t xdr_RCpid (XDR *, RCpid*);
extern  bool_t xdr_RCchanneldesc_t (XDR *, RCchanneldesc_t*);
extern  bool_t xdr_RCchanneldesc (XDR *, RCchanneldesc*);
extern  bool_t xdr_RCtexture_t (XDR *, RCtexture_t*);
extern  bool_t xdr_RCtexture (XDR *, RCtexture*);
extern  bool_t xdr_RCfuncattr_t (XDR *, RCfuncattr_t*);
extern  bool_t xdr_RCfuncattr (XDR *, RCfuncattr*);
extern  bool_t xdr_RCargType (XDR *, RCargType*);
extern  bool_t xdr_RCargVal (XDR *, RCargVal*);
extern  bool_t xdr_RCarg (XDR *, RCarg*);
extern  bool_t xdr_RCargs (XDR *, RCargs*);
extern  bool_t xdr_dscudaResult (XDR *, dscudaResult*);
extern  bool_t xdr_dscudaThreadGetLimitResult (XDR *, dscudaThreadGetLimitResult*);
extern  bool_t xdr_dscudaThreadGetCacheConfigResult (XDR *, dscudaThreadGetCacheConfigResult*);
extern  bool_t xdr_dscudaMallocResult (XDR *, dscudaMallocResult*);
extern  bool_t xdr_dscudaHostAllocResult (XDR *, dscudaHostAllocResult*);
extern  bool_t xdr_dscudaMallocHostResult (XDR *, dscudaMallocHostResult*);
extern  bool_t xdr_dscudaMallocArrayResult (XDR *, dscudaMallocArrayResult*);
extern  bool_t xdr_dscudaMallocPitchResult (XDR *, dscudaMallocPitchResult*);
extern  bool_t xdr_dscudaMemcpyD2HResult (XDR *, dscudaMemcpyD2HResult*);
extern  bool_t xdr_dscudaMemcpyH2HResult (XDR *, dscudaMemcpyH2HResult*);
extern  bool_t xdr_dscudaMemcpyToArrayD2HResult (XDR *, dscudaMemcpyToArrayD2HResult*);
extern  bool_t xdr_dscudaMemcpyToArrayH2HResult (XDR *, dscudaMemcpyToArrayH2HResult*);
extern  bool_t xdr_dscudaMemcpy2DToArrayD2HResult (XDR *, dscudaMemcpy2DToArrayD2HResult*);
extern  bool_t xdr_dscudaMemcpy2DToArrayH2HResult (XDR *, dscudaMemcpy2DToArrayH2HResult*);
extern  bool_t xdr_dscudaMemcpy2DD2HResult (XDR *, dscudaMemcpy2DD2HResult*);
extern  bool_t xdr_dscudaMemcpy2DH2HResult (XDR *, dscudaMemcpy2DH2HResult*);
extern  bool_t xdr_dscudaGetDeviceResult (XDR *, dscudaGetDeviceResult*);
extern  bool_t xdr_dscudaGetDeviceCountResult (XDR *, dscudaGetDeviceCountResult*);
extern  bool_t xdr_dscudaGetDevicePropertiesResult (XDR *, dscudaGetDevicePropertiesResult*);
extern  bool_t xdr_dscudaDriverGetVersionResult (XDR *, dscudaDriverGetVersionResult*);
extern  bool_t xdr_dscudaRuntimeGetVersionResult (XDR *, dscudaRuntimeGetVersionResult*);
extern  bool_t xdr_dscudaGetErrorStringResult (XDR *, dscudaGetErrorStringResult*);
extern  bool_t xdr_dscudaCreateChannelDescResult (XDR *, dscudaCreateChannelDescResult*);
extern  bool_t xdr_dscudaGetChannelDescResult (XDR *, dscudaGetChannelDescResult*);
extern  bool_t xdr_dscudaChooseDeviceResult (XDR *, dscudaChooseDeviceResult*);
extern  bool_t xdr_dscudaMemcpyAsyncD2HResult (XDR *, dscudaMemcpyAsyncD2HResult*);
extern  bool_t xdr_dscudaMemcpyAsyncH2HResult (XDR *, dscudaMemcpyAsyncH2HResult*);
extern  bool_t xdr_dscudaMemcpyFromSymbolD2HResult (XDR *, dscudaMemcpyFromSymbolD2HResult*);
extern  bool_t xdr_dscudaMemcpyFromSymbolAsyncD2HResult (XDR *, dscudaMemcpyFromSymbolAsyncD2HResult*);
extern  bool_t xdr_dscudaStreamCreateResult (XDR *, dscudaStreamCreateResult*);
extern  bool_t xdr_dscudaEventCreateResult (XDR *, dscudaEventCreateResult*);
extern  bool_t xdr_dscudaEventElapsedTimeResult (XDR *, dscudaEventElapsedTimeResult*);
extern  bool_t xdr_dscudaHostGetDevicePointerResult (XDR *, dscudaHostGetDevicePointerResult*);
extern  bool_t xdr_dscudaHostGetFlagsResult (XDR *, dscudaHostGetFlagsResult*);
extern  bool_t xdr_dscudaLoadModuleResult (XDR *, dscudaLoadModuleResult*);
extern  bool_t xdr_dscudaFuncGetAttributesResult (XDR *, dscudaFuncGetAttributesResult*);
extern  bool_t xdr_dscudaBindTextureResult (XDR *, dscudaBindTextureResult*);
extern  bool_t xdr_dscudaBindTexture2DResult (XDR *, dscudaBindTexture2DResult*);
extern  bool_t xdr_dscufftResult (XDR *, dscufftResult*);
extern  bool_t xdr_dscufftPlanResult (XDR *, dscufftPlanResult*);
extern  bool_t xdr_dscublasResult (XDR *, dscublasResult*);
extern  bool_t xdr_dscublasCreateResult (XDR *, dscublasCreateResult*);
extern  bool_t xdr_dscublasGetVectorResult (XDR *, dscublasGetVectorResult*);
extern  bool_t xdr_RCdim3 (XDR *, RCdim3*);
extern  bool_t xdr_dscudathreadsetlimitid_1_argument (XDR *, dscudathreadsetlimitid_1_argument*);
extern  bool_t xdr_dscudastreamwaiteventid_1_argument (XDR *, dscudastreamwaiteventid_1_argument*);
extern  bool_t xdr_dscudaeventelapsedtimeid_1_argument (XDR *, dscudaeventelapsedtimeid_1_argument*);
extern  bool_t xdr_dscudaeventrecordid_1_argument (XDR *, dscudaeventrecordid_1_argument*);
extern  bool_t xdr_dscudalaunchkernelid_1_argument (XDR *, dscudalaunchkernelid_1_argument*);
extern  bool_t xdr_dscudaloadmoduleid_1_argument (XDR *, dscudaloadmoduleid_1_argument*);
extern  bool_t xdr_dscudafuncgetattributesid_1_argument (XDR *, dscudafuncgetattributesid_1_argument*);
extern  bool_t xdr_dscudamemcpyh2hid_1_argument (XDR *, dscudamemcpyh2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyh2did_1_argument (XDR *, dscudamemcpyh2did_1_argument*);
extern  bool_t xdr_dscudamemcpyd2hid_1_argument (XDR *, dscudamemcpyd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyd2did_1_argument (XDR *, dscudamemcpyd2did_1_argument*);
extern  bool_t xdr_dscudamemcpyasynch2hid_1_argument (XDR *, dscudamemcpyasynch2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyasynch2did_1_argument (XDR *, dscudamemcpyasynch2did_1_argument*);
extern  bool_t xdr_dscudamemcpyasyncd2hid_1_argument (XDR *, dscudamemcpyasyncd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyasyncd2did_1_argument (XDR *, dscudamemcpyasyncd2did_1_argument*);
extern  bool_t xdr_dscudamemcpytosymbolh2did_1_argument (XDR *, dscudamemcpytosymbolh2did_1_argument*);
extern  bool_t xdr_dscudamemcpytosymbold2did_1_argument (XDR *, dscudamemcpytosymbold2did_1_argument*);
extern  bool_t xdr_dscudamemcpyfromsymbold2hid_1_argument (XDR *, dscudamemcpyfromsymbold2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyfromsymbold2did_1_argument (XDR *, dscudamemcpyfromsymbold2did_1_argument*);
extern  bool_t xdr_dscudamemsetid_1_argument (XDR *, dscudamemsetid_1_argument*);
extern  bool_t xdr_dscudahostallocid_1_argument (XDR *, dscudahostallocid_1_argument*);
extern  bool_t xdr_dscudahostgetdevicepointerid_1_argument (XDR *, dscudahostgetdevicepointerid_1_argument*);
extern  bool_t xdr_dscudamallocarrayid_1_argument (XDR *, dscudamallocarrayid_1_argument*);
extern  bool_t xdr_dscudamemcpytoarrayh2hid_1_argument (XDR *, dscudamemcpytoarrayh2hid_1_argument*);
extern  bool_t xdr_dscudamemcpytoarrayh2did_1_argument (XDR *, dscudamemcpytoarrayh2did_1_argument*);
extern  bool_t xdr_dscudamemcpytoarrayd2hid_1_argument (XDR *, dscudamemcpytoarrayd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpytoarrayd2did_1_argument (XDR *, dscudamemcpytoarrayd2did_1_argument*);
extern  bool_t xdr_dscudamallocpitchid_1_argument (XDR *, dscudamallocpitchid_1_argument*);
extern  bool_t xdr_dscudamemcpy2dtoarrayh2hid_1_argument (XDR *, dscudamemcpy2dtoarrayh2hid_1_argument*);
extern  bool_t xdr_dscudamemcpy2dtoarrayh2did_1_argument (XDR *, dscudamemcpy2dtoarrayh2did_1_argument*);
extern  bool_t xdr_dscudamemcpy2dtoarrayd2hid_1_argument (XDR *, dscudamemcpy2dtoarrayd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpy2dtoarrayd2did_1_argument (XDR *, dscudamemcpy2dtoarrayd2did_1_argument*);
extern  bool_t xdr_dscudamemcpy2dh2hid_1_argument (XDR *, dscudamemcpy2dh2hid_1_argument*);
extern  bool_t xdr_dscudamemcpy2dh2did_1_argument (XDR *, dscudamemcpy2dh2did_1_argument*);
extern  bool_t xdr_dscudamemcpy2dd2hid_1_argument (XDR *, dscudamemcpy2dd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpy2dd2did_1_argument (XDR *, dscudamemcpy2dd2did_1_argument*);
extern  bool_t xdr_dscudamemset2did_1_argument (XDR *, dscudamemset2did_1_argument*);
extern  bool_t xdr_dscudamemcpytosymbolasynch2did_1_argument (XDR *, dscudamemcpytosymbolasynch2did_1_argument*);
extern  bool_t xdr_dscudamemcpytosymbolasyncd2did_1_argument (XDR *, dscudamemcpytosymbolasyncd2did_1_argument*);
extern  bool_t xdr_dscudamemcpyfromsymbolasyncd2hid_1_argument (XDR *, dscudamemcpyfromsymbolasyncd2hid_1_argument*);
extern  bool_t xdr_dscudamemcpyfromsymbolasyncd2did_1_argument (XDR *, dscudamemcpyfromsymbolasyncd2did_1_argument*);
extern  bool_t xdr_dscudacreatechanneldescid_1_argument (XDR *, dscudacreatechanneldescid_1_argument*);
extern  bool_t xdr_dscudabindtextureid_1_argument (XDR *, dscudabindtextureid_1_argument*);
extern  bool_t xdr_dscudabindtexture2did_1_argument (XDR *, dscudabindtexture2did_1_argument*);
extern  bool_t xdr_dscudabindtexturetoarrayid_1_argument (XDR *, dscudabindtexturetoarrayid_1_argument*);
extern  bool_t xdr_dscufftplan3did_1_argument (XDR *, dscufftplan3did_1_argument*);
extern  bool_t xdr_dscufftexecc2cid_1_argument (XDR *, dscufftexecc2cid_1_argument*);

#else 
extern bool_t xdr_RCadr ();
extern bool_t xdr_RCstream ();
extern bool_t xdr_RCevent ();
extern bool_t xdr_RCipaddr ();
extern bool_t xdr_RCsize ();
extern bool_t xdr_RCerror ();
extern bool_t xdr_RCbuf ();
extern bool_t xdr_RCchannelformat ();
extern bool_t xdr_RCpid ();
extern bool_t xdr_RCchanneldesc_t ();
extern bool_t xdr_RCchanneldesc ();
extern bool_t xdr_RCtexture_t ();
extern bool_t xdr_RCtexture ();
extern bool_t xdr_RCfuncattr_t ();
extern bool_t xdr_RCfuncattr ();
extern bool_t xdr_RCargType ();
extern bool_t xdr_RCargVal ();
extern bool_t xdr_RCarg ();
extern bool_t xdr_RCargs ();
extern bool_t xdr_dscudaResult ();
extern bool_t xdr_dscudaThreadGetLimitResult ();
extern bool_t xdr_dscudaThreadGetCacheConfigResult ();
extern bool_t xdr_dscudaMallocResult ();
extern bool_t xdr_dscudaHostAllocResult ();
extern bool_t xdr_dscudaMallocHostResult ();
extern bool_t xdr_dscudaMallocArrayResult ();
extern bool_t xdr_dscudaMallocPitchResult ();
extern bool_t xdr_dscudaMemcpyD2HResult ();
extern bool_t xdr_dscudaMemcpyH2HResult ();
extern bool_t xdr_dscudaMemcpyToArrayD2HResult ();
extern bool_t xdr_dscudaMemcpyToArrayH2HResult ();
extern bool_t xdr_dscudaMemcpy2DToArrayD2HResult ();
extern bool_t xdr_dscudaMemcpy2DToArrayH2HResult ();
extern bool_t xdr_dscudaMemcpy2DD2HResult ();
extern bool_t xdr_dscudaMemcpy2DH2HResult ();
extern bool_t xdr_dscudaGetDeviceResult ();
extern bool_t xdr_dscudaGetDeviceCountResult ();
extern bool_t xdr_dscudaGetDevicePropertiesResult ();
extern bool_t xdr_dscudaDriverGetVersionResult ();
extern bool_t xdr_dscudaRuntimeGetVersionResult ();
extern bool_t xdr_dscudaGetErrorStringResult ();
extern bool_t xdr_dscudaCreateChannelDescResult ();
extern bool_t xdr_dscudaGetChannelDescResult ();
extern bool_t xdr_dscudaChooseDeviceResult ();
extern bool_t xdr_dscudaMemcpyAsyncD2HResult ();
extern bool_t xdr_dscudaMemcpyAsyncH2HResult ();
extern bool_t xdr_dscudaMemcpyFromSymbolD2HResult ();
extern bool_t xdr_dscudaMemcpyFromSymbolAsyncD2HResult ();
extern bool_t xdr_dscudaStreamCreateResult ();
extern bool_t xdr_dscudaEventCreateResult ();
extern bool_t xdr_dscudaEventElapsedTimeResult ();
extern bool_t xdr_dscudaHostGetDevicePointerResult ();
extern bool_t xdr_dscudaHostGetFlagsResult ();
extern bool_t xdr_dscudaLoadModuleResult ();
extern bool_t xdr_dscudaFuncGetAttributesResult ();
extern bool_t xdr_dscudaBindTextureResult ();
extern bool_t xdr_dscudaBindTexture2DResult ();
extern bool_t xdr_dscufftResult ();
extern bool_t xdr_dscufftPlanResult ();
extern bool_t xdr_dscublasResult ();
extern bool_t xdr_dscublasCreateResult ();
extern bool_t xdr_dscublasGetVectorResult ();
extern bool_t xdr_RCdim3 ();
extern bool_t xdr_dscudathreadsetlimitid_1_argument ();
extern bool_t xdr_dscudastreamwaiteventid_1_argument ();
extern bool_t xdr_dscudaeventelapsedtimeid_1_argument ();
extern bool_t xdr_dscudaeventrecordid_1_argument ();
extern bool_t xdr_dscudalaunchkernelid_1_argument ();
extern bool_t xdr_dscudaloadmoduleid_1_argument ();
extern bool_t xdr_dscudafuncgetattributesid_1_argument ();
extern bool_t xdr_dscudamemcpyh2hid_1_argument ();
extern bool_t xdr_dscudamemcpyh2did_1_argument ();
extern bool_t xdr_dscudamemcpyd2hid_1_argument ();
extern bool_t xdr_dscudamemcpyd2did_1_argument ();
extern bool_t xdr_dscudamemcpyasynch2hid_1_argument ();
extern bool_t xdr_dscudamemcpyasynch2did_1_argument ();
extern bool_t xdr_dscudamemcpyasyncd2hid_1_argument ();
extern bool_t xdr_dscudamemcpyasyncd2did_1_argument ();
extern bool_t xdr_dscudamemcpytosymbolh2did_1_argument ();
extern bool_t xdr_dscudamemcpytosymbold2did_1_argument ();
extern bool_t xdr_dscudamemcpyfromsymbold2hid_1_argument ();
extern bool_t xdr_dscudamemcpyfromsymbold2did_1_argument ();
extern bool_t xdr_dscudamemsetid_1_argument ();
extern bool_t xdr_dscudahostallocid_1_argument ();
extern bool_t xdr_dscudahostgetdevicepointerid_1_argument ();
extern bool_t xdr_dscudamallocarrayid_1_argument ();
extern bool_t xdr_dscudamemcpytoarrayh2hid_1_argument ();
extern bool_t xdr_dscudamemcpytoarrayh2did_1_argument ();
extern bool_t xdr_dscudamemcpytoarrayd2hid_1_argument ();
extern bool_t xdr_dscudamemcpytoarrayd2did_1_argument ();
extern bool_t xdr_dscudamallocpitchid_1_argument ();
extern bool_t xdr_dscudamemcpy2dtoarrayh2hid_1_argument ();
extern bool_t xdr_dscudamemcpy2dtoarrayh2did_1_argument ();
extern bool_t xdr_dscudamemcpy2dtoarrayd2hid_1_argument ();
extern bool_t xdr_dscudamemcpy2dtoarrayd2did_1_argument ();
extern bool_t xdr_dscudamemcpy2dh2hid_1_argument ();
extern bool_t xdr_dscudamemcpy2dh2did_1_argument ();
extern bool_t xdr_dscudamemcpy2dd2hid_1_argument ();
extern bool_t xdr_dscudamemcpy2dd2did_1_argument ();
extern bool_t xdr_dscudamemset2did_1_argument ();
extern bool_t xdr_dscudamemcpytosymbolasynch2did_1_argument ();
extern bool_t xdr_dscudamemcpytosymbolasyncd2did_1_argument ();
extern bool_t xdr_dscudamemcpyfromsymbolasyncd2hid_1_argument ();
extern bool_t xdr_dscudamemcpyfromsymbolasyncd2did_1_argument ();
extern bool_t xdr_dscudacreatechanneldescid_1_argument ();
extern bool_t xdr_dscudabindtextureid_1_argument ();
extern bool_t xdr_dscudabindtexture2did_1_argument ();
extern bool_t xdr_dscudabindtexturetoarrayid_1_argument ();
extern bool_t xdr_dscufftplan3did_1_argument ();
extern bool_t xdr_dscufftexecc2cid_1_argument ();

#endif 

#ifdef __cplusplus
}
#endif

#endif 
#pragma end dscudarpc.h
#pragma begin dscudamacros.h
#ifndef DSCUDA_MACROS_H
#define DSCUDA_MACROS_H

#define WARN(lv, fmt, args...) if (lv <= dscudaWarnLevel()) fprintf(stderr, fmt, ## args);
#define WARNONCE(lv, fmt, args...) if (lv <= dscudaWarnLevel()) { \
        static int firstcall = 1;                                 \
        if (firstcall) {                                          \
            firstcall = 0;                                        \
            fprintf(stderr, fmt, ## args);                        \
        }                                                         \
    }

#define ALIGN_UP(off, align) (off) = ((off) + (align) - 1) & ~((align) - 1)
int dscudaWarnLevel(void);
void dscudaSetWarnLevel(int level);

#endif 
#pragma end dscudamacros.h

#define TEST_NZ(x) do { if ( (x)) {WARN(0, #x " failed (returned non-zero).\n" ); exit(EXIT_FAILURE); } } while (0)
#define TEST_Z(x)  do { if (!(x)) {WARN(0, #x " failed (returned zero/null).\n"); exit(EXIT_FAILURE); } } while (0)


#define RC_NWR_PER_POST (16) 
#define RC_SGE_SIZE (1024 * 1024 * 2) 
#define RC_WR_MAX (RC_NWR_PER_POST * 16) 
#define RC_RDMA_BUF_SIZE (RC_NWR_PER_POST * RC_SGE_SIZE) 


#if RC_RDMA_BUF_SIZE  < RC_KMODULEIMAGELEN
#error "RC_RDMA_BUF_SIZE too small."

#endif

#define RC_SERVER_IBV_CQ_SIZE (RC_WR_MAX)
#define RC_CLIENT_IBV_CQ_SIZE (65536)

#define RC_IBV_IP_PORT_BASE  (65432)
#define RC_IBV_TIMEOUT (500)  

struct message {
    struct ibv_mr mr[RC_NWR_PER_POST];
};

enum rdma_state_t {
    STATE_INIT,
    STATE_READY,
    STATE_BUSY,
};

typedef struct {
    
    struct rdma_cm_id *id;
    struct ibv_qp *qp;
    struct ibv_context *ibvctx;
    struct ibv_pd *pd;
    struct ibv_cq *cq;
    struct ibv_comp_channel *comp_channel;

    
    struct message *recv_msg;
    struct message *send_msg;

    
    char *rdma_local_region;
    char *rdma_remote_region;

    
    struct ibv_mr *recv_mr;
    struct ibv_mr *send_mr;
    struct ibv_mr peer_mr[RC_NWR_PER_POST];

    
    struct ibv_mr *rdma_local_mr[RC_NWR_PER_POST];
    struct ibv_mr *rdma_remote_mr[RC_NWR_PER_POST];

    
    pthread_t cq_poller_thread;
    int connected;
    enum rdma_state_t rdma_state;
    int rdma_nreq_pending;
} IbvConnection;

typedef enum {
    RCMethodNone = 0,
    RCMethodMemcpyH2D,
    RCMethodMemcpyD2H,
    RCMethodMemcpyD2D,
    RCMethodMalloc,
    RCMethodFree,
    RCMethodGetErrorString,
    RCMethodGetDeviceProperties,
    RCMethodRuntimeGetVersion,
    RCMethodThreadSynchronize,
    RCMethodThreadExit,
    RCMethodDeviceSynchronize,
    RCMethodDscudaMemcpyToSymbolH2D,
    RCMethodDscudaMemcpyToSymbolD2D,
    RCMethodDscudaMemcpyFromSymbolD2H,
    RCMethodDscudaMemcpyFromSymbolD2D,
    RCMethodDscudaMemcpyToSymbolAsyncH2D,
    RCMethodDscudaMemcpyToSymbolAsyncD2D,
    RCMethodDscudaMemcpyFromSymbolAsyncD2H,
    RCMethodDscudaMemcpyFromSymbolAsyncD2D,
    RCMethodDscudaLoadModule,
    RCMethodDscudaLaunchKernel,

    

    RCMethodEnd
} RCMethod;


typedef struct {
    RCMethod method;
    int payload;
} IbvHdr;


typedef struct {
    RCMethod method;
    size_t count;
    RCadr dstadr;
    void *srcbuf;
} IbvMemcpyH2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvMemcpyH2DReturnHdr;


typedef struct {
    RCMethod method;
    size_t count;
    RCadr srcadr;
} IbvMemcpyD2HInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    void *dstbuf;
} IbvMemcpyD2HReturnHdr;


typedef struct {
    RCMethod method;
    size_t count;
    RCadr dstadr;
    RCadr srcadr;
} IbvMemcpyD2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvMemcpyD2DReturnHdr;


typedef struct {
    RCMethod method;
    size_t size;
} IbvMallocInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    RCadr devAdr;
} IbvMallocReturnHdr;


typedef struct {
    RCMethod method;
    RCadr devAdr;
} IbvFreeInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvFreeReturnHdr;


typedef struct {
    RCMethod method;
    int device;
    cudaError_t err;
} IbvGetErrorStringInvokeHdr;

typedef struct {
    RCMethod method;
    char *errmsg;
} IbvGetErrorStringReturnHdr;


typedef struct {
    RCMethod method;
    int device;
} IbvGetDevicePropertiesInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    cudaDeviceProp prop;
} IbvGetDevicePropertiesReturnHdr;


typedef struct {
    RCMethod method;
    char dummy[8];
} IbvRuntimeGetVersionInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    int version;
} IbvRuntimeGetVersionReturnHdr;


typedef struct {
    RCMethod method;
    char dummy[8];
} IbvThreadSynchronizeInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvThreadSynchronizeReturnHdr;


typedef struct {
    RCMethod method;
    char dummy[8];
} IbvThreadExitInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvThreadExitReturnHdr;


typedef struct {
    RCMethod method;
    char dummy[8];
} IbvDeviceSynchronizeInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDeviceSynchronizeReturnHdr;


typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[RC_SNAMELEN];
    size_t count;
    size_t offset;
    void *src;
} IbvDscudaMemcpyToSymbolH2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDscudaMemcpyToSymbolH2DReturnHdr;


typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[RC_SNAMELEN];
    size_t count;
    size_t offset;
    RCadr srcadr;
} IbvDscudaMemcpyToSymbolD2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDscudaMemcpyToSymbolD2DReturnHdr;



typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[RC_SNAMELEN];
    size_t count;
    size_t offset;
} IbvDscudaMemcpyFromSymbolD2HInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    void *dst;
} IbvDscudaMemcpyFromSymbolD2HReturnHdr;


typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[RC_SNAMELEN];
    size_t count;
    size_t offset;
    RCadr dstadr;
} IbvDscudaMemcpyFromSymbolD2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDscudaMemcpyFromSymbolD2DReturnHdr;


typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[RC_SNAMELEN];
    size_t count;
    size_t offset;
    RCstream stream;
    void *src;
} IbvDscudaMemcpyToSymbolAsyncH2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDscudaMemcpyToSymbolAsyncH2DReturnHdr;


typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[RC_SNAMELEN];
    size_t count;
    size_t offset;
    RCstream stream;
    RCadr srcadr;
} IbvDscudaMemcpyToSymbolAsyncD2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDscudaMemcpyToSymbolAsyncD2DReturnHdr;



typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[RC_SNAMELEN];
    size_t count;
    size_t offset;
    RCstream stream;
} IbvDscudaMemcpyFromSymbolAsyncD2HInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    void *dst;
} IbvDscudaMemcpyFromSymbolAsyncD2HReturnHdr;


typedef struct {
    RCMethod method;
    int moduleid;
    char symbol[RC_SNAMELEN];
    size_t count;
    size_t offset;
    RCstream stream;
    RCadr dstadr;
} IbvDscudaMemcpyFromSymbolAsyncD2DInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDscudaMemcpyFromSymbolAsyncD2DReturnHdr;



typedef struct {
    RCMethod method;
    uint64_t ipaddr;
    unsigned long int pid;
    char modulename[RC_KMODULENAMELEN];
    void *moduleimage;
} IbvDscudaLoadModuleInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
    int moduleid;
} IbvDscudaLoadModuleReturnHdr;


typedef struct {
    RCMethod method;
    int moduleid;
    int kernelid;
    char kernelname[RC_KNAMELEN];
    unsigned int gdim[3];
    unsigned int bdim[3];
    unsigned int smemsize;
    RCstream stream;
    int narg;
    void *args;
} IbvDscudaLaunchKernelInvokeHdr;

typedef struct {
    RCMethod method;
    cudaError_t err;
} IbvDscudaLaunchKernelReturnHdr;

typedef struct {
    int type;
    union {
        uint64_t pointerval;
        unsigned int intval;
        float floatval;
        char customval[RC_KARGMAX];
    } val;
    unsigned int offset;
    unsigned int size;
} IbvArg;

void rdmaBuildConnection(struct rdma_cm_id *id, bool is_server);
void rdmaBuildParams(struct rdma_conn_param *params);
void rdmaDestroyConnection(IbvConnection *conn);
void rdmaSetOnCompletionHandler(void (*handler)(struct ibv_wc *));
void rdmaOnCompletionClient(struct ibv_wc *);
void rdmaOnCompletionServer(struct ibv_wc *);
void rdmaWaitEvent(struct rdma_event_channel *ec, rdma_cm_event_type et, int (*handler)(struct rdma_cm_id *id));
void rdmaWaitReadyToKickoff(IbvConnection *conn);
void rdmaWaitReadyToDisconnect(IbvConnection *conn);
void rdmaKickoff(IbvConnection *conn, int length);
void rdmaPipelinedKickoff(IbvConnection *conn, int length, char *payload_buf, char *payload_src, int payload_size);
void rdmaSendMr(IbvConnection *conn);

#endif 

#endif 
#pragma end ibv_rdma.h

enum {
    RC_REMOTECALL_TYPE_RPC,
    RC_REMOTECALL_TYPE_IBV,
};


int dscudaWarnLevel(void);
void dscudaSetWarnLevel(int level);
char *dscudaMemcpyKindName(cudaMemcpyKind kind);
const char *dscudaGetIpaddrString(unsigned int addr);
double RCgetCputime(double *t0);


void *dscudaUvaOfAdr(void *adr, int devid);
int dscudaDevidOfUva(void *adr);
void *dscudaAdrOfUva(void *adr);
int dscudaNredundancy(void);
void dscudaSetAutoVerb(int verb);
int dscudaGetAutoVerb(void);
int dscudaRemoteCallType(void);
void dscudaSetErrorHandler(void (*handler)(void *), void *handler_arg);
void dscudaGetMangledFunctionName(char *name, const char *funcif, const char *ptxdata);
int *dscudaLoadModule(char *srcname, char *strdata);
void rpcDscudaLaunchKernelWrapper(int *moduleid, int kid, char *kname,
                              RCdim3 gdim, RCdim3 bdim, RCsize smemsize, RCstream stream,
                              RCargs args);
void ibvDscudaLaunchKernelWrapper(int *moduleid, int kid, char *kname,
                                 int *gdim, int *bdim, RCsize smemsize, RCstream stream,
                                 int narg, IbvArg *arg);

cudaError_t dscudaFuncGetAttributesWrapper(int *moduleid, struct cudaFuncAttributes *attr, const char *func);

cudaError_t dscudaMemcpyToSymbolWrapper(int *moduleid, const char *symbol, const void *src,
                                       size_t count, size_t offset = 0,
                                       enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);

cudaError_t dscudaMemcpyToSymbolAsyncWrapper(int *moduleid, const char *symbol, const void *src,
					    size_t count, size_t offset = 0,
					    enum cudaMemcpyKind kind = cudaMemcpyHostToDevice, cudaStream_t stream = 0);

cudaError_t dscudaMemcpyFromSymbolWrapper(int *moduleid, void *dst, const char *symbol,
					 size_t count, size_t offset = 0,
					 enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);

cudaError_t dscudaMemcpyFromSymbolAsyncWrapper(int *moduleid, void *dst, const char *symbol,
					      size_t count, size_t offset = 0,
					      enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost, cudaStream_t stream = 0);

cudaError_t dscudaBindTextureWrapper(int *moduleid, char *texname,
                                    size_t *offset,
                                    const struct textureReference *tex,
                                    const void *devPtr,
                                    const struct cudaChannelFormatDesc *desc,
                                    size_t size = UINT_MAX);

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTextureWrapper(int *moduleid, char *texname,
                                    size_t *offset,
                                    const struct texture<T, dim, readMode> &tex,
                                    const void *devPtr,
                                    const struct cudaChannelFormatDesc &desc,
                                    size_t size = UINT_MAX)
{
  return     dscudaBindTextureWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "tex", offset, &tex, devPtr, &desc, size);
}

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTextureWrapper(int *moduleid, char *texname,
                                    size_t *offset,
                                    const struct texture<T, dim, readMode> &tex,
                                    const void *devPtr,
                                    size_t size = UINT_MAX)
{
  return     dscudaBindTextureWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "tex", offset, tex, devPtr, tex.channelDesc, size);
}


cudaError_t dscudaBindTexture2DWrapper(int *moduleid, char *texname,
                                      size_t *offset,
                                      const struct textureReference *tex,
                                      const void *devPtr,
                                      const struct cudaChannelFormatDesc *desc,
                                      size_t width, size_t height, size_t pitch);

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTexture2DWrapper(int *moduleid, char *texname,
                                      size_t *offset,
                                      const struct texture<T, dim, readMode> &tex,
                                      const void *devPtr,
                                      const struct cudaChannelFormatDesc &desc,
                                      size_t width, size_t height, size_t pitch)
{
    return dscudaBindTexture2DWrapper(moduleid, texname,
                                     offset, &tex, devPtr, &desc, width, height, pitch);
}

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTexture2DWrapper(int *moduleid, char *texname,
                                      size_t *offset,
                                      const struct texture<T, dim, readMode> &tex,
                                      const void *devPtr,
                                      size_t width, size_t height, size_t pitch)
{
    return dscudaBindTexture2DWrapper(moduleid, texname,
                                     offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}

cudaError_t dscudaBindTextureToArrayWrapper(int *moduleid, char *texname,
                                           const struct textureReference *tex,
                                           const struct cudaArray * array,
                                           const struct cudaChannelFormatDesc *desc);

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTextureToArrayWrapper(int *moduleid, char *texname,
                                           const struct texture<T, dim, readMode> &tex,
                                           const struct cudaArray * array,
                                           const struct cudaChannelFormatDesc & desc)
{
    return dscudaBindTextureToArrayWrapper(moduleid, texname, &tex, array, &desc);
}

template<class T, int dim, enum cudaTextureReadMode readMode>
cudaError_t dscudaBindTextureToArrayWrapper(int *moduleid, char *texname,
                                           const struct texture<T, dim, readMode> &tex,
                                           const struct cudaArray * array)
{
    struct cudaChannelFormatDesc desc;
    cudaError_t err = cudaGetChannelDesc(&desc, array);
    return err == cudaSuccess ? dscudaBindTextureToArrayWrapper(moduleid, texname, &tex, array, &desc) : err;
}

#endif 
#pragma end dscuda.h
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <cutil.h>

#define D2F_AND_COPY(n,host_mem,device_mem,float_mem) \
  for(int i=0;i<(n);i++) ((float *)(float_mem))[i]=(host_mem)[i];\
  CUDA_SAFE_CALL(cudaMalloc((void **)&(device_mem),sizeof(float)*(n)));\
  CUDA_SAFE_CALL(cudaMemcpy((device_mem),(float_mem),sizeof(float)*(n),cudaMemcpyHostToDevice));

#define NMAX      8192
#define NTHRE      256
#define ATYPE       32
#define ATYPE2    (ATYPE * ATYPE)
#define NDIVBIT      4         
#define NDIV      (1<<NDIVBIT) 
#define NTHRE2    (NTHRE/NDIV) 

typedef struct {
  float r[3];
  int atype;
} VG_XVEC;

typedef struct {
  float pol;
  float sigm;
  float ipotro;
  float pc;
  float pd;
  float zz;
} VG_MATRIX;

__constant__ VG_MATRIX c_matrix[ATYPE2];

static int Dev=-1;

extern "C"
void MR3init(void)
{
  if(Dev<0){
    char *s;
    s=getenv("VG_DEVICEID");
    if(s!=NULL){
      sscanf(s,"%d",&Dev);
      printf("VG_DEVICEID is set %d\n",Dev);
    }
    else{
      Dev=0;
    }
    cudaSetDevice(Dev);
    cudaDeviceProp deviceProp;
    cudaGetDeviceProperties(&deviceProp, Dev);
    printf("Device %d: %s\n", Dev, deviceProp.name);
  }
}

extern "C"
void MR3free(void)
{
}



/*
 * stub for remote call to nacl_kernel.
 */
void
dscudanacl_kernel(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , float *x, int n, int *atype, int nat, float *pol, float *sigm, float *ipotro,
		 float *pc, float *pd, float *zz, int tblno, float xmax, int periodicflag, 
		 float *force)
{
    int _narg = 14;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[14], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[14], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(atype)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(atype);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(pol)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(pol);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(sigm)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(sigm);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(ipotro)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(ipotro);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(pc)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(pc);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(pd)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(pd);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(zz)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(zz);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'tblno'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = tblno;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // an integer 'periodicflag'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = periodicflag;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(force)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(force);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 0, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(atype)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(atype);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(pol)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(pol);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(sigm)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(sigm);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(ipotro)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(ipotro);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(pc)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(pc);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(pd)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(pd);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(zz)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(zz);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'tblno'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = tblno;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // an integer 'periodicflag'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = periodicflag;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(force)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(force);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 0, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C"  
void nacl_kernel(float *x, int n, int *atype, int nat, float *pol, float *sigm, float *ipotro,
		 float *pc, float *pd, float *zz, int tblno, float xmax, int periodicflag, 
		 float *force)
{
    /* nop */
}




/*
 * stub for remote call to nacl_kernel_kadai8.
 */
void
dscudanacl_kernel_kadai8(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , float *x, int n, int *atype, int nat, float *pol, float *sigm, float *ipotro,
		 float *pc, float *pd, float *zz, int tblno, float xmax, int periodicflag, 
		 float *force)
{
    int _narg = 14;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[14], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[14], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(atype)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(atype);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(pol)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(pol);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(sigm)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(sigm);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(ipotro)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(ipotro);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(pc)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(pc);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(pd)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(pd);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(zz)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(zz);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'tblno'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = tblno;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // an integer 'periodicflag'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = periodicflag;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(force)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(force);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 1, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(atype)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(atype);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(pol)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(pol);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(sigm)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(sigm);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(ipotro)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(ipotro);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(pc)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(pc);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(pd)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(pd);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(zz)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(zz);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'tblno'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = tblno;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // an integer 'periodicflag'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = periodicflag;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(force)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(force);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 1, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C"  
void nacl_kernel_kadai8(float *x, int n, int *atype, int nat, float *pol, float *sigm, float *ipotro,
		 float *pc, float *pd, float *zz, int tblno, float xmax, int periodicflag, 
		 float *force)
{
    /* nop */
}



extern "C"
void MR3calcnacl_kadai8(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,*d_atype;
  float *d_x,*d_pol,*d_sigm,*d_ipotro,*d_pc,*d_pd,*d_zz,*d_force,xmaxf=xmax;

  
  if(sizeof(double)*n*3<sizeof(float)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }

  
  D2F_AND_COPY(n*3,x,d_x,force);
  D2F_AND_COPY(nat*nat,pol,d_pol,force);
  D2F_AND_COPY(nat*nat,sigm,d_sigm,force);
  D2F_AND_COPY(nat*nat,ipotro,d_ipotro,force);
  D2F_AND_COPY(nat*nat,pc,d_pc,force);
  D2F_AND_COPY(nat*nat,pd,d_pd,force);
  D2F_AND_COPY(nat*nat,zz,d_zz,force);
  CUDA_SAFE_CALL(cudaMalloc((void**)&d_atype,sizeof(int)*n));
  CUDA_SAFE_CALL(cudaMemcpy(d_atype,atype,sizeof(int)*n,cudaMemcpyHostToDevice));
  CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*n*3));

  
  dim3 threads(64);
  dim3 grid((n+63)/64);
  dscudanacl_kernel_kadai8(grid, threads , 0, NULL, d_x, n, d_atype, nat, d_pol, d_sigm, d_ipotro, d_pc, d_pd, d_zz, tblno, xmaxf, periodicflag, d_force);
  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(force,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=n*3-1;i>=0;i--) force[i]=((float *)force)[i];

  
  CUDA_SAFE_CALL(cudaFree(d_x));
  CUDA_SAFE_CALL(cudaFree(d_atype));
  CUDA_SAFE_CALL(cudaFree(d_pol));
  CUDA_SAFE_CALL(cudaFree(d_sigm));
  CUDA_SAFE_CALL(cudaFree(d_ipotro));
  CUDA_SAFE_CALL(cudaFree(d_pc));
  CUDA_SAFE_CALL(cudaFree(d_pd));
  CUDA_SAFE_CALL(cudaFree(d_zz));
  CUDA_SAFE_CALL(cudaFree(d_force));
}


__device__ __inline__ 
void inter_kadai91011(float xj[3], float xi[3], float fi[3], 
	   VG_MATRIX *d_matrix, int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k]  = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2   += dr[k] * dr[k];
  }
  if(dn2 != 0.0f){
    r     = sqrtf(dn2);
    inr   = 1.0f / r;
    inr2  = inr  * inr;
    inr4  = inr2 * inr2;
    inr8  = inr4 * inr4;
    d3    = pb * c_matrix[t].pol * expf( (c_matrix[t].sigm - r) * c_matrix[t].ipotro);
    dphir = ( d3 * c_matrix[t].ipotro * inr
	    - 6.0f * c_matrix[t].pc * inr8
	    - 8.0f * c_matrix[t].pd * inr8 * inr2
	    + inr2 * inr * c_matrix[t].zz );
    for(k=0; k<3; k++) fi[k] += dphir * dr[k];
  }
}


/*
 * stub for remote call to nacl_kernel_gpu_kadai9.
 */
void
dscudanacl_kernel_gpu_kadai9(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    int _narg = 6;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[6], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[6], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 2, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 2, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C"  
void nacl_kernel_gpu_kadai9(VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    /* nop */
}




extern "C"
void MR3calcnacl_kadai9(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,j;
  static VG_XVEC *d_x=NULL;
  static float *d_force=NULL;
  static VG_MATRIX *d_matrix=NULL;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  VG_XVEC   *vec=(VG_XVEC *)force;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=NULL;
  static int n_bak=0;

  
  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>ATYPE){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){
    
    int nalloc;
    static int nalloc_bak=0;
    if(n>NMAX) nalloc=n;
    else       nalloc=NMAX;
    if(nalloc!=nalloc_bak){
      CUDA_SAFE_CALL(cudaFree(d_x));
      CUDA_SAFE_CALL(cudaFree(d_force));
      CUDA_SAFE_CALL(cudaFree(d_matrix));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+NTHRE)));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*nalloc*3));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat));
      
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==NULL){
	fprintf(stderr,"** error : can't malloc forcef **\n");
	exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }

    
    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
	matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
	matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
	matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
	matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
	matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
	matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }

    CUDA_SAFE_CALL(    dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat));

    n_bak=n;
  }

  for(i=0;i<n;i++){
    for(j=0;j<3;j++){
      vec[i].r[j]=x[i*3+j];
    }
    vec[i].atype=atype[i];
  }
  CUDA_SAFE_CALL(cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*n,cudaMemcpyHostToDevice));

  
  dim3 threads(NTHRE);
  dim3 grid((n+NTHRE-1)/NTHRE);
  dscudanacl_kernel_gpu_kadai9(grid, threads , 0, NULL, d_x, n, nat, d_matrix, xmaxf, d_force);
  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}


/*
 * stub for remote call to nacl_kernel_gpu_kadai10.
 */
void
dscudanacl_kernel_gpu_kadai10(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    int _narg = 6;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[6], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[6], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 3, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 3, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C"  
void nacl_kernel_gpu_kadai10(VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_kadai10(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,j;
  static VG_XVEC *d_x=NULL;
  static float *d_force=NULL;
  static VG_MATRIX *d_matrix=NULL;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  VG_XVEC   *vec=(VG_XVEC *)force;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=NULL;
  static int n_bak=0;

  
  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>ATYPE){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){
    
    int nalloc;
    static int nalloc_bak=0;
    if(n>NMAX) nalloc=n;
    else       nalloc=NMAX;
    if(nalloc!=nalloc_bak){
      CUDA_SAFE_CALL(cudaFree(d_x));
      CUDA_SAFE_CALL(cudaFree(d_force));
      CUDA_SAFE_CALL(cudaFree(d_matrix));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+NTHRE)));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*nalloc*3));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat));
      
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==NULL){
	fprintf(stderr,"** error : can't malloc forcef **\n");
	exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }

    
    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
	matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
	matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
	matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
	matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
	matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
	matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }

    CUDA_SAFE_CALL(    dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat));

    n_bak=n;
  }

  for(i=0;i<n;i++){
    for(j=0;j<3;j++){
      vec[i].r[j]=x[i*3+j];
    }
    vec[i].atype=atype[i];
  }
  CUDA_SAFE_CALL(cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*n,cudaMemcpyHostToDevice));

  
  dim3 threads(NTHRE);
  dim3 grid((n+NTHRE-1)/NTHRE);
  dscudanacl_kernel_gpu_kadai10(grid, threads , 0, NULL, d_x, n, nat, d_matrix, xmaxf, d_force);
  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}


/*
 * stub for remote call to nacl_kernel_gpu_kadai11.
 */
void
dscudanacl_kernel_gpu_kadai11(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    int _narg = 6;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[6], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[6], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 4, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 4, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C"  
void nacl_kernel_gpu_kadai11(VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    /* nop */
}




extern "C"
void MR3calcnacl_kadai11(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,j;
  static VG_XVEC *d_x=NULL;
  static float *d_force=NULL;
  static VG_MATRIX *d_matrix=NULL;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  VG_XVEC   *vec=(VG_XVEC *)force;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=NULL;
  static int n_bak=0;

  
  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>ATYPE){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){
    
    int nalloc;
    static int nalloc_bak=0;
    if(n>NMAX) nalloc=n;
    else       nalloc=NMAX;
    if(nalloc!=nalloc_bak){
      CUDA_SAFE_CALL(cudaFree(d_x));
      CUDA_SAFE_CALL(cudaFree(d_force));
      CUDA_SAFE_CALL(cudaFree(d_matrix));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+NTHRE)));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*nalloc*3));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat));
      
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==NULL){
	fprintf(stderr,"** error : can't malloc forcef **\n");
	exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }

    
    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
	matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
	matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
	matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
	matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
	matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
	matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }

    CUDA_SAFE_CALL(    dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat));

    n_bak=n;
  }

  for(i=0;i<n;i++){
    for(j=0;j<3;j++){
      vec[i].r[j]=x[i*3+j];
    }
    vec[i].atype=atype[i];
  }
  CUDA_SAFE_CALL(cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*n,cudaMemcpyHostToDevice));

  
  dim3 threads(NTHRE);
  dim3 grid((n+NTHRE-1)/NTHRE);
  dscudanacl_kernel_gpu_kadai11(grid, threads , 0, NULL, d_x, n, nat, d_matrix, xmaxf, d_force);
  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}

__device__ __inline__ 
void inter_kadai12(float xj[3], float xi[3], float fi[3], 
	   VG_MATRIX *d_matrix, int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k]  = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2   += dr[k] * dr[k];
  }
  r     = sqrtf(dn2);
#if 0
  if(dn2!=0.0f) inr = 1.0f / r;
  else          inr = 0.0f;
#else
  inr   = 1.0f / r;
#endif
  inr2  = inr  * inr;
  inr4  = inr2 * inr2;
  inr8  = inr4 * inr4;
  d3    = pb * c_matrix[t].pol * expf( (c_matrix[t].sigm - r) * c_matrix[t].ipotro);
  dphir = ( d3 * c_matrix[t].ipotro * inr
	    - 6.0f * c_matrix[t].pc * inr8
	    - 8.0f * c_matrix[t].pd * inr8 * inr2
	    + inr2 * inr * c_matrix[t].zz );
#if 1
  if(dn2==0.0f) dphir = 0.0f;
#endif
  for(k=0; k<3; k++) fi[k] += dphir * dr[k];
}


/*
 * stub for remote call to nacl_kernel_gpu_kadai12.
 */
void
dscudanacl_kernel_gpu_kadai12(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    int _narg = 6;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[6], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[6], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 5, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 5, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C"  
void nacl_kernel_gpu_kadai12(VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, float xmax, float *fvec)
{
    /* nop */
}




extern "C"
void MR3calcnacl_kadai12(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,j;
  static VG_XVEC *d_x=NULL;
  static float *d_force=NULL;
  static VG_MATRIX *d_matrix=NULL;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  VG_XVEC   *vec=(VG_XVEC *)force;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=NULL;
  static int n_bak=0;

  
  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>ATYPE){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){
    
    int nalloc;
    static int nalloc_bak=0;
    if(n>NMAX) nalloc=n;
    else       nalloc=NMAX;
    if(nalloc!=nalloc_bak){
      CUDA_SAFE_CALL(cudaFree(d_x));
      CUDA_SAFE_CALL(cudaFree(d_force));
      CUDA_SAFE_CALL(cudaFree(d_matrix));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+NTHRE)));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*nalloc*3));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat));
      
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==NULL){
	fprintf(stderr,"** error : can't malloc forcef **\n");
	exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }

    
    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
	matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
	matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
	matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
	matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
	matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
	matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }

    CUDA_SAFE_CALL(    dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat));

    n_bak=n;
  }

  for(i=0;i<n;i++){
    for(j=0;j<3;j++){
      vec[i].r[j]=x[i*3+j];
    }
    vec[i].atype=atype[i];
  }
  CUDA_SAFE_CALL(cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*n,cudaMemcpyHostToDevice));

  
  dim3 threads(NTHRE);
  dim3 grid((n+NTHRE-1)/NTHRE);
  dscudanacl_kernel_gpu_kadai12(grid, threads , 0, NULL, d_x, n, nat, d_matrix, xmaxf, d_force);
  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}


extern "C"
void MR3calcnacl_kadai13(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,j,*index,count[ATYPE],offset[ATYPE],*atype2;
  double *x2,*f2;
  
  if((index=(int *)malloc(sizeof(int)*n))==NULL){
    fprintf(stderr,"** error : can't malloc index **\n");
    exit(1);
  }
  if((atype2=(int *)malloc(sizeof(int)*n))==NULL){
    fprintf(stderr,"** error : can't malloc atype2 **\n");
    exit(1);
  }
  if((x2=(double *)malloc(sizeof(double)*n*3))==NULL){
    fprintf(stderr,"** error : can't malloc x2 **\n");
    exit(1);
  }
  if((f2=(double *)malloc(sizeof(double)*n*3))==NULL){
    fprintf(stderr,"** error : can't malloc f2 **\n");
    exit(1);
  }
  for(i=0;i<nat;i++) count[i]=0;
  for(i=0;i<n;i++) count[atype[i]]++;
  for(i=1;i<nat;i++) offset[i]=count[i-1];
  offset[0]=0;
  for(i=0;i<n;i++) index[i]=offset[atype[i]]++;
  for(i=0;i<n;i++){
    for(j=0;j<3;j++) x2[index[i]*3+j]=x[i*3+j];
    atype2[index[i]]=atype[i];
  }
  MR3calcnacl_kadai12(x2,n,atype2,nat,pol,sigm,ipotro,pc,pd,zz,
		      tblno,xmax,periodicflag,f2);
  for(i=0;i<n;i++){
    for(j=0;j<3;j++) force[i*3+j]=f2[index[i]*3+j];
  }
  
  free(index);
  free(atype2);
  free(x2);
  free(f2);
}


extern "C"
void MR3calcnacl_org(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,*d_atype;
  float *d_x,*d_pol,*d_sigm,*d_ipotro,*d_pc,*d_pd,*d_zz,*d_force,xmaxf=xmax;

  
  if(sizeof(double)*n*3<sizeof(float)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }

  
  D2F_AND_COPY(n*3,x,d_x,force);
  D2F_AND_COPY(nat*nat,pol,d_pol,force);
  D2F_AND_COPY(nat*nat,sigm,d_sigm,force);
  D2F_AND_COPY(nat*nat,ipotro,d_ipotro,force);
  D2F_AND_COPY(nat*nat,pc,d_pc,force);
  D2F_AND_COPY(nat*nat,pd,d_pd,force);
  D2F_AND_COPY(nat*nat,zz,d_zz,force);
  CUDA_SAFE_CALL(cudaMalloc((void**)&d_atype,sizeof(int)*n));
  CUDA_SAFE_CALL(cudaMemcpy(d_atype,atype,sizeof(int)*n,cudaMemcpyHostToDevice));
  CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*n*3));

  
  dim3 threads(64);
  dim3 grid((n+63)/64);
  dscudanacl_kernel(grid, threads , 0, NULL, d_x, n, d_atype, nat, d_pol, d_sigm, d_ipotro, d_pc, d_pd, d_zz, tblno, xmaxf, periodicflag, d_force);
  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(force,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=n*3-1;i>=0;i--) force[i]=((float *)force)[i];

  
  CUDA_SAFE_CALL(cudaFree(d_x));
  CUDA_SAFE_CALL(cudaFree(d_atype));
  CUDA_SAFE_CALL(cudaFree(d_pol));
  CUDA_SAFE_CALL(cudaFree(d_sigm));
  CUDA_SAFE_CALL(cudaFree(d_ipotro));
  CUDA_SAFE_CALL(cudaFree(d_pc));
  CUDA_SAFE_CALL(cudaFree(d_pd));
  CUDA_SAFE_CALL(cudaFree(d_zz));
  CUDA_SAFE_CALL(cudaFree(d_force));
}



/*
 * stub for remote call to nacl_kernel_initial.
 */
void
dscudanacl_kernel_initial(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , float *x, int n, int *atype, int nat, 
                 float *pol, float *sigm, float *ipotro,
                 float *pc, float *pd, float *zz, 
                 int tblno, float xmax, int periodicflag,
                 float *force)
{
    int _narg = 14;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[14], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[14], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(atype)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(atype);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(pol)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(pol);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(sigm)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(sigm);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(ipotro)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(ipotro);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(pc)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(pc);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(pd)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(pd);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(zz)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(zz);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'tblno'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = tblno;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // an integer 'periodicflag'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = periodicflag;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(force)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(force);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 6, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(atype)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(atype);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(pol)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(pol);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(sigm)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(sigm);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(ipotro)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(ipotro);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(pc)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(pc);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(pd)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(pd);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(zz)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(zz);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'tblno'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = tblno;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // an integer 'periodicflag'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = periodicflag;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(force)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(force);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 6, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C" 
void nacl_kernel_initial(float *x, int n, int *atype, int nat, 
                 float *pol, float *sigm, float *ipotro,
                 float *pc, float *pd, float *zz, 
                 int tblno, float xmax, int periodicflag,
                 float *force)
{
    /* nop */
}



extern "C"
void MR3calcnacl_initial(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,*d_atype;
  float *d_x,*d_pol,*d_sigm,*d_ipotro,*d_pc,*d_pd,*d_zz,*d_force,xmaxf=xmax;

  
  if(sizeof(double)*n*3<sizeof(float)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }

  
  D2F_AND_COPY(n*3,x,d_x,force);
  D2F_AND_COPY(nat*nat,pol,d_pol,force);
  D2F_AND_COPY(nat*nat,sigm,d_sigm,force);
  D2F_AND_COPY(nat*nat,ipotro,d_ipotro,force);
  D2F_AND_COPY(nat*nat,pc,d_pc,force);
  D2F_AND_COPY(nat*nat,pd,d_pd,force);
  D2F_AND_COPY(nat*nat,zz,d_zz,force);
  CUDA_SAFE_CALL(cudaMalloc((void**)&d_atype,sizeof(int)*n));
  CUDA_SAFE_CALL(cudaMemcpy(d_atype,atype,sizeof(int)*n,cudaMemcpyHostToDevice));
  CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*n*3));

  
  dim3 threads(64);
  dim3 grid((n+63)/64);
  dscudanacl_kernel_initial(grid, threads , 0, NULL, d_x, n, d_atype, nat, d_pol, d_sigm, d_ipotro, d_pc, d_pd, d_zz, tblno, xmaxf, periodicflag, d_force);
  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(force,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=n*3-1;i>=0;i--) force[i]=((float *)force)[i];

  
  CUDA_SAFE_CALL(cudaFree(d_x));
  CUDA_SAFE_CALL(cudaFree(d_atype));
  CUDA_SAFE_CALL(cudaFree(d_pol));
  CUDA_SAFE_CALL(cudaFree(d_sigm));
  CUDA_SAFE_CALL(cudaFree(d_ipotro));
  CUDA_SAFE_CALL(cudaFree(d_pc));
  CUDA_SAFE_CALL(cudaFree(d_pd));
  CUDA_SAFE_CALL(cudaFree(d_zz));
  CUDA_SAFE_CALL(cudaFree(d_force));
}


__device__ __inline__
void inter_128bit(float xj[3], float xi[3], float fi[3],
           VG_MATRIX d_matrix[], int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k]  = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2   += dr[k] * dr[k];
  }
  if(dn2 != 0.0f){
    r     = sqrtf(dn2);
    inr   = 1.0f / r;
    inr2  = inr  * inr;
    inr4  = inr2 * inr2;
    inr8  = inr4 * inr4;
    d3    = pb * d_matrix[t].pol * expf( (d_matrix[t].sigm - r) 
					 * d_matrix[t].ipotro);
    dphir = ( d3 * d_matrix[t].ipotro * inr
            - 6.0f * d_matrix[t].pc * inr8
            - 8.0f * d_matrix[t].pd * inr8 * inr2
	      + inr2 * inr * d_matrix[t].zz );
    for(k=0; k<3; k++) fi[k] += dphir * dr[k];
  }
}


/*
 * stub for remote call to nacl_kernel_128bit.
 */
void
dscudanacl_kernel_128bit(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, 
                 float xmax, float *fvec)
{
    int _narg = 6;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[6], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[6], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 7, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 7, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C" 
void nacl_kernel_128bit(VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, 
                 float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_128bit(double *x, int n, int *atype, int nat,
		 double *pol, double *sigm, double *ipotro,
		 double *pc, double *pd, double *zz,
		 int tblno, double xmax, int periodicflag,
		 double *force)
{
  int i,j;
  static VG_XVEC *d_x=NULL;
  static float *d_force=NULL;
  static VG_MATRIX *d_matrix=NULL;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  static VG_XVEC   *vec=NULL;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=NULL;
  static int n_bak=0;

  
  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>ATYPE){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){
    
    int nalloc;
    static int nalloc_bak=0;
    if(n>NMAX) nalloc=n;
    else       nalloc=NMAX;
    if(nalloc!=nalloc_bak){
      CUDA_SAFE_CALL(cudaFree(d_x));
      CUDA_SAFE_CALL(cudaFree(d_force));
      CUDA_SAFE_CALL(cudaFree(d_matrix));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+NTHRE)));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*(nalloc+NTHRE)*3));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat));
      
      free(vec);
      if((vec=(VG_XVEC *)malloc(sizeof(VG_XVEC)*(nalloc+NTHRE)))==NULL){
	fprintf(stderr,"** error : can't malloc vec **\n");
	exit(1);
      }
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==NULL){
	fprintf(stderr,"** error : can't malloc forcef **\n");
	exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }

    
    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
	matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
	matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
	matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
	matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
	matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
	matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }
    CUDA_SAFE_CALL(cudaMemcpy(d_matrix,matrix,sizeof(VG_MATRIX)*nat*nat,cudaMemcpyHostToDevice));

    n_bak=n;
  }

  for(i=0;i<(n+NTHRE-1)/NTHRE*NTHRE;i++){
    if(i<n){
      for(j=0;j<3;j++){
	vec[i].r[j]=x[i*3+j];
      }
      vec[i].atype=atype[i];
    }
    else{
      for(j=0;j<3;j++){
	vec[i].r[j]=0.0f;
      }
      vec[i].atype=0;
    }
  }
  CUDA_SAFE_CALL(cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*((n+NTHRE-1)/NTHRE*NTHRE),
  			    cudaMemcpyHostToDevice));

  
  dim3 threads(NTHRE);
  dim3 grid((n+NTHRE-1)/NTHRE);
  dscudanacl_kernel_128bit(grid, threads , 0, NULL, d_x, n, nat, d_matrix, xmaxf, d_force);
  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}


__device__ __inline__
void inter_shared(float xj[3], float xi[3], float fi[3],
           VG_MATRIX d_matrix[], int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k]  = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2   += dr[k] * dr[k];
  }
  if(dn2 != 0.0f){
    r     = sqrtf(dn2);
    inr   = 1.0f / r;
    inr2  = inr  * inr;
    inr4  = inr2 * inr2;
    inr8  = inr4 * inr4;
    d3    = pb * d_matrix[t].pol * expf( (d_matrix[t].sigm - r) 
					 * d_matrix[t].ipotro);
    dphir = ( d3 * d_matrix[t].ipotro * inr
            - 6.0f * d_matrix[t].pc * inr8
            - 8.0f * d_matrix[t].pd * inr8 * inr2
	      + inr2 * inr * d_matrix[t].zz );
    for(k=0; k<3; k++) fi[k] += dphir * dr[k];
  }
}


/*
 * stub for remote call to nacl_kernel_shared.
 */
void
dscudanacl_kernel_shared(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, 
                 float xmax, float *fvec)
{
    int _narg = 6;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[6], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[6], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 8, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(d_matrix)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(d_matrix);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 8, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C" 
void nacl_kernel_shared(VG_XVEC *x, int n, int nat, VG_MATRIX *d_matrix, 
                 float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_shared(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,j;
  static VG_XVEC *d_x=NULL;
  static float *d_force=NULL;
  static VG_MATRIX *d_matrix=NULL;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  static VG_XVEC   *vec=NULL;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=NULL;
  static int n_bak=0;

  
  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>ATYPE){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){
    
    int nalloc;
    static int nalloc_bak=0;
    if(n>NMAX) nalloc=n;
    else       nalloc=NMAX;
    if(nalloc!=nalloc_bak){
      CUDA_SAFE_CALL(cudaFree(d_x));
      CUDA_SAFE_CALL(cudaFree(d_force));
      CUDA_SAFE_CALL(cudaFree(d_matrix));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+NTHRE)));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*(nalloc+NTHRE)*3));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_matrix,sizeof(VG_MATRIX)*nat*nat));
      
      free(vec);
      if((vec=(VG_XVEC *)malloc(sizeof(VG_XVEC)*(nalloc+NTHRE)))==NULL){
	fprintf(stderr,"** error : can't malloc vec **\n");
	exit(1);
      }
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==NULL){
	fprintf(stderr,"** error : can't malloc forcef **\n");
	exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }

    
    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
	matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
	matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
	matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
	matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
	matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
	matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }
    CUDA_SAFE_CALL(cudaMemcpy(d_matrix,matrix,sizeof(VG_MATRIX)*nat*nat,cudaMemcpyHostToDevice));

    n_bak=n;
  }

  for(i=0;i<(n+NTHRE-1)/NTHRE*NTHRE;i++){
    if(i<n){
      for(j=0;j<3;j++){
	vec[i].r[j]=x[i*3+j];
      }
      vec[i].atype=atype[i];
    }
    else{
      for(j=0;j<3;j++){
	vec[i].r[j]=0.0f;
      }
      vec[i].atype=0;
    }
  }
  CUDA_SAFE_CALL(cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*((n+NTHRE-1)/NTHRE*NTHRE),
  			    cudaMemcpyHostToDevice));

  
  dim3 threads(NTHRE);
  dim3 grid((n+NTHRE-1)/NTHRE);
  dscudanacl_kernel_shared(grid, threads , 0, NULL, d_x, n, nat, d_matrix, xmaxf, d_force);
  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}

__device__ __inline__
void inter_constant(float xj[3], float xi[3], float fi[3],
           int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k]  = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2   += dr[k] * dr[k];
  }
  if(dn2 != 0.0f){
    r     = sqrtf(dn2);
    inr   = 1.0f / r;
    inr2  = inr  * inr;
    inr4  = inr2 * inr2;
    inr8  = inr4 * inr4;
    d3    = pb * c_matrix[t].pol * expf( (c_matrix[t].sigm - r) 
					 * c_matrix[t].ipotro);
    dphir = ( d3 * c_matrix[t].ipotro * inr
            - 6.0f * c_matrix[t].pc * inr8
            - 8.0f * c_matrix[t].pd * inr8 * inr2
	      + inr2 * inr * c_matrix[t].zz );
    for(k=0; k<3; k++) fi[k] += dphir * dr[k];
  }
}


/*
 * stub for remote call to nacl_kernel_constant.
 */
void
dscudanacl_kernel_constant(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, 
                 float xmax, float *fvec)
{
    int _narg = 5;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[5], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[5], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 9, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 9, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C" 
void nacl_kernel_constant(VG_XVEC *x, int n, int nat, 
                 float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_constant(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,j;
  static VG_XVEC *d_x=NULL;
  static float *d_force=NULL;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  static VG_XVEC   *vec=NULL;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=NULL;
  static int n_bak=0;

  
  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>ATYPE){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){
    
    int nalloc;
    static int nalloc_bak=0;
    if(n>NMAX) nalloc=n;
    else       nalloc=NMAX;
    if(nalloc!=nalloc_bak){
      CUDA_SAFE_CALL(cudaFree(d_x));
      CUDA_SAFE_CALL(cudaFree(d_force));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+NTHRE)));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*(nalloc+NTHRE)*3));
      
      free(vec);
      if((vec=(VG_XVEC *)malloc(sizeof(VG_XVEC)*(nalloc+NTHRE)))==NULL){
	fprintf(stderr,"** error : can't malloc vec **\n");
	exit(1);
      }
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==NULL){
	fprintf(stderr,"** error : can't malloc forcef **\n");
	exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }

    
    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
	matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
	matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
	matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
	matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
	matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
	matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }
    CUDA_SAFE_CALL(    dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat));

    n_bak=n;
  }

  for(i=0;i<(n+NTHRE-1)/NTHRE*NTHRE;i++){
    if(i<n){
      for(j=0;j<3;j++){
	vec[i].r[j]=x[i*3+j];
      }
      vec[i].atype=atype[i];
    }
    else{
      for(j=0;j<3;j++){
	vec[i].r[j]=0.0f;
      }
      vec[i].atype=0;
    }
  }
  CUDA_SAFE_CALL(cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*((n+NTHRE-1)/NTHRE*NTHRE),
  			    cudaMemcpyHostToDevice));

  
  dim3 threads(NTHRE);
  dim3 grid((n+NTHRE-1)/NTHRE);
  dscudanacl_kernel_constant(grid, threads , 0, NULL, d_x, n, nat, xmaxf, d_force);
  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}

__device__ __inline__
void inter_if(float xj[3], float xi[3], float fi[3],
           int t, float xmax, float xmax1)
{
  int k;
  float dn2,r,inr,inr2,inr4,inr8,d3,dr[3];
  float pb=(float)(0.338e-19/(14.39*1.60219e-19)),dphir;

  dn2 = 0.0f;
  for(k=0; k<3; k++){
    dr[k]  = xi[k] - xj[k];
    dr[k] -= rintf(dr[k] * xmax1) * xmax;
    dn2   += dr[k] * dr[k];
  }
  r     = sqrtf(dn2);
#if 1
  inr   = 1.0f / r;
#elif 0
  if(dn2 != 0.0f) inr   = 1.0f / r;
  else            inr   = 0.0f;
#elif 0
  if(dn2 == 0.0f) inr   = 0.0f;
  else            inr   = 1.0f / r;
#else
  inr   = 1.0f / r;
  if(dn2 == 0.0f) inr   = 0.0f;
#endif
  inr2  = inr  * inr;
  inr4  = inr2 * inr2;
  inr8  = inr4 * inr4;
  d3    = pb * c_matrix[t].pol * expf( (c_matrix[t].sigm - r) 
                               * c_matrix[t].ipotro);
  dphir = ( d3 * c_matrix[t].ipotro * inr
          - 6.0f * c_matrix[t].pc * inr8
          - 8.0f * c_matrix[t].pd * inr8 * inr2
          + inr2 * inr * c_matrix[t].zz );
#if 1
  if(dn2 == 0.0f) dphir = 0.0f;
#endif
  for(k=0; k<3; k++) fi[k] += dphir * dr[k];
}


/*
 * stub for remote call to nacl_kernel_if.
 */
void
dscudanacl_kernel_if(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, 
                 float xmax, float *fvec)
{
    int _narg = 5;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[5], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[5], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 10, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 10, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C" 
void nacl_kernel_if(VG_XVEC *x, int n, int nat, 
                 float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_if(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,j;
  static VG_XVEC *d_x=NULL;
  static float *d_force=NULL;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  static VG_XVEC   *vec=NULL;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=NULL;
  static int n_bak=0;

#if 0
  vec=(VG_XVEC *)force;
#endif

  
  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>ATYPE){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){
    
    int nalloc;
    static int nalloc_bak=0;
    if(n>NMAX) nalloc=n;
    else       nalloc=NMAX;
    if(nalloc!=nalloc_bak){
      CUDA_SAFE_CALL(cudaFree(d_x));
      CUDA_SAFE_CALL(cudaFree(d_force));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+NTHRE)));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*(nalloc+NTHRE)*3));

#if 1     
      free(vec);
      if((vec=(VG_XVEC *)malloc(sizeof(VG_XVEC)*(nalloc+NTHRE)))==NULL){
	fprintf(stderr,"** error : can't malloc vec **\n");
	exit(1);
      }
#endif
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==NULL){
	fprintf(stderr,"** error : can't malloc forcef **\n");
	exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }

    
    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
	matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
	matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
	matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
	matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
	matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
	matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }
    CUDA_SAFE_CALL(    dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat));

    n_bak=n;
  }

#if 0
  for(i=0;i<n;i++){
#else
  for(i=0;i<(n+NTHRE-1)/NTHRE*NTHRE;i++){
#endif
    if(i<n){
      for(j=0;j<3;j++){
	vec[i].r[j]=x[i*3+j];
      }
      vec[i].atype=atype[i];
    }
    else{
      for(j=0;j<3;j++){
	vec[i].r[j]=0.0f;
      }
      vec[i].atype=0;
    }
  }
#if 0
  CUDA_SAFE_CALL(cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*n,
  			    cudaMemcpyHostToDevice));
#else
  CUDA_SAFE_CALL(cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*((n+NTHRE-1)/NTHRE*NTHRE),
  			    cudaMemcpyHostToDevice));
#endif

  
  dim3 threads(NTHRE);
  dim3 grid((n+NTHRE-1)/NTHRE);
  dscudanacl_kernel_if(grid, threads , 0, NULL, d_x, n, nat, xmaxf, d_force);

  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}



/*
 * stub for remote call to nacl_kernel_if2.
 */
void
dscudanacl_kernel_if2(dim3 _gdim, dim3 _bdim, size_t _smemsize, cudaStream_t _stream , VG_XVEC *x, int n, int nat, 
                 float xmax, float *fvec)
{
    int _narg = 5;
    int _ibvgdim[3], _ibvbdim[3];
    IbvArg _ibvarg[5], *_ibvargp;
    RCargs _rcargs;
    RCarg _rcarg[5], *_rcargp;
    RCdim3 _gdimrc, _bdimrc;
    int _off = 0;
    int _rcargc = 0;
    void *_devptr;
    _rcargs.RCargs_val = _rcarg;
    _rcargs.RCargs_len = _narg;
    static char mangledname_[512] = {0,};
    if (!mangledname_[0]) {
        if (0) {
          dscudaGetMangledFunctionName(mangledname_, __PRETTY_FUNCTION__, Ptxdata);
        }
        else {
          char buf_[256];
          sprintf(buf_, "%s", __FUNCTION__);
          strcpy(mangledname_, buf_ + strlen("dscuda")); // obtain original function name.
        }
        WARN(3, "mangled name : %s\n", mangledname_);
    }

    if (dscudaRemoteCallType() == RC_REMOTECALL_TYPE_IBV) {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;


        // an integer 'n'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = n;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // an integer 'nat'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(int));
        _ibvargp->type = dscudaArgTypeI;
        _ibvargp->offset = _off;
        _ibvargp->val.intval = nat;
        _ibvargp->size = sizeof(int);
        _off += _ibvargp->size;


        // a float 'xmax'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        ALIGN_UP(_off, __alignof(float));
        _ibvargp->type = dscudaArgTypeF;
        _ibvargp->offset = _off;
        _ibvargp->val.floatval = xmax;
        _ibvargp->size = sizeof(float);
        _off += _ibvargp->size;


        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _ibvargp = _ibvarg + _rcargc;
        _rcargc++;
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _ibvargp->type = dscudaArgTypeP;
        _ibvargp->offset = _off;
        _ibvargp->val.pointerval = (RCadr)_devptr;
        _ibvargp->size = sizeof(_devptr);
        _off += _ibvargp->size;

        _ibvgdim[0] = _gdim.x; _ibvgdim[1] = _gdim.y; _ibvgdim[2] = _gdim.z;
        _ibvbdim[0] = _bdim.x; _ibvbdim[1] = _bdim.y; _ibvbdim[2] = _gdim.z;
#if !RPC_ONLY
        ibvDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 11, mangledname_,
                                 _ibvgdim, _ibvbdim, _smemsize, (RCstream)_stream,
                                 _narg, _ibvarg);
#endif
    }
    else {

        // a pointer to a device-address 'dscudaAdrOfUva(x)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(x);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;

        // an integer 'n'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = n;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // an integer 'nat'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(int));
        _rcargp->val.type = dscudaArgTypeI;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuei = nat;
        _rcargp->size = sizeof(int);
        _off += _rcargp->size;

        // a float 'xmax'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        ALIGN_UP(_off, __alignof(float));
        _rcargp->val.type = dscudaArgTypeF;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.valuef = xmax;
        _rcargp->size = sizeof(float);
        _off += _rcargp->size;

        // a pointer to a device-address 'dscudaAdrOfUva(fvec)'.
        _rcargp = &(_rcargs.RCargs_val[_rcargc++]);
        _devptr = (void*)(size_t)dscudaAdrOfUva(fvec);
        ALIGN_UP(_off, __alignof(_devptr));
        _rcargp->val.type = dscudaArgTypeP;
        _rcargp->offset = _off;
        _rcargp->val.RCargVal_u.address = (RCadr)_devptr;
        _rcargp->size = sizeof(_devptr);
        _off += _rcargp->size;
        _gdimrc.x = _gdim.x; _gdimrc.y = _gdim.y; _gdimrc.z = _gdim.z;
        _bdimrc.x = _bdim.x; _bdimrc.y = _bdim.y; _bdimrc.z = _bdim.z;
        rpcDscudaLaunchKernelWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), 11, mangledname_,
                                 _gdimrc, _bdimrc, _smemsize, (RCstream)_stream,
                                 _rcargs);
    }
}
 extern "C" 
void nacl_kernel_if2(VG_XVEC *x, int n, int nat, 
                 float xmax, float *fvec)
{
    /* nop */
}



extern "C"
void MR3calcnacl_if2(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,j;
  static VG_XVEC *d_x=NULL;
  static float *d_force=NULL;
  float xmaxf;
  VG_MATRIX *matrix=(VG_MATRIX *)force;
  static VG_XVEC   *vec=NULL;
  if((periodicflag & 1)==0) xmax*=2.0;
  xmaxf=xmax;
  static float *forcef=NULL;
  static int n_bak=0;

#if 0
  vec=(VG_XVEC *)force;
#endif

  
  if(sizeof(double)*n*3<sizeof(VG_MATRIX)*nat*nat){
    fprintf(stderr,"** error : n*3<nat*nat **\n");
    exit(1);
  }
  if(nat>ATYPE){
    fprintf(stderr,"** error : nat is too large **\n");
    exit(1);
  }

  if(n!=n_bak){
    
    int nalloc;
    static int nalloc_bak=0;
    if(n>NMAX) nalloc=n;
    else       nalloc=NMAX;
    if(nalloc!=nalloc_bak){
      CUDA_SAFE_CALL(cudaFree(d_x));
      CUDA_SAFE_CALL(cudaFree(d_force));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_x,sizeof(VG_XVEC)*(nalloc+NTHRE2)));
      CUDA_SAFE_CALL(cudaMalloc((void**)&d_force,sizeof(float)*(nalloc+NTHRE2)*3));

#if 1     
      free(vec);
      if((vec=(VG_XVEC *)malloc(sizeof(VG_XVEC)*(nalloc+NTHRE2)))==NULL){
	fprintf(stderr,"** error : can't malloc vec **\n");
	exit(1);
      }
#endif
      free(forcef);
      if((forcef=(float *)malloc(sizeof(float)*nalloc*3))==NULL){
	fprintf(stderr,"** error : can't malloc forcef **\n");
	exit(1);
      }
      bzero(forcef,sizeof(float)*nalloc*3);
      nalloc_bak=nalloc;
    }

    
    for(i=0;i<nat;i++){
      for(j=0;j<nat;j++){
	matrix[i*nat+j].pol=(float)(pol[i*nat+j]);
	matrix[i*nat+j].sigm=(float)(sigm[i*nat+j]);
	matrix[i*nat+j].ipotro=(float)(ipotro[i*nat+j]);
	matrix[i*nat+j].pc=(float)(pc[i*nat+j]);
	matrix[i*nat+j].pd=(float)(pd[i*nat+j]);
	matrix[i*nat+j].zz=(float)(zz[i*nat+j]);
      }
    }
    CUDA_SAFE_CALL(    dscudaMemcpyToSymbolWrapper(dscudaLoadModule("./dscudatmp/mr3.cu.ptx", Ptxdata), "c_matrix", matrix, sizeof(VG_MATRIX)*nat*nat));

    n_bak=n;
  }

  for(i=0;i<(n+NTHRE2-1)/NTHRE2*NTHRE2;i++){
    if(i<n){
      for(j=0;j<3;j++){
	vec[i].r[j]=x[i*3+j];
      }
      vec[i].atype=atype[i];
    }
    else{
      for(j=0;j<3;j++){
	vec[i].r[j]=0.0f;
      }
      vec[i].atype=0;
    }
  }
  CUDA_SAFE_CALL(cudaMemcpy(d_x,vec,sizeof(VG_XVEC)*((n+NTHRE2-1)/NTHRE2*NTHRE2),
  			    cudaMemcpyHostToDevice));

  
  dim3 threads(NTHRE);
  dim3 grid((n*NDIV+NTHRE-1)/NTHRE);
  dscudanacl_kernel_if2(grid, threads , 0, NULL, d_x, n, nat, xmaxf, d_force);

  CUT_CHECK_ERROR("Kernel execution failed");

  
  CUDA_SAFE_CALL(cudaMemcpy(forcef,d_force,sizeof(float)*n*3,cudaMemcpyDeviceToHost));
  for(i=0;i<n;i++) for(j=0;j<3;j++) force[i*3+j]=forcef[i*3+j];
}


extern "C"
void MR3calcnacl_sort(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  int i,j,*index,count[ATYPE],offset[ATYPE],*atype2;
  double *x2,*f2;
  
  if((index=(int *)malloc(sizeof(int)*n))==NULL){
    fprintf(stderr,"** error : can't malloc index **\n");
    exit(1);
  }
  if((atype2=(int *)malloc(sizeof(int)*n))==NULL){
    fprintf(stderr,"** error : can't malloc atype2 **\n");
    exit(1);
  }
  if((x2=(double *)malloc(sizeof(double)*n*3))==NULL){
    fprintf(stderr,"** error : can't malloc x2 **\n");
    exit(1);
  }
  if((f2=(double *)malloc(sizeof(double)*n*3))==NULL){
    fprintf(stderr,"** error : can't malloc f2 **\n");
    exit(1);
  }
  for(i=0;i<nat;i++) count[i]=0;
  for(i=0;i<n;i++) count[atype[i]]++;
  for(i=1;i<nat;i++) offset[i]=count[i-1];
  offset[0]=0;
  for(i=0;i<n;i++) index[i]=offset[atype[i]]++;
  for(i=0;i<n;i++){
    for(j=0;j<3;j++) x2[index[i]*3+j]=x[i*3+j];
    atype2[index[i]]=atype[i];
  }
  MR3calcnacl_if(x2,n,atype2,nat,pol,sigm,ipotro,pc,pd,zz,
		      tblno,xmax,periodicflag,f2);
  for(i=0;i<n;i++){
    for(j=0;j<3;j++) force[i*3+j]=f2[index[i]*3+j];
  }
  
  free(index);
  free(atype2);
  free(x2);
  free(f2);
}


extern "C"
void MR3calcnacl(double x[], int n, int atype[], int nat,
		 double pol[], double sigm[], double ipotro[],
		 double pc[], double pd[], double zz[],
		 int tblno, double xmax, int periodicflag,
		 double force[])
{
  MR3calcnacl_if2(x,n,atype,nat,
		  pol,sigm,ipotro,
		  pc,pd,zz,
		  tblno,xmax,periodicflag,
		  force);
}


